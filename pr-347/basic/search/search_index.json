{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"anomian.html","title":"Anomian","text":"","tags":["work-in-progress","tutorial","engine"],"boost":2},{"location":"anomian.html#preface","title":"Preface","text":"<p>As in the Little Typer book, we explore some aspects of the Anoma model through a dialogue that presents the notions considered in the specification. There are two participants in this dialogue: the student, Jordan, and Anomian, the modeller. When Anomian speaks, it is in the form of a quote. Otherwise, Jordan speaks.</p> <p>Hi, I am Anomian.</p> <p>The goal of this dialogue is to illustrate what the Anoma system is about and how to model it. For the sake of concreteness, we present a few Juvix code snippets that are intended to clarify the model and help resolve potential ambiguities. Most of the data types are enumerations and inductive types. The quotes alone should convey the main idea. The Jordan interjections are to confirm, ask questions, and reiterate the concepts.</p> <p>Last, but not least, we have not only code snippets, but we fully embrace literate programming. This comes at the inconvenience of some lines of boilerplate here, but it can safely be skipped on a first reading.</p> Juvix imports <pre><code>module anomian;\nimport arch.node.types.basics open public;\nimport arch.node.types.identities open;\nimport arch.node.types.messages\n  open hiding {EngineMsg; Mailbox};\n</code></pre>","tags":["work-in-progress","tutorial","engine"],"boost":2},{"location":"anomian.html#chapter-1-the-core-players-of-the-game","title":"Chapter 1: The core players of the game","text":"<p>At the core of the Anoma model, we find engines. They do most of the heavy lifting.</p> <p>So, what do you mean by an engine?</p> <p>Think of an engine as a dynamic entity that can do stuff, much like us, and that has an engine-status that could be running, dead, or suspended.</p> <pre><code>type EngineStatus := Running | Dead | Suspended;\n</code></pre> <p>Todo</p> <ul> <li>Explain that if the engine is dead, next time the system steps, engines marked   as dead are removed from the system, similarly as a garbage collector   would do.</li> <li>Explain that the engine-status is not a property of the engine, but rather   a property of the engine-instance.</li> </ul> <p>Dynamic entity? What is dynamic about it?</p> <p>You and I are not the same person we were yesterday because some events happened to us. For engines, a typical event is the reception of an engine-message and as a reaction to message reception, their state may change. This ability to change their state is what makes them dynamic. However, notice that this change of internal state is optional. We call those engines that never change their state stateless engines.</p> <p>Huh, so, an engine has its own state, and that state can change by reacting to messages that are sent to it. Easy.</p> <p>It's like when we receive a letter from the tax office. Once we read the letter and understand it, we know that we have to pay taxes and eventually do so. That letter may \"change\" us, some money may be gone.</p> <p>But wait, who really sends those messages actually?</p> <p>Any engine, including the same engine which receives the message. For example, an engine could remind itself to do something by sending a message to itself.</p> <p>I see, and the messages can be in different languages, right? I read English but not French. How are engines able to communicate with each other? Do they all speak the same language?</p> <p>Each engine has its own message interface, indicating the language(s) they speak. This message interface defines the format and content of the messages it can comprehend and process.</p> <p>For example, let's say the engines in our model only speak English, French, and Spanish.</p> <pre><code>syntax alias EnglishPayload := String;\nsyntax alias FrenchPayload := String;\nsyntax alias SpanishPayload := String;\n</code></pre> <p>If I, Anomian, speak English and French, my message interface would look like this.</p> <pre><code>type AnomianMsgInterface :=\n  | AnomianMsgEnglish@{msg : EnglishPayload}\n  | AnomianMsgFrench@{msg : FrenchPayload}\n  ;\n</code></pre> <p>Hey, in my case, I speak English and Spanish. My message interface is the following.</p> <pre><code>type JordanMsgInterface :=\n  | JordanMsgEnglish@{msg : EnglishPayload}\n  | JordanMsgSpanish@{msg : SpanishPayload}\n  ;\n</code></pre> <p>Got it. Here is a message you can understand, Anomian.</p> <pre><code>helloAnomian : AnomianMsgInterface :=\n  AnomianMsgInterface.AnomianMsgEnglish@{msg := \"Hello!\"};\n</code></pre> <p>Message Interface</p> <ul> <li>Each engine has a message interface.</li> </ul> <ul> <li>By construction, it is safe to assume that every engine has at least one   message constructor<sup>1</sup> in its message interface.</li> </ul> <p>The model defines all the message interfaces defined by engines.</p> <pre><code>type MsgInterface :=\n  | MsgAnomian AnomianMsgInterface\n  | MsgJordan JordanMsgInterface\n  ;\n</code></pre> <p>To see the full list of message interfaces in the current model, check out the sum type <code>Msg</code> in Anoma Message.</p>","tags":["work-in-progress","tutorial","engine"],"boost":2},{"location":"anomian.html#chapter-2-communication-patterns","title":"Chapter 2: Communication patterns","text":"<p>Now that we understand engines and their message interfaces, let's talk about how they communicate with each other or better said, what patterns of communication are there.</p> <p>I can send a message to you, Anomian, either to expect a response or simply to inform you that I'm alive. What else can I do?</p> <p>There are many patterns indeed, but let us start with the most common ones.</p> <pre><code>syntax alias Timeout := Nat;\n\ntype CommunicationPattern :=\n  | FireAndForget\n  | RequestReply@{timeout : Option Timeout}\n  | PubSub\n  ;\n</code></pre> <p>We can consider three patterns of communication. The pattern <code>FireAndForget</code> allows us to communicate asynchronously. One can send a message and not expect any response like notifications on your phone. However, if you need a response or result and can wait for it, we can use the <code>RequestReply</code> pattern. That is the pattern that every synchronous communication uses implicitly. And finally, the <code>PubSub</code> pattern (pub/sub for short) that allows us to communicate asynchronously and without a response, broadcasting messages to multiple engines.</p> <p>We can consider three purposes for a message:</p> <ul> <li>The first one is to request a reply.</li> <li>The second one is to reply to a request.</li> <li>The third one is to notify about something.</li> </ul> <p>We can represent these three cases with the <code>EngineMsgKind</code> type.</p> <pre><code>type EngineMsgKind :=\n  | Request\n  | Reply\n  | Notify;\n</code></pre> <p>Summary of communication patterns</p> <p>We can have several communication patterns. </p>","tags":["work-in-progress","tutorial","engine"],"boost":2},{"location":"anomian.html#chapter-3-engine-configurations","title":"Chapter 3: Engine configurations","text":"<p>Anomian, you mentioned that engines have an internal state, a message interface, and specific communication patterns. Are there any other characteristics that define an engine? And what about us, are we also engines? For instance, humans have attributes such as name, age, and parents. Do engines have similar attributes?</p> <p>Engines possess certain attributes. These attributes are stored in what we call their engine-configuration, of type <code>EngineCfg</code>. This configuration is immutable through the lifetime of the engine. The configuration of an engine includes its parent that spawns it, its name, a virtual location where the engine runs named <code>node</code>, and some configuration parameters denoted by <code>cfg</code> of an engine-specific type that instantiates the type parameter <code>C</code>.</p> <pre><code>type EngineCfg C :=\n  mkCfg@{\n    parent : Option EngineID;\n    name : EngineName;\n    node : NodeID;\n    cfg : C;\n  };\n</code></pre> <p>As we say the engine configuration is immutable by design. This means that once an engine is created, attributes such as the name of the engine cannot be changed. If you want to change the name of an engine, you have to create a new engine with the new name.</p> <p>Tell me one thing about the parents of engines. Do they always know who their parent is? I don't know who is my father, actually.</p> <p>Engines might not always know who their parent is.<sup>2</sup> The absence of this information is stored in the engine's configuration with the <code>parent</code> field set to <code>none</code>. If the parent is known, the <code>parent</code> field is set to <code>some creatorID</code>, where <code>creatorID</code> is the engine-identifier of the parent engine.</p> <pre><code>axiom localhost : NodeID;\n\nsimpleConfig : EngineCfg Unit :=\n  EngineCfg.mkCfg@{\n    parent := none;\n    name := \"Anomian\";\n    node := localhost;\n    cfg := unit; -- no specific configuration\n  };\n</code></pre> <p>So, we have one way to identify engines: by their name and their node if we know where it runs.</p> <p>Roughly, a node is a virtual place where the engine lives and operates. This place could be known to be in the same neighbourhood, in which case, we can refer to it as a local engine. Otherwise, the engine is an external engine. However, note that we have not yet defined what a node is!</p> <pre><code>EngineID : Type := Pair (Option NodeID) EngineName;\n</code></pre> <p>Okay, I guess that we can nevertheless start thinking about identifiers already.</p> <pre><code>JordanID : EngineID := mkPair (some localhost) \"Jordan9121\";\nAnomianID : EngineID := mkPair (some localhost) \"Anomian184\";\n</code></pre> <p>With engine identifiers (of type <code>EngineID</code>), we can define engine messages. These messages serve as events for engines, sent to them by some other engine.</p> <p>An engine-message consists of a sender, a target, an optional mailbox identifier, the communication pattern, what kind of message it is, and the message itself.</p> <p>The mailbox identifier is used to identify the mailbox of the target engine, the virtual place where the message is delivered. Recall that the kind indicates whether the message is a command, a response, or an event, and the pattern indicates the expected behaviour pattern for how the recipient should react.</p> <pre><code>type EngineMsg M :=\n  mkMsg@{\n    sender : EngineID;\n    target : EngineID;\n    mailbox : Option MailboxID;\n    pattern : CommunicationPattern;\n    kind : EngineMsgKind;\n    msg : M;\n  };\n</code></pre> <p>Hah! So let me craft a message for you, Anomian.</p> <pre><code>jordanToAnomian : EngineMsg MsgInterface :=\n  EngineMsg.mkMsg@{\n    sender := JordanID;\n    target := AnomianID;\n    mailbox := some 1;\n    pattern := CommunicationPattern.RequestReply@{timeout := none};\n    kind := EngineMsgKind.Request;\n    msg := MsgInterface.MsgAnomian (AnomianMsgInterface.AnomianMsgEnglish@{msg := \"What is the meaning of life?\"});\n  };\n</code></pre> <p>A reply engine-message is <code>anomianToJordan</code>.</p> <p>Notice that the type parameter <code>MsgInterface</code> for <code>EngineMsg</code> is the same as the one used in the request message, and not an engine-specific message interface.</p> <pre><code>anomianToJordan : EngineMsg MsgInterface :=\n  EngineMsg.mkMsg@{\n    sender := AnomianID;\n    target := JordanID;\n    mailbox := some 1;\n    pattern := CommunicationPattern.FireAndForget;\n    kind := EngineMsgKind.Reply;\n    msg := MsgInterface.MsgJordan (JordanMsgInterface.JordanMsgEnglish@{msg := \"The meaning of life is 42.\"});\n  };\n</code></pre> <p>Todo</p> <p>Reevaluate if the message kind is actually needed. Replies may be indistinguishable from notifications, following a fire-and-forget pattern to reply.</p> <p>The social context of an engine</p> <p>Each engine is known in its neighbourhood and may have connections abroad. It still communicates via messages though and stays fixed in the place.</p> <p>But how can I send it? Do I have to go to the post office?</p>","tags":["work-in-progress","tutorial","engine"],"boost":2},{"location":"anomian.html#chapter-4-mailboxes-for-anyone","title":"Chapter 4: Mailboxes for anyone","text":"<p>Messages are sent to the engine's mailbox.</p> <p>What is a mailbox? A mailbox consists of a queue of messages and can also contain additional data if needed. The data could be the state of the mailbox, think of it as having extra information about the mailbox like the number of messages in it.</p> <pre><code>type Mailbox S M := mkMailbox@{\n  messages : List (EngineMsg M); -- TODO: Should be a queue?\n  mailboxState : Option S;\n};\n</code></pre> <p>However, engines not only have a single mailbox, but a cluster of mailboxes. That is, there is at least one mailbox per engine, but there can be more. The type <code>MailboxCluster</code> for the cluster of mailboxes is really a mapping of mailbox identifiers to the actual mailboxes.</p> <pre><code>MailboxCluster (S M : Type) : Type := Map MailboxID (Mailbox S M);\n</code></pre> <p>Why bother with the mailbox cluster? One mailbox is enough, right?</p> <p>While a single mailbox would suffice for basic functionality, multiple mailboxes provide valuable message organisation capabilities.</p> <p>That sounds like how my email works. It is a cluster of mailboxes, and in principle, I have one big mailbox, but truly I can see it as having multiple mailboxes, one for each folder, such as promotions, important, family, etc.</p> <p>Yes, the folder analogy is great. The following diagram illustrates a mailbox cluster. Each mailbox<sup>3</sup> is intended to serve a specific purpose. For simplicity, we refer to the entire cluster as the engine's mailbox if there is no confusion. In the type <code>MailboxCluster</code>, we have a map of mailbox IDs to mailboxes.</p> <pre><code>graph LR\n    MailboxCluster[\"Jordan's Mailbox Cluster\"] --&gt; Mailbox1\n    MailboxCluster --&gt; Mailbox2\n    MailboxCluster --&gt; Mailbox3\n\n    subgraph Mailbox1[\"Mailbox#1 : 'Urgent'\"]\n        Queue1(\"Queue of Messages\")\n        Data1(\"Mailbox state\")\n    end\n\n    subgraph Mailbox2[\"Mailbox #2 : 'Promotions'\"]\n        Queue2(\"Queue of Messages\")\n        Data2(\"Mailbox state\")\n    end\n\n    subgraph Mailbox3[\"Mailbox #3 : 'Family'\"]\n        Queue3(\"Queue of Messages\")\n        Data3(\"Mailbox state\")\n    end</code></pre> <p>You have not answered yet how mail is actually sent.</p> <p>Well, imagine for a second that the communication process is magically handled by one mailelf that delivers messages to the engines. When a message is sent to an engine, the mailelf takes the message from the sender and puts it in the engine's mailbox. In other words, for the moment, it suffices to assume that all messages are delivered eventually.</p> <p>Mailboxes for eventual message delivery</p> <p>So, yes, the main purpose of mailboxes is where the elf delivers the messages.</p>","tags":["work-in-progress","tutorial","engine"],"boost":2},{"location":"anomian.html#chapter-5-context-of-execution","title":"Chapter 5: Context of execution","text":"<p>This is quite a fancy setup for sending messages, but how do engines \"actually\" get things done?!</p> <p>I mean, we've discussed that engines have certain attributes: an identifier, a message interface, and a configuration that includes details like a parent, a name, and a virtual location where the engine runs. So, maybe a better question: how do engines actually run?</p> <p>To understand how an engine runs, we need to acknowledge that engines operate within a context of execution referred to as their engine-environment. This environment, defined by the <code>EngineEnv</code> type, includes the engine's internal state, its mailboxes, and an address book of known engines it can interact with, including itself.</p> <pre><code>AddressBook : Type := Set EngineName;\n\ntype EngineEnv S Msg :=\n  mkEnv@{\n    state : S;\n    mailbox : MailboxCluster S Msg;\n    acq : AddressBook;\n  };\n</code></pre> <p>Note that engine environments do not encompass the engine's configuration, although they could. Instead, engine configurations are accessible separately from the engine environments. This separation promotes modularity.</p> <p>Local data of engines and the execution context</p> <p>Each engine has its own local data, some of which is fixed, and some of which is dynamic. All this data together forms the execution context.</p>","tags":["work-in-progress","tutorial","engine"],"boost":2},{"location":"anomian.html#chapter-6-what-engines-can-do","title":"Chapter 6: What engines can do","text":"<p>So, refining the question: how do engines actually compute? With their engine-environment in place, I imagine that engines run some sort of function that uses the engine-environment and a message from the mailbox. Something like the following type <code>Handler</code>, where <code>S</code> is the state of the engine and <code>M</code> is the message interface, and the return type is <code>ReturnSomething</code>, which can be whatever we want.</p> <pre><code>axiom ReturnSomething : Type;\n\nHandler (M S : Type) : Type :=\n  M -&gt; EngineEnv S M -&gt; ReturnSomething;\n</code></pre> <p>The computational aspect of an engine is what we refer to as its behaviour, and it is correct to think of it as a function that takes in a message and the engine's environment. However, the return type of this function cannot be anything: the type what an engine can produce is part of the model of engines, and it is fixed for each engine.</p> <p>What exactly can an engine do if it's not just the same message passing we already know?</p> <p>We decompose the engine's range of possible reactions into a set of effects. These effects describe the valid actions that the engine can perform. We can represent these effects with the <code>Effect</code> type.</p> <p>To recall, we use the following convention for engine-related types:</p> <ul> <li><code>S</code> is the type of its internal state,</li> <li><code>E</code> is the type of its environment,</li> <li><code>M</code> is the type of its message interface.</li> </ul> <pre><code>syntax alias TimeTrigger := Nat;\n\ntype Effect S E M :=\n  | SendMsg@{msg : EngineMsg M}\n  | UpdateState@{state : S}\n  | SpawnEngine@{engine : E}\n  | Chain@{effects : List (Effect S E M)}\n  | Schedule@{\n      trigger : TimeTrigger;\n      action : Effect S E M\n    };\n</code></pre> <p>Based on the type for possible effects,<sup>4</sup> the only new aspect for me about engines is that they record the need for actions to happen at a later time. We already have covered that engines have a parent; the <code>SpawnEngine</code> effect is the other side of the same coin. The rest remains the same as before.</p> <p>Our actions are restricted by certain pre-conditions, some inherent from the environment. We only take action if the conditions are met. For engines, these conditions are expressed as guards.<sup>5</sup></p> <p>I got it. This mirrors our situation perfectly. Taking the tax office example: when I receive a notice to pay taxes, I first assess whether I have the funds available. If I do, I take action to pay; otherwise, I might postpone the payment.</p> <p>The essence of a guard is a predicate, a pre-condition, that must hold true for the engine to take action.</p> <p>Guards are evaluated based on incoming messages, the engine's environment, and the engine's configuration. We can represent this with the type <code>Guard</code>. Since guards involve computation, engine's preserve these computations as part of the return type of the guard, that is <code>R</code> in the type <code>Guard</code>. Thus, if the underlying condition is not satisfied, the guard returns nothing. The type parameter <code>C</code> will be instantiated with the type for values in the engine's configuration.</p> <pre><code>Guard (S M C R : Type) : Type :=\n  EngineMsg M -&gt; EngineEnv S M -&gt; EngineCfg C -&gt; Option R;\n\nisSatisfied\n  {S M C R}\n  (guard : Guard S M C R)\n  (msg : EngineMsg M)\n  (env : EngineEnv S M)\n  (cfg : EngineCfg C) : Bool :=\n  case guard msg env cfg of {\n    | none := false\n    | some _ := true\n  }\n</code></pre> <p>Wait! I see an issue. What if the engine has several guards, and they are all satisfied?</p> <p>If several guards are satisfied, engines provide a strategy for how to act. The model has the following options.</p> <ul> <li>Choose the first guard that is satisfied,</li> <li>choose the last guard that is satisfied,</li> <li>choose one of them (randomly/non-deterministically) if there are several   satisfied guards,</li> <li>check that it is the only one that is triggered, and</li> <li>choose all of them if all guards are satisfied.</li> </ul> <p>And recall, If no guard conditions are met, the engine decides not to act.</p> <pre><code>type GuardStrategy :=\n  | FirstGuard\n  | LastGuard\n  | OneGuard\n  | UniqueGuard -- checks that it is the only one that is triggered\n  | AllGuards;\n</code></pre> <p>Keep in mind that guards are formally speaking, a predicate with additional information. If the guards give green light, the engine will act, by means of actions.</p> <pre><code>type GuardEval S M C R := mkGuardEval@{\n  guards : List (Guard S M C R);\n  strategy : GuardStrategy;\n};\n</code></pre> <p>Ah, I see! So the guards act as the rules the engine follows, and the actions are the procedures executed when those rules are satisfied, and with the possible outcomes of the guards.</p> <p>We can now define the engine's behaviour as a function that takes in a guard evaluation and returns an effect.</p> <pre><code>EngineBehaviour (S E M C R : Type) : Type :=\n  GuardEval S M C R -&gt; Effect S E M;\n</code></pre> <p>With the concept of an engine now complete, it is appropriate to define the type <code>Engine</code>. An engine is characterised by its configuration, environment, and behaviour. Recall that <code>S</code> is the state of the engine, <code>E</code> is the environment, <code>M</code> is the message interface, <code>C</code> is the configuration, and <code>R</code> is the return type for guards.</p> <pre><code>type Engine (S E M C R : Type) :=\n  mk@{\n    status : EngineStatus;\n    cfg : EngineCfg C;\n    state : EngineEnv S M;\n    behavior : EngineBehaviour S E M C R;\n  };\n</code></pre> <p>What engines do</p> <p>Engines react to incoming messages, taking into account their environment. How they react is governed by guards of which the engine has several, roughly one per relevant case. Cases may overlap, but often it is a unique case that performs the reaction.</p>","tags":["work-in-progress","tutorial","engine"],"boost":2},{"location":"anomian.html#chapter-7-we-have-engines-and-now-what","title":"Chapter 7: We have engines, and now, what?","text":"<p>I think I am getting the hang of it. But what's next?</p> <p>Yes, I think we have made a good start. However, we have to fill in the blanks and put everything together in a single system. In the upcoming chapters, how the system looks like in more detail and how ensure the following properties for engine-to-engine communication:</p> <ul> <li> Message delivery: All messages are eventually delivered</li> <li> Engine isolation: Each engine maintains independent state</li> <li> Type safety: All communication follows defined message interfaces</li> <li> Configuration immutability: Engine configurations cannot be modified after   creation</li> </ul> <p>A quick glossary of the terms we have seen so far.</p> <ul> <li>EngineStatus: Represents the possible states an engine can be    in\u2014<code>Running</code>, <code>Dead</code>, or <code>Suspended</code>.</li> </ul> <ul> <li>CommunicationPattern: Enumerates the types of communication patterns    available, such as <code>FireAndForget</code>, <code>RequestReply</code> with an optional    timeout, and <code>PubSub</code>.</li> </ul> <ul> <li>EngineMsgKind: Categorizes messages into <code>Request</code>, <code>Reply</code>, or    <code>Notify</code>.</li> </ul> <ul> <li>EngineID: A composite identifier for engines, consisting of a <code>nodeId</code>   and a <code>name</code>.</li> </ul> <ul> <li>MessageInterface: Defines the interface for messages specific to    different engines (<code>AnomianMsgInterface</code>, <code>JordanMsgInterface</code>) and    aggregates them into a general <code>MsgInterface</code>.</li> </ul> <ul> <li>EngineCfg: An immutable configuration for an engine, including optional    parent information, engine name, node ID, and a generic configuration type    <code>c</code>.</li> </ul> <ul> <li>Mailbox and MailboxCluster: Structure for message queues (<code>Mailbox</code>) and    a collection of mailboxes (<code>MailboxCluster</code>) indexed by <code>MailboxID</code>.</li> </ul> <ul> <li>EngineEnv: The execution context of an engine, comprising its state,    mailbox cluster, and an address book of known engines.</li> </ul> <ul> <li>Guard and GuardStrategy: Mechanisms to evaluate whether certain   conditions are met (<code>Guard</code>) and strategies to handle multiple satisfied   guards (<code>GuardStrategy</code>).</li> </ul> <ul> <li>Effect: The possible outcomes or actions an engine can perform, such as   sending messages, updating state, spawning new engines, chaining effects, or   scheduling future actions.</li> </ul> <ul> <li>EngineBehaviour: A function defining how an engine responds to evaluated   guards and decides on an effect.</li> </ul> <ul> <li>Engine: The core representation of an engine, combining its status,   configuration, state, and behaviour.</li> </ul> <ul> <li>EngineMsg: Structure of messages exchanged between engines, including   sender and target identifiers, mailbox, communication pattern, message kind,   and the message content itself.</li> </ul> <ol> <li> <p>The constructors are very much like message tags in   the paper <sup>6</sup>.\u00a0\u21a9</p> </li> <li> <p>These engines roughly correspond to the primeval actors of Clinger <sup>7</sup>.\u00a0\u21a9</p> </li> <li> <p>See <sup>6</sup> for the paradigmatic example.\u00a0\u21a9</p> </li> <li> <p>Yes, we can do fancy monads for effects, but that's for a future version.\u00a0\u21a9</p> </li> <li> <p>This is in analogy to Dijkstra's Guarded Command Language.\u00a0\u21a9</p> </li> <li> <p>Simon Fowler, Duncan Paul Attard, Franciszek Sowul, Simon J. Gay, and Phil Trinder. Special delivery: programming with mailbox types. Proceedings of the ACM on Programming Languages, 7(ICFP):78\u2013107, August 2023. URL: http://dx.doi.org/10.1145/3607832, doi:10.1145/3607832.\u00a0\u21a9\u21a9</p> </li> <li> <p>William Douglas Clinger. Foundations of Actor Semantics. PhD thesis, Massachusetts Institute of Technology (MIT), 1981. URL: https://dspace.mit.edu/handle/1721.1/6935.\u00a0\u21a9</p> </li> </ol>","tags":["work-in-progress","tutorial","engine"],"boost":2},{"location":"changelog.html","title":"Change Log","text":"","tags":["changelog"]},{"location":"changelog.html#v014","title":"v0.1.4","text":"<p>This release focuses on improving the prose, layout, and documentation structure. Key changes include:</p> <ul> <li>Reorganized node architecture documentation for better clarity</li> <li>Reorganized the navigation bar to be more consistent and easier to use</li> <li>Added a new tutorial: Anomian</li> <li>Several prose improvements on engines, e.g: Mempool Worker Engine,   Executor Engine, Shard Engine</li> <li>CSS changes to improve the layout and readability of the website, like   better separation for headers and footers that improve, for example, the   readability of message interfaces</li> <li>Updated Juvix type definitions to match latest standards</li> <li>Added new definitions for Prelude</li> <li>Improved template engine documentation for easier engine creation</li> </ul>","tags":["changelog"]},{"location":"changelog.html#features","title":"Features","text":"<ul> <li>System architecture<ul> <li>#334: Add deletion criterion to delete blobs immediately</li> </ul> </li> </ul>","tags":["changelog"]},{"location":"changelog.html#fixes","title":"Fixes","text":"<ul> <li>Repository maintenance and CI<ul> <li>#297: Fixes for issues seen in v0.1.3</li> <li>#306: Add data structures and interfaces used by RM</li> <li>#307: Prose improvements for commitment, decryption, and identity   management engines</li> <li>#308: The Little Anomian</li> <li>#309: Heindel has written up their two cents on the Anomian</li> <li>#310: Heindel/Anomian review v0.2 some ideas for improvements</li> <li>#311: Prose improvements for   Mempool Worker Engine, Executor Engine, and Shard Engine's descriptions.</li> <li>#312: nix flake update to   support Juvix v0.6.9</li> <li>#313: Revision of all message interfaces but not for networking's   engines</li> <li>#314: Add more fixes for message interfaces for consistency</li> <li>#315: Add a few corrections to the Anomian doc</li> <li>#320: Update Network subsystems' engine to comply standard</li> <li>#328: Move string comparison to prelude</li> <li>#331: RM type fixes</li> <li>#332: Improve layout, documentation structure, navigation and   readability with indexes, tags and descriptions</li> <li>#336: some changes, proposed as a result of specs overall review   (revamped)</li> <li>#337: Heindel/anthony/prose 3 suggestions for fixing the markdown</li> </ul> </li> <li>System architecture<ul> <li>#334: Add missing deletion criterion to delete blobs after the   transaction</li> </ul> </li> <li>Juvix types and updates<ul> <li>#298: Update juvix v0.6.9</li> <li>#302: Prelude improvements</li> <li>#305: Add most of the types for RM specs</li> <li>#321: Add Runnable trait and make ordering engines parametric</li> <li>#329: Refactor type definitions to use simplified syntax</li> </ul> </li> </ul>","tags":["changelog"]},{"location":"changelog.html#v013","title":"v0.1.3","text":"<p>The major change in this release is the gas payment system introduced in #286, and the description of messages in the Networking subsystem introduced in #294.</p>","tags":["changelog"]},{"location":"changelog.html#fixes_1","title":"Fixes","text":"<ul> <li>Node architecture<ul> <li>#290: Fix english   description for guards to match the Juvix types in Engine Behaviour.</li> </ul> </li> <li>Repository maintenance and CI<ul> <li>#288: Improve primitive interfaces diagrams. Use LR mermaid option.</li> </ul> </li> <li>System architecture<ul> <li>#293: Fix formatting issues,   typos, warnings, and broken links related to Proving   system definitions.</li> </ul> </li> </ul> <ul> <li>Tutorial and documentation<ul> <li>#280: Guides: Add hard and soft   requirements for writing pages in the Anoma Specification.</li> <li>#284: Add minimal version of   the template (not visible in the website) and related refactors.</li> </ul> </li> </ul>","tags":["changelog"]},{"location":"changelog.html#changes","title":"Changes","text":"<ul> <li>Repository maintenance and CI<ul> <li>#296: Add next/prev buttons,   fix footer, change font, add buttons to view/edit source code, and links to   the GitHub repository.</li> </ul> </li> <li>Juvix types and updates<ul> <li>#294: Bump up Juvix version   to v0.6.9 , reorder <code>MailboxID</code> alias, and update Stdlib to v0.9.0</li> </ul> </li> </ul>","tags":["changelog"]},{"location":"changelog.html#features_1","title":"Features","text":"<ul> <li>Python-related changes<ul> <li>#291: Add new command tool   <code>nspec</code> to create new engines based on the minimal version of the Template     Engine files.</li> </ul> </li> <li>Repository maintenance and CI<ul> <li>#286: Incorporated gas   payments description. Additionally, made several improvements such as   switching to wiki-style links, adding icons, clarifying proof inputs, fixing   rendering issues, and various other enhancements.</li> </ul> </li> <li>Tutorial and documentation<ul> <li>#292: Move template/template_minimum engines to   docs/tutorial/engines folder. Update imports accordingly.</li> </ul> </li> </ul>","tags":["changelog"]},{"location":"changelog.html#v012","title":"v0.1.2","text":"<p>Progress on translating the old specification to the new Juvix codebase, fixing typechecking errors. Removed unsupported documents from the codebase. Building specs no longer requires Juvix by default - use <code>PROCESS_JUVIX=true</code> flag with mkdocs to process Juvix Markdown.</p>","tags":["changelog"]},{"location":"changelog.html#fixes_2","title":"Fixes","text":"<ul> <li>Node architecture<ul> <li>#235: Revisit Decryption Engine. Changes to the messages,   environment, and behaviour types to conform the recent template changes.</li> <li>#236: Revisit Encryption Engine and Reads Engine. These are   bundled since they rely on eachother's messages. Changes to the messages, environment, and behavior types to conform   to the recent template changes</li> <li>#262: Updatewriting conventions, Fix template   behaviour diagrams and update Mkdocs Na</li> <li>#263: To the Hardware     Subsystem section, add Local Key Value Store Engine , Logging     Engine and Local Time Series Storage Engine, Wall Clock Engine.</li> <li>#268: Add to Anoma Configuration section, the Identity Subsystem.</li> <li>#269: Fix type error due to   not making configs when spawning engines in Identity Management Engine.</li> <li>#273: Replace X Machine by X   Subsystem in the Node Architecture section.</li> </ul> </li> <li>Python-related changes<ul> <li>#271: update mkdocs juvix plugin v0.4.8</li> <li>#272: Update mkdocs juvix plugin v0.4.9</li> </ul> </li> <li>Repository maintenance and CI<ul> <li>#195: Optimize documentation build process and upgrade dependencies</li> <li>#262: Template fixes: diagrams, nav</li> <li>#266: Remove old   documentation and update table of contents: Remove basic-abstractions,   scope, applications, implementations, and several other files that were   decided not to be included in this version of the specification.</li> </ul> </li> <li>Tutorial and documentation<ul> <li>#257: Add description of our   Git workflow and new integration   branches strategy.</li> <li>#265: Rename <code>TemplateCfg</code>   to <code>TemplateLocalCfg</code>, add <code>TemplateCfg</code> similar to <code>TemplateEnv</code>, apply   the same to <code>Ticker</code>.</li> <li>#274: Update engine writing   conventions: #update-the-table-of-contents   and Table of Contents.</li> </ul> </li> <li>Juvix types and updates<ul> <li>#267: Fix all the type   checking errors in engine definitions.</li> </ul> </li> </ul>","tags":["changelog"]},{"location":"changelog.html#v011","title":"v0.1.1","text":"<p>Major revision of the engine definitions, the template, and the ticker engine.</p>","tags":["changelog"]},{"location":"changelog.html#features_2","title":"Features","text":"<ul> <li>Repository maintenance and CI<ul> <li>#217: Update template engine   files to be more consistent, use backticks for Juvix terms/types in   headlines, uncollapsed sections for type constructors arguments in template   engine files, and auxiliary sections of Juvix code are always collapsed.</li> </ul> </li> </ul>","tags":["changelog"]},{"location":"changelog.html#fixes_3","title":"Fixes","text":"<ul> <li>Node architecture<ul> <li>#219: Revisit Commitment Engine. Changes to the messages, environment, and behaviour types to conform the recent template changes.</li> <li>#253: Integration PR that   combines multiple engine-related changes: Engines: Use <code>ByteString</code> in   crypto types #242, Engines:   ByteString type definition #255,   Engines: <code>EngineMsg</code> revision #241,   EngineID: make <code>EngineName</code> compulsory #256, Engines: Engine type revision #244,  <code>EngineMsg</code>: add type param #258, Engines: add <code>GuardEval</code> and <code>ActionExec</code> #260, and Engines: Behaviour template revision #226.</li> <li>#256: Make <code>EngineName</code>   compulsory in <code>EngineID</code>.</li> </ul> </li> <li>Repository maintenance and CI<ul> <li>#218: Rename <code>EngineMessage</code>    type to <code>EngineMsg</code> and <code>mkEngineMessage</code> to <code>mkEngineMsg</code>.</li> <li>#220: Fix the deployment of    the latest version by deploying the website if the branch name is <code>main</code> or    matches the semver pattern, and add information about the version and the    commit hash to the title for reference.</li> <li>#222: Remove SML codebase as   not used any more and any other reference in the markdown files</li> <li>#225: Fix navigation table    for the identity component</li> <li>#227: Update Juvix version in Nix flake due to breaking changes, and   also the input packages while at it.</li> <li>#250: Update policy on Juvix typechecking. The whole codebase in a   PR should typecheck before merging</li> </ul> </li> <li>Tutorial and documentation<ul> <li>#257: Refactor the Git strategy: introduce integration PRs for   better overview of complex changes</li> </ul> </li> <li>Juvix types and updates<ul> <li>#221: Update the prelude to   incorporate the latest changes in the <code>Stdlib</code>, including the addition of   applicative and monad traits, and the integration of the <code>containers</code> library.   This update also includes changes to data type definitions, with the <code>@</code>   syntax now used for declaration, creation, and matching on records, and other   removals like <code>: Type</code> for implicit arguments and function-style declarations.</li> <li>#226: Update Template &amp; Ticker Behaviour according to the engine &amp; message type changes. The examples have been improved with better clarity. The documentation now uses headlines instead of collapsible boxes and definition lists instead of tables. A new diagram template has been added that illustrates conditions and effects of actions.</li> <li>#241: <code>EngineMsg</code>-related changes: rename <code>MessageID</code> to <code>EngineMsgID</code>, add <code>getEngineMsgFrom(Timestamped)Trigger</code>, and rename <code>getMessageFrom(Timestamped)Trigger</code> to <code>getMsgFrom(Timestamped)Trigger</code>.</li> <li>#242: Use <code>ByteString</code> in crypto types.</li> <li>#244: Major refactoring of   engine-related types. The <code>Engine</code> type now includes a <code>cfg</code> field of type   <code>EngineConfig</code> containing static configuration (engine name and local node   ID). For consistency, <code>EngineEnvironment</code> has been renamed to <code>EngineEnv</code>. The   <code>EngineBehaviour</code> type has undergone several changes: the conflict solver has   been removed (to be replaced by new mechanism in   #246), precomputation results are   now passed directly as action arguments, and the <code>action</code> field has been   replaced with action labels defined by label type.</li> <li>#249: Remove <code>name</code> field in Engine instances due to PR 242</li> <li>#255: Make ByteString <code>String</code> instead of <code>Nat</code></li> <li>#258: Engine-related changes: add type parameter to parameterized the type of message and rename <code>EngineConfig</code> to <code>EngineCfg</code></li> <li>#260: Revise engine behaviour type: add <code>GuardEval (Seq)</code> and <code>ActionExec (First &amp; Any)</code>, <code>EngineCfg</code>: add <code>getEngineIDFromEngineCfg</code>. Partially addresses #246.</li> </ul> </li> </ul>","tags":["changelog"]},{"location":"changelog.html#v010","title":"v0.1.0","text":"<p>This is the first release of Anoma's Spec project, following the semantic-versioning scheme. This version includes all the changes from the creation of this repository. From here on, we will keep a changelog of all the changes that are made to the project per version, with better documentation and descriptions of the changes.</p>","tags":["changelog"]},{"location":"changelog.html#breaking-changes","title":"Breaking changes","text":"<ul> <li>Node architecture<ul> <li>#179: Reorganize node architecture   documentation structure</li> <li>#192: Port identity engines to v2 template</li> </ul> </li> <li>System architecture<ul> <li>#210: Fix engine message, environment and   behavior layout</li> </ul> </li> <li>Repository maintenance and CI<ul> <li>#29: Remove unused libraries</li> <li>#30: Remove juvix hook in pro of mkdos Juvix   plugin</li> <li>#53: Setup: require only python 3.9</li> <li>#60: Restructure for v2</li> <li>#64: Change KV Storage Deletion Documentation</li> <li>#65: Delete Compute and Randomness Engines</li> <li>#69: Remove outdates files from arch1 and fix   formatting</li> <li>#104: Refactor scope, basic types, and   application architecture sections</li> <li>#115: Refactor file and folder names: add   snake_case convention</li> </ul> </li> </ul>","tags":["changelog"]},{"location":"changelog.html#bug-fixes","title":"Bug fixes","text":"<ul> <li>Repository maintenance and CI<ul> <li>#4: Fix mike</li> <li>#9: Add batch of fixes</li> <li>#10: Fix Index: quick links and remove empty types   pages</li> <li>#18: Fix TODO, add todos.py script, and more   formatting issues</li> <li>#19: Remove todos on deploy, fix wikilinks warnings</li> <li>#21: Fix whitespaces</li> <li>#22: Fix indexes generation with macros and optimize   caching</li> <li>#24: Fix minors</li> <li>#25: CI fixes</li> <li>#74: Fix broken links in navigation bar and a few   pages</li> <li>#77: Fix CI: deploy website by PRs against main, v1,   and v2</li> <li>#78: Fix: CI doesnt trigger on edits</li> <li>#91: Fix default views and deploys in the CI</li> <li>#96: Fix navigation bar and more broken links due #60</li> <li>#101: Fix typos and small improve wording</li> <li>#105: Fix warnings messages due to recent refactors</li> <li>#122: Fix support for Juvix Markdown snippets</li> <li>#123: Fix merging conflicts chris-update-basic-types</li> <li>#124: Fix tutorial nav structure and broken links in   the footer</li> <li>#132: Fix minor issues with directories and filenames</li> </ul> </li> </ul>","tags":["changelog"]},{"location":"changelog.html#features_3","title":"Features","text":"<ul> <li>Application documentation<ul> <li>#198: Add transparent RM implementation documentation</li> </ul> </li> <li>Python-related changes<ul> <li>#133: Add support for multi-line wiki-style links</li> </ul> </li> <li>Repository maintenance and CI<ul> <li>#2: Add better support for WikiLinks and other goodies</li> <li>#3: Update README and run pre-commit</li> <li>#5: Add Ubuntu dependencies to the CI</li> <li>#6: Use site_url for link generation</li> <li>#7: Add new hook for images</li> <li>#8: Add lightboxes to images, fix local image loading</li> <li>#11: Improve link resolution for urls outside nav</li> <li>#14: Add Last updated time to the footer and other   fixes</li> <li>#15: Add a more explicit MathJax config</li> <li>#17: Revised macros configuration</li> <li>#20: Refactor hooks</li> <li>#23: Add previews for PRs</li> <li>#27: Fix url indexes and improve PR previews</li> <li>#28: Add tutorial basic instructions</li> <li>#31: Translate Haskell snippets to Juvix and fix typos</li> <li>#51: Configuration Engine</li> <li>#52: Add nix flake</li> <li>#56: Add page on dynamic code loading</li> <li>#58: Homogeneous consensus for V2</li> <li>#59: Readme: tighten up install instructions</li> <li>#61: Updates kudos spec</li> <li>#63: Counter example</li> <li>#68: Add New Engine Specifications from Anoma Elixir   Database</li> <li>#75: Add proof-of-stake example</li> <li>#80: Re-introduced full execution machine for V2</li> <li>#81: Add BibTeX entries and fix configuration</li> <li>#84: Add templates for defining engine systems</li> <li>#92: Add global table of contents</li> <li>#95: Continue v2 updates</li> <li>#97: Add git branching strategy</li> <li>#98: Add citation instructions and restructure markdown   tutorials</li> <li>#99: Delete previews for closed PRs on gh-pages branch</li> <li>#100: Split CI workflows: deploy, pull-request, clean-   ups</li> <li>#103: Additional reorganization &amp; updates</li> <li>#117: Tweaks to message types in basics</li> <li>#120: Refactor tutorial organization and add a few   more on conventions</li> <li>#121: Improve look&amp;feel, organized nav, hide extra   links and move them to the footer</li> <li>#127: Update basic abstractions</li> <li>#131: Add RMv3 content</li> <li>#135: Show PR number in the site name</li> <li>#209: Add changelog management system</li> <li>#214: Add GitHub template for creating PRs</li> </ul> </li> <li>Tutorial and documentation<ul> <li>#134: Refactor tutorial for wiki-style links</li> </ul> </li> <li>Juvix types and updates<ul> <li>#128: Add new Juvix definitions from PR-84</li> <li>#130: Translate SML Identity definitions to Juvix</li> </ul> </li> </ul>","tags":["changelog"]},{"location":"everything.html","title":"Everything","text":"<pre><code>module everything;\n</code></pre>","tags":["index","juvix"],"boost":2},{"location":"everything.html#prelude","title":"Prelude","text":"<pre><code>import prelude;\n</code></pre>","tags":["index","juvix"],"boost":2},{"location":"everything.html#anomian","title":"Anomian","text":"<pre><code>import anomian;\n</code></pre>","tags":["index","juvix"],"boost":2},{"location":"everything.html#system","title":"System","text":"<pre><code>import arch.system.identity.identity;\n</code></pre>","tags":["index","juvix"],"boost":2},{"location":"everything.html#resource-machine","title":"Resource Machine","text":"<pre><code>import arch.system.state.resource_machine.data_structures.transaction.transaction_with_payment;\nimport arch.system.state.resource_machine.data_structures.transaction.transaction;\nimport arch.system.state.resource_machine.data_structures.transaction.transaction_function;\nimport arch.system.state.resource_machine.data_structures.transaction.delta_proof;\nimport arch.system.state.resource_machine.data_structures.compliance_unit.compliance_proof;\nimport arch.system.state.resource_machine.data_structures.compliance_unit.compliance_unit;\nimport arch.system.state.resource_machine.data_structures.action.resource_logic_proof;\nimport arch.system.state.resource_machine.data_structures.action.index;\nimport arch.system.state.resource_machine.data_structures.resource.computable_components.resource_commitment;\nimport arch.system.state.resource_machine.data_structures.resource.computable_components.kind;\nimport arch.system.state.resource_machine.data_structures.resource.computable_components.nullifier;\nimport arch.system.state.resource_machine.data_structures.resource.computable_components.delta;\nimport arch.system.state.resource_machine.data_structures.resource.computable_components.introduction;\nimport arch.system.state.resource_machine.data_structures.resource.index;\nimport arch.system.state.resource_machine.primitive_interfaces.transaction_function_vm;\nimport arch.system.state.resource_machine.primitive_interfaces.set;\nimport arch.system.state.resource_machine.primitive_interfaces.nullifier_set;\nimport arch.system.state.resource_machine.primitive_interfaces.map;\nimport arch.system.state.resource_machine.primitive_interfaces.proving_system.proving_system_types;\nimport arch.system.state.resource_machine.primitive_interfaces.proving_system.proving_system_delta;\nimport arch.system.state.resource_machine.primitive_interfaces.fixed_size_type.fixed_size_type;\nimport arch.system.state.resource_machine.primitive_interfaces.fixed_size_type.hash;\nimport arch.system.state.resource_machine.primitive_interfaces.fixed_size_type.delta_hash;\nimport arch.system.state.resource_machine.primitive_interfaces.fixed_size_type.arithmetic;\nimport arch.system.state.resource_machine.primitive_interfaces.index;\nimport arch.system.state.resource_machine.primitive_interfaces.ordered_set;\nimport arch.system.state.resource_machine.primitive_interfaces.commitment_accumulator;\nimport arch.system.state.resource_machine.notes.storage;\nimport arch.system.state.resource_machine.notes.function_formats.transaction_function_format;\nimport arch.system.state.resource_machine.notes.applications;\nimport arch.system.state.resource_machine.notes.roles_and_requirements;\nimport arch.system.state.resource_machine.index;\nimport arch.system.state.resource_machine.execution_flow.flow;\n</code></pre>","tags":["index","juvix"],"boost":2},{"location":"everything.html#types","title":"Types","text":"<pre><code>import arch.node.types;\n\nimport arch.node.types.basics;\nimport arch.node.types.crypto;\nimport arch.node.types.messages;\nimport arch.node.types.identities;\n\nimport arch.node.types.anoma_message;\nimport arch.node.types.anoma_config;\nimport arch.node.types.anoma_environment;\nimport arch.node.types.anoma;\n\nimport arch.node.types.engine_environment;\nimport arch.node.types.engine_behaviour;\nimport arch.node.types.engine;\n\nimport arch.node.types.transport;\nimport arch.node.types.storage;\nimport arch.node.types.router;\n</code></pre>","tags":["index","juvix"],"boost":2},{"location":"everything.html#engines","title":"Engines","text":"","tags":["index","juvix"],"boost":2},{"location":"everything.html#identity","title":"Identity","text":"","tags":["index","juvix"],"boost":2},{"location":"everything.html#commitment","title":"Commitment","text":"<pre><code>import arch.node.engines.commitment_messages;\nimport arch.node.engines.commitment_config;\nimport arch.node.engines.commitment_environment;\nimport arch.node.engines.commitment_behaviour;\nimport arch.node.engines.commitment;\n</code></pre>","tags":["index","juvix"],"boost":2},{"location":"everything.html#decryption","title":"Decryption","text":"<pre><code>import arch.node.engines.decryption_messages;\nimport arch.node.engines.decryption_config;\nimport arch.node.engines.decryption_environment;\nimport arch.node.engines.decryption_behaviour;\nimport arch.node.engines.decryption;\n</code></pre>","tags":["index","juvix"],"boost":2},{"location":"everything.html#encryption","title":"Encryption","text":"<pre><code>import arch.node.engines.encryption_messages;\nimport arch.node.engines.encryption_config;\nimport arch.node.engines.encryption_environment;\nimport arch.node.engines.encryption_behaviour;\nimport arch.node.engines.encryption;\n</code></pre>","tags":["index","juvix"],"boost":2},{"location":"everything.html#identity-management","title":"Identity Management","text":"<pre><code>import arch.node.engines.identity_management_messages;\nimport arch.node.engines.identity_management_config;\nimport arch.node.engines.identity_management_environment;\nimport arch.node.engines.identity_management_behaviour;\nimport arch.node.engines.identity_management;\n</code></pre>","tags":["index","juvix"],"boost":2},{"location":"everything.html#naming","title":"Naming","text":"<pre><code>import arch.node.engines.naming_messages;\nimport arch.node.engines.naming_config;\nimport arch.node.engines.naming_environment;\nimport arch.node.engines.naming_behaviour;\nimport arch.node.engines.naming;\n</code></pre>","tags":["index","juvix"],"boost":2},{"location":"everything.html#reads-for","title":"Reads For","text":"<pre><code>import arch.node.engines.reads_for_messages;\nimport arch.node.engines.reads_for_config;\nimport arch.node.engines.reads_for_environment;\nimport arch.node.engines.reads_for_behaviour;\nimport arch.node.engines.reads_for;\n</code></pre>","tags":["index","juvix"],"boost":2},{"location":"everything.html#signs-for","title":"Signs For","text":"<pre><code>import arch.node.engines.signs_for_messages;\nimport arch.node.engines.signs_for_config;\nimport arch.node.engines.signs_for_environment;\nimport arch.node.engines.signs_for_behaviour;\nimport arch.node.engines.signs_for;\n</code></pre>","tags":["index","juvix"],"boost":2},{"location":"everything.html#verification","title":"Verification","text":"<pre><code>import arch.node.engines.verification_messages;\nimport arch.node.engines.verification_config;\nimport arch.node.engines.verification_environment;\nimport arch.node.engines.verification_behaviour;\nimport arch.node.engines.verification;\n</code></pre>","tags":["index","juvix"],"boost":2},{"location":"everything.html#hardware","title":"Hardware","text":"<pre><code>import arch.node.engines.local_key_value_storage_messages;\nimport arch.node.engines.local_key_value_storage_config;\nimport arch.node.engines.local_key_value_storage_environment;\nimport arch.node.engines.local_key_value_storage_behaviour;\nimport arch.node.engines.local_key_value_storage;\n</code></pre>","tags":["index","juvix"],"boost":2},{"location":"everything.html#logging","title":"Logging","text":"<pre><code>import arch.node.engines.logging_messages;\nimport arch.node.engines.logging_config;\nimport arch.node.engines.logging_environment;\nimport arch.node.engines.logging_behaviour;\nimport arch.node.engines.logging;\n</code></pre>","tags":["index","juvix"],"boost":2},{"location":"everything.html#wall-clock","title":"Wall Clock","text":"<pre><code>import arch.node.engines.wall_clock_messages;\nimport arch.node.engines.wall_clock_config;\nimport arch.node.engines.wall_clock_environment;\nimport arch.node.engines.wall_clock_behaviour;\nimport arch.node.engines.wall_clock;\n</code></pre>","tags":["index","juvix"],"boost":2},{"location":"everything.html#local-time-series-storage","title":"Local Time Series Storage","text":"<pre><code>import arch.node.engines.local_time_series_storage_messages;\nimport arch.node.engines.local_time_series_storage_config;\nimport arch.node.engines.local_time_series_storage_environment;\nimport arch.node.engines.local_time_series_storage_behaviour;\nimport arch.node.engines.local_time_series_storage;\n</code></pre>","tags":["index","juvix"],"boost":2},{"location":"everything.html#network-registry","title":"Network-Registry","text":"<pre><code>import arch.node.engines.net_registry_messages;\nimport arch.node.engines.net_registry_config;\nimport arch.node.engines.net_registry_environment;\nimport arch.node.engines.net_registry_behaviour;\nimport arch.node.engines.net_registry;\n</code></pre>","tags":["index","juvix"],"boost":2},{"location":"everything.html#router","title":"Router","text":"<pre><code>import arch.node.engines.router_messages;\nimport arch.node.engines.router_config;\nimport arch.node.engines.router_environment;\nimport arch.node.engines.router_behaviour;\nimport arch.node.engines.router;\n</code></pre>","tags":["index","juvix"],"boost":2},{"location":"everything.html#transport-protocol","title":"Transport Protocol","text":"<pre><code>import arch.node.engines.transport_protocol_messages;\nimport arch.node.engines.transport_protocol_config;\nimport arch.node.engines.transport_protocol_environment;\nimport arch.node.engines.transport_protocol_behaviour;\nimport arch.node.engines.transport_protocol;\n</code></pre>","tags":["index","juvix"],"boost":2},{"location":"everything.html#transport-connection","title":"Transport Connection","text":"<pre><code>import arch.node.engines.transport_connection_messages;\nimport arch.node.engines.transport_connection_config;\nimport arch.node.engines.transport_connection_environment;\nimport arch.node.engines.transport_connection_behaviour;\nimport arch.node.engines.transport_connection;\n</code></pre>","tags":["index","juvix"],"boost":2},{"location":"everything.html#pub-sub-topic","title":"Pub Sub Topic","text":"<pre><code>import arch.node.engines.pub_sub_topic_messages;\nimport arch.node.engines.pub_sub_topic_config;\nimport arch.node.engines.pub_sub_topic_environment;\nimport arch.node.engines.pub_sub_topic_behaviour;\nimport arch.node.engines.pub_sub_topic;\n</code></pre>","tags":["index","juvix"],"boost":2},{"location":"everything.html#storage","title":"Storage","text":"<pre><code>import arch.node.engines.storage_messages;\nimport arch.node.engines.storage_config;\nimport arch.node.engines.storage_environment;\nimport arch.node.engines.storage_behaviour;\nimport arch.node.engines.storage;\n</code></pre>","tags":["index","juvix"],"boost":2},{"location":"everything.html#mempool-worker","title":"Mempool Worker","text":"<pre><code>import arch.node.engines.mempool_worker_messages;\nimport arch.node.engines.mempool_worker_config;\nimport arch.node.engines.mempool_worker_environment;\nimport arch.node.engines.mempool_worker_behaviour;\nimport arch.node.engines.mempool_worker;\n</code></pre>","tags":["index","juvix"],"boost":2},{"location":"everything.html#executor","title":"Executor","text":"<pre><code>import arch.node.engines.executor_messages;\nimport arch.node.engines.executor_config;\nimport arch.node.engines.executor_environment;\nimport arch.node.engines.executor_behaviour;\nimport arch.node.engines.executor;\n</code></pre>","tags":["index","juvix"],"boost":2},{"location":"everything.html#shard","title":"Shard","text":"<pre><code>import arch.node.engines.shard_messages;\nimport arch.node.engines.shard_config;\nimport arch.node.engines.shard_environment;\nimport arch.node.engines.shard_behaviour;\nimport arch.node.engines.shard;\n</code></pre> <pre><code>-- Add more engines here\n</code></pre>","tags":["index","juvix"],"boost":2},{"location":"everything.html#misc","title":"Misc","text":"<pre><code>import arch.node.engines.ticker_messages;\nimport arch.node.engines.ticker_config;\nimport arch.node.engines.ticker_environment;\nimport arch.node.engines.ticker_behaviour;\nimport arch.node.engines.ticker;\n</code></pre>","tags":["index","juvix"],"boost":2},{"location":"everything.html#tutorial-templates","title":"Tutorial Templates","text":"<pre><code>import tutorial.engines.template_messages;\nimport tutorial.engines.template_config;\nimport tutorial.engines.template_environment;\nimport tutorial.engines.template_behaviour;\nimport tutorial.engines.template;\n\nimport tutorial.engines.template_minimum_messages;\nimport tutorial.engines.template_minimum_config;\nimport tutorial.engines.template_minimum_environment;\nimport tutorial.engines.template_minimum_behaviour;\nimport tutorial.engines.template_minimum;\n</code></pre>","tags":["index","juvix"],"boost":2},{"location":"prelude.html","title":"List of basic types","text":"Juvix imports <pre><code>module prelude;\nimport Stdlib.Trait open public;\nimport Stdlib.Trait.Ord open using {Ordering; Equal; isEqual} public;\nimport Stdlib.Trait.Eq open using {==} public;\nimport Stdlib.Debug.Fail open using {failwith};\nimport Stdlib.Data.Fixity open public;\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#juvix-specs-prelude","title":"Juvix Specs Prelude","text":"<p>The following are frequent and basic abstractions used in the Anoma specification.</p>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#combinators","title":"Combinators","text":"<pre><code>import Stdlib.Function open\n  using {\n    &lt;&lt;;\n    &gt;&gt;;\n    const;\n    id;\n    flip;\n    &lt;|;\n    |&gt;;\n    iterate;\n    &gt;-&gt;;\n  }\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#useful-type-classes","title":"Useful Type Classes","text":"","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#functor","title":"<code>Functor</code>","text":"<pre><code>import Stdlib.Trait.Functor.Polymorphic as Functor;\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#applicative","title":"<code>Applicative</code>","text":"<pre><code>import Stdlib.Trait.Applicative as Applicative\n  open using\n  { Applicative;\n  } public;\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#monad","title":"<code>Monad</code>","text":"<pre><code>import Stdlib.Trait.Monad as Monad\n  open using {Monad} public;\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#join","title":"<code>join</code>","text":"<p>Join function for monads</p> <pre><code>join\n  {M : Type -&gt; Type}\n  {A}\n  {{Monad M}}\n  (mma : M (M A)) : M A :=\n  bind mma id;  -- using the built-in `bind`\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#bifunctor","title":"<code>Bifunctor</code>","text":"<p>Two-argument functor</p> <pre><code>trait\ntype Bifunctor (F : Type -&gt; Type -&gt; Type) :=\n  mk@{\n    bimap {A B C D} :  (A -&gt; C) -&gt; (B -&gt; D) -&gt; F A B -&gt; F C D\n  };\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#associativeproduct","title":"<code>AssociativeProduct</code>","text":"<p>Product with associators</p> <pre><code>trait\ntype AssociativeProduct (F : Type -&gt; Type -&gt; Type) :=\n  mk@{\n    assocLeft {A B C} : F A (F B C) -&gt; F (F A B) C;\n    assocRight {A B C} : F (F A B) C -&gt; F A (F B C)\n  };\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#commutativeproduct","title":"<code>CommutativeProduct</code>","text":"<p>Product with commuters</p> <pre><code>trait\ntype CommutativeProduct (F : Type -&gt; Type -&gt; Type) :=\n  mk@{\n    swap {A B} : F A B -&gt; F B A;\n  };\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#unitalproduct","title":"<code>UnitalProduct</code>","text":"<p>Product with units</p> <pre><code>trait\ntype UnitalProduct U (F : Type -&gt; Type -&gt; Type) :=\n  mk@{\n    unitLeft {A} : A -&gt; F U A;\n    unUnitLeft {A} : F U A -&gt; A;\n    unitRight {A} : A -&gt; F A U;\n    unUnitRight {A} : F A U -&gt; A;\n  };\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#traversable","title":"<code>Traversable</code>","text":"<pre><code>import Stdlib.Trait.Traversable as Traversable\n  open using {\n    Traversable;\n    sequenceA;\n    traverse;\n    } public;\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#bool","title":"Bool","text":"<p>The type <code>Bool</code> represents boolean values (<code>true</code> or <code>false</code>). Used for logical operations and conditions.</p> <pre><code>import Stdlib.Data.Bool as Bool\n  open using\n  { Bool;\n    true;\n    false;\n    &amp;&amp;;\n    ||;\n    not;\n    or;\n    and;\n  } public;\n</code></pre> <p>For example,</p> <pre><code>verdad : Bool := true;\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#xor","title":"<code>xor</code>","text":"<p>Exlusive or</p> <pre><code>xor (a b : Bool) : Bool :=\n  if\n    | a := not b\n    | else := b\n  ;\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#nand","title":"<code>nand</code>","text":"<p>Not and</p> <pre><code>nand (a b : Bool) : Bool := not (and a b);\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#nor","title":"<code>nor</code>","text":"<p>Not or</p> <pre><code>nor (a b : Bool) : Bool := not (or a b);\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#nat","title":"<code>Nat</code>","text":"<p>The type <code>Nat</code> represents natural numbers (non-negative integers). Used for counting and indexing.</p> <pre><code>import Stdlib.Data.Nat as Nat\n  open using\n  { Nat;\n    zero;\n    suc;\n    natToString;\n    +;\n    sub;\n    *;\n    div;\n    mod;\n    ==;\n    &lt;=;\n    &gt;;\n    &lt;;\n    min;\n    max;\n  } public;\n</code></pre> <p>For example,</p> <pre><code>ten : Nat := 10;\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#pred","title":"<code>pred</code>","text":"<p>Predecessor function for natural numbers.</p> <pre><code>pred (n : Nat) : Nat :=\n  case n of {\n    | zero := zero\n    | suc k := k\n  };\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#booltonat","title":"<code>boolToNat</code>","text":"<p>Convert boolean to a Bool to a Nat in the standard way of circuits.</p> <pre><code>boolToNat (b : Bool) : Nat :=\n  if\n    | b := 0\n    | else := 1\n  ;\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#iszero","title":"<code>isZero</code>","text":"<p>Check if a natural number is zero.</p> <pre><code>isZero (n : Nat) : Bool :=\n  case n of {\n    | zero := true\n    | suc k := false\n  };\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#iseven-and-isodd","title":"<code>isEven</code> and <code>isOdd</code>","text":"<p>Parity checking functions</p> <pre><code>isEven (n : Nat) : Bool := mod n 2 == 0;\n</code></pre> <pre><code>isOdd (n : Nat) : Bool := not (isEven n);\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#foldnat","title":"<code>foldNat</code>","text":"<p>Fold over natural numbers.</p> <pre><code>terminating\nfoldNat {B} (z : B) (f : Nat -&gt; B -&gt; B) (n : Nat) : B :=\n  case n of {\n    | zero := z\n    | suc k := f k (foldNat z f k)\n  };\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#iter","title":"<code>iter</code>","text":"<p>Iteration of a function.</p> <pre><code>iter {A} (f : A -&gt; A) (n : Nat) (x : A) : A :=\n  foldNat x \\{_ y := f y} n;\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#exp","title":"<code>exp</code>","text":"<p>The exponentiation function.</p> <pre><code>exp (base : Nat) (exponent : Nat) : Nat :=\n  iter \\{product := base * product} exponent 1;\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#factorial","title":"<code>factorial</code>","text":"<p>The factorial function.</p> <pre><code>factorial : Nat -&gt; Nat := foldNat 1 \\{k r := suc k * r};\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#gcd","title":"<code>gcd</code>","text":"<p>Greatest common divisor function.</p> <pre><code>terminating\ngcd (a b : Nat) : Nat :=\n  case b of {\n    | zero := a\n    | suc _ := gcd b (mod a b)\n  };\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#lcm","title":"<code>lcm</code>","text":"<p>Least common multiple function.</p> <pre><code>lcm (a b : Nat) : Nat :=\n  case b of {\n    | zero := zero\n    | suc _ :=\n      case a of {\n        | zero := zero\n        | suc _ := div (a * b) (gcd a b)\n      }\n    };\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#string","title":"<code>String</code>","text":"<p>The type <code>String</code> represents sequences of characters. Used for text and communication.</p> <pre><code>import Stdlib.Data.String\n  as String\n  open using\n  { String;\n    ++str;\n  } public;\n</code></pre> <p>For example,</p> <pre><code>hello : String := \"Hello, World!\";\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#comparison-instance-for-string","title":"Comparison instance for <code>String</code>","text":"<pre><code>axiom stringCmp : String -&gt; String -&gt; Ordering;\n\ninstance\nStringOrd : Ord String :=\n  Ord.mk@{\n    compare := stringCmp;\n  };\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#bytestring","title":"<code>ByteString</code>","text":"<pre><code>ByteString : Type := String;\n</code></pre> <p>A basic type for representing binary data.</p> <pre><code>emptyByteString : ByteString := \"\";\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#unit","title":"<code>Unit</code>","text":"<p>The type <code>Unit</code> represents a type with a single value. Often used when a function does not return any meaningful value.</p> <pre><code>import Stdlib.Data.Unit\n  as Unit\n  open using {\n    Unit;\n    unit\n  } public;\n</code></pre> <p>For example,</p> <pre><code>unitValue : Unit := unit;\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#trivial","title":"<code>trivial</code>","text":"<p>Unique function to the unit. Universal property of terminal object.</p> <pre><code>trivial {A} : A -&gt; Unit := const unit;\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#empty","title":"<code>Empty</code>","text":"<p>The type <code>Empty</code> represents a type with a single value. Often used when a function does not return any meaningful value.</p> <pre><code>axiom Empty : Type;\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#explode","title":"<code>explode</code>","text":"<p>Unique function from empty. Universal property of initial object.</p> <pre><code>axiom explode {A} : Empty -&gt; A;\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#pair-a-b","title":"<code>Pair A B</code>","text":"<p>The type <code>Pair A B</code> represents a tuple containing two elements of types <code>A</code> and <code>B</code>. Useful for grouping related values together.</p> <pre><code>import Stdlib.Data.Pair as Pair;\nopen Pair using { Pair } public;\nopen Pair using { , };\n\nimport Stdlib.Data.Pair as Pair\n  open using\n  { ordProductI;\n    eqProductI\n  } public;\n</code></pre> <pre><code>import Stdlib.Data.Fixity open;\nsyntax alias mkPair := ,;\n</code></pre> <p>For example,</p> <pre><code>pair : Pair Nat Bool := mkPair 42 true;\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#fst-and-snd","title":"<code>fst</code> and <code>snd</code>","text":"<p>Projections</p> <pre><code>fst {A B} : Pair A B -&gt; A\n  | (mkPair a _) := a;\n</code></pre> <pre><code>snd {A B} : Pair A B -&gt; B\n  | (mkPair _ b) := b;\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#paircommutativeproduct","title":"<code>PairCommutativeProduct</code>","text":"<p>Swap components</p> <pre><code>instance\nPairCommutativeProduct : CommutativeProduct Pair :=\n  CommutativeProduct.mk@{\n    swap := \\{p := mkPair (snd p) (fst p)}\n  };\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#pairassociativeproduct","title":"<code>PairAssociativeProduct</code>","text":"<p>Pair associations</p> <pre><code>instance\nPairAssociativeProduct : AssociativeProduct Pair :=\n  AssociativeProduct.mk@{\n    assocLeft := \\{p :=\n      let pbc := snd p;\n      in mkPair (mkPair (fst p) (fst pbc)) (snd pbc)\n    };\n    assocRight := \\{p :=\n      let pab := fst p;\n      in mkPair (fst pab) (mkPair (snd pab) (snd p))\n    }\n  };\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#pairunitalproduct","title":"<code>PairUnitalProduct</code>","text":"<p>Unit maps for pairs and units</p> <pre><code>instance\nPairUnitalProduct : UnitalProduct Unit Pair :=\n  UnitalProduct.mk@{\n    unitLeft := \\{a := mkPair unit a};\n    unUnitLeft := snd;\n    unitRight := \\{a := mkPair a unit};\n    unUnitRight := \\{{A} := fst};\n  };\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#pairbifunctor","title":"<code>PairBifunctor</code>","text":"<p>Map functions over pairs</p> <pre><code>instance\nPairBifunctor : Bifunctor Pair :=\n  Bifunctor.mk@{\n    bimap := \\{f g p := mkPair (f (fst p)) (g (snd p))};\n  };\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#fork","title":"<code>fork</code>","text":"<p>Universal property of pairs</p> <pre><code>fork\n  {A B C}\n  (f : C -&gt; A)\n  (g : C -&gt; B)\n  (c : C) : Pair A B :=\n  mkPair (f c) (g c);\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#result-a-b","title":"<code>Result A B</code>","text":"<p>The <code>Result A B</code> type represents either a success with a value of <code>ok x</code> with <code>x</code> of type <code>A</code> or an error with value <code>error e</code> with <code>e</code> of type <code>B</code>.</p> <pre><code>import Stdlib.Data.Result.Base as Result;\nopen Result using { Result; ok; error } public;\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#either-a-b","title":"<code>Either A B</code>","text":"<p>The type <code>Either A B</code>, or sum type of <code>A</code> and <code>B</code>, represents a value of type <code>A</code> or <code>B</code>. It is equivalent to <code>Result A B</code>, however, the meaning of the values is different. There is no such thing as an error or success value in the <code>Either</code> type, instead the values are either <code>left a</code> of type <code>A</code> or <code>right b</code> of type <code>B</code>.</p> <pre><code>syntax alias Either := Result;\nsyntax alias left := error;\nsyntax alias right := ok;\n</code></pre> <p>For example,</p> <pre><code>thisString : Either String Nat := left \"Error!\";\nthisNumber : Either String Nat := right 42;\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#isleft-and-isright","title":"<code>isLeft</code> and <code>isRight</code>","text":"<p>Check components of either.</p> <pre><code>isLeft {A B} (e : Either A B) : Bool :=\n  case e of {\n    | left _ := true\n    | right _ := false\n  };\n</code></pre> <pre><code>isRight {A B} (e : Either A B) : Bool :=\n  case e of {\n    | left _ := false\n    | right _ := true\n  };\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#fromleft","title":"<code>fromLeft</code>","text":"<p>Get left element (with default)</p> <pre><code>fromLeft {A B} (e : Either A B) (d : A) : A :=\n  case e of {\n    | (left x) := x\n    | (right _) := d\n  };\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#fromright","title":"<code>fromRight</code>","text":"<p>Get right element (with default)</p> <pre><code>fromRight {A B} (e : Either A B) (d : B) : B :=\n  case e of {\n    | (left _) := d\n    | (right x) := x\n  };\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#eithercommutativeproduct","title":"<code>EitherCommutativeProduct</code>","text":"<p>Swap elements</p> <pre><code>swapEither {A B} (e : Either A B) : Either B A :=\n  case e of {\n    | (left x) := right x\n    | (right x) := left x\n  };\n</code></pre> <pre><code>instance\nEitherCommutativeProduct : CommutativeProduct Either :=\n  CommutativeProduct.mk@{\n    swap := swapEither;\n  };\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#eitherbifunctor","title":"<code>EitherBifunctor</code>","text":"<p>Map onto elements of either</p> <pre><code>eitherBimap\n  {A B C D}\n  (f : A -&gt; C)\n  (g : B -&gt; D)\n  (e : Either A B) : Either C D :=\n  case e of {\n    | (left a) := left (f a)\n    | (right b) := right (g b)\n  };\n</code></pre> <pre><code>instance\nEitherBifunctor : Bifunctor Either :=\n  Bifunctor.mk@{\n    bimap := eitherBimap\n  };\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#eitherunitalproduct","title":"<code>EitherUnitalProduct</code>","text":"<p>Unit maps for Either and Empty</p>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#ununitlefteither","title":"<code>unUnitLeftEither</code>","text":"<pre><code>unUnitLeftEither {A} (e : Either Empty A) : A :=\n  case e of {\n    | left x := explode x\n    | right x := x\n  };\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#ununitrighteither","title":"<code>unUnitRightEither</code>","text":"<pre><code>unUnitRightEither {A} (e : Either A Empty) : A :=\n  case e of {\n    | left x := x\n    | (right x) := explode x\n  };\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#eitherunitalproduct_1","title":"<code>EitherUnitalProduct</code>","text":"<p>Unit maps for Either and Empty</p> <pre><code>instance\nEitherUnitalProduct : UnitalProduct Empty Either :=\n  UnitalProduct.mk@{\n    unitLeft := right;\n    unUnitLeft := unUnitLeftEither;\n    unitRight := \\{{A} := left};\n    unUnitRight := unUnitRightEither;\n  };\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#fuse","title":"<code>fuse</code>","text":"<p>Universal property of coproduct</p> <pre><code>fuse\n  {A B C}\n  (f : A -&gt; C)\n  (g : B -&gt; C)\n  (e : Either A B) : C :=\n  case e of {\n    | (left x) := f x\n    | (right x) := g x\n  };\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#eitherassociativeproduct","title":"<code>EitherAssociativeProduct</code>","text":"<p>Association functions for either</p>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#assoclefteither","title":"<code>assocLeftEither</code>","text":"<pre><code>assocLeftEither\n  {A B C}\n  (e : Either A (Either B C)) : Either (Either A B) C :=\n  case e of {\n    | (left x) := left (left x)\n    | (right ebc) :=\n      case ebc of {\n        | (left y) := left (right y)\n        | (right z) := right z\n      }\n  };\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#assocrighteither","title":"<code>assocRightEither</code>","text":"<pre><code>assocRightEither\n  {A B C}\n  (e : Either (Either A B) C)\n  : Either A (Either B C) :=\n  case e of {\n    | (left eab) :=\n      case eab of {\n        | (left x) := left x\n        | (right y) := right (left y)\n      }\n    | (right z) := right (right z)\n  };\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#eitherassociativeproduct_1","title":"<code>EitherAssociativeProduct</code>","text":"<pre><code>instance\nEitherAssociativeProduct : AssociativeProduct Either :=\n  AssociativeProduct.mk@{\n    assocLeft := assocLeftEither;\n    assocRight := assocRightEither;\n  };\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#option-a","title":"<code>Option A</code>","text":"<p>The type <code>Option A</code> represents an optional value of type <code>A</code>. It can be either <code>Some A</code> (containing a value) or <code>None</code> (no value). This type is an alias for <code>Maybe A</code> from the standard library.</p> <pre><code>import Stdlib.Data.Maybe as Maybe;\nopen Maybe using {\n    Maybe;\n    just;\n    nothing\n  };\n</code></pre> <pre><code>syntax alias Option := Maybe;\nsyntax alias some := just;\nsyntax alias none := nothing;\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#isnone","title":"<code>isNone</code>","text":"<p>Check if an optional value is <code>none</code>:</p> <pre><code>isNone {A} (x : Option A) : Bool\n  := case x of {\n  | none := true\n  | some _ := false\n  }\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#issome","title":"<code>isSome</code>","text":"<p>Check if an optional value is <code>some</code>:</p> <pre><code>isSome {A} (x : Option A) : Bool := not (isNone x);\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#fromoption","title":"<code>fromOption</code>","text":"<p>Extract the value from an <code>Option</code> term:</p> <pre><code>fromOption {A} (x : Option A) (default : A) : A :=\n  case x of {\n  | none := default\n  | some x := x\n};\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#option","title":"<code>option</code>","text":"<p>Map over option with default</p> <pre><code>option\n  {A B}\n  (o : Option A)\n  (default : B)\n  (f : A -&gt; B)\n  : B :=\n  case o of {\n    | none := default\n    | some x := f x\n  };\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#filteroption","title":"<code>filterOption</code>","text":"<p>Filter option according to predicate</p> <pre><code>filterOption\n  {A}\n  (p : A -&gt; Bool)\n  (opt : Option A) : Option A :=\n  case opt of {\n    | none := none\n    | some x :=\n      if\n        | p x := some x\n        | else := none\n  };\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#list-a","title":"<code>List A</code>","text":"<p>The type <code>List A</code> represents a sequence of elements of type <code>A</code>. Used for collections and ordered data.</p> <pre><code>import Stdlib.Data.List as List\n  open using {\n  List;\n  nil;\n  ::;\n  isElement;\n  head;\n  tail;\n  length;\n  take;\n  drop;\n  ++;\n  reverse;\n  any;\n  all;\n  zip;\n} public;\n</code></pre> <p>For example,</p> <pre><code>numbers : List Nat := 1 :: 2 :: 3 :: nil;\n-- alternative syntax:\nniceNumbers : List Nat := [1 ; 2 ; 3];\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#findindex","title":"<code>findIndex</code>","text":"<p>Get the first index of an element satisfying a predicate if such an index exists and none, otherwise.</p> <pre><code>findIndex {A} (predicate : A -&gt; Bool) : List A -&gt; Option Nat\n  | nil := none\n  | (x :: xs) :=\n    if\n      | predicate x := some zero\n      | else := case findIndex predicate xs of\n        | none := none\n        | some i := some (suc i);\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#last","title":"<code>last</code>","text":"<p>Get last element of a list</p> <pre><code>last {A} (lst : List A) (default : A) : A :=\n  head default (reverse lst);\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#most","title":"<code>most</code>","text":"<p>Get list with last element dropped</p> <pre><code>most {A} (lst : List A) : List A :=\n  tail (reverse lst);\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#snoc","title":"<code>snoc</code>","text":"<p>Prepend element to a list</p> <pre><code>snoc {A} (xs : List A) (x : A) : List A :=\n  xs ++ [x];\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#uncons","title":"<code>uncons</code>","text":"<p>Split one layer of list</p> <pre><code>uncons {A} : List A -&gt; Option (Pair A (List A))\n  | nil := none\n  | (x :: xs) := some (mkPair x xs)\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#unsnoc","title":"<code>unsnoc</code>","text":"<p>Split one layer of list from the end</p> <pre><code>unsnoc {A} : List A -&gt; Option (Pair (List A) A)\n  | nil := none\n  | (x :: xs) := some (mkPair (most (x :: xs)) (last xs x))\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#unfold","title":"<code>unfold</code>","text":"<p>Unfold a list, layerwise</p> <pre><code>terminating\nunfold {A B}\n  (step : B -&gt; Option (Pair A B))\n  (seed : B) : List A :=\n  case step seed of\n    | none := nil\n    | some (x, seed') := x :: unfold step seed';\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#unzip","title":"<code>unzip</code>","text":"<p>Unzip a list of pairs into two lists</p> <pre><code>terminating\nunzip {A B}\n  (xs : List (Pair A B)) : Pair (List A) (List B) :=\n  case xs of {\n    | nil := mkPair nil nil\n    | p :: ps :=\n      let unzipped := unzip ps\n      in mkPair (fst p :: fst unzipped) (snd p :: snd unzipped)\n  };\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#partitioneither","title":"<code>partitionEither</code>","text":"<p>Partition a list</p> <pre><code>partitionEither\n  {A B} (es : List (Either A B)) : Pair (List A) (List B) :=\n  foldr\n    (\\{e acc :=\n      case e of {\n        | left a := mkPair (a :: (fst acc)) (snd acc)\n        | right b := mkPair (fst acc) (b :: (snd acc))\n      }})\n    (mkPair nil nil)\n    es;\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#partitioneitherwith","title":"<code>partitionEitherWith</code>","text":"<pre><code>partitionEitherWith\n  {A B C}\n  (f : C -&gt; Either A B)\n  (es : List C) : Pair (List A) (List B) :=\n  partitionEither (map f es);\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#catoptions","title":"<code>catOptions</code>","text":"<p>Collapse list of options</p> <pre><code>catOptions {A} : List (Option A) -&gt; List A :=\n  foldr\n    (\\{opt acc :=\n      case opt of {\n        | none := acc\n        | some x := x :: acc\n      }})\n    nil;\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#maximumby","title":"<code>maximumBy</code>","text":"<p>Get the maximal element of a list.</p> <pre><code>maximumBy {A B} {{Ord B}}\n  (f : A -&gt; B)\n  (lst : List A)\n  : Option A :=\n  let maxHelper := \\{curr acc :=\n    case acc of {\n      | none := some curr\n      | some maxVal :=\n        if\n          | f curr &gt; f maxVal := some curr\n          | else := some maxVal\n    }\n  };\n  in foldr maxHelper none lst;\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#minimumby","title":"<code>minimumBy</code>","text":"<p>Get the minimal element of a list.</p> <pre><code>minimalBy {A B} {{Ord B}}\n  (f : A -&gt; B)\n  (lst : List A)\n  : Option A :=\n  let minHelper := \\{curr acc :=\n    case acc of {\n      | none := some curr\n      | some minVal :=\n        if\n          | f curr &lt; f minVal := some curr\n          | else := some minVal\n    }\n  };\n  in foldr minHelper none lst;\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#chunksof","title":"<code>chunksOf</code>","text":"<p>Splits a list into chunks of size <code>n</code>. The last chunk may be smaller than <code>n</code> if the length of the list is not divisible by <code>n</code>.</p> <p>Example:</p> <ul> <li>chunksOf 2 [1;2;3;4;5] = [[1;2]; [3;4]; [5]]</li> </ul> <pre><code>terminating\nchunksOf {A} : (chunkSize : Nat) -&gt; (list : List A) -&gt; List (List A)\n  | zero _ := nil\n  | _ nil := nil\n  | n xs := take n xs :: chunksOf n (drop n xs);\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#sliding","title":"<code>sliding</code>","text":"<p>Returns all contiguous sublists of size <code>n</code>. If <code>n</code> is larger than the list length, returns empty list. If <code>n</code> is zero, returns empty list.</p> <p>Example: - sliding 2 [1;2;3;4] = [[1;2]; [2;3]; [3;4]]</p> <pre><code>sliding {A} : (windowSize : Nat) -&gt; (list : List A) -&gt; List (List A)\n  | zero _ := nil\n  | n xs :=\n    let\n      len : Nat := length xs;\n      terminating\n      go : List A -&gt; List (List A)\n        | nil := nil\n        | ys :=\n          if\n            | length ys &lt; n := nil\n            | else := take n ys :: go (tail ys);\n    in if\n      | n &gt; len := nil\n      | else := go xs;\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#span","title":"<code>span</code>","text":"<p>Takes a predicate and a list, and returns a tuple where:</p> <ul> <li>First element is the longest prefix of the list that satisfies the predicate</li> <li>Second element is the remainder of the list</li> </ul> <pre><code>span {A} (p : A -&gt; Bool) : List A -&gt; Pair (List A) (List A)\n  | nil := mkPair nil nil\n  | (x :: xs) :=\n    if\n      | p x :=\n        let\n          (ys1, ys2) := span p xs;\n        in mkPair (x :: ys1) ys2\n      | else := mkPair nil (x :: xs);\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#groupby-and-group","title":"<code>groupBy</code> and <code>group</code>","text":"<p>Groups consecutive elements in a list that satisfy a given equality predicate.</p> <p>Example:</p> <ul> <li>groupBy (==) [1;1;2;2;2;3;1;1] = [[1;1];[2;2;2];[3];[1;1]]</li> </ul> <pre><code>terminating\ngroupBy {A} (eq : A -&gt; A -&gt; Bool) : List A -&gt; List (List A)\n  | nil := nil\n  | (x :: xs) :=\n    case span (eq x) xs of\n      ys1, ys2 := (x :: ys1) :: groupBy eq ys2;\n</code></pre> <pre><code>group {A} {{Eq A}} : List A -&gt; List (List A) := groupBy (==)\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#nubby","title":"<code>nubBy</code>","text":"<p>Returns a list with duplicates removed according to the given equivalence function, keeping the first occurrence of each element. Unlike regular ;nub;, this function allows specifying a custom equality predicate.</p> <p>Examples:</p> <ul> <li>nubBy ({x y := mod x 3 == mod y 3}) [1;2;3;4;5;6] = [1;2;3]</li> <li>nub [1;1;2;2;3;3] = [1;2;3]</li> </ul> <pre><code>nubBy {A} (eq : A -&gt; A -&gt; Bool) : List A -&gt; List A :=\n  let\n    -- Checks if an element is already in the accumulator\n    elemBy (x : A) : List A -&gt; Bool\n      | nil := false\n      | (y :: ys) := eq x y || elemBy x ys;\n\n    go : List A -&gt; List A -&gt; List A\n      | acc nil := reverse acc\n      | acc (x :: xs) :=\n        if\n          | elemBy x acc := go acc xs\n          | else := go (x :: acc) xs;\n  in go nil;\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#nub","title":"<code>nub</code>","text":"<pre><code>nub {A} {{Eq A}} : List A -&gt; List A := nubBy (==);\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#powerlists","title":"<code>powerlists</code>","text":"<p>Generate all possible sublists of a list. Each element can either be included or not.</p> <pre><code>powerlists {A} : List A -&gt; List (List A)\n  | nil := nil :: nil\n  | (x :: xs) :=\n    let\n      rest : List (List A) := powerlists xs;\n      withX : List (List A) := map ((::) x) rest;\n    in rest ++ withX;\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#set-a","title":"<code>Set A</code>","text":"<p>The type <code>Set A</code> represents a collection of unique elements of type <code>A</code>. Used for sets of values.</p> <pre><code>import Stdlib.Data.Set as Set open using {\n    Set; module Set;\n    difference;\n    union;\n    eqSetI;\n    ordSetI;\n    isSubset;\n  } public;\n</code></pre> <p>For example,</p> <pre><code>uniqueNumbers : Set Nat := Set.fromList [1 ; 2 ; 2 ; 2; 3];\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#setmap","title":"<code>setMap</code>","text":"<pre><code>setMap {A B} {{Ord B}} (f : A -&gt; B) (set : Set A) : Set B :=\n  Set.fromList (map f (Set.toList set));\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#setjoin","title":"<code>setJoin</code>","text":"<p>Collapse a set of sets into a set</p> <pre><code>setJoin {A} {{Ord A}} (sets : Set (Set A)) : Set A :=\n  for (acc := Set.empty) (innerSet in sets) {\n    Set.union acc innerSet\n  };\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#disjointunion","title":"<code>disjointUnion</code>","text":"<pre><code>--- Computes the disjoint union of two ;Set;s.\ndisjointUnion {T} {{Ord T}} (s1 s2 : Set T) : Result (Set T) (Set T) :=\n  case Set.intersection s1 s2 of\n    | Set.empty := ok (Set.union s1 s2)\n    | s := error s;\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#symmetricdifference","title":"<code>symmetricDifference</code>","text":"<p>Caclulate the symmetric difference of two sets.</p> <pre><code>symmetricDifference\n  {A} {{Ord A}} (s1 s2 : Set A) : Set A :=\n  let\n    in1not2 := difference s1 s2;\n    in2not1 := difference s2 s1;\n  in union in1not2 in2not1;\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#cartesianproduct","title":"<code>cartesianProduct</code>","text":"<p>Generate the set of all cartesian products of a set.</p> <pre><code>cartesianProduct\n  {A B}\n  {{Ord A}} {{Ord B}}\n  (s1 : Set A)\n  (s2 : Set B)\n  : Set (Pair A B) :=\n  let\n    -- For a fixed element from set1, create a set of all pairs with elements from s2\n    pairsForElement (a : A) : Set (Pair A B) :=\n      for (acc := Set.empty) (b in s2) {\n        Set.insert (mkPair a b) acc\n      };\n\n    -- Create set of sets, each containing pairs for one element from s1\n    pairSets : Set (Set (Pair A B)) :=\n      for (acc := Set.empty) (a in s1) {\n        Set.insert (pairsForElement a) acc\n      };\n  in setJoin pairSets;\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#powerset","title":"<code>powerset</code>","text":"<p>Generate the powerset (set of all subsets) of a set.</p> <pre><code>powerset {A} {{Ord A}} (s : Set A) : Set (Set A) :=\n  let\n    elements := Set.toList s;\n    subLists := powerlists elements;\n  in Set.fromList (map Set.fromList subLists);\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#ispropersubset","title":"<code>isProperSubset</code>","text":"<p>Checks if all elements of <code>set1</code> are in <code>set2</code>, and that the two sets are not the same.</p> <pre><code>isProperSubset {A} {{Eq A}} {{Ord A}} (set1 set2 : Set A) : Bool :=\n  isSubset set1 set2 &amp;&amp; not (set1 == set2)\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#map-k-v","title":"<code>Map K V</code>","text":"<p>The type <code>Map K V</code> represents a collection of key-value pairs, sometimes called a dictionary, where keys are of type <code>K</code> and values are of type <code>V</code>.</p> <pre><code>import Stdlib.Data.Map as Map public;\nopen Map using {\n    Map\n  } public;\n</code></pre> <p>For example,</p> <pre><code>codeToken : Map Nat String := Map.fromList [ (1 , \"BTC\") ; (2 , \"ETH\") ; (3, \"ANM\")];\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#updatelookupwithkey","title":"<code>updateLookupWithKey</code>","text":"<p>Updates a value at a specific key using the update function and returns both the old value (if the key existed) and the updated map.</p> <pre><code>updateLookupWithKey\n  {Key Value}\n  {{Ord Key}}\n  (updateFn : Key -&gt; Value -&gt; Option Value)\n  (k : Key)\n  (map : Map Key Value)\n  : Pair (Option Value) (Map Key Value) :=\n  let\n    oldValue : Option Value := Map.lookup k map;\n    newMap : Map Key Value :=\n      case oldValue of {\n        | none := map\n        | some v :=\n          case updateFn k v of {\n            | none := Map.delete k map\n            | some newV := Map.insert k newV map\n          }\n      };\n  in oldValue, newMap;\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#mapkeys","title":"<code>mapKeys</code>","text":"<p>Maps all keys in the Map to new keys using the provided function. If the mapping function is not injective (maps different keys to the same key), later entries in the map will overwrite earlier ones with the same new key.</p> <pre><code>mapKeys\n  {Key1 Key2 Value}\n  {{Ord Key2}}\n  (fun : Key1 -&gt; Key2)\n  (map : Map Key1 Value)\n  : Map Key2 Value :=\n  Map.fromList\n    (for (acc := nil) ((k, v) in Map.toList map) {\n      (fun k, v) :: acc\n    });\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#restrictkeys","title":"<code>restrictKeys</code>","text":"<p>Restrict a map to only contain keys from the given set.</p> <pre><code>restrictKeys\n  {Key Value}\n  {{Ord Key}}\n  (map : Map Key Value)\n  (validKeys : Set.Set Key)\n  : Map Key Value :=\n  for (acc := Map.empty) (k, v in map) {\n    if\n      | Set.isMember k validKeys := Map.insert k v acc\n      | else := acc\n  };\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#withoutkeys","title":"<code>withoutKeys</code>","text":"<p>Remove all entries from a map whose keys appear in the given set.</p> <pre><code>withoutKeys\n  {Key Value}\n  {{Ord Key}}\n  (map : Map Key Value)\n  (invalidKeys : Set.Set Key)\n  : Map Key Value :=\n  for (acc := Map.empty) (k, v in map) {\n    if\n      | Set.isMember k invalidKeys := acc\n      | else := Map.insert k v acc\n  };\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#mappartition","title":"<code>mapPartition</code>","text":"<p>Split a map according to a predicate on values. Returns a pair of maps, (matching, non-matching).</p> <pre><code>mapPartition\n  {Key Value}\n  {{Ord Key}}\n  (predicate : Value -&gt; Bool)\n  (map : Map Key Value)\n  : Pair (Map Key Value) (Map Key Value) :=\n  for (matching, nonMatching := Map.empty, Map.empty) (k, v in map) {\n    if\n      | predicate v := Map.insert k v matching, nonMatching\n      | else := matching, Map.insert k v nonMatching\n  };\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#partitionwithkey","title":"<code>partitionWithKey</code>","text":"<p>Split a map according to a predicate that can examine both key and value. Returns a pair of maps, (matching, non-matching).</p> <pre><code>partitionWithKey\n  {Key Value}\n  {{Ord Key}}\n  (predicate : Key -&gt; Value -&gt; Bool)\n  (map : Map Key Value)\n  : Pair (Map Key Value) (Map Key Value) :=\n  for (matching, nonMatching := Map.empty, Map.empty) (k, v in map) {\n    if\n      | predicate k v := Map.insert k v matching, nonMatching\n      | else := matching, Map.insert k v nonMatching\n  };\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#mapoption","title":"<code>mapOption</code>","text":"<p>Apply a partial function to all values in the map, keeping only the entries where the function returns 'some'.</p> <pre><code>mapOption\n  {Key Value1 Value2} {{Ord Key}}\n  (f : Value1 -&gt; Option Value2)\n  (map : Map Key Value1)\n  : Map Key Value2 :=\n  for (acc := Map.empty) (k, v in map) {\n    case f v of {\n      | none := acc\n      | some v' := Map.insert k v' acc\n    }\n  };\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#mapoptionwithkey","title":"<code>mapOptionWithKey</code>","text":"<p>Same as mapOption but allows the function to examine the key as well.</p> <pre><code>mapOptionWithKey\n  {Key Value1 Value2} {{Ord Key}}\n  (f : Key -&gt; Value1 -&gt; Option Value2)\n  (map : Map Key Value1)\n  : Map Key Value2 :=\n  for (acc := Map.empty) (k, v in map) {\n    case f k v of {\n      | none := acc\n      | some v' := Map.insert k v' acc\n    }\n  };\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#mapeither","title":"<code>mapEither</code>","text":"<p>Apply a function that returns Either to all values in the map.</p> <pre><code>mapEither\n  {Key Value Error Result}\n  {{Ord Key}}\n  (f : Value -&gt; Either Error Result)\n  (map : Map Key Value)\n  : Pair (Map Key Error) (Map Key Result) :=\n  for (lefts, rights := Map.empty, Map.empty) (k, v in map) {\n    case f v of {\n      | error e := Map.insert k e lefts, rights\n      | ok r := lefts, Map.insert k r rights\n    }\n  };\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#mapeitherwithkey","title":"<code>mapEitherWithKey</code>","text":"<p>Same as mapEither but allows the function to examine the key as well.</p> <pre><code>mapEitherWithKey\n  {Key Value Error Result}\n  {{Ord Key}}\n  (f : Key -&gt; Value -&gt; Either Error Result)\n  (map : Map Key Value)\n  : Pair (Map Key Error) (Map Key Result) :=\n  for (lefts, rights := Map.empty, Map.empty) (k, v in map) {\n    case f k v of {\n      | error e := Map.insert k e lefts, rights\n      | ok r := lefts, Map.insert k r rights\n    }\n  };\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#undefined-values","title":"Undefined values","text":"<p>The term <code>undef</code> is a placeholder for unspecified values.</p>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#undef","title":"<code>undef</code>","text":"<pre><code>axiom undef {A} : A;\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"prelude.html#todo","title":"<code>TODO</code>","text":"<pre><code>axiom TODO {A} : A;\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"arch/overview.html","title":"Anoma architecture","text":"<p>The Anoma architecture is the blueprint that defines the structure and behaviour of the components that make up the Anoma protocol. There are two high-level components: the Node architecture and the System architecture.</p>","tags":["index"],"boost":2},{"location":"arch/overview.html#node-architecture","title":"Node architecture","text":"<p>Details the internal composition of individual nodes:</p> <ul> <li>Engine-based modular architecture</li> <li>Inter-engine communication protocols</li> <li>Engine-specific behaviours and responsibilities</li> </ul>","tags":["index"],"boost":2},{"location":"arch/overview.html#system-architecture","title":"System architecture","text":"<p>Defines the high-level structure and behaviour of the distributed network, including:</p> <ul> <li>Distributed state management </li> <li>Core data types and data flow for Network operations</li> <li>System-wide properties and guarantees</li> </ul>","tags":["index"],"boost":2},{"location":"arch/node/index.html","title":"Node Architecture","text":"<p>\u200b The node architecture specification concerns the state evolution of Anoma instances, broken into smaller steps<sup>1</sup> on the level of engines in nodes: - which messages are sent and received, - which computation is performed as reaction to message receptions, and - which local state changes ensue as a result.</p> <p>How message passing works is introduced in the Anomian, based on illustrative examples. On a higher level, we have a static pattern that connects two engine types with a message type if messages of this type can be sent between engine instances of the two types. An illustration of the pattern of communication between participants\u2014how they may send messages to each other\u2014is given in the following figure.</p> <ul> <li>Hardware Subsystem</li> </ul> <ul> <li>Identity Subsystem</li> </ul> <ul> <li>Ordering Subsystem</li> </ul> <ul> <li>Network Subsystem</li> </ul>","tags":["index"],"boost":2},{"location":"arch/node/index.html#message-flow","title":"Message Flow","text":"<ol> <li> <p>The technical term is the isolated turn principle <sup>2</sup>.\u00a0\u21a9</p> </li> <li> <p>Joeri De Koster, Tom Van Cutsem, and Wolfgang De Meuter. 43 years of actors: a taxonomy of actor models and their key properties. In Proceedings of the 6th International Workshop on Programming Based on Actors, Agents, and Decentralized Control, AGERE 2016, 31\u201340. New York, NY, USA, 2016. Association for Computing Machinery. URL: https://doi.org/10.1145/3001886.3001890, doi:10.1145/3001886.3001890.\u00a0\u21a9</p> </li> </ol>","tags":["index"],"boost":2},{"location":"arch/node/types.html","title":"Types","text":"<pre><code>module arch.node.types;\n\nimport arch.node.types.basics open public;\nimport arch.node.types.crypto open public;\nimport arch.node.types.identities open public;\nimport arch.node.types.messages open public;\n\nimport arch.node.types.anoma open public;\nimport arch.node.types.engine open public;\n\n{- Engine-specific types -}\nimport arch.node.types.transport open public;\nimport arch.node.types.storage open public;\nimport arch.node.types.router open public;\n</code></pre>","tags":["node-architecture","prelude","index"],"boost":2},{"location":"arch/node/concepts/engine.html","title":"The concept of an engine","text":"","tags":["node-architecture","concept","engine"]},{"location":"arch/node/concepts/engine.html#overview","title":"Overview","text":"<p>The model of Anoma revolves around the concept of an engine instance, an actor-like entity encapsulating all aspects of a computation process.</p> <p>An engine has the following components:</p> <ul> <li>a declaration of a message interface,</li> <li>a configuration,</li> <li>an environment, and</li> <li>a behaviour.</li> </ul> <p>Engines of the same type share the same behaviour. However, two engines of the same type may have different execution context, which in turn may lead to a different message reaction pattern (as \"observed\" by other engines).</p> <p>We often write engine, whenever the context makes clear that we refer to a term of an engine type (and not to the type itself), for the sake of brevity.</p>","tags":["node-architecture","concept","engine"]},{"location":"arch/node/concepts/engine.html#the-type-of-an-engine","title":"The type of an engine","text":"<p>The type of engines is defined in the engine module. We show the type definition here for convenience.</p> <pre><code>type Engine C S B H A AM AC AE :=\n  mk@{\n    cfg : EngineCfg C;\n    env : EngineEnv S B H AM;\n    behaviour : EngineBehaviour C S B H A AM AC AE;\n  };\n</code></pre>","tags":["node-architecture","concept","engine"]},{"location":"arch/node/concepts/engine.html#engine-components","title":"Engine components","text":"","tags":["node-architecture","concept","engine"]},{"location":"arch/node/concepts/engine.html#configuration","title":"Configuration","text":"<p>The configuration of an engine. The data of an engine configuration consists of:</p> <ul> <li>a parent engine,</li> <li>a name,</li> <li>a node ID, and</li> <li>a generic configuration type <code>c</code>.</li> </ul> <p>The complete definition of an engine configuration can be found in the Juvix engine configuration definition.</p>","tags":["node-architecture","concept","engine"]},{"location":"arch/node/concepts/engine.html#environment","title":"Environment","text":"<p>The execution context of an engine. The data of an engine environment consists of:</p> <ul> <li>a local state for storing engine-specific data,</li> <li>a mailbox cluster for receiving and sending messages,</li> <li>a set of acquaintances (other engines that can interact with this engine), and</li> <li>a set of active timers.</li> </ul> <p>The complete definition of an engine environment can be found in the Juvix engine environment definition.</p>","tags":["node-architecture","concept","engine"]},{"location":"arch/node/concepts/engine.html#behaviour","title":"Behaviour","text":"<p>The function that describes all possible ways in which engines react to messages. This includes:</p> <ul> <li>modifying their environment,</li> <li>sending messages to other engines,</li> <li>spawning new engine instances, and</li> <li>managing their active timers.</li> </ul> <p>The complete definition of an engine behaviour can be found in the Juvix engine behaviour definition.</p>","tags":["node-architecture","concept","engine"]},{"location":"arch/node/concepts/engine.html#useful-links","title":"Useful Links","text":"<ul> <li>Learn about the Anomian.</li> <li>Tutorials on Writing Engine Families for Anoma Spec writers.</li> <li>Example of an engine that ticks, the Ticker Engine.</li> </ul>","tags":["node-architecture","concept","engine"]},{"location":"arch/node/concepts/node.html","title":"The concept of a node","text":"","tags":["node-architecture","concept","node"]},{"location":"arch/node/concepts/node.html#overview","title":"Overview","text":"<p>A node is any Anoma-powered device. It can be a desktop computer, a smartphone, a server, or any other device that can run the Anoma software.</p> <p>What's a good abstract definition of a node?</p> <ul> <li>A node consists of ...</li> </ul>","tags":["node-architecture","concept","node"]},{"location":"arch/node/concepts/subsystem.html","title":"The concept of a subsystem","text":"<p>Subsystem</p> <p>A subsystem is a collection of engines that work together to achieve a   specific goal. The purpose of a subsystem is to provide a high-level interface   for the components that make up the node.</p>","tags":["node-architecture","concept","subsystem"]},{"location":"arch/node/concepts/subsystem.html#examples","title":"Examples","text":"<ul> <li>Hardware subsystem</li> <li>Identity subsystem</li> <li>Ordering subsystem</li> </ul>","tags":["node-architecture","concept","subsystem"]},{"location":"arch/node/engines/commitment.html","title":"Commitment Engine","text":"Juvix imports <pre><code>module arch.node.engines.commitment;\n\nimport prelude open;\nimport arch.node.types.engine open;\n\nimport arch.node.engines.commitment_config open public;\nimport arch.node.engines.commitment_messages open public;\nimport arch.node.engines.commitment_environment open public;\nimport arch.node.engines.commitment_behaviour open public;\n\nimport arch.node.types.anoma as Anoma open;\n\nopen commitment_config_example;\nopen commitment_environment_example;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","commitment","engine-definition"]},{"location":"arch/node/engines/commitment.html#commitment-engine","title":"Commitment Engine","text":"<p>The Commitment Engine provides digital signature services for a specific identity within Anoma. It acts as a secure mediator that can generate cryptographic signatures (see <code>Commitment</code>) when given data to sign (<code>Signable</code>), while keeping the signing keys secure and unexposed.</p> <p>When users request a signature through the engine (via a <code>MsgCommitmentRequest</code> message), it validates their authorisation and returns a cryptographic signature (via a <code>MsgCommitmentReply</code> message) that proves the identity authorised that specific data.</p> <p>In Anoma, Commitment Engines are only spawned by Identity Management Engines during identity creation or connection, and only users with the engine reference can request signatures. This controlled access ensures that signatures can only be generated by authorised parties while maintaining the security of the underlying signing keys.</p>","tags":["node-architecture","identity-subsystem","engine","commitment","engine-definition"]},{"location":"arch/node/engines/commitment.html#engine-components","title":"Engine components","text":"<ul> <li>Commitment Messages</li> <li>Commitment Configuration</li> <li>Commitment Environment</li> <li>Commitment Behaviour</li> </ul>","tags":["node-architecture","identity-subsystem","engine","commitment","engine-definition"]},{"location":"arch/node/engines/commitment.html#the-type-for-a-commitment-engine","title":"The type for a commitment engine","text":"<pre><code>CommitmentEngine : Type :=\n  Engine\n    CommitmentCfg\n    CommitmentLocalState\n    CommitmentMailboxState\n    CommitmentTimerHandle\n    CommitmentActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","commitment","engine-definition"]},{"location":"arch/node/engines/commitment.html#example-of-a-commitment-engine","title":"Example of a commitment engine","text":"<pre><code>exampleCommitmentEngine : CommitmentEngine :=\n  Engine.mk@{\n    cfg := commitmentCfg;\n    env := commitmentEnv;\n    behaviour := commitmentBehaviour;\n  };\n</code></pre> <p>where <code>commitmentCfg</code> is defined as follows:</p> <p>```juvix extract-module-statements module commitment_config_example;</p> <p>commitmentCfg : EngineCfg CommitmentCfg :=     EngineCfg.mk@{       node := PublicKey.Curve25519PubKey \"0xabcd1234\";       name := \"commitment\";       cfg := CommitmentCfg.mk@{         signer := Identity.Signer.mkSigner@{           sign := {_ x := Signature.Ed25519Signature \"0xabcd1234\"};         };         backend := Backend.LocalMemory;       };     }   ; end; <pre><code>[`commitmentEnv`](https://specs.anoma.net/pr-347/arch/node/engines/commitment_environment.html#commitmentEnv) is defined as follows:\n\n```juvix extract-module-statements\nmodule commitment_environment_example;\n\naxiom dummyExternalIdentity : ExternalIdentity;\naxiom dummyIDBackend : Backend;\naxiom dummySigningKey : SigningKey;\n\ncommitmentEnv : CommitmentEnv :=\n    EngineEnv.mk@{\n      localState := unit;\n      mailboxCluster := Map.empty;\n      acquaintances := Set.empty;\n      timers := []\n    }\n  ;\nend;\n</code></pre></p> <p>and <code>commitmentBehaviour</code> is defined as follows:</p> <pre><code>commitmentBehaviour : CommitmentBehaviour :=\n  EngineBehaviour.mk@{\n    guards :=\n      GuardEval.First [\n        commitGuard\n      ];\n  };\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","commitment","engine-definition"]},{"location":"arch/node/engines/commitment_behaviour.html","title":"Commitment Behaviour","text":"Juvix imports <pre><code>module arch.node.engines.commitment_behaviour;\n\nimport prelude open;\nimport arch.system.identity.identity open;\nimport arch.node.engines.commitment_messages open;\nimport arch.node.engines.commitment_config open;\nimport arch.node.engines.commitment_environment open;\nimport arch.node.types.basics open;\nimport arch.node.types.identities open;\nimport arch.node.types.messages open;\nimport arch.node.types.engine open;\nimport arch.node.types.anoma as Anoma open;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","commitment","behaviour"]},{"location":"arch/node/engines/commitment_behaviour.html#commitment-behaviour","title":"Commitment Behaviour","text":"","tags":["node-architecture","identity-subsystem","engine","commitment","behaviour"]},{"location":"arch/node/engines/commitment_behaviour.html#overview","title":"Overview","text":"<p>The behaviour of the Commitment Engine defines how it processes incoming commitment requests and produces the corresponding commitments/signatures.</p>","tags":["node-architecture","identity-subsystem","engine","commitment","behaviour"]},{"location":"arch/node/engines/commitment_behaviour.html#commitment-action-flowchart","title":"Commitment Action Flowchart","text":"","tags":["node-architecture","identity-subsystem","engine","commitment","behaviour"]},{"location":"arch/node/engines/commitment_behaviour.html#commitaction-flowchart","title":"<code>commitAction</code> flowchart","text":"<pre><code>flowchart TD\n    Start([Client Request]) --&gt; MsgReq[MsgCommitmentRequest&lt;br&gt;data: Signable]\n\n    subgraph Guard[\"commitGuard (Message Validation)\"]\n        MsgReq --&gt; ValidType{Is message type&lt;br&gt;CommitmentRequest?}\n        ValidType --&gt;|No| Reject([Reject Request])\n        ValidType --&gt;|Yes| ActionEntry[Enter Action Phase]\n    end\n\n    ActionEntry --&gt; Action\n\n    subgraph Action[\"commitAction (Processing)\"]\n        direction TB\n        Sign[Generate signature&lt;br&gt;using backend signer]\n        Sign --&gt; Success{Signature&lt;br&gt;Generated?}\n        Success --&gt;|Yes| GoodResp[Create Reply&lt;br&gt;with signature]\n        Success --&gt;|No| ErrResp[Create Reply&lt;br&gt;with error]\n    end\n\n    GoodResp --&gt; Reply[MsgCommitmentReply&lt;br&gt;commitment: Commitment&lt;br&gt;err: none]\n    ErrResp --&gt; ErrReply[MsgCommitmentReply&lt;br&gt;commitment: empty&lt;br&gt;err: Some error]\n\n    Reply --&gt; Client([Return to Client])\n    ErrReply --&gt; Client</code></pre> <code>commitAction</code> flowchart","tags":["node-architecture","identity-subsystem","engine","commitment","behaviour"]},{"location":"arch/node/engines/commitment_behaviour.html#explanation","title":"Explanation","text":"<ol> <li> <p>Initial Request</p> <ul> <li>A client sends a <code>MsgCommitmentRequest</code> containing data (<code>Signable</code>) that needs to be signed.</li> <li>The data must be in a format that can be signed by the backend (e.g., a byte string, transaction data, etc.).</li> </ul> </li> <li> <p>Guard Phase (<code>commitGuard</code>)</p> <ul> <li>Validates that the incoming message is a proper commitment request.</li> <li>Checks occur in the following order:<ul> <li>Verifies message type is <code>MsgCommitmentRequest</code>.</li> <li>If validation fails, request is rejected without entering the action phase.</li> <li>On success, passes control to <code>commitActionLabel</code>.</li> </ul> </li> </ul> </li> <li> <p>Action Phase (<code>commitAction</code>)</p> <ul> <li>Processes valid commitment requests through these steps:<ul> <li>Extracts the data to be signed from the request.</li> <li>Retrieves the signer from the engine's configuration.</li> <li>Attempts to generate a signature using the backend signer.</li> <li>Constructs an appropriate response message.</li> </ul> </li> </ul> </li> <li> <p>Reply Generation</p> <ul> <li>Successful Case<ul> <li>Creates <code>MsgCommitmentReply</code> with:<ul> <li><code>commitment</code>: The generated signature.</li> <li><code>err</code>: None.</li> </ul> </li> </ul> </li> <li>Error Case<ul> <li>In all error cases, returns <code>MsgCommitmentReply</code> with:<ul> <li><code>commitment</code>: Empty.</li> <li><code>err</code>: Some(error message).</li> </ul> </li> </ul> </li> </ul> </li> <li> <p>Reply Delivery</p> <ul> <li>Reply is sent back to the original requester.</li> <li>Uses mailbox 0 (default mailbox for responses).</li> </ul> </li> </ol>","tags":["node-architecture","identity-subsystem","engine","commitment","behaviour"]},{"location":"arch/node/engines/commitment_behaviour.html#important-notes","title":"Important Notes:","text":"<ul> <li>The commitment engine is stateless - each request is handled independently.</li> </ul>","tags":["node-architecture","identity-subsystem","engine","commitment","behaviour"]},{"location":"arch/node/engines/commitment_behaviour.html#action-arguments","title":"Action arguments","text":"","tags":["node-architecture","identity-subsystem","engine","commitment","behaviour"]},{"location":"arch/node/engines/commitment_behaviour.html#commitmentactionargumentreplyto-replyto","title":"<code>CommitmentActionArgumentReplyTo ReplyTo</code>","text":"<pre><code>type ReplyTo := mkReplyTo@{\n  whoAsked : Option EngineID;\n  mailbox : Option MailboxID;\n};\n</code></pre> <p>This action argument contains the address and mailbox ID of where the response message should be sent.</p> <code>whoAsked</code>: is the address of the engine that sent the message. <code>mailbox</code>: is the mailbox ID where the response message should be sent.","tags":["node-architecture","identity-subsystem","engine","commitment","behaviour"]},{"location":"arch/node/engines/commitment_behaviour.html#commitmentactionargument","title":"<code>CommitmentActionArgument</code>","text":"<pre><code>type CommitmentActionArgument :=\n  | CommitmentActionArgumentReplyTo ReplyTo\n  ;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","commitment","behaviour"]},{"location":"arch/node/engines/commitment_behaviour.html#commitmentactionarguments","title":"<code>CommitmentActionArguments</code>","text":"<pre><code>CommitmentActionArguments : Type := List CommitmentActionArgument;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","commitment","behaviour"]},{"location":"arch/node/engines/commitment_behaviour.html#actions","title":"Actions","text":"Auxiliary Juvix code","tags":["node-architecture","identity-subsystem","engine","commitment","behaviour"]},{"location":"arch/node/engines/commitment_behaviour.html#commitmentaction","title":"<code>CommitmentAction</code>","text":"<pre><code>CommitmentAction : Type :=\n  Action\n    CommitmentCfg\n    CommitmentLocalState\n    CommitmentMailboxState\n    CommitmentTimerHandle\n    CommitmentActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","commitment","behaviour"]},{"location":"arch/node/engines/commitment_behaviour.html#commitmentactioninput","title":"<code>CommitmentActionInput</code>","text":"<pre><code>CommitmentActionInput : Type :=\n  ActionInput\n    CommitmentCfg\n    CommitmentLocalState\n    CommitmentMailboxState\n    CommitmentTimerHandle\n    CommitmentActionArguments\n    Anoma.Msg;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","commitment","behaviour"]},{"location":"arch/node/engines/commitment_behaviour.html#commitmentactioneffect","title":"<code>CommitmentActionEffect</code>","text":"<pre><code>CommitmentActionEffect : Type :=\n  ActionEffect\n    CommitmentLocalState\n    CommitmentMailboxState\n    CommitmentTimerHandle\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","commitment","behaviour"]},{"location":"arch/node/engines/commitment_behaviour.html#commitmentactionexec","title":"<code>CommitmentActionExec</code>","text":"<pre><code>CommitmentActionExec : Type :=\n  ActionExec\n    CommitmentCfg\n    CommitmentLocalState\n    CommitmentMailboxState\n    CommitmentTimerHandle\n    CommitmentActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","commitment","behaviour"]},{"location":"arch/node/engines/commitment_behaviour.html#commitaction","title":"<code>commitAction</code>","text":"<p>Generate a commitment (signature) for the given request.</p> State update The state remains unchanged. Messages to be sent A <code>ReplyCommitment</code> message is sent back to the requester. Engines to be spawned No engine is created by this action. Timer updates No timers are set or cancelled. <pre><code>commitAction\n  (input : CommitmentActionInput)\n  : Option CommitmentActionEffect :=\n  let\n    env := ActionInput.env input;\n    cfg := ActionInput.cfg input;\n    tt := ActionInput.trigger input;\n  in\n    case getEngineMsgFromTimestampedTrigger tt of {\n    | some emsg :=\n      case emsg of {\n      | EngineMsg.mk@{msg := Anoma.PreMsg.MsgCommitment (CommitmentMsg.Request request)} :=\n        let\n          signedData := Signer.sign\n            (CommitmentCfg.signer (EngineCfg.cfg cfg))\n            (CommitmentCfg.backend (EngineCfg.cfg cfg))\n            (RequestCommitment.data request);\n          responseMsg := ReplyCommitment.mkReplyCommitment@{\n            commitment := signedData;\n            err := none\n          }\n        in some ActionEffect.mk@{\n          env := env;\n          msgs := [\n            EngineMsg.mk@{\n              sender := getEngineIDFromEngineCfg cfg;\n              target := EngineMsg.sender emsg;\n              mailbox := some 0;\n              msg := Anoma.PreMsg.MsgCommitment (CommitmentMsg.Reply responseMsg)\n            }\n          ];\n          timers := [];\n          engines := []\n        }\n      | _ := none\n      }\n    | _ := none\n    }\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","commitment","behaviour"]},{"location":"arch/node/engines/commitment_behaviour.html#action-labels","title":"Action Labels","text":"","tags":["node-architecture","identity-subsystem","engine","commitment","behaviour"]},{"location":"arch/node/engines/commitment_behaviour.html#commitactionlabel","title":"<code>commitActionLabel</code>","text":"<pre><code>commitActionLabel : CommitmentActionExec := ActionExec.Seq [ commitAction ];\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","commitment","behaviour"]},{"location":"arch/node/engines/commitment_behaviour.html#guards","title":"Guards","text":"Auxiliary Juvix code","tags":["node-architecture","identity-subsystem","engine","commitment","behaviour"]},{"location":"arch/node/engines/commitment_behaviour.html#commitmentguard","title":"<code>CommitmentGuard</code>","text":"<p> <pre><code>CommitmentGuard : Type :=\n  Guard\n    CommitmentCfg\n    CommitmentLocalState\n    CommitmentMailboxState\n    CommitmentTimerHandle\n    CommitmentActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","identity-subsystem","engine","commitment","behaviour"]},{"location":"arch/node/engines/commitment_behaviour.html#commitmentguardoutput","title":"<code>CommitmentGuardOutput</code>","text":"<p> <pre><code>CommitmentGuardOutput : Type :=\n  GuardOutput\n    CommitmentCfg\n    CommitmentLocalState\n    CommitmentMailboxState\n    CommitmentTimerHandle\n    CommitmentActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","identity-subsystem","engine","commitment","behaviour"]},{"location":"arch/node/engines/commitment_behaviour.html#commitmentguardeval","title":"<code>CommitmentGuardEval</code>","text":"<p> <pre><code>CommitmentGuardEval : Type :=\n  GuardEval\n    CommitmentCfg\n    CommitmentLocalState\n    CommitmentMailboxState\n    CommitmentTimerHandle\n    CommitmentActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","identity-subsystem","engine","commitment","behaviour"]},{"location":"arch/node/engines/commitment_behaviour.html#commitguard","title":"<code>commitGuard</code>","text":"Condition Message type is <code>MsgCommitmentRequest</code>. <pre><code>commitGuard\n  (tt : TimestampedTrigger CommitmentTimerHandle Anoma.Msg)\n  (cfg : EngineCfg CommitmentCfg)\n  (env : CommitmentEnv)\n  : Option CommitmentGuardOutput :=\n  case getEngineMsgFromTimestampedTrigger tt of {\n    | some EngineMsg.mk@{\n        msg := Anoma.PreMsg.MsgCommitment (CommitmentMsg.Request _);\n      } := some GuardOutput.mk@{\n        action := commitActionLabel;\n        args := [];\n      }\n    | _ := none\n    };\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","commitment","behaviour"]},{"location":"arch/node/engines/commitment_behaviour.html#the-commitment-behaviour","title":"The Commitment behaviour","text":"","tags":["node-architecture","identity-subsystem","engine","commitment","behaviour"]},{"location":"arch/node/engines/commitment_behaviour.html#commitmentbehaviour","title":"<code>CommitmentBehaviour</code>","text":"<pre><code>CommitmentBehaviour : Type :=\n  EngineBehaviour\n    CommitmentCfg\n    CommitmentLocalState\n    CommitmentMailboxState\n    CommitmentTimerHandle\n    CommitmentActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","commitment","behaviour"]},{"location":"arch/node/engines/commitment_behaviour.html#instantiation","title":"Instantiation","text":"<pre><code>commitmentBehaviour : CommitmentBehaviour :=\n  EngineBehaviour.mk@{\n    guards :=\n      GuardEval.First [\n        commitGuard\n      ];\n  };\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","commitment","behaviour"]},{"location":"arch/node/engines/commitment_config.html","title":"Commitment Configuration","text":"Juvix imports <pre><code>module arch.node.engines.commitment_config;\n\nimport prelude open;\nimport arch.node.engines.commitment_messages open;\nimport arch.system.identity.identity as Identity;\nimport arch.node.types.engine open;\nimport arch.node.types.messages open;\nimport arch.node.types.identities open;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","commitment","configuration"]},{"location":"arch/node/engines/commitment_config.html#commitment-configuration","title":"Commitment Configuration","text":"","tags":["node-architecture","identity-subsystem","engine","commitment","configuration"]},{"location":"arch/node/engines/commitment_config.html#overview","title":"Overview","text":"<p>The commitment engine configuration contains static information for commitment engine instances, namely the signer and the backend.</p>","tags":["node-architecture","identity-subsystem","engine","commitment","configuration"]},{"location":"arch/node/engines/commitment_config.html#the-commitment-configuration","title":"The Commitment Configuration","text":"<p>The configuration of a Commitment Engine instance includes the identity's signing capabilities.</p>","tags":["node-architecture","identity-subsystem","engine","commitment","configuration"]},{"location":"arch/node/engines/commitment_config.html#commitmentcfg","title":"<code>CommitmentCfg</code>","text":"<pre><code>type CommitmentCfg := mk@{\n  signer : Identity.Signer Backend Signable Commitment;\n  backend : Backend;\n};\n</code></pre> Arguments <code>signer</code>: The signer for the identity. <code>backend</code>: The backend to use for signing.","tags":["node-architecture","identity-subsystem","engine","commitment","configuration"]},{"location":"arch/node/engines/commitment_config.html#instantiation","title":"Instantiation","text":"<p>```juvix extract-module-statements module commitment_config_example;</p> <p>commitmentCfg : EngineCfg CommitmentCfg :=     EngineCfg.mk@{       node := PublicKey.Curve25519PubKey \"0xabcd1234\";       name := \"commitment\";       cfg := CommitmentCfg.mk@{         signer := Identity.Signer.mkSigner@{           sign := {_ x := Signature.Ed25519Signature \"0xabcd1234\"};         };         backend := Backend.LocalMemory;       };     }   ; end; ```</p>","tags":["node-architecture","identity-subsystem","engine","commitment","configuration"]},{"location":"arch/node/engines/commitment_environment.html","title":"Commitment Environment","text":"Juvix imports <pre><code>module arch.node.engines.commitment_environment;\nimport prelude open;\nimport arch.node.engines.commitment_messages open;\nimport arch.node.types.crypto open;\nimport arch.node.types.engine_environment open;\nimport arch.node.types.identities open;\nimport arch.node.types.messages open;\nimport arch.node.types.anoma_message as Anoma open;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","commitment","environment"]},{"location":"arch/node/engines/commitment_environment.html#commitment-environment","title":"Commitment Environment","text":"","tags":["node-architecture","identity-subsystem","engine","commitment","environment"]},{"location":"arch/node/engines/commitment_environment.html#overview","title":"Overview","text":"<p>The Commitment Engine environment maintains the state necessary for generating commitments (signatures) for a specific identity. It includes the identity's signing capabilities and any necessary signing keys or handles.</p>","tags":["node-architecture","identity-subsystem","engine","commitment","environment"]},{"location":"arch/node/engines/commitment_environment.html#mailbox-states","title":"Mailbox states","text":"<p>The Commitment Engine does not require complex mailbox states. We define the mailbox state as <code>Unit</code>.</p>","tags":["node-architecture","identity-subsystem","engine","commitment","environment"]},{"location":"arch/node/engines/commitment_environment.html#commitmentmailboxstate","title":"<code>CommitmentMailboxState</code>","text":"<pre><code>syntax alias CommitmentMailboxState := Unit;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","commitment","environment"]},{"location":"arch/node/engines/commitment_environment.html#local-state","title":"Local state","text":"<p>The Commitment engine is statless.</p>","tags":["node-architecture","identity-subsystem","engine","commitment","environment"]},{"location":"arch/node/engines/commitment_environment.html#commitmentlocalstate","title":"<code>CommitmentLocalState</code>","text":"<pre><code>syntax alias CommitmentLocalState := Unit;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","commitment","environment"]},{"location":"arch/node/engines/commitment_environment.html#timer-handle","title":"Timer Handle","text":"<p>The Commitment Engine does not require a timer handle type. Therefore, we define the timer handle type as <code>Unit</code>.</p>","tags":["node-architecture","identity-subsystem","engine","commitment","environment"]},{"location":"arch/node/engines/commitment_environment.html#commitmenttimerhandle","title":"<code>CommitmentTimerHandle</code>","text":"<pre><code>syntax alias CommitmentTimerHandle := Unit;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","commitment","environment"]},{"location":"arch/node/engines/commitment_environment.html#the-commitment-environment","title":"The Commitment Environment","text":"","tags":["node-architecture","identity-subsystem","engine","commitment","environment"]},{"location":"arch/node/engines/commitment_environment.html#commitmentenv","title":"<code>CommitmentEnv</code>","text":"<pre><code>CommitmentEnv : Type :=\n  EngineEnv\n    CommitmentLocalState\n    CommitmentMailboxState\n    CommitmentTimerHandle\n    Anoma.Msg;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","commitment","environment"]},{"location":"arch/node/engines/commitment_environment.html#instantiation","title":"Instantiation","text":"<p>```juvix extract-module-statements module commitment_environment_example;</p> <p>axiom dummyExternalIdentity : ExternalIdentity; axiom dummyIDBackend : Backend; axiom dummySigningKey : SigningKey;</p> <p>commitmentEnv : CommitmentEnv :=     EngineEnv.mk@{       localState := unit;       mailboxCluster := Map.empty;       acquaintances := Set.empty;       timers := []     }   ; end; ```</p>","tags":["node-architecture","identity-subsystem","engine","commitment","environment"]},{"location":"arch/node/engines/commitment_messages.html","title":"Commitment Messages","text":"Juvix imports <pre><code>module arch.node.engines.commitment_messages;\nimport prelude open;\nimport arch.node.types.identities open;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","commitment","message-types"]},{"location":"arch/node/engines/commitment_messages.html#commitment-messages","title":"Commitment Messages","text":"","tags":["node-architecture","identity-subsystem","engine","commitment","message-types"]},{"location":"arch/node/engines/commitment_messages.html#message-interface","title":"Message interface","text":"<pre><code>type CommitmentMsg :=\n  | Request RequestCommitment\n  | Reply ReplyCommitment\n  ;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","commitment","message-types"]},{"location":"arch/node/engines/commitment_messages.html#message-sequence-diagrams","title":"Message sequence diagrams","text":"","tags":["node-architecture","identity-subsystem","engine","commitment","message-types"]},{"location":"arch/node/engines/commitment_messages.html#request-sequence","title":"Request sequence","text":"<pre><code>sequenceDiagram\n    participant C as Client\n    participant CE as Commitment Engine\n\n    C-&gt;&gt;CE: RequestCommitment(data)\n    Note over CE: Generate commitment using internal signer\n    CE--&gt;&gt;C: ReplyCommitment(commitment)</code></pre>  Sequence diagram for commitment generation.","tags":["node-architecture","identity-subsystem","engine","commitment","message-types"]},{"location":"arch/node/engines/commitment_messages.html#message-types","title":"Message types","text":"","tags":["node-architecture","identity-subsystem","engine","commitment","message-types"]},{"location":"arch/node/engines/commitment_messages.html#requestcommitment","title":"<code>RequestCommitment</code>","text":"<pre><code>type RequestCommitment := mkRequestCommitment {\n  data : Signable\n};\n</code></pre> <p>A <code>RequestCommitment</code> instructs a commitment engine instance to produce a commitment (signature) over the provided data.</p> Arguments <code>data</code>: The data to sign.","tags":["node-architecture","identity-subsystem","engine","commitment","message-types"]},{"location":"arch/node/engines/commitment_messages.html#replycommitment","title":"<code>ReplyCommitment</code>","text":"<pre><code>type ReplyCommitment := mkReplyCommitment {\n  commitment : Commitment;\n  err : Option String;\n};\n</code></pre> <p>A <code>ReplyCommitment</code> contains the commitment (signature) generated by the commitment engine instance in response to a <code>RequestCommitment</code>.</p> Arguments <code>commitment</code>: The generated commitment (signature). <code>err</code>: An error message if commitment generation failed.","tags":["node-architecture","identity-subsystem","engine","commitment","message-types"]},{"location":"arch/node/engines/commitment_messages.html#commitmentmsg","title":"<code>CommitmentMsg</code>","text":"<pre><code>type CommitmentMsg :=\n  | Request RequestCommitment\n  | Reply ReplyCommitment\n  ;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","commitment","message-types"]},{"location":"arch/node/engines/commitment_messages.html#engine-components","title":"Engine components","text":"<ul> <li>Commitment Configuration</li> <li>Commitment Environment</li> <li>Commitment Behaviour</li> </ul>","tags":["node-architecture","identity-subsystem","engine","commitment","message-types"]},{"location":"arch/node/engines/decryption.html","title":"Decryption Engine","text":"Juvix imports <pre><code>module arch.node.engines.decryption;\n\nimport prelude open;\nimport arch.node.types.engine open;\n\nimport arch.node.engines.decryption_config open public;\nimport arch.node.engines.decryption_messages open public;\nimport arch.node.engines.decryption_environment open public;\nimport arch.node.engines.decryption_behaviour open public;\n\nimport arch.node.types.anoma as Anoma open;\n\nopen decryption_config_example;\nopen decryption_environment_example;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","decryption","engine-definition"]},{"location":"arch/node/engines/decryption.html#decryption-engine","title":"Decryption Engine","text":"<p>The Decryption Engine serves as a secure decryption service for a specific identity within Anoma. It functions like a secure lockbox that can decrypt messages (ciphertext to plaintext) intended for its associated identity, while keeping the decryption keys secure and unexposed. This enables secure communication where only the intended recipient can read encrypted messages.</p> <p>When users submit encrypted data to the engine (via a <code>MsgDecryptionRequest</code> message), it validates their authorisation and returns the decrypted content (via a <code>MsgDecryptionReply</code> message) if the decryption is successful.</p> <p>In Anoma, Decryption Engines are only spawned by Identity Management Engines during identity creation or connection. Only users with the engine reference can request decryption. This ensures that encrypted data can only be decrypted by authorised parties while maintaining the security of the private decryption keys.</p>","tags":["node-architecture","identity-subsystem","engine","decryption","engine-definition"]},{"location":"arch/node/engines/decryption.html#engine-components","title":"Engine components","text":"<ul> <li>Decryption Messages</li> <li>Decryption Configuration</li> <li>Decryption Environment</li> <li>Decryption Behaviour</li> </ul>","tags":["node-architecture","identity-subsystem","engine","decryption","engine-definition"]},{"location":"arch/node/engines/decryption.html#the-type-for-a-decryption-engine","title":"The type for a decryption engine","text":"<pre><code>DecryptionEngine : Type :=\n  Engine\n    DecryptionCfg\n    DecryptionLocalState\n    DecryptionMailboxState\n    DecryptionTimerHandle\n    DecryptionActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","decryption","engine-definition"]},{"location":"arch/node/engines/decryption.html#example-of-a-decryption-engine","title":"Example of a decryption engine","text":"<pre><code>exampleDecryptionEngine : DecryptionEngine :=\n  Engine.mk@{\n    cfg := decryptionCfg;\n    env := decryptionEnv;\n    behaviour := decryptionBehaviour;\n  };\n</code></pre> <p>where <code>decryptionCfg</code> is defined as follows:</p> <p>```juvix extract-module-statements module decryption_config_example;</p> <p>decryptionCfg : EngineCfg DecryptionCfg :=     EngineCfg.mk@{       node := PublicKey.Curve25519PubKey \"0xabcd1234\";       name := \"decryption\";       cfg := DecryptionCfg.mk@{         decryptor := Identity.Decryptor.mkDecryptor@{           decrypt := {_ x := some x};         };         backend := Backend.LocalMemory;       };     }   ; end; <pre><code>[`decryptionEnv`](https://specs.anoma.net/pr-347/arch/node/engines/decryption_environment.html#decryptionEnv) is defined as follows:\n\n```juvix extract-module-statements\nmodule decryption_environment_example;\n\ndecryptionEnv : DecryptionEnv :=\n    EngineEnv.mk@{\n      localState := unit;\n      mailboxCluster := Map.empty;\n      acquaintances := Set.empty;\n      timers := []\n    }\n  ;\nend;\n</code></pre></p> <p>and <code>decryptionBehaviour</code> is defined as follows:</p> <pre><code>decryptionBehaviour : DecryptionBehaviour :=\n  EngineBehaviour.mk@{\n    guards :=\n      GuardEval.First [\n        decryptGuard\n      ];\n  };\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","decryption","engine-definition"]},{"location":"arch/node/engines/decryption_behaviour.html","title":"Decryption Behaviour","text":"Juvix imports <pre><code>module arch.node.engines.decryption_behaviour;\n\nimport prelude open;\nimport arch.node.types.messages open;\nimport arch.system.identity.identity open;\nimport arch.node.types.engine open;\nimport arch.node.engines.decryption_config open;\nimport arch.node.engines.decryption_environment open;\nimport arch.node.engines.decryption_messages open;\nimport arch.node.types.identities open;\nimport arch.node.types.anoma as Anoma open;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","decryption","behaviour"]},{"location":"arch/node/engines/decryption_behaviour.html#decryption-behaviour","title":"Decryption Behaviour","text":"","tags":["node-architecture","identity-subsystem","engine","decryption","behaviour"]},{"location":"arch/node/engines/decryption_behaviour.html#overview","title":"Overview","text":"<p>The behavior of the Decryption Engine defines how it processes incoming decryption requests and produces the corresponding decrypted outputs.</p>","tags":["node-architecture","identity-subsystem","engine","decryption","behaviour"]},{"location":"arch/node/engines/decryption_behaviour.html#decryption-action-flowchart","title":"Decryption Action Flowchart","text":"","tags":["node-architecture","identity-subsystem","engine","decryption","behaviour"]},{"location":"arch/node/engines/decryption_behaviour.html#decryptaction-flowchart","title":"<code>decryptAction</code> flowchart","text":"<pre><code>flowchart TD\n  Start([Client Request]) --&gt; MsgReq[MsgDecryptionRequest&lt;br/&gt;data: Ciphertext]\n\n  subgraph Guard[\"decryptGuard (Message Validation)\"]\n      MsgReq --&gt; ValidType{Is message type&lt;br/&gt;DecryptionRequest?}\n      ValidType --&gt;|No| Reject([Reject Request])\n      ValidType --&gt;|Yes| ActionEntry[Enter Action Phase]\n  end\n\n  ActionEntry --&gt; Action\n\n  subgraph Action[\"decryptAction (Processing)\"]\n      direction TB\n      Decrypt[Attempt decryption&lt;br/&gt;using backend decryptor]\n      Decrypt --&gt; Success{Decryption&lt;br/&gt;Successful?}\n      Success --&gt;|Yes| GoodResp[Create Reply&lt;br/&gt;with plaintext]\n      Success --&gt;|No| ErrResp[Create Reply&lt;br/&gt;with error]\n  end\n\n  GoodResp --&gt; Reply[MsgDecryptionReply&lt;br/&gt;commitment: Plaintext&lt;br/&gt;err: none]\n  ErrResp --&gt; ErrReply[MsgDecryptionReply&lt;br/&gt;commitment: empty&lt;br/&gt;err: Some error]\n\n  Reply --&gt; Client([Return to Client])\n  ErrReply --&gt; Client\n\n  style Guard fill:#f0f7ff,stroke:#333,stroke-width:2px\n  style Action fill:#fff7f0,stroke:#333,stroke-width:2px</code></pre> <code>decryptAction</code> flowchart","tags":["node-architecture","identity-subsystem","engine","decryption","behaviour"]},{"location":"arch/node/engines/decryption_behaviour.html#explanation","title":"Explanation","text":"<ol> <li> <p>Initial Request</p> <ul> <li>A client sends a <code>MsgDecryptionRequest</code> containing encrypted data (<code>Ciphertext</code>).</li> <li>The ciphertext must be encrypted for the identity associated with this decryption engine.</li> <li>Any metadata needed for decryption should be included in the ciphertext structure.</li> </ul> </li> <li> <p>Guard Phase (<code>decryptGuard</code>)</p> <ul> <li>Validates incoming message structure and type.</li> <li>Validation steps:<ul> <li>Verifies message type is <code>MsgDecryptionRequest</code>.</li> <li>If validation fails, request is rejected immediately.</li> <li>On success, passes control to <code>decryptActionLabel</code>.</li> </ul> </li> </ul> </li> <li> <p>Action Phase (<code>decryptAction</code>)</p> <ul> <li>Processes valid decryption requests through these steps:<ul> <li>Extracts the ciphertext from the request.</li> <li>Retrieves the decryptor from the engine's configuration.</li> <li>Attempts to decrypt using the backend decryptor.</li> <li>Constructs appropriate response based on result.</li> </ul> </li> </ul> </li> <li> <p>Reply Generation</p> <ul> <li>Successful Case<ul> <li>Creates <code>MsgDecryptionReply</code> with:<ul> <li><code>data</code>: The decrypted plaintext.</li> <li><code>err</code>: None.</li> </ul> </li> </ul> </li> <li>Error Case<ul> <li>In all error cases, returns <code>MsgDecryptionReply</code> with:<ul> <li><code>data</code>: emptyByteString (zero-length byte string).</li> <li><code>err</code>: Some \"Decryption Failed\".</li> </ul> </li> </ul> </li> </ul> </li> <li> <p>Reply Delivery</p> <ul> <li>Reply is sent back to the original requester.</li> <li>Uses mailbox 0 (default mailbox for responses).</li> </ul> </li> </ol> <p>Note</p> <p>The commitment engine is stateless - each request is handled .</p>","tags":["node-architecture","identity-subsystem","engine","decryption","behaviour"]},{"location":"arch/node/engines/decryption_behaviour.html#action-arguments","title":"Action arguments","text":"","tags":["node-architecture","identity-subsystem","engine","decryption","behaviour"]},{"location":"arch/node/engines/decryption_behaviour.html#replyto","title":"<code>ReplyTo</code>","text":"<pre><code>type ReplyTo := mkReplyTo@{\n  whoAsked : Option EngineID;\n  mailbox : Option MailboxID;\n};\n</code></pre> <p>This action argument contains the address and mailbox ID of where the response message should be sent.</p> Arguments <code>whoAsked</code>: is the address of the engine that sent the message. <code>mailbox</code>: is the mailbox ID where the response message should be sent.","tags":["node-architecture","identity-subsystem","engine","decryption","behaviour"]},{"location":"arch/node/engines/decryption_behaviour.html#decryptionactionargument","title":"<code>DecryptionActionArgument</code>","text":"<pre><code>type DecryptionActionArgument :=\n  | DecryptionActionArgumentReplyTo ReplyTo\n  ;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","decryption","behaviour"]},{"location":"arch/node/engines/decryption_behaviour.html#decryptionactionarguments","title":"<code>DecryptionActionArguments</code>","text":"<pre><code>DecryptionActionArguments : Type := List DecryptionActionArgument;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","decryption","behaviour"]},{"location":"arch/node/engines/decryption_behaviour.html#actions","title":"Actions","text":"Auxiliary Juvix code","tags":["node-architecture","identity-subsystem","engine","decryption","behaviour"]},{"location":"arch/node/engines/decryption_behaviour.html#decryptionaction","title":"<code>DecryptionAction</code>","text":"<pre><code>DecryptionAction : Type :=\n  Action\n    DecryptionCfg\n    DecryptionLocalState\n    DecryptionMailboxState\n    DecryptionTimerHandle\n    DecryptionActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","decryption","behaviour"]},{"location":"arch/node/engines/decryption_behaviour.html#decryptionactioninput","title":"<code>DecryptionActionInput</code>","text":"<pre><code>DecryptionActionInput : Type :=\n  ActionInput\n    DecryptionCfg\n    DecryptionLocalState\n    DecryptionMailboxState\n    DecryptionTimerHandle\n    DecryptionActionArguments\n    Anoma.Msg;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","decryption","behaviour"]},{"location":"arch/node/engines/decryption_behaviour.html#decryptionactioneffect","title":"<code>DecryptionActionEffect</code>","text":"<pre><code>DecryptionActionEffect : Type :=\n  ActionEffect\n    DecryptionLocalState\n    DecryptionMailboxState\n    DecryptionTimerHandle\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","decryption","behaviour"]},{"location":"arch/node/engines/decryption_behaviour.html#decryptionactionexec","title":"<code>DecryptionActionExec</code>","text":"<pre><code>DecryptionActionExec : Type :=\n  ActionExec\n    DecryptionCfg\n    DecryptionLocalState\n    DecryptionMailboxState\n    DecryptionTimerHandle\n    DecryptionActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","decryption","behaviour"]},{"location":"arch/node/engines/decryption_behaviour.html#decryptaction","title":"<code>decryptAction</code>","text":"<p>Process a decryption request.</p> State update The state remains unchanged. Messages to be sent A <code>ReplyDecryption</code> message is sent back to the requester. Engines to be spawned No engine is created by this action. Timer updates No timers are set or cancelled. <pre><code>decryptAction\n  (input : DecryptionActionInput)\n  : Option DecryptionActionEffect :=\n  let\n    env := ActionInput.env input;\n    cfg := ActionInput.cfg input;\n    tt := ActionInput.trigger input;\n  in\n    case getEngineMsgFromTimestampedTrigger tt of {\n    | some emsg :=\n      case EngineMsg.msg emsg of {\n      | Anoma.PreMsg.MsgDecryption (DecryptionMsg.Request request) :=\n        let\n          decryptedData :=\n            Decryptor.decrypt\n              (DecryptionCfg.decryptor (EngineCfg.cfg cfg))\n              (DecryptionCfg.backend (EngineCfg.cfg cfg))\n              (RequestDecryption.data request);\n          responseMsg := case decryptedData of {\n            | none := ReplyDecryption.mkReplyDecryption@{\n                data := emptyByteString;\n                err := some \"Decryption Failed\"\n              }\n            | some plaintext := ReplyDecryption.mkReplyDecryption@{\n                data := plaintext;\n                err := none\n              }\n          }\n        in some ActionEffect.mk@{\n          env := env;\n          msgs := [\n            EngineMsg.mk@{\n              sender := getEngineIDFromEngineCfg cfg;\n              target := EngineMsg.sender emsg;\n              mailbox := some 0;\n              msg := Anoma.PreMsg.MsgDecryption (DecryptionMsg.Reply responseMsg)\n            }\n          ];\n          timers := [];\n          engines := []\n        }\n      | _ := none\n      }\n    | _ := none\n    };\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","decryption","behaviour"]},{"location":"arch/node/engines/decryption_behaviour.html#action-labels","title":"Action Labels","text":"","tags":["node-architecture","identity-subsystem","engine","decryption","behaviour"]},{"location":"arch/node/engines/decryption_behaviour.html#decryptactionlabel","title":"<code>decryptActionLabel</code>","text":"<pre><code>decryptActionLabel : DecryptionActionExec := ActionExec.Seq [ decryptAction ];\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","decryption","behaviour"]},{"location":"arch/node/engines/decryption_behaviour.html#guards","title":"Guards","text":"Auxiliary Juvix code","tags":["node-architecture","identity-subsystem","engine","decryption","behaviour"]},{"location":"arch/node/engines/decryption_behaviour.html#decryptionguard","title":"<code>DecryptionGuard</code>","text":"<p> <pre><code>DecryptionGuard : Type :=\n  Guard\n    DecryptionCfg\n    DecryptionLocalState\n    DecryptionMailboxState\n    DecryptionTimerHandle\n    DecryptionActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","identity-subsystem","engine","decryption","behaviour"]},{"location":"arch/node/engines/decryption_behaviour.html#decryptionguardoutput","title":"<code>DecryptionGuardOutput</code>","text":"<p> <pre><code>DecryptionGuardOutput : Type :=\n  GuardOutput\n    DecryptionCfg\n    DecryptionLocalState\n    DecryptionMailboxState\n    DecryptionTimerHandle\n    DecryptionActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","identity-subsystem","engine","decryption","behaviour"]},{"location":"arch/node/engines/decryption_behaviour.html#decryptionguardeval","title":"<code>DecryptionGuardEval</code>","text":"<p> <pre><code>DecryptionGuardEval : Type :=\n  GuardEval\n    DecryptionCfg\n    DecryptionLocalState\n    DecryptionMailboxState\n    DecryptionTimerHandle\n    DecryptionActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","identity-subsystem","engine","decryption","behaviour"]},{"location":"arch/node/engines/decryption_behaviour.html#decryptguard","title":"<code>decryptGuard</code>","text":"Condition Message type is <code>MsgDecryptionRequest</code>. <pre><code>decryptGuard\n  (tt : TimestampedTrigger DecryptionTimerHandle Anoma.Msg)\n  (cfg : EngineCfg DecryptionCfg)\n  (env : DecryptionEnv)\n  : Option DecryptionGuardOutput :=\n  case getEngineMsgFromTimestampedTrigger tt of {\n    | some EngineMsg.mk@{\n        msg := Anoma.PreMsg.MsgDecryption (DecryptionMsg.Request _);\n      } := some GuardOutput.mk@{\n        action := decryptActionLabel;\n        args := []\n      }\n    | _ := none\n  };\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","decryption","behaviour"]},{"location":"arch/node/engines/decryption_behaviour.html#the-decryption-behavior","title":"The Decryption Behavior","text":"","tags":["node-architecture","identity-subsystem","engine","decryption","behaviour"]},{"location":"arch/node/engines/decryption_behaviour.html#decryptionbehaviour","title":"<code>DecryptionBehaviour</code>","text":"<pre><code>DecryptionBehaviour : Type :=\n  EngineBehaviour\n    DecryptionCfg\n    DecryptionLocalState\n    DecryptionMailboxState\n    DecryptionTimerHandle\n    DecryptionActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","decryption","behaviour"]},{"location":"arch/node/engines/decryption_behaviour.html#instantiation","title":"Instantiation","text":"<pre><code>decryptionBehaviour : DecryptionBehaviour :=\n  EngineBehaviour.mk@{\n    guards :=\n      GuardEval.First [\n        decryptGuard\n      ];\n  };\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","decryption","behaviour"]},{"location":"arch/node/engines/decryption_config.html","title":"Decryption Configuration","text":"Juvix imports <pre><code>module arch.node.engines.decryption_config;\n\nimport prelude open;\nimport arch.node.engines.decryption_messages open;\nimport arch.node.types.engine open;\nimport arch.node.types.messages open;\nimport arch.system.identity.identity as Identity;\nimport arch.node.types.identities open;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","decryption","configuration"]},{"location":"arch/node/engines/decryption_config.html#decryption-configuration","title":"Decryption Configuration","text":"","tags":["node-architecture","identity-subsystem","engine","decryption","configuration"]},{"location":"arch/node/engines/decryption_config.html#overview","title":"Overview","text":"<p>The decryption engine configuration contains static information for decryption engine instances.</p>","tags":["node-architecture","identity-subsystem","engine","decryption","configuration"]},{"location":"arch/node/engines/decryption_config.html#the-decryption-configuration","title":"The Decryption Configuration","text":"<p>The configuration of a Decryption Engine instance includes the identity's decryption capabilities.</p>","tags":["node-architecture","identity-subsystem","engine","decryption","configuration"]},{"location":"arch/node/engines/decryption_config.html#decryptioncfg","title":"<code>DecryptionCfg</code>","text":"<pre><code>type DecryptionCfg := mk@{\n  decryptor : Identity.Decryptor Backend Plaintext Ciphertext;\n  backend : Backend;\n};\n</code></pre> Arguments <code>decryptor</code>: The decryptor for the decrypting. <code>backend</code>: The backend to use for decryption.","tags":["node-architecture","identity-subsystem","engine","decryption","configuration"]},{"location":"arch/node/engines/decryption_config.html#instantiation","title":"Instantiation","text":"<p>```juvix extract-module-statements module decryption_config_example;</p> <p>decryptionCfg : EngineCfg DecryptionCfg :=     EngineCfg.mk@{       node := PublicKey.Curve25519PubKey \"0xabcd1234\";       name := \"decryption\";       cfg := DecryptionCfg.mk@{         decryptor := Identity.Decryptor.mkDecryptor@{           decrypt := {_ x := some x};         };         backend := Backend.LocalMemory;       };     }   ; end; ```</p>","tags":["node-architecture","identity-subsystem","engine","decryption","configuration"]},{"location":"arch/node/engines/decryption_environment.html","title":"Decryption Environment","text":"Juvix imports <pre><code>module arch.node.engines.decryption_environment;\nimport prelude open;\nimport arch.node.engines.decryption_messages open;\nimport arch.node.types.engine_environment open;\nimport arch.node.types.identities open;\nimport arch.node.types.messages open;\nimport arch.node.types.anoma_message as Anoma open;\nimport arch.system.identity.identity open;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","decryption","environment"]},{"location":"arch/node/engines/decryption_environment.html#decryption-environment","title":"Decryption Environment","text":"","tags":["node-architecture","identity-subsystem","engine","decryption","environment"]},{"location":"arch/node/engines/decryption_environment.html#overview","title":"Overview","text":"<p>Each Decryption Engine instance is associated with a specific identity and handles decryption requests for that identity. The environment maintains the necessary state for decryption operations.</p>","tags":["node-architecture","identity-subsystem","engine","decryption","environment"]},{"location":"arch/node/engines/decryption_environment.html#mailbox-states","title":"Mailbox states","text":"<p>The Decryption Engine does not require complex mailbox states. We define the mailbox state as <code>Unit</code>.</p>","tags":["node-architecture","identity-subsystem","engine","decryption","environment"]},{"location":"arch/node/engines/decryption_environment.html#decryptionmailboxstate","title":"<code>DecryptionMailboxState</code>","text":"<pre><code>syntax alias DecryptionMailboxState := Unit;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","decryption","environment"]},{"location":"arch/node/engines/decryption_environment.html#local-state","title":"Local state","text":"<p>The decryption engine is stateless.</p>","tags":["node-architecture","identity-subsystem","engine","decryption","environment"]},{"location":"arch/node/engines/decryption_environment.html#decryptionlocalstate","title":"<code>DecryptionLocalState</code>","text":"<pre><code>syntax alias DecryptionLocalState := Unit;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","decryption","environment"]},{"location":"arch/node/engines/decryption_environment.html#timer-handle","title":"Timer Handle","text":"<p>The Decryption Engine does not require a timer handle type. Therefore, we define the timer handle type as <code>Unit</code>.</p>","tags":["node-architecture","identity-subsystem","engine","decryption","environment"]},{"location":"arch/node/engines/decryption_environment.html#decryptiontimerhandle","title":"<code>DecryptionTimerHandle</code>","text":"<pre><code>syntax alias DecryptionTimerHandle := Unit;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","decryption","environment"]},{"location":"arch/node/engines/decryption_environment.html#the-decryption-environment","title":"The Decryption Environment","text":"","tags":["node-architecture","identity-subsystem","engine","decryption","environment"]},{"location":"arch/node/engines/decryption_environment.html#decryptionenv","title":"<code>DecryptionEnv</code>","text":"<pre><code>DecryptionEnv : Type :=\n  EngineEnv\n    DecryptionLocalState\n    DecryptionMailboxState\n    DecryptionTimerHandle\n    Anoma.Msg;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","decryption","environment"]},{"location":"arch/node/engines/decryption_environment.html#instantiation","title":"Instantiation","text":"<p>```juvix extract-module-statements module decryption_environment_example;</p> <p>decryptionEnv : DecryptionEnv :=     EngineEnv.mk@{       localState := unit;       mailboxCluster := Map.empty;       acquaintances := Set.empty;       timers := []     }   ; end; ```</p>","tags":["node-architecture","identity-subsystem","engine","decryption","environment"]},{"location":"arch/node/engines/decryption_messages.html","title":"Decryption Messages","text":"Juvix imports <pre><code>module arch.node.engines.decryption_messages;\nimport prelude open;\nimport arch.node.types.identities open;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","decryption","message-types"]},{"location":"arch/node/engines/decryption_messages.html#decryption-messages","title":"Decryption Messages","text":"","tags":["node-architecture","identity-subsystem","engine","decryption","message-types"]},{"location":"arch/node/engines/decryption_messages.html#message-interface","title":"Message interface","text":"<pre><code>type DecryptionMsg :=\n  | Request RequestDecryption\n  | Reply ReplyDecryption\n  ;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","decryption","message-types"]},{"location":"arch/node/engines/decryption_messages.html#message-sequence-diagrams","title":"Message sequence diagrams","text":"","tags":["node-architecture","identity-subsystem","engine","decryption","message-types"]},{"location":"arch/node/engines/decryption_messages.html#request-sequence","title":"Request sequence","text":"<pre><code>sequenceDiagram\n    participant C as Client\n    participant DE as Decryption Engine\n\n    C-&gt;&gt;DE: RequestDecryption(encryptedData)\n    Note over DE: Attempt to decrypt data\n    alt Decryption Successful\n        DE--&gt;&gt;C: ReplyDecryption(decryptedData, err=none)\n    else Decryption Failed\n        DE--&gt;&gt;C: ReplyDecryption(emptyByteString, err=\"Decryption Failed\")\n    end</code></pre>  Sequence diagram for decryption.","tags":["node-architecture","identity-subsystem","engine","decryption","message-types"]},{"location":"arch/node/engines/decryption_messages.html#message-types","title":"Message types","text":"","tags":["node-architecture","identity-subsystem","engine","decryption","message-types"]},{"location":"arch/node/engines/decryption_messages.html#requestdecryption","title":"<code>RequestDecryption</code>","text":"<pre><code>type RequestDecryption := mkRequestDecryption {\n  data : Ciphertext\n};\n</code></pre> <p>A <code>RequestDecryption</code> instructs a decryption engine instance to decrypt data.</p> Arguments <code>data</code>: The encrypted ciphertext to decrypt.","tags":["node-architecture","identity-subsystem","engine","decryption","message-types"]},{"location":"arch/node/engines/decryption_messages.html#replydecryption","title":"<code>ReplyDecryption</code>","text":"<pre><code>type ReplyDecryption := mkReplyDecryption {\n  data : Plaintext;\n  err : Option String\n};\n</code></pre> <p>A <code>ReplyDecryption</code> contains the data decrypted by a decryption engine instance in response to a <code>RequestDecryption</code>.</p> Arguments <code>data</code>: The decrypted data. <code>err</code>: An error message if decryption failed.","tags":["node-architecture","identity-subsystem","engine","decryption","message-types"]},{"location":"arch/node/engines/decryption_messages.html#decryptionmsg","title":"<code>DecryptionMsg</code>","text":"<pre><code>type DecryptionMsg :=\n  | Request RequestDecryption\n  | Reply ReplyDecryption\n  ;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","decryption","message-types"]},{"location":"arch/node/engines/decryption_messages.html#engine-components","title":"Engine components","text":"<ul> <li>Decryption Configuration</li> <li>Decryption Environment</li> <li>Decryption Behaviour</li> </ul>","tags":["node-architecture","identity-subsystem","engine","decryption","message-types"]},{"location":"arch/node/engines/encryption.html","title":"Encryption Engine","text":"Juvix imports <pre><code>module arch.node.engines.encryption;\n\nimport prelude open;\nimport arch.node.types.engine open;\n\nimport arch.node.engines.encryption_messages open public;\nimport arch.node.engines.encryption_environment open public;\nimport arch.node.engines.encryption_behaviour open public;\n\nimport arch.node.engines.encryption_config open public;\nimport arch.node.engines.encryption_messages open public;\nimport arch.node.engines.encryption_environment open public;\nimport arch.node.engines.encryption_behaviour open public;\n\nimport arch.node.types.anoma as Anoma open;\n\nopen encryption_config_example;\nopen encryption_environment_example;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","encryption","engine-definition"]},{"location":"arch/node/engines/encryption.html#encryption-engine","title":"Encryption Engine","text":"<p>The Encryption Engine provides encryption services within Anoma, allowing data to be securely encrypted for specific identities while supporting flexible encryption policies through integration with reads-for relationships. One may think of it as a smart mail service that can seal messages so that only intended recipients can read them, with the additional ability to consider pre-approved sharing relationships when sealing the message.</p> <p>When users request encryption (via a <code>MsgEncryptionRequest</code> message), they provide the data to encrypt (a <code>Plaintext</code>), the target identity (an <code>ExternalIdentity</code>), and whether to consider reads-for relationships (<code>useReadsFor</code>). The engine has two main operating modes:</p> Direct encryption (<code>useReadsFor: false</code>) <p>The engine immediately encrypts the data for the specified identity and returns the encrypted result (via s <code>MsgEncryptionReply</code> containing a <code>Ciphertext</code>).</p> ReadsFor-aware encryption (<code>useReadsFor: true</code>) <p>The engine first queries a ReadsFor Engine to check for any relevant reads-for relationships, then encrypts the data in a way that respects these relationships. This mode enables scenarios where data should be accessible not just to the direct recipient, but also to other identities with approved access rights.</p> On spawning <p>The engine is spawned by the system when encryption services are needed and operates statelessly except when handling reads-for queries. For reads-for cases, it maintains a temporary queue of pending encryption requests while waiting for relationship evidence.</p>","tags":["node-architecture","identity-subsystem","engine","encryption","engine-definition"]},{"location":"arch/node/engines/encryption.html#engine-components","title":"Engine components","text":"<ul> <li>Encryption Messages</li> <li>Encryption Configuration</li> <li>Encryption Environment</li> <li>Encryption Behaviour</li> </ul>","tags":["node-architecture","identity-subsystem","engine","encryption","engine-definition"]},{"location":"arch/node/engines/encryption.html#type","title":"Type","text":"<pre><code>EncryptionEngine : Type :=\n  Engine\n    EncryptionCfg\n    EncryptionLocalState\n    EncryptionMailboxState\n    EncryptionTimerHandle\n    EncryptionActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","encryption","engine-definition"]},{"location":"arch/node/engines/encryption.html#example-of-a-encryption-engine","title":"Example of a encryption engine","text":"<pre><code>exampleEncryptionEngine : EncryptionEngine :=\n  Engine.mk@{\n    cfg := encryptionCfg;\n    env := encryptionEnv;\n    behaviour := encryptionBehaviour;\n  };\n</code></pre> <p>where <code>encryptionCfg</code> is defined as follows:</p> <p>```juvix extract-module-statements module encryption_config_example;</p> <p>encryptionCfg : EngineCfg EncryptionCfg :=     EngineCfg.mk@{       node := PublicKey.Curve25519PubKey \"0xabcd1234\";       name := \"encryption\";       cfg := EncryptionCfg.mk@{         encryptor := { _ := Encryptor.mkEncryptor@{           encrypt := { x := x};           encryptorHash := HASH.mkHASH@{             ordKey := OrdKey.mkOrdKey@{                 compare := Ord.compare             };             hash := {x := \"0x1234abcd\"};           };         }};         backend := Backend.LocalMemory;         readsForEngineAddress := mkPair none \"Blah\";       };     }   ; end; <pre><code>`encryptionEnv` is defined as follows:\n\n```juvix extract-module-statements\nmodule encryption_environment_example;\n\nencryptionEnv : EncryptionEnv :=\n    EngineEnv.mk@{\n      localState := EncryptionLocalState.mk@{\n        pendingRequests := Map.empty\n      };\n      mailboxCluster := Map.empty;\n      acquaintances := Set.empty;\n      timers := []\n    }\n  ;\nend;\n</code></pre></p> <p>and <code>encryptionBehaviour</code> is defined as follows:</p> <pre><code>encryptionBehaviour : EncryptionBehaviour :=\n  EngineBehaviour.mk@{\n    guards :=\n      GuardEval.First [\n        encryptGuard;\n        readsForReplyGuard\n      ];\n  };\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","encryption","engine-definition"]},{"location":"arch/node/engines/encryption_behaviour.html","title":"Encryption Behaviour","text":"Juvix imports <pre><code>module arch.node.engines.encryption_behaviour;\n\nimport prelude open;\nimport arch.system.identity.identity open hiding {ExternalIdentity};\nimport arch.node.engines.encryption_environment open;\nimport arch.node.engines.encryption_messages open;\nimport arch.node.engines.encryption_config open;\nimport arch.node.engines.reads_for_messages open;\nimport arch.node.types.anoma as Anoma open;\nimport arch.node.types.engine open;\nimport arch.node.types.identities open;\nimport arch.node.types.messages open;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","encryption","behaviour"]},{"location":"arch/node/engines/encryption_behaviour.html#encryption-behaviour","title":"Encryption Behaviour","text":"","tags":["node-architecture","identity-subsystem","engine","encryption","behaviour"]},{"location":"arch/node/engines/encryption_behaviour.html#overview","title":"Overview","text":"<p>The behavior of the Encryption Engine defines how it processes incoming encryption requests and produces the corresponding responses.</p>","tags":["node-architecture","identity-subsystem","engine","encryption","behaviour"]},{"location":"arch/node/engines/encryption_behaviour.html#encryption-action-flowcharts","title":"Encryption Action Flowcharts","text":"","tags":["node-architecture","identity-subsystem","engine","encryption","behaviour"]},{"location":"arch/node/engines/encryption_behaviour.html#encryptaction-flowchart","title":"<code>encryptAction</code> flowchart","text":"<pre><code>flowchart TD\n    Start([Client Request]) --&gt; MsgReq[MsgEncryptionRequest&lt;br/&gt;data: Plaintext&lt;br/&gt;externalIdentity: ExternalIdentity&lt;br/&gt;useReadsFor: Bool]\n\n    subgraph Guard[\"encryptGuard\"]\n        MsgReq --&gt; ValidType{Is message type&lt;br/&gt;EncryptionRequest?}\n        ValidType --&gt;|No| Reject([Reject Request])\n        ValidType --&gt;|Yes| ActionEntry[Enter Action Phase]\n    end\n\n    ActionEntry --&gt; Action\n\n    subgraph Action[\"encryptAction\"]\n        direction TB\n        CheckReadsFor{useReadsFor?}\n        CheckReadsFor --&gt;|No| DirectPath[Get encryptor&lt;br/&gt;Encrypt directly]\n        CheckReadsFor --&gt;|Yes| CheckPending{Previous requests&lt;br/&gt;for this identity?}\n        CheckPending --&gt;|Yes| Queue[Add to pending requests]\n        CheckPending --&gt;|No| Init[Initialize pending requests&lt;br/&gt;Send ReadsFor query]\n        DirectPath --&gt; CreateResp[Create response]\n    end\n\n    CreateResp --&gt; DirectResponse[MsgEncryptionReply&lt;br/&gt;ciphertext: Ciphertext&lt;br/&gt;err: none]\n    Queue &amp; Init --&gt; Wait([Await ReadsFor Reply])\n    DirectResponse --&gt; Client([Return to Client])</code></pre> <code>encryptAction</code> flowchart","tags":["node-architecture","identity-subsystem","engine","encryption","behaviour"]},{"location":"arch/node/engines/encryption_behaviour.html#explanation","title":"Explanation","text":"<ol> <li> <p>Initial Request</p> <ul> <li>A client sends a <code>MsgEncryptionRequest</code> containing:<ul> <li><code>data</code>: The plaintext that needs to be encrypted</li> <li><code>externalIdentity</code>: The target identity to encrypt for</li> <li><code>useReadsFor</code>: Boolean flag indicating whether to use reads-for relationships</li> </ul> </li> </ul> </li> <li> <p>Guard Phase (<code>encryptGuard</code>)</p> <ul> <li>Validates that the incoming message is a proper encryption request</li> <li>Checks occur in the following order:<ul> <li>Verifies message type is <code>MsgEncryptionRequest</code></li> <li>If validation fails, request is rejected without entering the action phase</li> <li>On success, passes control to <code>encryptActionLabel</code></li> </ul> </li> </ul> </li> <li> <p>Action Phase (<code>encryptAction</code>)</p> <ul> <li>First decision point: Check <code>useReadsFor</code> flag</li> </ul> <ul> <li>Direct Path (<code>useReadsFor: false</code>):<ul> <li>Gets encryptor from engine's configuration</li> <li>Encrypts data directly for the target identity using empty evidence set</li> <li>Creates <code>MsgEncryptionReply</code> with:<ul> <li><code>ciphertext</code>: The encrypted data</li> <li><code>err</code>: None</li> </ul> </li> <li>Returns response immediately to client</li> </ul> </li> </ul> <ul> <li>ReadsFor Path (<code>useReadsFor: true</code>):<ul> <li>Checks if there are existing pending requests for this identity</li> <li>If this is the first request:<ul> <li>Initializes a new pending request list</li> <li>Adds current request to the list</li> <li>Sends <code>MsgQueryReadsForEvidenceRequest</code> to ReadsFor engine</li> <li>Awaits reply</li> </ul> </li> <li>If there are existing pending requests:<ul> <li>Adds current request to existing pending list</li> <li>Awaits existing query's reply</li> </ul> </li> <li>No immediate response is sent to client</li> </ul> </li> </ul> </li> <li> <p>State Changes</p> <ul> <li>Direct Path: No state changes</li> <li>ReadsFor Path: Updates <code>pendingRequests</code> map in local state<ul> <li>Key: <code>externalIdentity</code></li> <li>Value: List of pending requests (pairs of requester ID and plaintext)</li> </ul> </li> </ul> </li> <li> <p>Messages Generated</p> <ul> <li>Direct Path:<ul> <li><code>MsgEncryptionReply</code> sent back to requester</li> <li>Sends to mailbox 0 (the default)</li> </ul> </li> <li>ReadsFor Path:<ul> <li>If first request: <code>MsgQueryReadsForEvidenceRequest</code> sent to ReadsFor engine</li> <li>No immediate response to requester</li> </ul> </li> </ul> </li> </ol>","tags":["node-architecture","identity-subsystem","engine","encryption","behaviour"]},{"location":"arch/node/engines/encryption_behaviour.html#handlereadsforreplyaction-flowchart","title":"<code>handleReadsForReplyAction</code> flowchart","text":"<pre><code>flowchart TD\n    Start([ReadsFor Reply]) --&gt; Reply[MsgQueryReadsForEvidenceReply&lt;br/&gt;evidence: ReadsForEvidence&lt;br/&gt;externalIdentity: ExternalIdentity]\n\n    subgraph Guard[\"readsForReplyGuard\"]\n        Reply --&gt; ValidSource{From correct&lt;br/&gt;ReadsFor engine?}\n        ValidSource --&gt;|No| Reject([Reject Reply])\n        ValidSource --&gt;|Yes| ActionEntry[Enter Action Phase]\n    end\n\n    ActionEntry --&gt; Action\n\n    subgraph Action[\"handleReadsForReplyAction\"]\n        direction TB\n        GetReqs[Get pending requests&lt;br/&gt;for this identity]\n        GetReqs --&gt; Process[For each request:&lt;br/&gt;Encrypt with evidence]\n        Process --&gt; Clear[Clear pending requests]\n    end\n\n    Clear --&gt; Responses[Send MsgEncryptionReply&lt;br/&gt;to each waiting client]\n    Responses --&gt; Client([Return to Clients])</code></pre> <code>handleReadsForReplyAction</code> flowchart","tags":["node-architecture","identity-subsystem","engine","encryption","behaviour"]},{"location":"arch/node/engines/encryption_behaviour.html#explanation_1","title":"Explanation","text":"<ol> <li> <p>Initial Input</p> <ul> <li>The ReadsFor Engine sends a <code>MsgQueryReadsForEvidenceReply</code> containing:<ul> <li><code>evidence</code>: The ReadsFor evidence for the requested identity</li> <li><code>externalIdentity</code>: The identity the evidence relates to</li> <li><code>err</code>: Optional error message if evidence retrieval failed</li> </ul> </li> </ul> </li> <li> <p>Guard Phase (<code>readsForReplyGuard</code>)</p> <ul> <li>Validates incoming message in following order:<ul> <li>Checks message type is <code>MsgQueryReadsForEvidenceReply</code></li> <li>Verifies the message sender matches the configured ReadsFor engine address</li> <li>If either check fails, request is rejected without entering action phase</li> <li>On success, passes control to <code>handleReadsForReplyActionLabel</code></li> </ul> </li> </ul> </li> <li> <p>Action Phase (<code>handleReadsForReplyAction</code>)</p> <ul> <li>Processing occurs in these steps:<ul> <li>Retrieves all pending encryption requests for the specified identity from state</li> <li>For each pending request:<ul> <li>Gets encryptor from configuration</li> <li>Applies ReadsFor evidence to encryptor</li> <li>Encrypts the pending plaintext data</li> <li>Creates response message with encrypted result</li> </ul> </li> <li>Clears all processed requests from the pending queue</li> <li>Sends responses to all waiting clients</li> </ul> </li> </ul> </li> <li> <p>Response Generation</p> <ul> <li>For each pending request, creates <code>MsgEncryptionReply</code> with:<ul> <li><code>ciphertext</code>: The encrypted data using the provided evidence</li> <li><code>err</code>: None for successful encryption</li> </ul> </li> </ul> </li> <li> <p>Response Delivery</p> <ul> <li>Each response is sent back to its original requester</li> <li>Uses mailbox  0 (the default) for all responses</li> </ul> </li> </ol> <p>Important Notes</p> <ul> <li>All pending requests for an identity are processed in a single batch when evidence arrives</li> <li>The same evidence is used for all pending requests for that identity</li> <li>If no pending requests exist for the identity when evidence arrives, the evidence is discarded</li> </ul>","tags":["node-architecture","identity-subsystem","engine","encryption","behaviour"]},{"location":"arch/node/engines/encryption_behaviour.html#action-arguments","title":"Action arguments","text":"","tags":["node-architecture","identity-subsystem","engine","encryption","behaviour"]},{"location":"arch/node/engines/encryption_behaviour.html#replyto","title":"<code>ReplyTo</code>","text":"<pre><code>type ReplyTo := mkReplyTo@{\n  whoAsked : Option EngineID;\n  mailbox : Option MailboxID\n};\n</code></pre> <p>This action argument contains the address and mailbox ID of where the response message should be sent.</p> Arguments <code>whoAsked</code>: is the address of the engine that sent the message. <code>mailbox</code>: is the mailbox ID where the response message should be sent.","tags":["node-architecture","identity-subsystem","engine","encryption","behaviour"]},{"location":"arch/node/engines/encryption_behaviour.html#encryptionactionargument","title":"<code>EncryptionActionArgument</code>","text":"<pre><code>type EncryptionActionArgument :=\n  | EncryptionActionArgumentReplyTo ReplyTo\n  ;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","encryption","behaviour"]},{"location":"arch/node/engines/encryption_behaviour.html#encryptionactionarguments","title":"<code>EncryptionActionArguments</code>","text":"<pre><code>EncryptionActionArguments : Type := List EncryptionActionArgument;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","encryption","behaviour"]},{"location":"arch/node/engines/encryption_behaviour.html#actions","title":"Actions","text":"Auxiliary Juvix code","tags":["node-architecture","identity-subsystem","engine","encryption","behaviour"]},{"location":"arch/node/engines/encryption_behaviour.html#encryptionaction","title":"<code>EncryptionAction</code>","text":"<pre><code>EncryptionAction : Type :=\n  Action\n    EncryptionCfg\n    EncryptionLocalState\n    EncryptionMailboxState\n    EncryptionTimerHandle\n    EncryptionActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","encryption","behaviour"]},{"location":"arch/node/engines/encryption_behaviour.html#encryptionactioninput","title":"<code>EncryptionActionInput</code>","text":"<pre><code>EncryptionActionInput : Type :=\n  ActionInput\n    EncryptionCfg\n    EncryptionLocalState\n    EncryptionMailboxState\n    EncryptionTimerHandle\n    EncryptionActionArguments\n    Anoma.Msg;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","encryption","behaviour"]},{"location":"arch/node/engines/encryption_behaviour.html#encryptionactioneffect","title":"<code>EncryptionActionEffect</code>","text":"<pre><code>EncryptionActionEffect : Type :=\n  ActionEffect\n    EncryptionLocalState\n    EncryptionMailboxState\n    EncryptionTimerHandle\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","encryption","behaviour"]},{"location":"arch/node/engines/encryption_behaviour.html#encryptionactionexec","title":"<code>EncryptionActionExec</code>","text":"<pre><code>EncryptionActionExec : Type :=\n  ActionExec\n    EncryptionCfg\n    EncryptionLocalState\n    EncryptionMailboxState\n    EncryptionTimerHandle\n    EncryptionActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","encryption","behaviour"]},{"location":"arch/node/engines/encryption_behaviour.html#encryptaction","title":"<code>encryptAction</code>","text":"<p>Process an encryption request.</p> State update If <code>useReadsFor</code> is true, the state is updated to store pending requests. Otherwise, the state remains unchanged. Messages to be sent If <code>useReadsFor</code> is false, a <code>ReplyEncrypt</code> message is sent back to the requester. If <code>useReadsFor</code> is true and it's the first request for this identity, a <code>QueryReadsForEvidenceRequest</code> is sent to the ReadsFor Engine. Engines to be spawned No engines are created by this action. Timer updates No timers are set or cancelled. <pre><code>encryptAction\n  (input : EncryptionActionInput)\n  : Option EncryptionActionEffect :=\n  let\n    env := ActionInput.env input;\n    cfg := ActionInput.cfg input;\n    tt := ActionInput.trigger input;\n    localState := EngineEnv.localState env;\n  in\n    case getEngineMsgFromTimestampedTrigger tt of {\n    | some emsg :=\n      case EngineMsg.msg emsg of {\n      | Anoma.PreMsg.MsgEncryption (EncryptionMsg.Request (RequestEncrypt.mkRequestEncrypt data externalIdentity useReadsFor)) :=\n        case useReadsFor of {\n        | false :=\n          some ActionEffect.mk@{\n            env := env;\n            msgs := [\n              EngineMsg.mk@{\n                sender := getEngineIDFromEngineCfg cfg;\n                target := EngineMsg.sender emsg;\n                mailbox := some 0;\n                msg := Anoma.PreMsg.MsgEncryption (EncryptionMsg.Reply (\n                  ReplyEncrypt.mkReplyEncrypt@{\n                    ciphertext := Encryptor.encrypt\n                      (EncryptionCfg.encryptor (EngineCfg.cfg cfg) Set.empty externalIdentity)\n                      (EncryptionCfg.backend (EngineCfg.cfg cfg))\n                      data;\n                    err := none\n                  }))\n              }\n            ];\n            timers := [];\n            engines := []\n          }\n        | true :=\n          let existingRequests := Map.lookup externalIdentity (EncryptionLocalState.pendingRequests localState);\n              newPendingList := case existingRequests of {\n                | some reqs := reqs ++ [mkPair (EngineMsg.sender emsg) data]\n                | none := [mkPair (EngineMsg.sender emsg) data]\n              };\n              newLocalState := localState@EncryptionLocalState{\n                pendingRequests := Map.insert externalIdentity newPendingList (EncryptionLocalState.pendingRequests localState)\n              };\n          in some ActionEffect.mk@{\n              env := env@EngineEnv{\n                localState := newLocalState\n              };\n              msgs := case existingRequests of {\n                | some _ := []\n                | none := [\n                    EngineMsg.mk@{\n                      sender := getEngineIDFromEngineCfg cfg;\n                      target := EncryptionCfg.readsForEngineAddress (EngineCfg.cfg cfg);\n                      mailbox := some 0;\n                      msg := Anoma.PreMsg.MsgReadsFor (ReadsForMsg.QueryReadsForEvidenceRequest (\n                        RequestQueryReadsForEvidence.mkRequestQueryReadsForEvidence@{\n                          externalIdentity := externalIdentity\n                        }))\n                    }\n                  ]\n              };\n              timers := [];\n              engines := []\n            }\n        }\n      | _ := none\n      }\n    | _ := none\n    };\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","encryption","behaviour"]},{"location":"arch/node/engines/encryption_behaviour.html#handlereadsforreplyaction","title":"<code>handleReadsForReplyAction</code>","text":"<p>Process <code>reads-for</code> evidence response.</p> State update The state is updated to remove processed pending requests. Messages to be sent <code>ReplyEncrypt</code> messages are sent to all requesters who were waiting for this ReadsFor evidence. Engines to be spawned No engines are created by this action. Timer updates No timers are set or cancelled. <pre><code>handleReadsForReplyAction\n  (input : EncryptionActionInput)\n  : Option EncryptionActionEffect :=\n  let\n    env := ActionInput.env input;\n    cfg := ActionInput.cfg input;\n    tt := ActionInput.trigger input;\n    localState := EngineEnv.localState env;\n  in\n    case getEngineMsgFromTimestampedTrigger tt of {\n    | some emsg :=\n      case EngineMsg.msg emsg of {\n      | Anoma.PreMsg.MsgReadsFor (ReadsForMsg.QueryReadsForEvidenceReply (ReplyQueryReadsForEvidence.mkReplyQueryReadsForEvidence externalIdentity evidence err)) :=\n        case Map.lookup externalIdentity (EncryptionLocalState.pendingRequests localState) of {\n        | some reqs :=\n          let newLocalState := localState@EncryptionLocalState{\n                pendingRequests := Map.delete externalIdentity (EncryptionLocalState.pendingRequests localState)\n              };\n          in some ActionEffect.mk@{\n              env := env@EngineEnv{\n                localState := newLocalState\n              };\n              msgs := map\n                (\\{req := let whoAsked := fst req;\n                            data := snd req;\n                         in EngineMsg.mk@{\n                              sender := getEngineIDFromEngineCfg cfg;\n                              target := whoAsked;\n                              mailbox := some 0;\n                              msg := Anoma.PreMsg.MsgEncryption (EncryptionMsg.Reply (\n                                ReplyEncrypt.mkReplyEncrypt@{\n                                  ciphertext := Encryptor.encrypt\n                                    (EncryptionCfg.encryptor (EngineCfg.cfg cfg) evidence externalIdentity)\n                                    (EncryptionCfg.backend (EngineCfg.cfg cfg))\n                                    data;\n                                  err := none\n                                }))\n                            }})\n                reqs;\n              timers := [];\n              engines := []\n            }\n        | none := none\n        }\n      | _ := none\n      }\n    | _ := none\n    };\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","encryption","behaviour"]},{"location":"arch/node/engines/encryption_behaviour.html#action-labels","title":"Action Labels","text":"","tags":["node-architecture","identity-subsystem","engine","encryption","behaviour"]},{"location":"arch/node/engines/encryption_behaviour.html#encryptactionlabel","title":"<code>encryptActionLabel</code>","text":"<pre><code>encryptActionLabel : EncryptionActionExec := ActionExec.Seq [ encryptAction ];\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","encryption","behaviour"]},{"location":"arch/node/engines/encryption_behaviour.html#handlereadsforreplyactionlabel","title":"<code>handleReadsForReplyActionLabel</code>","text":"<pre><code>handleReadsForReplyActionLabel : EncryptionActionExec := ActionExec.Seq [ handleReadsForReplyAction ];\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","encryption","behaviour"]},{"location":"arch/node/engines/encryption_behaviour.html#guards","title":"Guards","text":"Auxiliary Juvix code","tags":["node-architecture","identity-subsystem","engine","encryption","behaviour"]},{"location":"arch/node/engines/encryption_behaviour.html#encryptionguard","title":"<code>EncryptionGuard</code>","text":"<p> <pre><code>EncryptionGuard : Type :=\n  Guard\n    EncryptionCfg\n    EncryptionLocalState\n    EncryptionMailboxState\n    EncryptionTimerHandle\n    EncryptionActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","identity-subsystem","engine","encryption","behaviour"]},{"location":"arch/node/engines/encryption_behaviour.html#encryptionguardoutput","title":"<code>EncryptionGuardOutput</code>","text":"<p> <pre><code>EncryptionGuardOutput : Type :=\n  GuardOutput\n    EncryptionCfg\n    EncryptionLocalState\n    EncryptionMailboxState\n    EncryptionTimerHandle\n    EncryptionActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","identity-subsystem","engine","encryption","behaviour"]},{"location":"arch/node/engines/encryption_behaviour.html#encryptguard","title":"<code>encryptGuard</code>","text":"Condition Message type is <code>MsgEncryptionRequest</code>. <pre><code>encryptGuard\n  (tt : TimestampedTrigger EncryptionTimerHandle Anoma.Msg)\n  (cfg : EngineCfg EncryptionCfg)\n  (env : EncryptionEnv)\n  : Option EncryptionGuardOutput :=\n  case getEngineMsgFromTimestampedTrigger tt of {\n  | some EngineMsg.mk@{\n      msg := Anoma.PreMsg.MsgEncryption (EncryptionMsg.Request _);\n    } :=\n    some GuardOutput.mk@{\n      action := encryptActionLabel;\n      args := []\n    }\n  | _ := none\n  };\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","encryption","behaviour"]},{"location":"arch/node/engines/encryption_behaviour.html#readsforreplyguard","title":"<code>readsForReplyGuard</code>","text":"<pre><code>readsForReplyGuard\n  (tt : TimestampedTrigger EncryptionTimerHandle Anoma.Msg)\n  (cfg : EngineCfg EncryptionCfg)\n  (env : EncryptionEnv)\n  : Option EncryptionGuardOutput :=\n  case getEngineMsgFromTimestampedTrigger tt of {\n  | some emsg :=\n    case EngineMsg.msg emsg of {\n    | Anoma.PreMsg.MsgReadsFor (ReadsForMsg.QueryReadsForEvidenceReply _) :=\n      case isEqual (Ord.compare (EngineMsg.sender emsg) (EncryptionCfg.readsForEngineAddress (EngineCfg.cfg cfg))) of {\n      | true := some GuardOutput.mk@{\n          action := handleReadsForReplyActionLabel;\n          args := []\n        }\n      | false := none\n      }\n    | _ := none\n    }\n  | _ := none\n  };\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","encryption","behaviour"]},{"location":"arch/node/engines/encryption_behaviour.html#the-encryption-behaviour","title":"The Encryption Behaviour","text":"","tags":["node-architecture","identity-subsystem","engine","encryption","behaviour"]},{"location":"arch/node/engines/encryption_behaviour.html#encryptionbehaviour","title":"<code>EncryptionBehaviour</code>","text":"<pre><code>EncryptionBehaviour : Type :=\n  EngineBehaviour\n    EncryptionCfg\n    EncryptionLocalState\n    EncryptionMailboxState\n    EncryptionTimerHandle\n    EncryptionActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","encryption","behaviour"]},{"location":"arch/node/engines/encryption_behaviour.html#instantiation","title":"Instantiation","text":"<pre><code>encryptionBehaviour : EncryptionBehaviour :=\n  EngineBehaviour.mk@{\n    guards :=\n      GuardEval.First [\n        encryptGuard;\n        readsForReplyGuard\n      ];\n  };\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","encryption","behaviour"]},{"location":"arch/node/engines/encryption_config.html","title":"Encryption Configuration","text":"Juvix imports <pre><code>module arch.node.engines.encryption_config;\n\nimport prelude open;\nimport arch.node.engines.encryption_messages open;\nimport arch.node.types.engine open;\nimport arch.node.types.messages open;\nimport arch.node.types.identities open;\nimport arch.system.identity.identity open hiding {ExternalIdentity};\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","encryption","configuration"]},{"location":"arch/node/engines/encryption_config.html#encryption-configuration","title":"Encryption Configuration","text":"","tags":["node-architecture","identity-subsystem","engine","encryption","configuration"]},{"location":"arch/node/engines/encryption_config.html#overview","title":"Overview","text":"<p>The Encryption engine configuration contains static information for Encryption engine instances.</p>","tags":["node-architecture","identity-subsystem","engine","encryption","configuration"]},{"location":"arch/node/engines/encryption_config.html#the-encryption-configuration","title":"The Encryption Configuration","text":"<p>The configuration of an <code>Encryption</code> Engine instance includes the identity's encryption capabilities, the address of an associated <code>ReadsFor</code> engine, and a specific backend.</p>","tags":["node-architecture","identity-subsystem","engine","encryption","configuration"]},{"location":"arch/node/engines/encryption_config.html#encryptioncfg","title":"<code>EncryptionCfg</code>","text":"<pre><code>type EncryptionCfg := mk@{\n  encryptor : Set ReadsForEvidence -&gt; ExternalIdentity -&gt; Encryptor ByteString Backend Plaintext Ciphertext;\n  backend : Backend;\n  readsForEngineAddress : EngineID;\n}\n</code></pre> Arguments <code>encryptor</code>: Function to generate encryptor for a set of evidence and an identity. <code>backend</code>: The backend to use for encryption. <code>readsForEngineAddress</code>: The address of the associated ReadFor engine.","tags":["node-architecture","identity-subsystem","engine","encryption","configuration"]},{"location":"arch/node/engines/encryption_config.html#instantiation","title":"Instantiation","text":"<p>```juvix extract-module-statements module encryption_config_example;</p> <p>encryptionCfg : EngineCfg EncryptionCfg :=     EngineCfg.mk@{       node := PublicKey.Curve25519PubKey \"0xabcd1234\";       name := \"encryption\";       cfg := EncryptionCfg.mk@{         encryptor := { _ := Encryptor.mkEncryptor@{           encrypt := { x := x};           encryptorHash := HASH.mkHASH@{             ordKey := OrdKey.mkOrdKey@{                 compare := Ord.compare             };             hash := {x := \"0x1234abcd\"};           };         }};         backend := Backend.LocalMemory;         readsForEngineAddress := mkPair none \"Blah\";       };     }   ; end; ```</p>","tags":["node-architecture","identity-subsystem","engine","encryption","configuration"]},{"location":"arch/node/engines/encryption_environment.html","title":"Encryption Environment","text":"Juvix imports <pre><code>module arch.node.engines.encryption_environment;\n\nimport prelude open;\nimport arch.node.engines.encryption_messages open;\nimport arch.node.types.engine_environment open;\nimport arch.node.types.identities open;\nimport arch.node.types.messages open;\nimport arch.node.types.anoma_message as Anoma open;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","encryption","environment"]},{"location":"arch/node/engines/encryption_environment.html#encryption-engine-environment","title":"<code>Encryption</code> Engine Environment","text":"","tags":["node-architecture","identity-subsystem","engine","encryption","environment"]},{"location":"arch/node/engines/encryption_environment.html#overview","title":"Overview","text":"<p>The <code>Encryption</code> Engine is stateless and does not maintain any internal state between requests. It relies on external information (like the <code>reads_for</code> relationships) for its operations.</p>","tags":["node-architecture","identity-subsystem","engine","encryption","environment"]},{"location":"arch/node/engines/encryption_environment.html#mailbox-states","title":"Mailbox states","text":"<p>The <code>Encryption</code> Engine does not require complex mailbox states. We define the mailbox state as <code>Unit</code>.</p>","tags":["node-architecture","identity-subsystem","engine","encryption","environment"]},{"location":"arch/node/engines/encryption_environment.html#encryptionmailboxstate","title":"<code>EncryptionMailboxState</code>","text":"<pre><code>syntax alias EncryptionMailboxState := Unit;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","encryption","environment"]},{"location":"arch/node/engines/encryption_environment.html#local-state","title":"Local state","text":"<p>The local state of an <code>Encryption</code> Engine instance contains a map to a list of pending requests which require <code>ReadsFor</code> information which is requested from the associated <code>ReadsFor</code> engine.</p>","tags":["node-architecture","identity-subsystem","engine","encryption","environment"]},{"location":"arch/node/engines/encryption_environment.html#encryptionlocalstate","title":"<code>EncryptionLocalState</code>","text":"<pre><code>type EncryptionLocalState := mk@{\n  pendingRequests : Map ExternalIdentity (List (Pair EngineID Plaintext));\n};\n</code></pre> Arguments <code>pendingRequests</code>: The backlog of encryption requests still in processing.","tags":["node-architecture","identity-subsystem","engine","encryption","environment"]},{"location":"arch/node/engines/encryption_environment.html#timer-handle","title":"Timer Handle","text":"<p>The Encryption Engine does not require a timer handle type. Therefore, we define the timer handle type as <code>Unit</code>.</p>","tags":["node-architecture","identity-subsystem","engine","encryption","environment"]},{"location":"arch/node/engines/encryption_environment.html#encryptiontimerhandle","title":"<code>EncryptionTimerHandle</code>","text":"<pre><code>syntax alias EncryptionTimerHandle := Unit;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","encryption","environment"]},{"location":"arch/node/engines/encryption_environment.html#the-encryption-environment","title":"The Encryption Environment","text":"","tags":["node-architecture","identity-subsystem","engine","encryption","environment"]},{"location":"arch/node/engines/encryption_environment.html#encryptionenv","title":"<code>EncryptionEnv</code>","text":"<pre><code>EncryptionEnv : Type :=\n  EngineEnv\n    EncryptionLocalState\n    EncryptionMailboxState\n    EncryptionTimerHandle\n    Anoma.Msg;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","encryption","environment"]},{"location":"arch/node/engines/encryption_environment.html#instantiation","title":"Instantiation","text":"<p>```juvix extract-module-statements module encryption_environment_example;</p> <p>encryptionEnv : EncryptionEnv :=     EngineEnv.mk@{       localState := EncryptionLocalState.mk@{         pendingRequests := Map.empty       };       mailboxCluster := Map.empty;       acquaintances := Set.empty;       timers := []     }   ; end; ```</p>","tags":["node-architecture","identity-subsystem","engine","encryption","environment"]},{"location":"arch/node/engines/encryption_messages.html","title":"Encryption Messages","text":"Juvix imports <pre><code>module arch.node.engines.encryption_messages;\nimport prelude open;\nimport arch.node.types.identities open;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","encryption","message-types"]},{"location":"arch/node/engines/encryption_messages.html#encryption-messages","title":"Encryption Messages","text":"","tags":["node-architecture","identity-subsystem","engine","encryption","message-types"]},{"location":"arch/node/engines/encryption_messages.html#message-interface","title":"Message interface","text":"<pre><code>type EncryptionMsg :=\n  | Request RequestEncrypt\n  | Reply ReplyEncrypt\n  ;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","encryption","message-types"]},{"location":"arch/node/engines/encryption_messages.html#message-sequence-diagrams","title":"Message sequence diagrams","text":"","tags":["node-architecture","identity-subsystem","engine","encryption","message-types"]},{"location":"arch/node/engines/encryption_messages.html#encryption-sequence-without-readsfor-evidence","title":"Encryption sequence (without <code>ReadsFor</code> evidence)","text":"<pre><code>sequenceDiagram\n    participant C as Client\n    participant EE as Encryption Engine\n\n    C-&gt;&gt;EE: RequestEncrypt (useReadsFor: false)\n    Note over EE: Encrypt commitment\n    EE--&gt;&gt;C: ReplyEncrypt</code></pre>  Sequence diagram for encryption (no reads for).","tags":["node-architecture","identity-subsystem","engine","encryption","message-types"]},{"location":"arch/node/engines/encryption_messages.html#encryption-sequence-with-readsfor-evidence","title":"Encryption sequence (with <code>ReadsFor</code> evidence)","text":"<pre><code>sequenceDiagram\n    participant C as Client\n    participant EE as Encryption Engine\n    participant RE as ReadsFor Engine\n\n    C-&gt;&gt;EE: RequestEncrypt (useReadsFor: true)\n    EE-&gt;&gt;RE: QueryReadsForEvidenceRequest\n    Note over RE: Retrieve evidence\n    RE--&gt;&gt;EE: QueryReadsForEvidenceReply\n    Note over EE: Encrypt commitment using ReadsFor evidence\n    EE--&gt;&gt;C: ReplyEncrypt</code></pre>  Sequence diagram for encryption (with <code>reads_for</code> evidence).","tags":["node-architecture","identity-subsystem","engine","encryption","message-types"]},{"location":"arch/node/engines/encryption_messages.html#message-types","title":"Message types","text":"","tags":["node-architecture","identity-subsystem","engine","encryption","message-types"]},{"location":"arch/node/engines/encryption_messages.html#requestencrypt","title":"<code>RequestEncrypt</code>","text":"<pre><code>type RequestEncrypt := mkRequestEncrypt {\n  data : Plaintext;\n  externalIdentity : ExternalIdentity;\n  useReadsFor : Bool\n};\n</code></pre> <p>A <code>RequestEncrypt</code> instructs the Encryption Engine to encrypt data to a particular external identity, possibly using known <code>reads_for</code> relationships.</p> Arguments <code>data</code>: The data to encrypt. <code>externalIdentity</code>: The external identity requesting encryption. <code>useReadsFor</code>: Whether to use known <code>reads_for</code> relationships or not.","tags":["node-architecture","identity-subsystem","engine","encryption","message-types"]},{"location":"arch/node/engines/encryption_messages.html#replyencrypt","title":"<code>ReplyEncrypt</code>","text":"<pre><code>type ReplyEncrypt := mkReplyEncrypt {\n  ciphertext : Ciphertext;\n  err : Option String\n};\n</code></pre> <p>A <code>ReplyEncrypt</code> contains the data encrypted by the Encryption Engine in response to a <code>RequestEncrypt</code>.</p> Arguments <code>ciphertext</code>: The encrypted data. <code>err</code>: An error message if encryption failed.","tags":["node-architecture","identity-subsystem","engine","encryption","message-types"]},{"location":"arch/node/engines/encryption_messages.html#encryptionmsg","title":"<code>EncryptionMsg</code>","text":"<pre><code>type EncryptionMsg :=\n  | Request RequestEncrypt\n  | Reply ReplyEncrypt\n  ;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","encryption","message-types"]},{"location":"arch/node/engines/encryption_messages.html#engine-components","title":"Engine components","text":"<ul> <li>Encryption Configuration</li> <li>Encryption Environment</li> <li>Encryption Behaviour</li> </ul>","tags":["node-architecture","identity-subsystem","engine","encryption","message-types"]},{"location":"arch/node/engines/executor.html","title":"Executor Engine","text":"Juvix imports <pre><code>module arch.node.engines.executor;\n\nimport prelude open;\nimport arch.node.types.engine open;\n\nimport arch.node.engines.executor_config open public;\nimport arch.node.engines.executor_messages open public;\nimport arch.node.engines.executor_environment open public;\nimport arch.node.engines.executor_behaviour open public;\n\nimport arch.node.types.anoma as Anoma open;\n\nopen executor_config_example;\nopen executor_environment_example;\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","executor","engine-definition"]},{"location":"arch/node/engines/executor.html#executor-engine","title":"Executor Engine","text":"<p>The Executor Engine is responsible for executing transaction programs in Anoma, serving as the computational core that processes state transitions within the system. It operates as part of a distributed execution system, working in concert with Shard Engines that manage state access and Mempool Worker engines that take orders and spawn Executor engines based on those orders. Each Executor Engine instance is spawned to handle the execution of a single transaction in the form of a program which it is spawned with, making them ephemeral components that exist solely for the duration of their assigned transaction's lifecycle.</p> <p>At its core, an Executor Engine receives read responses from shards and uses these to step through the transaction program's execution. Each transaction program defines a sequence of operations that may read from or write to various keys in the system's state. The Executor doesn't directly access this state - instead, it coordinates with Shard engines that manage actual state access.</p> <p>The primary interface for the Executor Engine consists of three main message types that facilitate its operation. It receives <code>ShardMsgKVSRead</code> messages from Shards containing the data for requested state reads. For each read, the Executor applies this data to advance the transaction program's execution, potentially generating new read requests (<code>ShardMsgKVSReadRequest</code>) or write operations (<code>ShardMsgKVSWrite</code>) that are sent to the appropriate Shards. Once execution is complete, it sends an <code>ExecutorMsgExecutorFinished</code> message to both the Worker that spawned it and the transaction's issuer, containing a summary of all reads and writes performed during execution.</p>","tags":["node-architecture","ordering-subsystem","engine","executor","engine-definition"]},{"location":"arch/node/engines/executor.html#engine-components","title":"Engine components","text":"<ul> <li>Executor Messages</li> <li>Executor Configuration</li> <li>Executor Environment</li> <li>Executor Behaviour</li> </ul>","tags":["node-architecture","ordering-subsystem","engine","executor","engine-definition"]},{"location":"arch/node/engines/executor.html#the-type-for-an-executor-engine","title":"The type for an executor engine","text":"<p>The executor engine is designed to be \"agnostic\" to choices of virtual machines and data formats, assuming only that the executable will run step by step (possibly involving program state updates) and interaction with replicated state machine state is via a key value storage interface.</p> <pre><code>ExecutorEngine (KVSKey KVSDatum Executable ProgramState : Type) : Type :=\n  Engine\n    (ExecutorCfg KVSKey Executable)\n    (ExecutorLocalState KVSKey KVSDatum ProgramState)\n    ExecutorMailboxState\n    ExecutorTimerHandle\n    ExecutorActionArguments\n    (Anoma.PreMsg KVSKey KVSDatum Executable)\n    (Anoma.PreCfg KVSKey KVSDatum Executable)\n    (Anoma.PreEnv KVSKey KVSDatum Executable ProgramState);\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","executor","engine-definition"]},{"location":"arch/node/engines/executor.html#example-of-an-executor-engine","title":"Example of an executor engine","text":"<pre><code>exampleExecutorEngine : ExecutorEngine String String ByteString String :=\n  Engine.mk@{\n    cfg := executorCfg;\n    env := executorEnv;\n    behaviour := executorBehaviour;\n  };\n</code></pre> <p>where <code>executorCfg</code> is defined as follows:</p> <p>```juvix extract-module-statements module executor_config_example;</p> <p>executorCfg : EngineCfg (ExecutorCfg String ByteString) :=     EngineCfg.mk@{       node := PublicKey.Curve25519PubKey \"0xabcd1234\";       name := \"executor\";       cfg := ExecutorCfg.mk@{         timestamp := 0;         executable := \"\";         lazy_read_keys := Set.empty;         eager_read_keys := Set.empty;         will_write_keys := Set.empty;         may_write_keys := Set.empty;         worker := mkPair none \"\";         issuer := mkPair none \"\";       };     }   ; end; <pre><code>[`executorEnv`](https://specs.anoma.net/pr-347/arch/node/engines/executor_environment.html#executorEnv) is defined as follows:\n\n```juvix extract-module-statements\nmodule executor_environment_example;\n\nexecutorEnv {KVSKey KVSDatum} : ExecutorEnv KVSKey KVSDatum String :=\n  EngineEnv.mk@{\n    localState := ExecutorLocalState.mk@{\n      program_state := \"\";\n      completed_reads := Map.empty;\n      completed_writes := Map.empty\n    };\n    mailboxCluster := Map.empty;\n    acquaintances := Set.empty;\n    timers := []\n  };\nend;\n</code></pre></p> <p>and <code>executorBehaviour</code> is defined as follows:</p> <pre><code>instance dummyRunnable : Runnable String String ByteString String :=\n  Runnable.mkRunnable@{\n    executeStep := \\{_ _ _ := error \"Not implemented\"};\n    halted := \\{_ := false};\n    startingState := \"\"\n  };\n\nexecutorBehaviour : ExecutorBehaviour String String ByteString String :=\n  EngineBehaviour.mk@{\n    guards := GuardEval.First [\n      processReadGuard\n    ]\n  };\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","executor","engine-definition"]},{"location":"arch/node/engines/executor_behaviour.html","title":"Executor Behaviour","text":"Juvix imports <pre><code>module arch.node.engines.executor_behaviour;\n\nimport Stdlib.Data.Set as Set;\nimport arch.node.engines.executor_messages open;\nimport arch.node.engines.executor_config open;\nimport arch.node.engines.executor_environment open;\nimport arch.node.engines.shard_messages open;\n\nimport prelude open;\nimport arch.node.types.basics open;\nimport arch.node.types.identities open;\nimport arch.node.types.messages open;\nimport arch.node.types.engine open;\nimport arch.node.types.anoma as Anoma open;\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","executor","behaviour"]},{"location":"arch/node/engines/executor_behaviour.html#executor-behaviour","title":"Executor Behaviour","text":"","tags":["node-architecture","ordering-subsystem","engine","executor","behaviour"]},{"location":"arch/node/engines/executor_behaviour.html#overview","title":"Overview","text":"<p>The executor behaviour defines how it processes incoming read responses and performs state transitions to execute the transaction program.</p>","tags":["node-architecture","ordering-subsystem","engine","executor","behaviour"]},{"location":"arch/node/engines/executor_behaviour.html#executor-action-flowcharts","title":"Executor Action Flowcharts","text":"","tags":["node-architecture","ordering-subsystem","engine","executor","behaviour"]},{"location":"arch/node/engines/executor_behaviour.html#processread-flowchart","title":"<code>processRead</code> Flowchart","text":"<pre><code>flowchart TD\n    Start([Receive Message]) --&gt; Msg[ShardMsgKVSRead&lt;br/&gt;key: KVSKey&lt;br/&gt;data: KVSDatum]\n\n    subgraph Guard[\"processReadGuard\"]\n        Msg --&gt; CheckMsg{Is message&lt;br/&gt;ShardMsgKVSRead?}\n        CheckMsg --&gt;|No| Reject([Reject Message])\n        CheckMsg --&gt;|Yes| ValidTS{Matching&lt;br/&gt;timestamp?}\n        ValidTS --&gt;|No| Reject\n        ValidTS --&gt;|Yes| ActionEntry[Enter Action Phase]\n    end\n\n    ActionEntry --&gt; Action\n\n    subgraph Action[\"processReadAction\"]\n        direction TB\n        ComputeStale[\"Compute stale locks:&lt;br/&gt;1. Find uncompleted reads&lt;br/&gt;2. Find uncompleted writes&lt;br/&gt;3. Create cleanup messages\"]\n        ExecStep[Execute program step&lt;br/&gt;with read data]\n        ExecStep --&gt; StepResult{Step&lt;br/&gt;Result?}\n        StepResult --&gt;|Error| ErrBranch[Create error response&lt;br/&gt;with read/write history]\n        StepResult --&gt;|Success| SuccessBranch[Update program state&lt;br/&gt;Track completed read]\n        SuccessBranch --&gt; CheckHalt{Program&lt;br/&gt;Halted?}\n        CheckHalt --&gt;|Yes| FinishOk[Create success response&lt;br/&gt;with read/write history]\n        CheckHalt --&gt;|No| GenMsgs[Generate messages for&lt;br/&gt;new reads/writes]\n    end\n\n    ErrBranch --&gt; AddStaleErr[Add stale lock&lt;br/&gt;cleanup messages]\n    FinishOk --&gt; AddStaleOk[Add stale lock&lt;br/&gt;cleanup messages]\n\n    GenMsgs --&gt; Parse[Parse step outputs]\n\n    subgraph ProcessOutputs[\"Process Step Outputs\"]\n        Parse --&gt; CheckType{Output&lt;br/&gt;Type?}\n        CheckType --&gt;|Read Request| ReadBranch[Create KVSReadRequest&lt;br/&gt;if key in read sets]\n        CheckType --&gt;|Write Request| WriteBranch[Create KVSWrite&lt;br/&gt;if key in write sets]\n\n        ReadBranch --&gt; ValidRead{Key in&lt;br/&gt;read sets?}\n        ValidRead --&gt;|Yes| AddRead[Add to read&lt;br/&gt;message list]\n        ValidRead --&gt;|No| SkipRead[Skip invalid&lt;br/&gt;read request]\n\n        WriteBranch --&gt; ValidWrite{Key in&lt;br/&gt;write sets?}\n        ValidWrite --&gt;|Yes| AddWrite[Add to write&lt;br/&gt;message list]\n        ValidWrite --&gt;|No| SkipWrite[Skip invalid&lt;br/&gt;write request]\n    end\n\n    AddRead --&gt; Collect[Collect all&lt;br/&gt;generated messages]\n    AddWrite --&gt; Collect\n    SkipRead --&gt; Collect\n    SkipWrite --&gt; Collect\n\n    subgraph StaleComputation[\"Stale Lock Processing\"]\n        ComputeStale --&gt; FindReads[Find difference between&lt;br/&gt;lazy_read_keys and&lt;br/&gt;completed reads]\n        ComputeStale --&gt; FindWrites[Find difference between&lt;br/&gt;may_write_keys and&lt;br/&gt;completed writes]\n        FindReads --&gt; CreateRead[Create cleanup read&lt;br/&gt;messages with actual=false]\n        FindWrites --&gt; CreateWrite[Create cleanup write&lt;br/&gt;messages with datum=none]\n        CreateRead &amp; CreateWrite --&gt; CombineMsgs[Combine cleanup messages]\n    end\n\n    CombineMsgs -.-&gt; AddStaleErr\n    CombineMsgs -.-&gt; AddStaleOk\n\n    AddStaleErr --&gt; NotifyFail[Send ExecutorFinished&lt;br/&gt;with error + cleanup messages]\n    AddStaleOk --&gt; NotifySuccess[Send ExecutorFinished&lt;br/&gt;with success + cleanup messages]\n    Collect --&gt; SendMsgs[Send generated&lt;br/&gt;read/write messages]\n\n    NotifyFail &amp; NotifySuccess &amp; SendMsgs --&gt; End([Complete])</code></pre> <code>processRead</code> flowchart showing read handling and execution steps","tags":["node-architecture","ordering-subsystem","engine","executor","behaviour"]},{"location":"arch/node/engines/executor_behaviour.html#explanation","title":"Explanation","text":"<ol> <li> <p>Initial Request Processing</p> <ul> <li>A client sends a <code>ShardMsgKVSRead</code> message containing:<ul> <li><code>key</code>: The state key that was read.</li> <li><code>data</code>: The actual data value for that key.</li> <li>A timestamp that identifies this execution context.</li> </ul> </li> <li>The message first passes through the guard phase which:<ul> <li>Validates the message is a <code>ShardMsgKVSRead</code>.</li> <li>Ensures the timestamp matches this executor's configured timestamp.</li> <li>Rejects messages that fail either check.</li> <li>Routes valid messages to the action phase.</li> </ul> </li> </ul> </li> <li> <p>Program Execution</p> <ul> <li>The action phase begins by executing the next program step:<ul> <li>Takes the current program state as context.</li> <li>Provides the newly read key-value pair as input.</li> <li>Produces either an error or a new program state with outputs.</li> </ul> </li> <li>On error:<ul> <li>Creates response detailing why execution failed.</li> <li>Includes lists of all completed reads and writes.</li> <li>Triggers stale lock cleanup before responding.</li> </ul> </li> <li>On success:<ul> <li>Updates internal program state with execution results.</li> <li>Records the completed read in its tracking.</li> <li>Determines if program has halted or continues.</li> </ul> </li> </ul> </li> <li> <p>Continuation Flow</p> <ul> <li>If program hasn't halted:<ul> <li>Processes program outputs to generate new messages.</li> <li>For read requests:<ul> <li>Validates key is in allowed read sets (lazy or eager).</li> <li>Creates <code>KVSReadRequest</code> messages for valid reads.</li> </ul> </li> <li>For write operations:<ul> <li>Validates key is in allowed write sets (will or may).</li> <li>Creates <code>KVSWrite</code> messages for valid writes</li> </ul> </li> <li>Sends all generated messages to appropriate shards.</li> <li>Awaits next read response to continue execution.</li> </ul> </li> </ul> </li> <li> <p>Completion Flow</p> <ul> <li>When program halts (either naturally or from error):<ul> <li>Computes stale lock information:<ul> <li>Finds difference between lazy_read_keys and actual reads.</li> <li>Finds difference between may_write_keys and actual writes.</li> </ul> </li> <li>Generates cleanup messages:<ul> <li><code>KVSReadRequest</code> with actual=false for unused reads.</li> <li><code>KVSWrite</code> with datum=none for unused writes.</li> </ul> </li> <li>Creates <code>ExecutorFinished</code> message containing:<ul> <li>Success/failure status</li> <li>Complete list of values read</li> <li>Complete list of values written</li> </ul> </li> <li>Sends cleanup messages and finished notification.</li> <li>Terminates executor instance.</li> </ul> </li> </ul> </li> <li> <p>Reply Delivery</p> <ul> <li>All responses are sent back using:<ul> <li>Executor's ID as sender.</li> <li>Original requester as target.</li> <li>Mailbox 0 (default response mailbox).</li> </ul> </li> <li>Three possible response patterns:<ul> <li>Error case: ExecutorFinished (success=false) + stale cleanup.</li> <li>Success case: ExecutorFinished (success=true) + stale cleanup.</li> <li>Continuation case: New read/write messages.</li> </ul> </li> </ul> </li> </ol>","tags":["node-architecture","ordering-subsystem","engine","executor","behaviour"]},{"location":"arch/node/engines/executor_behaviour.html#action-arguments","title":"Action arguments","text":"","tags":["node-architecture","ordering-subsystem","engine","executor","behaviour"]},{"location":"arch/node/engines/executor_behaviour.html#executoractionarguments","title":"<code>ExecutorActionArguments</code>","text":"<pre><code>syntax alias ExecutorActionArguments := Unit;\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","executor","behaviour"]},{"location":"arch/node/engines/executor_behaviour.html#actions","title":"Actions","text":"Auxiliary Juvix code","tags":["node-architecture","ordering-subsystem","engine","executor","behaviour"]},{"location":"arch/node/engines/executor_behaviour.html#executoraction","title":"<code>ExecutorAction</code>","text":"<pre><code>ExecutorAction (KVSKey KVSDatum Executable ProgramState : Type) : Type :=\n  Action\n    (ExecutorCfg KVSKey Executable)\n    (ExecutorLocalState KVSKey KVSDatum ProgramState)\n    ExecutorMailboxState\n    ExecutorTimerHandle\n    ExecutorActionArguments\n    (Anoma.PreMsg KVSKey KVSDatum Executable)\n    (Anoma.PreCfg KVSKey KVSDatum Executable)\n    (Anoma.PreEnv KVSKey KVSDatum Executable ProgramState);\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","executor","behaviour"]},{"location":"arch/node/engines/executor_behaviour.html#executoractioninput","title":"<code>ExecutorActionInput</code>","text":"<pre><code>ExecutorActionInput (KVSKey KVSDatum Executable ProgramState : Type) : Type :=\n  ActionInput\n    (ExecutorCfg KVSKey Executable)\n    (ExecutorLocalState KVSKey KVSDatum ProgramState)\n    ExecutorMailboxState\n    ExecutorTimerHandle\n    ExecutorActionArguments\n    (Anoma.PreMsg KVSKey KVSDatum Executable);\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","executor","behaviour"]},{"location":"arch/node/engines/executor_behaviour.html#executoractioneffect","title":"<code>ExecutorActionEffect</code>","text":"<pre><code>ExecutorActionEffect (KVSKey KVSDatum Executable ProgramState : Type) : Type :=\n  ActionEffect\n    (ExecutorLocalState KVSKey KVSDatum ProgramState)\n    ExecutorMailboxState\n    ExecutorTimerHandle\n    (Anoma.PreMsg KVSKey KVSDatum Executable)\n    (Anoma.PreCfg KVSKey KVSDatum Executable)\n    (Anoma.PreEnv KVSKey KVSDatum Executable ProgramState);\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","executor","behaviour"]},{"location":"arch/node/engines/executor_behaviour.html#executoractionexec","title":"<code>ExecutorActionExec</code>","text":"<pre><code>ExecutorActionExec (KVSKey KVSDatum Executable ProgramState : Type) : Type :=\n  ActionExec\n    (ExecutorCfg KVSKey Executable)\n    (ExecutorLocalState KVSKey KVSDatum ProgramState)\n    ExecutorMailboxState\n    ExecutorTimerHandle\n    ExecutorActionArguments\n    (Anoma.PreMsg KVSKey KVSDatum Executable)\n    (Anoma.PreCfg KVSKey KVSDatum Executable)\n    (Anoma.PreEnv KVSKey KVSDatum Executable ProgramState);\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","executor","behaviour"]},{"location":"arch/node/engines/executor_behaviour.html#processreadaction","title":"<code>processReadAction</code>","text":"<p>Process a read response and execute the next program step.</p> State update Updates the program state with executed step results and tracks completed reads/writes Messages to be sent <ul> <li>Read/Write messages to shards based on program outputs</li> </ul> <ul> <li>Notification messages for stale locks if program halts</li> </ul> <ul> <li>ExecutorFinished message if program halts</li> </ul> Engines to be spawned No engines are created by this action. Timer updates No timers are set or cancelled. <pre><code>processReadAction\n  {KVSKey KVSDatum Executable ProgramState}\n  {{Ord KVSKey}}\n  {{rinst : Runnable KVSKey KVSDatum Executable ProgramState}}\n  (input : ExecutorActionInput KVSKey KVSDatum Executable ProgramState)\n  : Option (ExecutorActionEffect KVSKey KVSDatum Executable ProgramState) :=\n  let\n    cfg := EngineCfg.cfg (ActionInput.cfg input);\n    env := ActionInput.env input;\n    trigger := ActionInput.trigger input;\n  in case getMsgFromTimestampedTrigger trigger of {\n    | some (PreMsg.MsgShard (ShardMsg.KVSRead (KVSReadMsg.mkKVSReadMsg@{key := readKey; data := readValue}))) :=\n      let\n        envelope (target : EngineID) (msg : Anoma.PreMsg KVSKey KVSDatum Executable) : EngineMsg (Anoma.PreMsg KVSKey KVSDatum Executable) :=\n          EngineMsg.mk@{\n            sender := getEngineIDFromEngineCfg (ActionInput.cfg input);\n            target := target;\n            mailbox := some 0;\n            msg := msg\n          };\n        local := EngineEnv.localState env;\n        reads := ExecutorLocalState.completed_reads local;\n        writes := ExecutorLocalState.completed_writes local;\n\n        -- Precompute messages to notify shards of stale locks\n        -- These inform the shards that they can release pending locks in the\n        -- case that the executor halts.\n        staleReadMsg (key : KVSKey) : EngineMsg (Anoma.PreMsg KVSKey KVSDatum Executable) :=\n          envelope (keyToShard key) (PreMsg.MsgShard (ShardMsg.KVSReadRequest (KVSReadRequestMsg.mkKVSReadRequestMsg@{\n            timestamp := ExecutorCfg.timestamp cfg;\n            key := key;\n            actual := false\n          })));\n        staleWriteMsg (key : KVSKey) : EngineMsg (Anoma.PreMsg KVSKey KVSDatum Executable) :=\n          envelope (keyToShard key) (PreMsg.MsgShard (ShardMsg.KVSWrite (KVSWriteMsg.mkKVSWriteMsg@{\n            timestamp := ExecutorCfg.timestamp cfg;\n            key := key;\n            datum := none\n          })));\n        staleReadLocations :=\n          Set.difference (ExecutorCfg.lazy_read_keys cfg) (Set.fromList (Map.keys reads));\n        readStaleMsgs := map staleReadMsg (Set.toList staleReadLocations);\n        staleWriteLocations :=\n          Set.difference (ExecutorCfg.may_write_keys cfg) (Set.fromList (Map.keys writes));\n        writeStaleMsgs := map staleWriteMsg (Set.toList staleWriteLocations);\n        staleMsgs := readStaleMsgs ++ writeStaleMsgs;\n\n        stepInput := mkPair readKey readValue;\n        stepResult := Runnable.executeStep\n          (ExecutorCfg.executable cfg)\n          (ExecutorLocalState.program_state local)\n          stepInput;\n      in case stepResult of {\n        | error err :=\n            let\n              local := EngineEnv.localState env;\n              finishedMsg :=\n                envelope (ExecutorCfg.issuer cfg)\n                  (PreMsg.MsgExecutor (ExecutorMsg.ExecutorFinished ExecutorFinishedMsg.mkExecutorFinishedMsg@{\n                    success := false;\n                    values_read := (mkPair readKey readValue) :: Map.toList reads;\n                    values_written := Map.toList writes\n                }));\n            in some ActionEffect.mk@{\n                env := env;\n                msgs := finishedMsg :: staleMsgs;\n                timers := [];\n                engines := []\n              }\n        | ok (mkPair program' outputs) :=\n          let\n            accReads (key : KVSKey)\n                     (msgs : List (EngineMsg (Anoma.PreMsg KVSKey KVSDatum Executable))) :\n                     List (EngineMsg (Anoma.PreMsg KVSKey KVSDatum Executable)) :=\n              let msg :=\n                envelope (keyToShard key) (PreMsg.MsgShard (ShardMsg.KVSReadRequest (KVSReadRequestMsg.mkKVSReadRequestMsg@{\n                    timestamp := ExecutorCfg.timestamp cfg;\n                    key := key;\n                    actual := true\n                  })))\n              in case or (Set.isMember key (ExecutorCfg.lazy_read_keys cfg))\n                         (Set.isMember key (ExecutorCfg.eager_read_keys cfg)) of {\n                | true := msg :: msgs\n                | false := msgs\n              };\n            accWrites (key : KVSKey)\n                      (value : KVSDatum)\n                      (msgs : List (EngineMsg (Anoma.PreMsg KVSKey KVSDatum Executable))) :\n                      List (EngineMsg (Anoma.PreMsg KVSKey KVSDatum Executable)) :=\n              let msg :=\n                envelope (keyToShard key)\n                  (PreMsg.MsgShard (ShardMsg.KVSWrite (KVSWriteMsg.mkKVSWriteMsg@{\n                    timestamp := ExecutorCfg.timestamp cfg;\n                    key := key;\n                    datum := some value\n                  })))\n              in case or (Set.isMember key (ExecutorCfg.will_write_keys cfg))\n                         (Set.isMember key (ExecutorCfg.may_write_keys cfg)) of {\n                | true := msg :: msgs\n                | false := msgs\n              };\n            sendHelper (acc : Pair (ExecutorLocalState KVSKey KVSDatum ProgramState) (List (EngineMsg (Anoma.PreMsg KVSKey KVSDatum Executable))))\n                       (out : Either KVSKey (Pair KVSKey KVSDatum)) :\n                Pair (ExecutorLocalState KVSKey KVSDatum ProgramState) (List (EngineMsg (Anoma.PreMsg KVSKey KVSDatum Executable))) :=\n              let state := fst acc;\n                  msgs := snd acc;\n              in case out of {\n                | left key := mkPair state (accReads key msgs)\n                | right (mkPair key value) :=\n                    let newState := state@ExecutorLocalState{\n                        completed_writes := Map.insert key value (ExecutorLocalState.completed_writes state)\n                      };\n                    in mkPair newState (accWrites key value msgs)\n              };\n            initial := mkPair (local@ExecutorLocalState{\n                        program_state := program';\n                        completed_reads := Map.insert readKey readValue (ExecutorLocalState.completed_reads local)\n                       }) [];\n            final := foldl sendHelper initial outputs;\n            newLocalState := fst final;\n            msgList := snd final;\n            newEnv := env@EngineEnv{localState := newLocalState};\n          in case Runnable.halted {{rinst}} program' of {\n            | false := some ActionEffect.mk@{\n                  env := newEnv;\n                  msgs := msgList;\n                  timers := [];\n                  engines := []\n                }\n            | true :=\n              let\n                finishedMsg :=\n                  envelope\n                    (ExecutorCfg.issuer cfg)\n                    (PreMsg.MsgExecutor (ExecutorMsg.ExecutorFinished ExecutorFinishedMsg.mkExecutorFinishedMsg@{\n                      success := true;\n                      values_read := Map.toList reads;\n                      values_written := Map.toList writes\n                  }));\n              in some ActionEffect.mk@{\n                  env := newEnv;\n                  msgs := msgList ++ finishedMsg :: staleMsgs;\n                  timers := [];\n                  engines := []\n                }\n          }\n      }\n    | _ := none\n  };\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","executor","behaviour"]},{"location":"arch/node/engines/executor_behaviour.html#action-labels","title":"Action Labels","text":"<pre><code>processReadActionLabel\n  {KVSKey KVSDatum Executable ProgramState}\n  {{Ord KVSKey}}\n  {{Runnable KVSKey KVSDatum Executable ProgramState}}\n  : ExecutorActionExec KVSKey KVSDatum Executable ProgramState := ActionExec.Seq [ processReadAction ];\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","executor","behaviour"]},{"location":"arch/node/engines/executor_behaviour.html#guards","title":"Guards","text":"Auxiliary Juvix code","tags":["node-architecture","ordering-subsystem","engine","executor","behaviour"]},{"location":"arch/node/engines/executor_behaviour.html#executorguard","title":"<code>ExecutorGuard</code>","text":"<p> <pre><code>ExecutorGuard (KVSKey KVSDatum Executable ProgramState : Type) : Type :=\n  Guard\n    (ExecutorCfg KVSKey Executable)\n    (ExecutorLocalState KVSKey KVSDatum ProgramState)\n    ExecutorMailboxState\n    ExecutorTimerHandle\n    ExecutorActionArguments\n    (Anoma.PreMsg KVSKey KVSDatum Executable)\n    (Anoma.PreCfg KVSKey KVSDatum Executable)\n    (Anoma.PreEnv KVSKey KVSDatum Executable ProgramState);\n</code></pre> </p>","tags":["node-architecture","ordering-subsystem","engine","executor","behaviour"]},{"location":"arch/node/engines/executor_behaviour.html#executorguardoutput","title":"<code>ExecutorGuardOutput</code>","text":"<p> <pre><code>ExecutorGuardOutput (KVSKey KVSDatum Executable ProgramState : Type) : Type :=\n  GuardOutput\n    (ExecutorCfg KVSKey Executable)\n    (ExecutorLocalState KVSKey KVSDatum ProgramState)\n    ExecutorMailboxState\n    ExecutorTimerHandle\n    ExecutorActionArguments\n    (Anoma.PreMsg KVSKey KVSDatum Executable)\n    (Anoma.PreCfg KVSKey KVSDatum Executable)\n    (Anoma.PreEnv KVSKey KVSDatum Executable ProgramState);\n</code></pre> </p>","tags":["node-architecture","ordering-subsystem","engine","executor","behaviour"]},{"location":"arch/node/engines/executor_behaviour.html#executorguardeval","title":"<code>ExecutorGuardEval</code>","text":"<p> <pre><code>ExecutorGuardEval (KVSKey KVSDatum Executable ProgramState : Type) : Type :=\n  GuardEval\n    (ExecutorCfg KVSKey Executable)\n    (ExecutorLocalState KVSKey KVSDatum ProgramState)\n    ExecutorMailboxState\n    ExecutorTimerHandle\n    ExecutorActionArguments\n    (Anoma.PreMsg KVSKey KVSDatum Executable)\n    (Anoma.PreCfg KVSKey KVSDatum Executable)\n    (Anoma.PreEnv KVSKey KVSDatum Executable ProgramState);\n</code></pre> </p>","tags":["node-architecture","ordering-subsystem","engine","executor","behaviour"]},{"location":"arch/node/engines/executor_behaviour.html#processreadguard","title":"<code>processReadGuard</code>","text":"<p>Guard for processing read responses.</p> <pre><code>processReadGuard\n  {KVSKey KVSDatum Executable ProgramState}\n  {{Ord KVSKey}}\n  {{Runnable KVSKey KVSDatum Executable ProgramState}}\n  (trigger : TimestampedTrigger ExecutorTimerHandle (Anoma.PreMsg KVSKey KVSDatum Executable))\n  (cfg : EngineCfg (ExecutorCfg KVSKey Executable))\n  (env : ExecutorEnv KVSKey KVSDatum ProgramState)\n  : Option (ExecutorGuardOutput KVSKey KVSDatum Executable ProgramState) :=\n  case getEngineMsgFromTimestampedTrigger trigger of {\n  | some EngineMsg.mk@{msg := PreMsg.MsgShard (ShardMsg.KVSRead (KVSReadMsg.mkKVSReadMsg@{\n      timestamp := timestamp;\n      key := _;\n      data := _\n    }))} :=\n    case timestamp == ExecutorCfg.timestamp (EngineCfg.cfg cfg) of {\n    | true :=\n      some GuardOutput.mk@{\n        action := processReadActionLabel;\n        args := unit\n      }\n    | false := none\n    }\n  | _ := none\n  };\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","executor","behaviour"]},{"location":"arch/node/engines/executor_behaviour.html#the-executor-behaviour","title":"The Executor Behaviour","text":"","tags":["node-architecture","ordering-subsystem","engine","executor","behaviour"]},{"location":"arch/node/engines/executor_behaviour.html#executorbehaviour","title":"<code>ExecutorBehaviour</code>","text":"<pre><code>ExecutorBehaviour (KVSKey KVSDatum Executable ProgramState : Type) : Type :=\n  EngineBehaviour\n    (ExecutorCfg KVSKey Executable)\n    (ExecutorLocalState KVSKey KVSDatum ProgramState)\n    ExecutorMailboxState\n    ExecutorTimerHandle\n    ExecutorActionArguments\n    (Anoma.PreMsg KVSKey KVSDatum Executable)\n    (Anoma.PreCfg KVSKey KVSDatum Executable)\n    (Anoma.PreEnv KVSKey KVSDatum Executable ProgramState);\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","executor","behaviour"]},{"location":"arch/node/engines/executor_behaviour.html#instantiation","title":"Instantiation","text":"<pre><code>instance dummyRunnable : Runnable String String ByteString String :=\n  Runnable.mkRunnable@{\n    executeStep := \\{_ _ _ := error \"Not implemented\"};\n    halted := \\{_ := false};\n    startingState := \"\"\n  };\n\nexecutorBehaviour : ExecutorBehaviour String String ByteString String :=\n  EngineBehaviour.mk@{\n    guards := GuardEval.First [\n      processReadGuard\n    ]\n  };\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","executor","behaviour"]},{"location":"arch/node/engines/executor_config.html","title":"Executor Configuration","text":"Juvix imports <pre><code>module arch.node.engines.executor_config;\n\nimport prelude open;\nimport arch.node.engines.executor_messages open;\nimport arch.node.types.engine open;\nimport arch.node.types.messages open;\nimport arch.node.types.identities open;\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","executor","configuration"]},{"location":"arch/node/engines/executor_config.html#executor-configuration","title":"Executor Configuration","text":"","tags":["node-architecture","ordering-subsystem","engine","executor","configuration"]},{"location":"arch/node/engines/executor_config.html#overview","title":"Overview","text":"<p>The executor configuration contains static information needed for execution: the transaction program, access rights, and notification targets.</p>","tags":["node-architecture","ordering-subsystem","engine","executor","configuration"]},{"location":"arch/node/engines/executor_config.html#the-executor-configuration","title":"The Executor Configuration","text":"","tags":["node-architecture","ordering-subsystem","engine","executor","configuration"]},{"location":"arch/node/engines/executor_config.html#executorcfg","title":"<code>ExecutorCfg</code>","text":"<pre><code>type ExecutorCfg KVSKey Executable :=\n  mk@{\n    timestamp : TxFingerprint;\n    executable : Executable;\n    lazy_read_keys : Set KVSKey;\n    eager_read_keys : Set KVSKey;\n    will_write_keys : Set KVSKey;\n    may_write_keys : Set KVSKey;\n    worker : EngineID;\n    issuer : EngineID;\n  }\n</code></pre> Arguments <code>timestamp</code> The logical timestamp representing when this transaction executes in the ordering <code>executable</code> The transaction's executable code <code>lazy_read_keys</code> Keys that may be read during execution <code>eager_read_keys</code> Keys that will definitely be read <code>will_write_keys</code> Keys that will definitely be written <code>may_write_keys</code> Keys that might be written <code>worker</code> ID of the worker engine to notify on completion <code>issuer</code> ID of the transaction sender to notify on completion","tags":["node-architecture","ordering-subsystem","engine","executor","configuration"]},{"location":"arch/node/engines/executor_config.html#instantiation","title":"Instantiation","text":"<p>```juvix extract-module-statements module executor_config_example;</p> <p>executorCfg : EngineCfg (ExecutorCfg String ByteString) :=     EngineCfg.mk@{       node := PublicKey.Curve25519PubKey \"0xabcd1234\";       name := \"executor\";       cfg := ExecutorCfg.mk@{         timestamp := 0;         executable := \"\";         lazy_read_keys := Set.empty;         eager_read_keys := Set.empty;         will_write_keys := Set.empty;         may_write_keys := Set.empty;         worker := mkPair none \"\";         issuer := mkPair none \"\";       };     }   ; end; ```</p>","tags":["node-architecture","ordering-subsystem","engine","executor","configuration"]},{"location":"arch/node/engines/executor_environment.html","title":"Executor Environment","text":"Juvix imports <pre><code>module arch.node.engines.executor_environment;\nimport prelude open;\nimport arch.node.types.messages open;\nimport arch.node.types.identities open;\nimport arch.node.types.engine_environment open;\nimport arch.node.engines.executor_messages open;\nimport arch.node.types.anoma_message as Anoma open;\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","executor","environment"]},{"location":"arch/node/engines/executor_environment.html#executor-environment","title":"Executor Environment","text":"","tags":["node-architecture","ordering-subsystem","engine","executor","environment"]},{"location":"arch/node/engines/executor_environment.html#overview","title":"Overview","text":"<p>The executor environment maintains state needed during transaction execution including completed reads/writes and program state.</p> Auxiliary Juvix code <pre><code>trait\ntype Runnable KVSKey KVSDatum Executable ProgramState :=\n  mkRunnable@{\n    executeStep : Executable -&gt; ProgramState -&gt; Pair KVSKey KVSDatum -&gt; Result String (Pair ProgramState (List (Either KVSKey (Pair KVSKey KVSDatum))));\n    halted : ProgramState -&gt; Bool;\n    startingState : ProgramState;\n  };\n</code></pre> <code>executeStep</code>: Takes the executable code, current program state, and read key-value pair and returns either:   - Error string on failure   - New program state and list of either:     - Left key for read requests     - Right (key, value) for write requests","tags":["node-architecture","ordering-subsystem","engine","executor","environment"]},{"location":"arch/node/engines/executor_environment.html#mailbox-states","title":"Mailbox states","text":"<p>The executor engine does not require complex mailbox states.</p>","tags":["node-architecture","ordering-subsystem","engine","executor","environment"]},{"location":"arch/node/engines/executor_environment.html#executormailboxstate","title":"<code>ExecutorMailboxState</code>","text":"<pre><code>syntax alias ExecutorMailboxState := Unit;\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","executor","environment"]},{"location":"arch/node/engines/executor_environment.html#local-state","title":"Local state","text":"","tags":["node-architecture","ordering-subsystem","engine","executor","environment"]},{"location":"arch/node/engines/executor_environment.html#executorlocalstate","title":"<code>ExecutorLocalState</code>","text":"<pre><code>type ExecutorLocalState KVSKey KVSDatum ProgramState :=\n  mk@{\n    program_state : ProgramState;\n    completed_reads : Map KVSKey KVSDatum;\n    completed_writes : Map KVSKey KVSDatum\n  };\n</code></pre> Arguments <code>program_state</code> Current state of the executing program <code>completed_reads</code> Map of keys to values that have been successfully read <code>completed_writes</code> Map of keys to values that have been successfully written","tags":["node-architecture","ordering-subsystem","engine","executor","environment"]},{"location":"arch/node/engines/executor_environment.html#timer-handle","title":"Timer Handle","text":"<p>The executor engine does not require timer handles.</p>","tags":["node-architecture","ordering-subsystem","engine","executor","environment"]},{"location":"arch/node/engines/executor_environment.html#executortimerhandle","title":"<code>ExecutorTimerHandle</code>","text":"<pre><code>syntax alias ExecutorTimerHandle := Unit;\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","executor","environment"]},{"location":"arch/node/engines/executor_environment.html#the-executor-environment","title":"The Executor Environment","text":"","tags":["node-architecture","ordering-subsystem","engine","executor","environment"]},{"location":"arch/node/engines/executor_environment.html#executorenv","title":"<code>ExecutorEnv</code>","text":"<pre><code>ExecutorEnv (KVSKey KVSDatum ProgramState : Type) : Type :=\n  EngineEnv\n    (ExecutorLocalState KVSKey KVSDatum ProgramState)\n    ExecutorMailboxState\n    ExecutorTimerHandle\n    Anoma.Msg;\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","executor","environment"]},{"location":"arch/node/engines/executor_environment.html#instantiation","title":"Instantiation","text":"<p>```juvix extract-module-statements module executor_environment_example;</p> <p>executorEnv {KVSKey KVSDatum} : ExecutorEnv KVSKey KVSDatum String :=   EngineEnv.mk@{     localState := ExecutorLocalState.mk@{       program_state := \"\";       completed_reads := Map.empty;       completed_writes := Map.empty     };     mailboxCluster := Map.empty;     acquaintances := Set.empty;     timers := []   }; end; ```</p>","tags":["node-architecture","ordering-subsystem","engine","executor","environment"]},{"location":"arch/node/engines/executor_messages.html","title":"Executor Messages","text":"Juvix imports <pre><code>module arch.node.engines.executor_messages;\nimport prelude open;\nimport arch.node.types.basics open;\nimport arch.node.types.identities open;\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","executor","message-types"]},{"location":"arch/node/engines/executor_messages.html#executor-messages","title":"Executor Messages","text":"<p>These are the specific messages that the Executor engine can receive/respond to.</p>","tags":["node-architecture","ordering-subsystem","engine","executor","message-types"]},{"location":"arch/node/engines/executor_messages.html#message-interface","title":"Message interface","text":"<pre><code>type ExecutorMsg KVSKey KVSDatum :=\n  | ExecutorFinished (ExecutorFinishedMsg KVSKey KVSDatum)\n  ;\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","executor","message-types"]},{"location":"arch/node/engines/executor_messages.html#message-sequence-diagram","title":"Message sequence diagram","text":"","tags":["node-architecture","ordering-subsystem","engine","executor","message-types"]},{"location":"arch/node/engines/executor_messages.html#execution-flow","title":"Execution flow","text":"<pre><code>sequenceDiagram\n    participant Executor\n    participant Shard\n    participant Worker\n\n    Executor-&gt;&gt;Shard: KVSReadRequest\n    Shard-&gt;&gt;Executor: KVSRead\n    Executor-&gt;&gt;Shard: KVSWrite\n    Executor-&gt;&gt;Worker: ExecutorFinished</code></pre>  Basic execution flow sequence showing interaction with shards and completion notification","tags":["node-architecture","ordering-subsystem","engine","executor","message-types"]},{"location":"arch/node/engines/executor_messages.html#message-types","title":"Message types","text":"","tags":["node-architecture","ordering-subsystem","engine","executor","message-types"]},{"location":"arch/node/engines/executor_messages.html#executorfinishedmsg","title":"<code>ExecutorFinishedMsg</code>","text":"<p>Notification that execution is complete.</p> <pre><code>type ExecutorFinishedMsg KVSKey KVSDatum :=\n  mkExecutorFinishedMsg {\n    success : Bool;\n    values_read : List (Pair KVSKey KVSDatum);\n    values_written : List (Pair KVSKey KVSDatum)\n  }\n</code></pre> Arguments <code>success</code> Whether execution completed successfully <code>values_read</code> List of all key-value pairs that were read <code>values_written</code> List of all key-value pairs that were written","tags":["node-architecture","ordering-subsystem","engine","executor","message-types"]},{"location":"arch/node/engines/executor_messages.html#executormsg","title":"<code>ExecutorMsg</code>","text":"<pre><code>type ExecutorMsg KVSKey KVSDatum :=\n  | ExecutorFinished (ExecutorFinishedMsg KVSKey KVSDatum)\n  ;\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","executor","message-types"]},{"location":"arch/node/engines/executor_messages.html#engine-components","title":"Engine components","text":"<ul> <li>Executor Configuration</li> <li>Executor Environment</li> <li>Executor Behaviour</li> </ul>","tags":["node-architecture","ordering-subsystem","engine","executor","message-types"]},{"location":"arch/node/engines/identity_management.html","title":"Identity Management Engine","text":"Juvix imports <pre><code>module arch.node.engines.identity_management;\n\nimport prelude open;\nimport arch.node.types.engine open;\n\nimport arch.node.engines.identity_management_messages open public;\nimport arch.node.engines.identity_management_environment open public;\nimport arch.node.engines.identity_management_behaviour open public;\n\nimport arch.node.engines.identity_management_config open public;\nimport arch.node.engines.identity_management_messages open public;\nimport arch.node.engines.identity_management_environment open public;\nimport arch.node.engines.identity_management_behaviour open public;\n\nimport arch.node.types.anoma as Anoma open;\n\nopen identity_management_config_example;\nopen identity_management_environment_example;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","identity-management","engine-definition"]},{"location":"arch/node/engines/identity_management.html#identitymanagement-engine","title":"IdentityManagement Engine","text":"<p>The Identity Management Engine serves as the central coordinator for identity operations within Anoma, managing the entire lifecycle of identities across various storage systems (called \"backends\"). These backends provide a service such as creating new identities, connecting to existing ones, and managing their cryptographic capabilities (commiting and decrypting), while abstracting away the complexity of different storage systems (e.g., local memory, hardware devices, browser extensions, and remote machines).</p> <p>Users can request new identity generation (via a <code>MsgIdentityManagementGenerateIdentityRequest</code> message) or connection to existing identities (via a <code>MsgIdentityManagementConnectIdentityRequest</code> message), specifying their desired capabilities. The Capabilities system in Anoma provides fine-grained control over what operations an identity can perform. Each identity can have commitment (signing) capabilities, decryption capabilities, or both. When you create or connect to an identity, you specify exactly which capabilities you need (via a term of the <code>Capabilities</code> type), and the Identity Management Engine ensures you only get access to those specific operations. <code>CapabilityCommit</code> allows an identity to sign data - useful when you need to prove authenticity or authorize actions but don't need to read encrypted messages. <code>CapabilityDecrypt</code> enables decryption of messages intended for that identity - essential when you need to receive encrypted communications but don't need to sign anything. <code>CapabilityCommitAndDecrypt</code> provides both abilities, letting an identity both sign data and decrypt messages.</p> <p>When connecting to an existing identity, you can request a subset of that identity's capabilities but never more than it has. For example, if an identity was created with only <code>CapabilityCommit</code>, you cannot request decryption capabilities when connecting to it. The Identity Management Engine enforces these restrictions and will return an error if you request capabilities that are not available.</p> <p>The Identity Management Engine handles the creation or connection process and returns references to the appropriate Commitment and Decryption  engines (via either a <code>ReplyGenerateIdentity</code> or <code>MsgIdentityManagementConnectIdentityRequest</code> message) that provide the requested capabilities. These engines are newly created in the case of identity creation. Which engines are spawned are determined by the requested capabilities.</p> <p>Identity Management Engines maintain a registry of active identities and their capabilities. When an identity is no longer needed, it can be cleanly removed (via a <code>MsgIdentityManagementDeleteIdentityRequest</code> message).</p>","tags":["node-architecture","identity-subsystem","engine","identity-management","engine-definition"]},{"location":"arch/node/engines/identity_management.html#engine-components","title":"Engine components","text":"<ul> <li>Identity Management Messages</li> <li>Identity Management Configuration</li> <li>Identity Management Environment</li> <li>Identity Management Behaviour</li> </ul>","tags":["node-architecture","identity-subsystem","engine","identity-management","engine-definition"]},{"location":"arch/node/engines/identity_management.html#type","title":"Type","text":"<pre><code>IdentityManagementEngine : Type :=\n  Engine\n    IdentityManagementCfg\n    IdentityManagementLocalState\n    IdentityManagementMailboxState\n    IdentityManagementTimerHandle\n    IdentityManagementActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","identity-management","engine-definition"]},{"location":"arch/node/engines/identity_management.html#example-of-a-identity-management-engine","title":"Example of a identity management engine","text":"<pre><code>exampleIdentityManagementEngine : IdentityManagementEngine :=\n  Engine.mk@{\n    cfg := identityManagementCfg;\n    env := identityManagementEnv;\n    behaviour := identityManagementBehaviour;\n  };\n</code></pre> <p>where <code>identityManagementCfg</code> is defined as follows:</p> <p>```juvix extract-module-statements module identity_management_config_example;</p> <p>identityManagementCfg : EngineCfg IdentityManagementCfg :=     EngineCfg.mk@{       node := PublicKey.Curve25519PubKey \"0xabcd1234\";       name := \"identity management\";       cfg := IdentityManagementCfg.mk     }   ; end; <pre><code>`identityManagementEnv` is defined as follows:\n\n```juvix extract-module-statements\nmodule identity_management_environment_example;\n\nidentityManagementEnv : IdentityManagementEnv :=\n    EngineEnv.mk@{\n      localState := IdentityManagementLocalState.mk@{\n        identities := Map.empty\n      };\n      mailboxCluster := Map.empty;\n      acquaintances := Set.empty;\n      timers := []\n    }\n  ;\nend;\n</code></pre></p> <p>and <code>identityManagementBehaviour</code> is defined as follows:</p> <pre><code>identityManagementBehaviour : IdentityManagementBehaviour :=\n  EngineBehaviour.mk@{\n    guards := GuardEval.First [\n      generateIdentityGuard;\n      connectIdentityGuard;\n      deleteIdentityGuard\n    ]\n  };\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","identity-management","engine-definition"]},{"location":"arch/node/engines/identity_management_behaviour.html","title":"Identity Management Behaviour","text":"Juvix imports <pre><code>module arch.node.engines.identity_management_behaviour;\n\nimport prelude open;\nimport arch.node.engines.commitment_config open;\nimport arch.node.engines.decryption_config open;\nimport arch.node.engines.commitment_environment open;\nimport arch.node.engines.decryption_environment open;\nimport arch.node.engines.identity_management_environment open;\nimport arch.node.engines.identity_management_messages open;\nimport arch.node.engines.identity_management_config open;\nimport arch.node.types.anoma as Anoma open;\nimport arch.node.types.engine open;\nimport arch.node.types.engine_environment open;\nimport arch.node.types.identities open;\nimport arch.node.types.messages open;\nimport arch.system.identity.identity open hiding {ExternalIdentity};\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","identity-management","behaviour"]},{"location":"arch/node/engines/identity_management_behaviour.html#identity-management-behaviour","title":"Identity Management Behaviour","text":"","tags":["node-architecture","identity-subsystem","engine","identity-management","behaviour"]},{"location":"arch/node/engines/identity_management_behaviour.html#overview","title":"Overview","text":"<p>The behaviour of the Identity Management Engine defines how it coordinates committing/signing and decrypting operations through the spawning of engines for these functions along with maintaining a database which may be modified through the creation, connection, and deletion of identities associated with specific capabilities.</p>","tags":["node-architecture","identity-subsystem","engine","identity-management","behaviour"]},{"location":"arch/node/engines/identity_management_behaviour.html#identity-management-action-flowcharts","title":"Identity Management Action Flowcharts","text":"","tags":["node-architecture","identity-subsystem","engine","identity-management","behaviour"]},{"location":"arch/node/engines/identity_management_behaviour.html#generateidentityaction-flowchart","title":"<code>generateIdentityAction</code> flowchart","text":"<pre><code>flowchart TD\n    Start([Generate Request]) --&gt; MsgReq[MsgIdentityManagementGenerateIdentityRequest&lt;br/&gt;backend: Backend&lt;br/&gt;params: IDParams&lt;br/&gt;capabilities: Capabilities]\n\n    subgraph Guard[\"generateIdentityGuard\"]\n        MsgReq --&gt; ValidType{Is message type&lt;br/&gt;GenerateIdentityRequest?}\n        ValidType --&gt;|No| Reject([Reject Request])\n        ValidType --&gt;|Yes| ActionEntry[Enter Action Phase]\n    end\n\n    ActionEntry --&gt; Action\n\n    subgraph Action[\"generateIdentityAction\"]\n        direction TB\n        Check{Identity already&lt;br/&gt;exists?}\n        Check --&gt;|Yes| ErrExists[Create Error Reply]\n        Check --&gt;|No| Create[Create new identity info]\n        Create --&gt; SpawnEngines{Which capabilities?}\n        SpawnEngines --&gt;|Commit| SpawnCommit[Spawn Commitment Engine]\n        SpawnEngines --&gt;|Decrypt| SpawnDecrypt[Spawn Decryption Engine]\n        SpawnEngines --&gt;|Both| SpawnBoth[Spawn Both Engines]\n        SpawnCommit &amp; SpawnDecrypt &amp; SpawnBoth --&gt; UpdateState[Update registry]\n    end\n\n    UpdateState --&gt; Reply[Success Reply&lt;br/&gt;with engine IDs]\n    ErrExists --&gt; ErrReply[Error Reply]\n    Reply &amp; ErrReply --&gt; Client([Return to Client])</code></pre> <code>generateIdentityAction</code> flowchart","tags":["node-architecture","identity-subsystem","engine","identity-management","behaviour"]},{"location":"arch/node/engines/identity_management_behaviour.html#explanation","title":"Explanation","text":"<ol> <li> <p>Initial Request</p> <ul> <li>A client sends a <code>MsgIdentityManagementGenerateIdentityRequest</code> containing:<ul> <li><code>backend</code>: Specifies backend to be used</li> <li><code>params</code>: Cryptographic parameters</li> <li><code>capabilities</code>: Which capabilities are needed (commit, decrypt, or both)</li> </ul> </li> <li>The requesting identity must not already exist in the system</li> </ul> </li> <li> <p>Guard Phase (<code>generateIdentityGuard</code>)</p> <ul> <li>Validates incoming message structure and type</li> <li>Validation steps:<ul> <li>Verifies message type is <code>MsgIdentityManagementGenerateIdentityRequest</code></li> <li>If validation fails, request is rejected immediately</li> <li>On success, passes control to <code>generateIdentityActionLabel</code></li> </ul> </li> </ul> </li> <li> <p>Action Phase (<code>generateIdentityAction</code>)</p> <ul> <li>Processes valid generation requests through these steps:<ul> <li>Checks if requesting identity already exists in registry</li> <li>Creates new identity info with specified backend and capabilities</li> <li>Spawns appropriate engine(s) based on requested capabilities</li> <li>Updates identity registry with new identity and engine references</li> <li>Constructs appropriate response based on result</li> </ul> </li> </ul> </li> <li> <p>Reply Generation</p> <ul> <li>Successful Case<ul> <li>Creates <code>MsgIdentityManagementGenerateIdentityReply</code> with:<ul> <li><code>commitmentEngine</code>: Engine ID if commit capability requested, None otherwise</li> <li><code>decryptionEngine</code>: Engine ID if decrypt capability requested, None otherwise</li> <li><code>externalIdentity</code>: ID of the newly created identity</li> <li><code>err</code>: None</li> </ul> </li> </ul> </li> <li>Error Case<ul> <li>Creates <code>MsgIdentityManagementGenerateIdentityReply</code> with:<ul> <li><code>commitmentEngine</code>: None</li> <li><code>decryptionEngine</code>: None</li> <li><code>externalIdentity</code>: Requester's ID</li> <li><code>err</code>: Some \"Identity already exists\"</li> </ul> </li> </ul> </li> </ul> </li> <li> <p>Reply Delivery</p> <ul> <li>Reply is sent back to the original requester</li> <li>Uses mailbox 0 (default mailbox for responses)</li> </ul> </li> </ol>","tags":["node-architecture","identity-subsystem","engine","identity-management","behaviour"]},{"location":"arch/node/engines/identity_management_behaviour.html#connectidentityaction-flowchart","title":"<code>connectIdentityAction</code> flowchart","text":"<pre><code>flowchart TD\n    Start([Connect Request]) --&gt; MsgReq[MsgIdentityManagementConnectIdentityRequest&lt;br/&gt;externalIdentity: EngineID&lt;br/&gt;backend: Backend&lt;br/&gt;capabilities: Capabilities]\n\n    subgraph Guard[\"connectIdentityGuard\"]\n        MsgReq --&gt; ValidType{Is message type&lt;br/&gt;ConnectIdentityRequest?}\n        ValidType --&gt;|No| Reject([Reject Request])\n        ValidType --&gt;|Yes| ActionEntry[Enter Action Phase]\n    end\n\n    ActionEntry --&gt; Action\n\n    subgraph Action[\"connectIdentityAction\"]\n        direction TB\n        Check{Requesting Identity&lt;br/&gt;exists?}\n        Check --&gt;|Yes| ErrExists[Create Error Reply]\n        Check --&gt;|No| FindExternal{External Identity&lt;br/&gt;exists?}\n        FindExternal --&gt;|No| ErrNotFound[Error: Not Found]\n        FindExternal --&gt;|Yes| CheckCaps{Requested capabilities&lt;br/&gt;subset of original?}\n        CheckCaps --&gt;|No| ErrCaps[Error: Invalid Capabilities]\n        CheckCaps --&gt;|Yes| CopyEngines[Copy Engine References]\n        CopyEngines --&gt; UpdateState[Update registry]\n    end\n\n    UpdateState --&gt; Reply[Success Reply&lt;br/&gt;with engine IDs]\n    ErrExists &amp; ErrNotFound &amp; ErrCaps --&gt; ErrReply[Error Reply]\n    Reply &amp; ErrReply --&gt; Client([Return to Client])</code></pre> <code>connectIdentityAction</code> flowchart","tags":["node-architecture","identity-subsystem","engine","identity-management","behaviour"]},{"location":"arch/node/engines/identity_management_behaviour.html#explanation_1","title":"Explanation","text":"<ol> <li> <p>Initial Request</p> <ul> <li>A client sends a <code>MsgIdentityManagementConnectIdentityRequest</code> containing:<ul> <li><code>externalIdentity</code>: ID of the existing identity to connect to</li> <li><code>backend</code>: Backend to use</li> <li><code>capabilities</code>: Which subset of the original identity's capabilities are requested</li> </ul> </li> <li>The requesting identity must not already exist in the system</li> <li>The external identity must exist and have at least the requested capabilities</li> </ul> </li> <li> <p>Guard Phase (<code>connectIdentityGuard</code>)</p> <ul> <li>Validates incoming message structure and type</li> <li>Validation steps:<ul> <li>Verifies message type is <code>MsgIdentityManagementConnectIdentityRequest</code></li> <li>If validation fails, request is rejected immediately</li> <li>On success, passes control to <code>connectIdentityActionLabel</code></li> </ul> </li> </ul> </li> <li> <p>Action Phase (<code>connectIdentityAction</code>)</p> <ul> <li>Processes valid connection requests through these steps:<ul> <li>Verifies requesting identity doesn't already exist</li> <li>Checks if external identity exists in registry</li> <li>Validates requested capabilities are subset of original</li> <li>Copies relevant engine references based on capabilities</li> <li>Updates identity registry with new connected identity</li> <li>Constructs appropriate response based on result</li> </ul> </li> </ul> </li> <li> <p>Reply Generation</p> <ul> <li>Successful Case<ul> <li>Creates <code>MsgIdentityManagementConnectIdentityReply</code> with:<ul> <li><code>commitmentEngine</code>: Copied engine ID if commit capability requested, None otherwise</li> <li><code>decryptionEngine</code>: Copied engine ID if decrypt capability requested, None otherwise</li> <li><code>err</code>: None</li> </ul> </li> </ul> </li> <li>Error Cases<ul> <li>Creates <code>MsgIdentityManagementConnectIdentityReply</code> with:<ul> <li><code>commitmentEngine</code>: None</li> <li><code>decryptionEngine</code>: None</li> <li><code>err</code>: Some error message:<ul> <li>\"Identity already exists\" if requesting identity exists</li> <li>\"External identity not found\" if target doesn't exist</li> <li>\"Capabilities not available\" if capability subset invalid</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li> <p>Reply Delivery</p> <ul> <li>Reply is sent back to the original requester</li> <li>Uses mailbox 0 (default mailbox for responses)</li> </ul> </li> </ol>","tags":["node-architecture","identity-subsystem","engine","identity-management","behaviour"]},{"location":"arch/node/engines/identity_management_behaviour.html#deleteidentityaction-flowchart","title":"<code>deleteIdentityAction</code> flowchart","text":"<pre><code>flowchart TD\n    Start([Delete Request]) --&gt; MsgReq[MsgIdentityManagementDeleteIdentityRequest&lt;br/&gt;externalIdentity: EngineID&lt;br/&gt;backend: Backend]\n\n    subgraph Guard[\"deleteIdentityGuard\"]\n        MsgReq --&gt; ValidType{Is message type&lt;br/&gt;DeleteIdentityRequest?}\n        ValidType --&gt;|No| Reject([Reject Request])\n        ValidType --&gt;|Yes| ActionEntry[Enter Action Phase]\n    end\n\n    ActionEntry --&gt; Action\n\n    subgraph Action[\"deleteIdentityAction\"]\n        direction TB\n        Check{Identity exists?}\n        Check --&gt;|No| ErrNoExist[Create Error Reply]\n        Check --&gt;|Yes| Delete[Remove from registry]\n    end\n\n    Delete --&gt; Reply[Success Reply]\n    ErrNoExist --&gt; ErrReply[Error Reply]\n    Reply &amp; ErrReply --&gt; Client([Return to Client])\n\n    style Guard fill:#f0f7ff,stroke:#333,stroke-width:2px\n    style Action fill:#fff7f0,stroke:#333,stroke-width:2px</code></pre> <code>deleteIdentityAction</code> flowchart","tags":["node-architecture","identity-subsystem","engine","identity-management","behaviour"]},{"location":"arch/node/engines/identity_management_behaviour.html#explanation_2","title":"Explanation","text":"<ol> <li> <p>Initial Request</p> <ul> <li>A client sends a <code>MsgIdentityManagementDeleteIdentityRequest</code> containing:<ul> <li><code>externalIdentity</code>: ID of the identity to delete</li> <li><code>backend</code>: Backend system where the identity exists</li> </ul> </li> <li>The identity to be deleted must exist in the system</li> </ul> </li> <li> <p>Guard Phase (<code>deleteIdentityGuard</code>)</p> <ul> <li>Validates incoming message structure and type</li> <li>Validation steps:<ul> <li>Verifies message type is <code>MsgIdentityManagementDeleteIdentityRequest</code></li> <li>If validation fails, request is rejected immediately</li> <li>On success, passes control to <code>deleteIdentityActionLabel</code></li> </ul> </li> </ul> </li> <li> <p>Action Phase (<code>deleteIdentityAction</code>)</p> <ul> <li>Processes valid deletion requests through these steps:<ul> <li>Verifies identity exists in registry</li> <li>Removes identity and associated engine references from registry</li> <li>Constructs appropriate response based on result</li> </ul> </li> </ul> </li> <li> <p>Reply Generation</p> <ul> <li>Successful Case<ul> <li>Creates <code>MsgIdentityManagementDeleteIdentityReply</code> with:<ul> <li><code>err</code>: None</li> </ul> </li> </ul> </li> <li>Error Case<ul> <li>Creates <code>MsgIdentityManagementDeleteIdentityReply</code> with:<ul> <li><code>err</code>: Some \"Identity does not exist\"</li> </ul> </li> </ul> </li> </ul> </li> <li> <p>Reply Delivery</p> <ul> <li>Reply is sent back to the original requester</li> <li>Uses mailbox 0 (default mailbox for responses)</li> </ul> </li> </ol> <p>Important Notes</p> <ul> <li>All spawned engines inherit the backend from the generation request</li> <li>Engine references are managed through the identity management engine's state</li> <li>Capabilities can only be restricted when connecting, never expanded</li> <li>The system maintains a mapping between identities and their associated engine references</li> <li>Each identity maintains its own separate set of engines</li> <li>State updates are atomic - either all parts succeed or none do</li> </ul>","tags":["node-architecture","identity-subsystem","engine","identity-management","behaviour"]},{"location":"arch/node/engines/identity_management_behaviour.html#action-arguments","title":"Action arguments","text":"","tags":["node-architecture","identity-subsystem","engine","identity-management","behaviour"]},{"location":"arch/node/engines/identity_management_behaviour.html#messagefrom","title":"<code>MessageFrom</code>","text":"<pre><code>type MessageFrom := mkMessageFrom {\n  whoAsked : Option EngineID;\n  mailbox : Option MailboxID\n};\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","identity-management","behaviour"]},{"location":"arch/node/engines/identity_management_behaviour.html#identitymanagementactionargument","title":"<code>IdentityManagementActionArgument</code>","text":"<pre><code>type IdentityManagementActionArgument :=\n  | IdentityManagementActionArgumentMessageFrom MessageFrom;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","identity-management","behaviour"]},{"location":"arch/node/engines/identity_management_behaviour.html#identitymanagementactionarguments","title":"<code>IdentityManagementActionArguments</code>","text":"<pre><code>IdentityManagementActionArguments : Type := List IdentityManagementActionArgument;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","identity-management","behaviour"]},{"location":"arch/node/engines/identity_management_behaviour.html#actions","title":"Actions","text":"Auxiliary Juvix code","tags":["node-architecture","identity-subsystem","engine","identity-management","behaviour"]},{"location":"arch/node/engines/identity_management_behaviour.html#identitymanagementaction","title":"<code>IdentityManagementAction</code>","text":"<pre><code>IdentityManagementAction : Type :=\n  Action\n    IdentityManagementCfg\n    IdentityManagementLocalState\n    IdentityManagementMailboxState\n    IdentityManagementTimerHandle\n    IdentityManagementActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","identity-management","behaviour"]},{"location":"arch/node/engines/identity_management_behaviour.html#identitymanagementactioninput","title":"<code>IdentityManagementActionInput</code>","text":"<pre><code>IdentityManagementActionInput : Type :=\n  ActionInput\n    IdentityManagementCfg\n    IdentityManagementLocalState\n    IdentityManagementMailboxState\n    IdentityManagementTimerHandle\n    IdentityManagementActionArguments\n    Anoma.Msg;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","identity-management","behaviour"]},{"location":"arch/node/engines/identity_management_behaviour.html#identitymanagementactioneffect","title":"<code>IdentityManagementActionEffect</code>","text":"<pre><code>IdentityManagementActionEffect : Type :=\n  ActionEffect\n    IdentityManagementLocalState\n    IdentityManagementMailboxState\n    IdentityManagementTimerHandle\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","identity-management","behaviour"]},{"location":"arch/node/engines/identity_management_behaviour.html#identitymanagementactionexec","title":"IdentityManagementActionExec","text":"<pre><code>IdentityManagementActionExec : Type :=\n  ActionExec\n    IdentityManagementCfg\n    IdentityManagementLocalState\n    IdentityManagementMailboxState\n    IdentityManagementTimerHandle\n    IdentityManagementActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","identity-management","behaviour"]},{"location":"arch/node/engines/identity_management_behaviour.html#hascommitcapability","title":"<code>hasCommitCapability</code>","text":"<pre><code>hasCommitCapability (capabilities : Capabilities) : Bool :=\n  case capabilities of {\n    | Capabilities.Commit := true\n    | Capabilities.CommitAndDecrypt := true\n    | _ := false\n  };\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","identity-management","behaviour"]},{"location":"arch/node/engines/identity_management_behaviour.html#hasdecryptcapability","title":"<code>hasDecryptCapability</code>","text":"<pre><code>hasDecryptCapability (capabilities : Capabilities) : Bool :=\n  case capabilities of {\n    | Capabilities.Decrypt := true\n    | Capabilities.CommitAndDecrypt := true\n    | _ := false\n  };\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","identity-management","behaviour"]},{"location":"arch/node/engines/identity_management_behaviour.html#issubsetcapabilities","title":"<code>isSubsetCapabilities</code>","text":"<pre><code>isSubsetCapabilities\n  (requested : Capabilities)\n  (available : Capabilities)\n  : Bool :=\n  (not (hasCommitCapability requested) || hasCommitCapability available)\n  &amp;&amp; (not (hasDecryptCapability requested) || hasDecryptCapability available);\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","identity-management","behaviour"]},{"location":"arch/node/engines/identity_management_behaviour.html#updateidentityandspawnengines","title":"<code>updateIdentityAndSpawnEngines</code>","text":"<pre><code>updateIdentityAndSpawnEngines\n  (env : IdentityManagementEnv)\n  (backend' : Backend)\n  (whoAsked : EngineID)\n  (identityInfo : IdentityInfo)\n  (capabilities' : Capabilities)\n  : Pair IdentityInfo (List (Pair Cfg Env)) :=\n  let decryptionConfig : DecryptionCfg :=\n        DecryptionCfg.mk@{\n          decryptor := genDecryptor backend';\n          backend := backend';\n        };\n      decryptionEnv : DecryptionEnv :=\n        EngineEnv.mk@{\n          localState := unit;\n          mailboxCluster := Map.empty;\n          acquaintances := Set.empty;\n          timers := []\n        };\n      decryptionEng : Pair Cfg Env :=\n        mkPair (PreCfg.CfgDecryption decryptionConfig) (PreEnv.EnvDecryption decryptionEnv);\n      commitmentConfig : CommitmentCfg :=\n        CommitmentCfg.mk@{\n          signer := genSigner backend';\n          backend := backend';\n        };\n      commitmentEnv : CommitmentEnv :=\n        EngineEnv.mk@{\n          localState := unit;\n          mailboxCluster := Map.empty;\n          acquaintances := Set.empty;\n          timers := []\n        };\n      commitmentEng : Pair Cfg Env :=\n        mkPair (PreCfg.CfgCommitment commitmentConfig) (PreEnv.EnvCommitment commitmentEnv);\n  in case capabilities' of {\n    | Capabilities.CommitAndDecrypt :=\n        let spawnedEngines := [decryptionEng; commitmentEng];\n            commitmentEngineName := nameGen \"committer\" (snd whoAsked) whoAsked;\n            decryptionEngineName := nameGen \"decryptor\" (snd whoAsked) whoAsked;\n            updatedIdentityInfo1 := identityInfo@IdentityInfo{\n              commitmentEngine := some (mkPair none commitmentEngineName);\n              decryptionEngine := some (mkPair none decryptionEngineName)\n            };\n        in mkPair updatedIdentityInfo1 spawnedEngines\n    | Capabilities.Commit :=\n        let spawnedEngines := [commitmentEng];\n            commitmentEngineName := nameGen \"committer\" (snd whoAsked) whoAsked;\n            updatedIdentityInfo1 := identityInfo@IdentityInfo{\n              commitmentEngine := some (mkPair none commitmentEngineName)\n            };\n        in mkPair updatedIdentityInfo1 spawnedEngines\n    | Capabilities.Decrypt :=\n        let spawnedEngines := [decryptionEng];\n            decryptionEngineName := nameGen \"decryptor\" (snd whoAsked) whoAsked;\n            updatedIdentityInfo1 := identityInfo@IdentityInfo{\n              decryptionEngine := some (mkPair none decryptionEngineName)\n            };\n        in mkPair updatedIdentityInfo1 spawnedEngines\n  };\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","identity-management","behaviour"]},{"location":"arch/node/engines/identity_management_behaviour.html#copyenginesforcapabilities","title":"<code>copyEnginesForCapabilities</code>","text":"<pre><code>copyEnginesForCapabilities\n  (env : IdentityManagementEnv)\n  (whoAsked : EngineID)\n  (externalIdentityInfo : IdentityInfo)\n  (requestedCapabilities : Capabilities)\n  : IdentityInfo :=\n  let newIdentityInfo := IdentityInfo.mkIdentityInfo@{\n        backend := IdentityInfo.backend externalIdentityInfo;\n        capabilities := requestedCapabilities;\n        commitmentEngine :=\n          case hasCommitCapability requestedCapabilities of {\n            | true := IdentityInfo.commitmentEngine externalIdentityInfo\n            | false := none\n          };\n        decryptionEngine :=\n          case hasDecryptCapability requestedCapabilities of {\n            | true := IdentityInfo.decryptionEngine externalIdentityInfo\n            | false := none\n          }\n      };\n  in newIdentityInfo;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","identity-management","behaviour"]},{"location":"arch/node/engines/identity_management_behaviour.html#generateidentityaction","title":"<code>generateIdentityAction</code>","text":"State update A new identity is created and added to the identities map if it doesn't exist. Messages to be sent A GenerateIdentityReply message containing the new identity info or error. Engines to be spawned Commitment and/or Decryption engines based on capabilities. Timer updates No timers are set or cancelled. <pre><code>generateIdentityAction\n  (input : IdentityManagementActionInput)\n  : Option IdentityManagementActionEffect :=\n  let\n    env := ActionInput.env input;\n    local := EngineEnv.localState env;\n    identities := IdentityManagementLocalState.identities local;\n    trigger := ActionInput.trigger input;\n  in case getEngineMsgFromTimestampedTrigger trigger of {\n    | some emsg :=\n      let whoAsked := EngineMsg.sender emsg;\n      in case Map.lookup whoAsked identities of {\n        | some _ :=\n          some ActionEffect.mk@{\n            env := env;\n            msgs := [EngineMsg.mk@{\n              sender := getEngineIDFromEngineCfg (ActionInput.cfg input);\n              target := whoAsked;\n              mailbox := some 0;\n              msg := PreMsg.MsgIdentityManagement (IdentityManagementMsg.GenerateIdentityReply\n                (ReplyGenerateIdentity.mkReplyGenerateIdentity@{\n                  commitmentEngine := none;\n                  decryptionEngine := none;\n                  externalIdentity := whoAsked;\n                  err := some \"Identity already exists\"\n                }))\n            }];\n            timers := [];\n            engines := []\n          }\n        | none :=\n          case emsg of {\n            | EngineMsg.mk@{msg := Anoma.PreMsg.MsgIdentityManagement (IdentityManagementMsg.GenerateIdentityRequest (RequestGenerateIdentity.mkRequestGenerateIdentity backend' params' capabilities'))} :=\n              let identityInfo := IdentityInfo.mkIdentityInfo@{\n                    backend := backend';\n                    capabilities := capabilities';\n                    commitmentEngine := none;\n                    decryptionEngine := none\n                  };\n                  pair' := updateIdentityAndSpawnEngines env backend' whoAsked identityInfo capabilities';\n                  updatedIdentityInfo := fst pair';\n                  spawnedEnginesFinal := snd pair';\n                  updatedIdentities := Map.insert whoAsked updatedIdentityInfo identities;\n                  newLocalState := local@IdentityManagementLocalState{\n                    identities := updatedIdentities\n                  };\n                  newEnv' := env@EngineEnv{\n                    localState := newLocalState\n                  };\n              in some ActionEffect.mk@{\n                env := newEnv';\n                msgs := [EngineMsg.mk@{\n                  sender := getEngineIDFromEngineCfg (ActionInput.cfg input);\n                  target := whoAsked;\n                  mailbox := some 0;\n                  msg := PreMsg.MsgIdentityManagement (IdentityManagementMsg.GenerateIdentityReply\n                    (ReplyGenerateIdentity.mkReplyGenerateIdentity@{\n                      commitmentEngine := IdentityInfo.commitmentEngine updatedIdentityInfo;\n                      decryptionEngine := IdentityInfo.decryptionEngine updatedIdentityInfo;\n                      externalIdentity := whoAsked;\n                      err := none\n                    }))\n                }];\n                timers := [];\n                engines := spawnedEnginesFinal\n              }\n            | _ := none\n          }\n      }\n    | _ := none\n  };\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","identity-management","behaviour"]},{"location":"arch/node/engines/identity_management_behaviour.html#connectidentityaction","title":"<code>connectIdentityAction</code>","text":"State update A new identity is created with copied capabilities if valid. Messages to be sent A <code>ConnectIdentityReply</code> message with confirmation or error. Engines to be spawned No new engines are spawned. Timer updates No timers are set or cancelled. <pre><code>connectIdentityAction\n  (input : IdentityManagementActionInput)\n  : Option IdentityManagementActionEffect :=\n  let\n    env := ActionInput.env input;\n    local := EngineEnv.localState env;\n    identities := IdentityManagementLocalState.identities local;\n    trigger := ActionInput.trigger input;\n  in case getEngineMsgFromTimestampedTrigger trigger of {\n    | some emsg :=\n      let whoAsked := EngineMsg.sender emsg;\n      in case Map.lookup whoAsked identities of {\n        | some _ :=\n          some ActionEffect.mk@{\n            env := env;\n            msgs := [EngineMsg.mk@{\n              sender := getEngineIDFromEngineCfg (ActionInput.cfg input);\n              target := whoAsked;\n              mailbox := some 0;\n              msg := PreMsg.MsgIdentityManagement (IdentityManagementMsg.ConnectIdentityReply\n                (ReplyConnectIdentity.mkReplyConnectIdentity@{\n                  commitmentEngine := none;\n                  decryptionEngine := none;\n                  err := some \"Identity already exists\"\n                }))\n            }];\n            timers := [];\n            engines := []\n          }\n        | none :=\n          case emsg of {\n            | EngineMsg.mk@{msg := Anoma.PreMsg.MsgIdentityManagement (IdentityManagementMsg.ConnectIdentityRequest (RequestConnectIdentity.mkRequestConnectIdentity externalIdentity' backend' capabilities'))} :=\n              case Map.lookup externalIdentity' identities of {\n                | none :=\n                  some ActionEffect.mk@{\n                    env := env;\n                    msgs := [EngineMsg.mk@{\n                      sender := getEngineIDFromEngineCfg (ActionInput.cfg input);\n                      target := whoAsked;\n                      mailbox := some 0;\n                      msg := PreMsg.MsgIdentityManagement (IdentityManagementMsg.ConnectIdentityReply\n                        (ReplyConnectIdentity.mkReplyConnectIdentity@{\n                          commitmentEngine := none;\n                          decryptionEngine := none;\n                          err := some \"External identity not found\"\n                        }))\n                    }];\n                    timers := [];\n                    engines := []\n                  }\n                | some externalIdentityInfo :=\n                  if\n                    | isSubsetCapabilities capabilities' (IdentityInfo.capabilities externalIdentityInfo) :=\n                      let newIdentityInfo := copyEnginesForCapabilities env whoAsked externalIdentityInfo capabilities';\n                          updatedIdentities := Map.insert whoAsked newIdentityInfo identities;\n                          newLocalState := local@IdentityManagementLocalState{\n                            identities := updatedIdentities\n                          };\n                          newEnv' := env@EngineEnv{\n                            localState := newLocalState\n                          };\n                      in some ActionEffect.mk@{\n                        env := newEnv';\n                        msgs := [EngineMsg.mk@{\n                          sender := getEngineIDFromEngineCfg (ActionInput.cfg input);\n                          target := whoAsked;\n                          mailbox := some 0;\n                          msg := PreMsg.MsgIdentityManagement (IdentityManagementMsg.ConnectIdentityReply\n                            (ReplyConnectIdentity.mkReplyConnectIdentity@{\n                              commitmentEngine := IdentityInfo.commitmentEngine newIdentityInfo;\n                              decryptionEngine := IdentityInfo.decryptionEngine newIdentityInfo;\n                              err := none\n                            }))\n                        }];\n                        timers := [];\n                        engines := []\n                      }\n                    | else :=\n                      some ActionEffect.mk@{\n                        env := env;\n                        msgs := [EngineMsg.mk@{\n                          sender := getEngineIDFromEngineCfg (ActionInput.cfg input);\n                          target := whoAsked;\n                          mailbox := some 0;\n                          msg := PreMsg.MsgIdentityManagement (IdentityManagementMsg.ConnectIdentityReply\n                            (ReplyConnectIdentity.mkReplyConnectIdentity@{\n                              commitmentEngine := none;\n                              decryptionEngine := none;\n                              err := some \"Capabilities not available\"\n                            }))\n                        }];\n                        timers := [];\n                        engines := []\n                  }\n              }\n            | _ := none\n          }\n      }\n    | _ := none\n  };\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","identity-management","behaviour"]},{"location":"arch/node/engines/identity_management_behaviour.html#deleteidentityaction","title":"<code>deleteIdentityAction</code>","text":"State update Removes the specified identity if it exists. Messages to be sent A DeleteIdentityReply message with confirmation or error. Engines to be spawned No engines are spawned. Timer updates No timers are set or cancelled. <pre><code>deleteIdentityAction\n  (input : IdentityManagementActionInput)\n  : Option IdentityManagementActionEffect :=\n  let\n    env := ActionInput.env input;\n    local := EngineEnv.localState env;\n    identities := IdentityManagementLocalState.identities local;\n    trigger := ActionInput.trigger input;\n  in case getEngineMsgFromTimestampedTrigger trigger of {\n    | some emsg :=\n      let whoAsked := EngineMsg.sender emsg;\n      in case emsg of {\n        | EngineMsg.mk@{msg := Anoma.PreMsg.MsgIdentityManagement (IdentityManagementMsg.DeleteIdentityRequest (RequestDeleteIdentity.mkRequestDeleteIdentity externalIdentity backend'))} :=\n          case Map.lookup externalIdentity identities of {\n            | none :=\n              some ActionEffect.mk@{\n                env := env;\n                msgs := [EngineMsg.mk@{\n                  sender := getEngineIDFromEngineCfg (ActionInput.cfg input);\n                  target := whoAsked;\n                  mailbox := some 0;\n                  msg := PreMsg.MsgIdentityManagement (IdentityManagementMsg.DeleteIdentityReply\n                    (ReplyDeleteIdentity.mkReplyDeleteIdentity@{\n                      err := some \"Identity does not exist\"\n                    }))\n                }];\n                timers := [];\n                engines := []\n              }\n            | some _ :=\n              let updatedIdentities := Map.delete externalIdentity identities;\n                  newLocalState := local@IdentityManagementLocalState{\n                    identities := updatedIdentities\n                  };\n                  newEnv' := env@EngineEnv{\n                    localState := newLocalState\n                  };\n              in some ActionEffect.mk@{\n                env := newEnv';\n                msgs := [EngineMsg.mk@{\n                  sender := getEngineIDFromEngineCfg (ActionInput.cfg input);\n                  target := whoAsked;\n                  mailbox := some 0;\n                  msg := PreMsg.MsgIdentityManagement (IdentityManagementMsg.DeleteIdentityReply\n                    (ReplyDeleteIdentity.mkReplyDeleteIdentity@{\n                      err := none\n                    }))\n                }];\n                timers := [];\n                engines := []\n              }\n          }\n        | _ := none\n      }\n    | _ := none\n  };\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","identity-management","behaviour"]},{"location":"arch/node/engines/identity_management_behaviour.html#action-labels","title":"Action Labels","text":"","tags":["node-architecture","identity-subsystem","engine","identity-management","behaviour"]},{"location":"arch/node/engines/identity_management_behaviour.html#generateidentityactionlabel","title":"<code>generateIdentityActionLabel</code>","text":"<pre><code>generateIdentityActionLabel : IdentityManagementActionExec := ActionExec.Seq [ generateIdentityAction ];\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","identity-management","behaviour"]},{"location":"arch/node/engines/identity_management_behaviour.html#connectidentityactionlabel","title":"<code>connectIdentityActionLabel</code>","text":"<pre><code>connectIdentityActionLabel : IdentityManagementActionExec := ActionExec.Seq [ connectIdentityAction ];\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","identity-management","behaviour"]},{"location":"arch/node/engines/identity_management_behaviour.html#deleteidentityactionlabel","title":"<code>deleteIdentityActionLabel</code>","text":"<pre><code>deleteIdentityActionLabel : IdentityManagementActionExec := ActionExec.Seq [ deleteIdentityAction ];\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","identity-management","behaviour"]},{"location":"arch/node/engines/identity_management_behaviour.html#guards","title":"Guards","text":"Auxiliary Juvix code","tags":["node-architecture","identity-subsystem","engine","identity-management","behaviour"]},{"location":"arch/node/engines/identity_management_behaviour.html#identitymanagementguard","title":"<code>IdentityManagementGuard</code>","text":"<p> <pre><code>IdentityManagementGuard : Type :=\n  Guard\n    IdentityManagementCfg\n    IdentityManagementLocalState\n    IdentityManagementMailboxState\n    IdentityManagementTimerHandle\n    IdentityManagementActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","identity-subsystem","engine","identity-management","behaviour"]},{"location":"arch/node/engines/identity_management_behaviour.html#identitymanagementguardoutput","title":"<code>IdentityManagementGuardOutput</code>","text":"<p> <pre><code>IdentityManagementGuardOutput : Type :=\n  GuardOutput\n    IdentityManagementCfg\n    IdentityManagementLocalState\n    IdentityManagementMailboxState\n    IdentityManagementTimerHandle\n    IdentityManagementActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","identity-subsystem","engine","identity-management","behaviour"]},{"location":"arch/node/engines/identity_management_behaviour.html#identitymanagementguardeval","title":"<code>IdentityManagementGuardEval</code>","text":"<p> <pre><code>IdentityManagementGuardEval : Type :=\n  GuardEval\n    IdentityManagementCfg\n    IdentityManagementLocalState\n    IdentityManagementMailboxState\n    IdentityManagementTimerHandle\n    IdentityManagementActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","identity-subsystem","engine","identity-management","behaviour"]},{"location":"arch/node/engines/identity_management_behaviour.html#generateidentityguard","title":"<code>generateIdentityGuard</code>","text":"Condition Message type is MsgIdentityManagementGenerateIdentityRequest. <pre><code>generateIdentityGuard\n  (trigger : TimestampedTrigger IdentityManagementTimerHandle Anoma.Msg)\n  (cfg : EngineCfg IdentityManagementCfg)\n  (env : IdentityManagementEnv)\n  : Option IdentityManagementGuardOutput :=\n  case getEngineMsgFromTimestampedTrigger trigger of {\n    | some EngineMsg.mk@{\n        msg := Anoma.PreMsg.MsgIdentityManagement (IdentityManagementMsg.GenerateIdentityRequest _)\n      } :=\n      some GuardOutput.mk@{\n        action := generateIdentityActionLabel;\n        args := []\n      }\n    | _ := none\n  };\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","identity-management","behaviour"]},{"location":"arch/node/engines/identity_management_behaviour.html#connectidentityguard","title":"<code>connectIdentityGuard</code>","text":"Condition Message type is <code>MsgIdentityManagementConnectIdentityRequest</code>. <pre><code>connectIdentityGuard\n  (trigger : TimestampedTrigger IdentityManagementTimerHandle Anoma.Msg)\n  (cfg : EngineCfg IdentityManagementCfg)\n  (env : IdentityManagementEnv)\n  : Option IdentityManagementGuardOutput :=\n  case getEngineMsgFromTimestampedTrigger trigger of {\n    | some EngineMsg.mk@{\n        msg := Anoma.PreMsg.MsgIdentityManagement (IdentityManagementMsg.ConnectIdentityRequest _)\n      } :=\n      some GuardOutput.mk@{\n        action := connectIdentityActionLabel;\n        args := []\n      }\n    | _ := none\n  };\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","identity-management","behaviour"]},{"location":"arch/node/engines/identity_management_behaviour.html#deleteidentityguard","title":"<code>deleteIdentityGuard</code>","text":"Condition Message type is <code>MsgIdentityManagementDeleteIdentityRequest</code>. <pre><code>deleteIdentityGuard\n  (trigger : TimestampedTrigger IdentityManagementTimerHandle Anoma.Msg)\n  (cfg : EngineCfg IdentityManagementCfg)\n  (env : IdentityManagementEnv)\n  : Option IdentityManagementGuardOutput :=\n  case getEngineMsgFromTimestampedTrigger trigger of {\n    | some EngineMsg.mk@{\n        msg := Anoma.PreMsg.MsgIdentityManagement (IdentityManagementMsg.DeleteIdentityRequest _)\n      } :=\n      some GuardOutput.mk@{\n        action := deleteIdentityActionLabel;\n        args := []\n      }\n    | _ := none\n  };\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","identity-management","behaviour"]},{"location":"arch/node/engines/identity_management_behaviour.html#the-identity-management-behaviour","title":"The Identity Management Behaviour","text":"","tags":["node-architecture","identity-subsystem","engine","identity-management","behaviour"]},{"location":"arch/node/engines/identity_management_behaviour.html#identitymanagementbehaviour","title":"<code>IdentityManagementBehaviour</code>","text":"<pre><code>IdentityManagementBehaviour : Type :=\n  EngineBehaviour\n    IdentityManagementCfg\n    IdentityManagementLocalState\n    IdentityManagementMailboxState\n    IdentityManagementTimerHandle\n    IdentityManagementActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","identity-management","behaviour"]},{"location":"arch/node/engines/identity_management_behaviour.html#instantiation","title":"Instantiation","text":"<pre><code>identityManagementBehaviour : IdentityManagementBehaviour :=\n  EngineBehaviour.mk@{\n    guards := GuardEval.First [\n      generateIdentityGuard;\n      connectIdentityGuard;\n      deleteIdentityGuard\n    ]\n  };\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","identity-management","behaviour"]},{"location":"arch/node/engines/identity_management_config.html","title":"Identity Management Configuration","text":"Juvix imports <pre><code>module arch.node.engines.identity_management_config;\n\nimport prelude open;\nimport arch.node.engines.identity_management_messages open;\nimport arch.node.types.engine open;\nimport arch.node.types.messages open;\nimport arch.node.types.identities open;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","identity-management","configuration"]},{"location":"arch/node/engines/identity_management_config.html#identity-management-configuration","title":"Identity Management Configuration","text":"","tags":["node-architecture","identity-subsystem","engine","identity-management","configuration"]},{"location":"arch/node/engines/identity_management_config.html#overview","title":"Overview","text":"<p>The Identity Management engine configuration contains static information for Identity Management engine instances.</p>","tags":["node-architecture","identity-subsystem","engine","identity-management","configuration"]},{"location":"arch/node/engines/identity_management_config.html#the-identity-management-configuration","title":"The Identity Management Configuration","text":"","tags":["node-architecture","identity-subsystem","engine","identity-management","configuration"]},{"location":"arch/node/engines/identity_management_config.html#identitymanagementcfg","title":"<code>IdentityManagementCfg</code>","text":"<pre><code>type IdentityManagementCfg := mk\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","identity-management","configuration"]},{"location":"arch/node/engines/identity_management_config.html#instantiation","title":"Instantiation","text":"<p>```juvix extract-module-statements module identity_management_config_example;</p> <p>identityManagementCfg : EngineCfg IdentityManagementCfg :=     EngineCfg.mk@{       node := PublicKey.Curve25519PubKey \"0xabcd1234\";       name := \"identity management\";       cfg := IdentityManagementCfg.mk     }   ; end; ```</p>","tags":["node-architecture","identity-subsystem","engine","identity-management","configuration"]},{"location":"arch/node/engines/identity_management_environment.html","title":"Identity Management Environment","text":"Juvix imports <pre><code>module arch.node.engines.identity_management_environment;\nimport prelude open;\nimport arch.node.types.messages open;\nimport arch.node.types.crypto open;\nimport arch.node.types.identities open;\nimport arch.node.types.engine_environment open;\nimport arch.node.engines.identity_management_messages open;\nimport arch.node.types.anoma_message as Anoma open;\nimport arch.system.identity.identity open hiding {ExternalIdentity};\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","identity-management","environment"]},{"location":"arch/node/engines/identity_management_environment.html#identity-management-environment","title":"Identity Management Environment","text":"","tags":["node-architecture","identity-subsystem","engine","identity-management","environment"]},{"location":"arch/node/engines/identity_management_environment.html#overview","title":"Overview","text":"<p>The Identity Management Engine's environment maintains the state necessary for managing identities, including information about connected identities, backends, and capabilities.</p> Auxiliary Juvix code <pre><code>axiom genDecryptor : Backend -&gt; Decryptor Backend Plaintext Ciphertext;\naxiom genSigner : Backend -&gt; Signer Backend Signable Commitment\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","identity-management","environment"]},{"location":"arch/node/engines/identity_management_environment.html#mailbox-states","title":"Mailbox states","text":"<p>The Identity Management Engine does not require complex mailbox states. We define the mailbox state as <code>Unit</code>.</p>","tags":["node-architecture","identity-subsystem","engine","identity-management","environment"]},{"location":"arch/node/engines/identity_management_environment.html#identitymanagementmailboxstate","title":"<code>IdentityManagementMailboxState</code>","text":"<pre><code>syntax alias IdentityManagementMailboxState := Unit;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","identity-management","environment"]},{"location":"arch/node/engines/identity_management_environment.html#local-state","title":"Local state","text":"<p>The local state of the Identity Management Engine includes information about the identities it manages.</p>","tags":["node-architecture","identity-subsystem","engine","identity-management","environment"]},{"location":"arch/node/engines/identity_management_environment.html#identityinfo","title":"<code>IdentityInfo</code>","text":"<pre><code>type IdentityInfo := mkIdentityInfo@{\n  backend : Backend;\n  capabilities : Capabilities;\n  commitmentEngine : Option EngineID;\n  decryptionEngine : Option EngineID;\n};\n</code></pre> Arguments <code>backend</code>: The backend associated with this identity. <code>capabilities</code>: The capabilities available to this identity. <code>commitmentEngine</code>: Optional reference to the commitment engine for this identity. <code>decryptionEngine</code>: Optional reference to the decryption engine for this identity.","tags":["node-architecture","identity-subsystem","engine","identity-management","environment"]},{"location":"arch/node/engines/identity_management_environment.html#identitymanagementlocalstate","title":"<code>IdentityManagementLocalState</code>","text":"<pre><code>type IdentityManagementLocalState := mk@{\n  identities : Map EngineID IdentityInfo;\n};\n</code></pre> Arguments <code>identities</code>: Map of engine IDs to their corresponding identity information.","tags":["node-architecture","identity-subsystem","engine","identity-management","environment"]},{"location":"arch/node/engines/identity_management_environment.html#timer-handle","title":"Timer Handle","text":"<p>The Identity Management Engine does not require a timer handle type. Therefore, we define the timer handle type as <code>Unit</code>.</p>","tags":["node-architecture","identity-subsystem","engine","identity-management","environment"]},{"location":"arch/node/engines/identity_management_environment.html#identitymanagementtimerhandle","title":"<code>IdentityManagementTimerHandle</code>","text":"<pre><code>syntax alias IdentityManagementTimerHandle := Unit;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","identity-management","environment"]},{"location":"arch/node/engines/identity_management_environment.html#the-identity-management-environment","title":"The Identity Management Environment","text":"","tags":["node-architecture","identity-subsystem","engine","identity-management","environment"]},{"location":"arch/node/engines/identity_management_environment.html#identitymanagementenv","title":"<code>IdentityManagementEnv</code>","text":"<pre><code>IdentityManagementEnv : Type :=\n  EngineEnv\n    IdentityManagementLocalState\n    IdentityManagementMailboxState\n    IdentityManagementTimerHandle\n    Anoma.Msg;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","identity-management","environment"]},{"location":"arch/node/engines/identity_management_environment.html#instantiation","title":"Instantiation","text":"<p>```juvix extract-module-statements module identity_management_environment_example;</p> <p>identityManagementEnv : IdentityManagementEnv :=     EngineEnv.mk@{       localState := IdentityManagementLocalState.mk@{         identities := Map.empty       };       mailboxCluster := Map.empty;       acquaintances := Set.empty;       timers := []     }   ; end; ```</p>","tags":["node-architecture","identity-subsystem","engine","identity-management","environment"]},{"location":"arch/node/engines/identity_management_messages.html","title":"Identity Management Messages","text":"Juvix imports <pre><code>module arch.node.engines.identity_management_messages;\nimport prelude open;\nimport arch.node.types.identities open;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","identity-management","message-types"]},{"location":"arch/node/engines/identity_management_messages.html#identity-management-messages","title":"Identity Management Messages","text":"","tags":["node-architecture","identity-subsystem","engine","identity-management","message-types"]},{"location":"arch/node/engines/identity_management_messages.html#message-interface","title":"Message interface","text":"<pre><code>type IdentityManagementMsg :=\n  | GenerateIdentityRequest RequestGenerateIdentity\n  | GenerateIdentityReply ReplyGenerateIdentity\n  | ConnectIdentityRequest RequestConnectIdentity\n  | ConnectIdentityReply ReplyConnectIdentity\n  | DeleteIdentityRequest RequestDeleteIdentity\n  | DeleteIdentityReply ReplyDeleteIdentity\n  ;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","identity-management","message-types"]},{"location":"arch/node/engines/identity_management_messages.html#message-sequence-diagrams","title":"Message sequence diagrams","text":"","tags":["node-architecture","identity-subsystem","engine","identity-management","message-types"]},{"location":"arch/node/engines/identity_management_messages.html#generating-an-identity","title":"Generating an identity","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant IdentityManagementEngine\n    participant CommitmentEngine\n    participant DecryptionEngine\n\n    Client-&gt;&gt;IdentityManagementEngine: RequestGenerateIdentity\n    Note over IdentityManagementEngine: Create new identity\n    IdentityManagementEngine-&gt;&gt;CommitmentEngine: Spawn (if requested)\n    IdentityManagementEngine-&gt;&gt;DecryptionEngine: Spawn (if requested)\n    IdentityManagementEngine-&gt;&gt;Client: ReplyGenerateIdentity</code></pre>  Generating an identity","tags":["node-architecture","identity-subsystem","engine","identity-management","message-types"]},{"location":"arch/node/engines/identity_management_messages.html#connecting-to-an-existing-identity","title":"Connecting to an existing identity","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant IdentityManagementEngine\n\n    Client-&gt;&gt;IdentityManagementEngine: RequestConnectIdentity\n    Note over IdentityManagementEngine: Check external identity\n    Note over IdentityManagementEngine: Verify capabilities\n    Note over IdentityManagementEngine: Copy engine references\n    IdentityManagementEngine-&gt;&gt;Client: ReplyConnectIdentity</code></pre>  Connecting to an existing identity","tags":["node-architecture","identity-subsystem","engine","identity-management","message-types"]},{"location":"arch/node/engines/identity_management_messages.html#deleting-an-identity","title":"Deleting an identity","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant IdentityManagementEngine\n\n    Client-&gt;&gt;IdentityManagementEngine: RequestDeleteIdentity\n    Note over IdentityManagementEngine: Check if identity exists\n    Note over IdentityManagementEngine: Delete identity if exists\n    IdentityManagementEngine-&gt;&gt;Client: ReplyDeleteIdentity</code></pre>  Deleting an identity","tags":["node-architecture","identity-subsystem","engine","identity-management","message-types"]},{"location":"arch/node/engines/identity_management_messages.html#message-types","title":"Message types","text":"","tags":["node-architecture","identity-subsystem","engine","identity-management","message-types"]},{"location":"arch/node/engines/identity_management_messages.html#requestgenerateidentity","title":"<code>RequestGenerateIdentity</code>","text":"<pre><code>type RequestGenerateIdentity := mkRequestGenerateIdentity {\n  backend : Backend;\n  params : IDParams;\n  capabilities : Capabilities\n};\n</code></pre> <p>A <code>RequestGenerateIdentity</code> instructs the Identity Management Engine to generate a new identity using the specified backend, parameters, and capabilities.</p> Arguments <code>backend</code>: The backend to use for identity generation. <code>params</code>: Parameters to pass to the backend. <code>capabilities</code>: Capabilities to request (e.g., commitment, decryption, or both).","tags":["node-architecture","identity-subsystem","engine","identity-management","message-types"]},{"location":"arch/node/engines/identity_management_messages.html#replygenerateidentity","title":"<code>ReplyGenerateIdentity</code>","text":"<pre><code>type ReplyGenerateIdentity := mkReplyGenerateIdentity {\n  commitmentEngine : Option EngineID;\n  decryptionEngine : Option EngineID;\n  externalIdentity : EngineID;\n  err : Option String\n};\n</code></pre> <p>A <code>ReplyGenerateIdentity</code> provides the handles to the decryption and commitment engine instances for the newly generated identity, or an error if a failure occurred.</p> Arguments <code>commitmentEngine</code>: Reference to the newly instantiated commitment engine. <code>decryptionEngine</code>: Reference to the newly instantiated decryption engine. <code>externalIdentity</code>: The external identity of the newly created identity. <code>err</code>: An error message if identity generation failed.","tags":["node-architecture","identity-subsystem","engine","identity-management","message-types"]},{"location":"arch/node/engines/identity_management_messages.html#requestconnectidentity","title":"<code>RequestConnectIdentity</code>","text":"<pre><code>type RequestConnectIdentity := mkRequestConnectIdentity {\n  externalIdentity : EngineID;\n  backend : Backend;\n  capabilities : Capabilities\n};\n</code></pre> <p>A <code>RequestConnectIdentity</code> instructs the Identity Management Engine to connect to an existing identity using the specified backend.</p> Arguments <code>externalIdentity</code>: The external identity to connect. <code>backend</code>: The backend to use for the connection. <code>capabilities</code>: Capabilities to request (e.g., commitment, decryption, or both).","tags":["node-architecture","identity-subsystem","engine","identity-management","message-types"]},{"location":"arch/node/engines/identity_management_messages.html#replyconnectidentity","title":"<code>ReplyConnectIdentity</code>","text":"<pre><code>type ReplyConnectIdentity := mkReplyConnectIdentity {\n  commitmentEngine : Option EngineID;\n  decryptionEngine : Option EngineID;\n  err : Option String\n};\n</code></pre> <p>A <code>ReplyConnectIdentity</code> provides the handles to the decryption and commitment engine instances for the connected identity, or an error if a failure occurred.</p> Arguments <code>commitmentEngine</code>: Reference to the newly connected commitment engine. <code>decryptionEngine</code>: Reference to the newly connected decryption engine. <code>err</code>: An error message if identity connection failed.","tags":["node-architecture","identity-subsystem","engine","identity-management","message-types"]},{"location":"arch/node/engines/identity_management_messages.html#requestdeleteidentity","title":"<code>RequestDeleteIdentity</code>","text":"<pre><code>type RequestDeleteIdentity := mkRequestDeleteIdentity {\n  externalIdentity : EngineID;\n  backend : Backend\n};\n</code></pre> <p>A <code>RequestDeleteIdentity</code> instructs the Identity Management Engine to delete an existing identity using the specified backend.</p> Arguments <code>externalIdentity</code>: The external identity to delete. <code>backend</code>: The backend to use for deletion.","tags":["node-architecture","identity-subsystem","engine","identity-management","message-types"]},{"location":"arch/node/engines/identity_management_messages.html#replydeleteidentity","title":"<code>ReplyDeleteIdentity</code>","text":"<pre><code>type ReplyDeleteIdentity := mkReplyDeleteIdentity {\n  err : Option String\n};\n</code></pre> <p>A <code>ReplyDeleteIdentity</code> provides the response from an attempt to delete an identity.</p> Arguments <code>err</code>: An error message if identity deletion failed.","tags":["node-architecture","identity-subsystem","engine","identity-management","message-types"]},{"location":"arch/node/engines/identity_management_messages.html#identitymanagementmsg","title":"<code>IdentityManagementMsg</code>","text":"<pre><code>type IdentityManagementMsg :=\n  | GenerateIdentityRequest RequestGenerateIdentity\n  | GenerateIdentityReply ReplyGenerateIdentity\n  | ConnectIdentityRequest RequestConnectIdentity\n  | ConnectIdentityReply ReplyConnectIdentity\n  | DeleteIdentityRequest RequestDeleteIdentity\n  | DeleteIdentityReply ReplyDeleteIdentity\n  ;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","identity-management","message-types"]},{"location":"arch/node/engines/identity_management_messages.html#engine-components","title":"Engine components","text":"<ul> <li>Identity Management Configuration</li> <li>Identity Management Environment</li> <li>Identity Management Behaviour</li> </ul>","tags":["node-architecture","identity-subsystem","engine","identity-management","message-types"]},{"location":"arch/node/engines/local_key_value_storage.html","title":"Local Key Value Storage Engine","text":"Juvix imports <pre><code>module arch.node.engines.local_key_value_storage;\n\nimport prelude open;\nimport arch.node.types.engine open;\n\nimport arch.node.engines.local_key_value_storage_messages open public;\nimport arch.node.engines.local_key_value_storage_environment open public;\nimport arch.node.engines.local_key_value_storage_behaviour open public;\nimport arch.node.engines.local_key_value_storage_config open public;\n\nimport arch.node.types.anoma as Anoma open;\n\nopen local_key_value_storage_config_example;\nopen local_key_value_storage_environment_example;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","engine-definition"]},{"location":"arch/node/engines/local_key_value_storage.html#local-key-value-storage-engine","title":"Local Key-Value Storage Engine","text":"<p>The Local Key-Value Storage Engine handles persistent storage and retrieval of data in a key-value format on the local machine.</p>","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","engine-definition"]},{"location":"arch/node/engines/local_key_value_storage.html#purpose","title":"Purpose","text":"<p>The Local Key-Value Storage Engine provides local storage and retrieval of data in a key-value format. It supports storing, retrieving and deleting key-value pairs while notifying interested parties of changes.</p>","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","engine-definition"]},{"location":"arch/node/engines/local_key_value_storage.html#engine-components","title":"Engine components","text":"<ul> <li>Local Key Value Storage Messages</li> <li>Local Key Value Storage Configuration</li> <li>Local Key Value Storage Environment</li> <li>Local Key Value Storage Behaviour</li> </ul>","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","engine-definition"]},{"location":"arch/node/engines/local_key_value_storage.html#type","title":"Type","text":"<pre><code>LocalKVStorageEngine : Type :=\n  Engine\n    LocalKVStorageCfg\n    LocalKVStorageLocalState\n    LocalKVStorageMailboxState\n    LocalKVStorageTimerHandle\n    LocalKVStorageActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","engine-definition"]},{"location":"arch/node/engines/local_key_value_storage.html#example-of-a-local-key-value-storage-engine","title":"Example of a local key-value storage engine","text":"<pre><code>exampleLocalKVStorageEngine : LocalKVStorageEngine :=\n  Engine.mk@{\n    cfg := localKVStorageCfg;\n    env := localKVStorageEnv;\n    behaviour := localKVStorageBehaviour;\n  };\n</code></pre> <p>where <code>localKVStorageCfg</code> is defined as follows:</p> <p>```juvix extract-module-statements module local_key_value_storage_config_example;</p> <p>localKVStorageCfg : EngineCfg LocalKVStorageCfg :=     EngineCfg.mk@{       node := PublicKey.Curve25519PubKey \"0xabcd1234\";       name := \"key value storage\";       cfg := LocalKVStorageCfg.mk;     }   ; end; <pre><code>`localKVStorageEnv` is defined as follows:\n\n```juvix extract-module-statements\nmodule local_key_value_storage_environment_example;\n\n  localKVStorageEnv : LocalKVStorageEnv :=\n    EngineEnv.mk@{\n      localState := LocalKVStorageLocalState.mk@{\n        storage := Map.empty;\n        localClock := 0;\n      };\n      mailboxCluster := Map.empty;\n      acquaintances := Set.empty;\n      timers := []\n    }\n  ;\nend;\n</code></pre></p> <p>and <code>localKVStorageBehaviour</code> is defined as follows:</p> <pre><code>localKVStorageBehaviour : LocalKVStorageBehaviour :=\n  EngineBehaviour.mk@{\n    guards := GuardEval.First [\n      getValueGuard;\n      setValueGuard;\n      deleteValueGuard;\n    ];\n  };\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","engine-definition"]},{"location":"arch/node/engines/local_key_value_storage_behaviour.html","title":"Local Key Value Storage Behaviour","text":"Juvix imports <pre><code>module arch.node.engines.local_key_value_storage_behaviour;\n\nimport arch.node.engines.local_key_value_storage_messages open;\nimport arch.node.engines.local_key_value_storage_config open;\nimport arch.node.engines.local_key_value_storage_environment open;\n\nimport prelude open;\nimport arch.node.types.basics open;\nimport arch.node.types.identities open;\nimport arch.node.types.messages open;\nimport arch.node.types.engine open;\nimport arch.node.types.anoma as Anoma open;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","behaviour"]},{"location":"arch/node/engines/local_key_value_storage_behaviour.html#local-key-value-storage-behaviour","title":"Local Key-Value Storage Behaviour","text":"","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","behaviour"]},{"location":"arch/node/engines/local_key_value_storage_behaviour.html#overview","title":"Overview","text":"<p>The Local Key-Value Storage engine processes get, set, and delete operations on key-value pairs.</p>","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","behaviour"]},{"location":"arch/node/engines/local_key_value_storage_behaviour.html#action-arguments","title":"Action arguments","text":"","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","behaviour"]},{"location":"arch/node/engines/local_key_value_storage_behaviour.html#localkvstorageactionargument","title":"<code>LocalKVStorageActionArgument</code>","text":"<pre><code>type LocalKVStorageActionArgument :=\n  | LocalKVStorageReplyTo EngineID\n  ;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","behaviour"]},{"location":"arch/node/engines/local_key_value_storage_behaviour.html#localkvstorageactionarguments","title":"<code>LocalKVStorageActionArguments</code>","text":"<pre><code>LocalKVStorageActionArguments : Type := List LocalKVStorageActionArgument;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","behaviour"]},{"location":"arch/node/engines/local_key_value_storage_behaviour.html#actions","title":"Actions","text":"Auxiliary Juvix code","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","behaviour"]},{"location":"arch/node/engines/local_key_value_storage_behaviour.html#localkvstorageaction","title":"<code>LocalKVStorageAction</code>","text":"<p> <pre><code>LocalKVStorageAction : Type :=\n  Action\n    LocalKVStorageCfg\n    LocalKVStorageLocalState\n    LocalKVStorageMailboxState\n    LocalKVStorageTimerHandle\n    LocalKVStorageActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","behaviour"]},{"location":"arch/node/engines/local_key_value_storage_behaviour.html#localkvstorageactioninput","title":"<code>LocalKVStorageActionInput</code>","text":"<p> <pre><code>LocalKVStorageActionInput : Type :=\n  ActionInput\n    LocalKVStorageCfg\n    LocalKVStorageLocalState\n    LocalKVStorageMailboxState\n    LocalKVStorageTimerHandle\n    LocalKVStorageActionArguments\n    Anoma.Msg;\n</code></pre> </p>","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","behaviour"]},{"location":"arch/node/engines/local_key_value_storage_behaviour.html#localkvstorageactioneffect","title":"<code>LocalKVStorageActionEffect</code>","text":"<p> <pre><code>LocalKVStorageActionEffect : Type :=\n  ActionEffect\n    LocalKVStorageLocalState\n    LocalKVStorageMailboxState\n    LocalKVStorageTimerHandle\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","behaviour"]},{"location":"arch/node/engines/local_key_value_storage_behaviour.html#localkvstorageactionexec","title":"<code>LocalKVStorageActionExec</code>","text":"<p> <pre><code>LocalKVStorageActionExec : Type :=\n  ActionExec\n    LocalKVStorageCfg\n    LocalKVStorageLocalState\n    LocalKVStorageMailboxState\n    LocalKVStorageTimerHandle\n    LocalKVStorageActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","behaviour"]},{"location":"arch/node/engines/local_key_value_storage_behaviour.html#getvalueaction","title":"<code>getValueAction</code>","text":"<p>Retrieve a value from storage by key.</p> State update The state remains unchanged. Messages to be sent A <code>GetValueKVStoreReply</code> message with the requested value. Engines to be spawned No engines are created by this action. Timer updates No timers are set or cancelled. <pre><code>getValueAction\n  (input : LocalKVStorageActionInput)\n  : Option LocalKVStorageActionEffect :=\n  let\n    env := ActionInput.env input;\n    cfg := ActionInput.cfg input;\n    local := EngineEnv.localState env;\n    storage := LocalKVStorageLocalState.storage local;\n    trigger := ActionInput.trigger input;\n  in case getEngineMsgFromTimestampedTrigger trigger of {\n    | some emsg :=\n      case emsg of {\n        | EngineMsg.mk@{msg := Anoma.PreMsg.MsgLocalKVStorage (LocalKVStorageMsg.GetValueRequest req)} :=\n          some ActionEffect.mk@{\n            env := env;\n            msgs := [EngineMsg.mk@{\n              sender := getEngineIDFromEngineCfg cfg;\n              target := EngineMsg.sender emsg;\n              mailbox := some 0;\n              msg := Anoma.PreMsg.MsgLocalKVStorage (LocalKVStorageMsg.GetValueReply\n                (GetValueKVStoreReply.mkGetValueKVStoreReply@{\n                  key := GetValueKVStoreRequest.key req;\n                  value := fromOption (Map.lookup (GetValueKVStoreRequest.key req) storage) \"\"\n                }))\n            }];\n            timers := [];\n            engines := [];\n          }\n        | _ := none\n      }\n    | _ := none\n  };\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","behaviour"]},{"location":"arch/node/engines/local_key_value_storage_behaviour.html#setvalueaction","title":"<code>setValueAction</code>","text":"<p>Store a value in storage with given key.</p> State update The storage map is updated with new key-value pair. Messages to be sent A <code>SetValueKVStoreReply</code> message indicating success/failure. Several <code>LocalKVStorageMsgValueChanged</code> messages to those interested engines. Engines to be spawned No engines are created by this action. Timer updates No timers are set or cancelled. <pre><code>setValueAction\n  (input : LocalKVStorageActionInput)\n  : Option LocalKVStorageActionEffect :=\n  let\n    env := ActionInput.env input;\n    cfg := ActionInput.cfg input;\n    local := EngineEnv.localState env;\n    storage := LocalKVStorageLocalState.storage local;\n    trigger := ActionInput.trigger input;\n    newTime := advanceTime (LocalKVStorageLocalState.localClock local)\n  in case getEngineMsgFromTimestampedTrigger trigger of {\n    | some emsg :=\n      case emsg of {\n        | EngineMsg.mk@{msg := Anoma.PreMsg.MsgLocalKVStorage (LocalKVStorageMsg.SetValueRequest req)} :=\n          let\n            key := SetValueKVStoreRequest.key req;\n            value := SetValueKVStoreRequest.value req;\n            newStorage := Map.insert key value storage;\n            newLocal := local@LocalKVStorageLocalState{storage := newStorage; localClock := newTime};\n            newEnv := env@EngineEnv{localState := newLocal};\n            responseMsg := EngineMsg.mk@{\n              sender := getEngineIDFromEngineCfg cfg;\n              target := EngineMsg.sender emsg;\n              mailbox := some 0;\n              msg := Anoma.PreMsg.MsgLocalKVStorage (LocalKVStorageMsg.SetValueReply\n                (SetValueKVStoreReply.mkSetValueKVStoreReply@{\n                  key := key;\n                  success := true\n                }))\n            };\n            notificationMsg := \\{target := EngineMsg.mk@{\n              sender := getEngineIDFromEngineCfg cfg;\n              target := target;\n              mailbox := some 0;\n              msg := Anoma.PreMsg.MsgLocalKVStorage (LocalKVStorageMsg.ValueChanged\n                (ValueChangedKVStore.mkValueChangedKVStore@{\n                  key := key;\n                  value := value;\n                  timestamp := newTime\n                }))\n            }};\n            notificationMsgs := map notificationMsg (getNotificationTargets key);\n          in some ActionEffect.mk@{\n            env := newEnv;\n            msgs := responseMsg :: notificationMsgs;\n            timers := [];\n            engines := [];\n          }\n        | _ := none\n      }\n    | _ := none\n  };\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","behaviour"]},{"location":"arch/node/engines/local_key_value_storage_behaviour.html#deletevalueaction","title":"<code>deleteValueAction</code>","text":"<p>Remove a value from storage by key.</p> State update The storage map is updated to remove the key-value pair. Messages to be sent A <code>DeleteValueKVStoreReply message</code> indicating success/failure. Several <code>LocalKVStorageMsgValueChanged</code> messages to those interested engines. Engines to be spawned No engines are created by this action. Timer updates No timers are set or cancelled. <pre><code>deleteValueAction\n  (input : LocalKVStorageActionInput)\n  : Option LocalKVStorageActionEffect :=\n  let\n    env := ActionInput.env input;\n    cfg := ActionInput.cfg input;\n    local := EngineEnv.localState env;\n    storage := LocalKVStorageLocalState.storage local;\n    trigger := ActionInput.trigger input;\n    newTime := advanceTime (LocalKVStorageLocalState.localClock local)\n  in case getEngineMsgFromTimestampedTrigger trigger of {\n    | some emsg :=\n      case emsg of {\n        | EngineMsg.mk@{msg := Anoma.PreMsg.MsgLocalKVStorage (LocalKVStorageMsg.DeleteValueRequest req)} :=\n          let\n            key := DeleteValueKVStoreRequest.key req;\n            newStorage := Map.delete key storage;\n            newLocal := local@LocalKVStorageLocalState{storage := newStorage; localClock := newTime};\n            newEnv := env@EngineEnv{localState := newLocal};\n            responseMsg := EngineMsg.mk@{\n              sender := getEngineIDFromEngineCfg cfg;\n              target := EngineMsg.sender emsg;\n              mailbox := some 0;\n              msg := Anoma.PreMsg.MsgLocalKVStorage (LocalKVStorageMsg.DeleteValueReply\n                (DeleteValueKVStoreReply.mkDeleteValueKVStoreReply@{\n                  key := key;\n                  success := true\n                }))\n            };\n            notificationMsg := \\{target := EngineMsg.mk@{\n              sender := getEngineIDFromEngineCfg cfg;\n              target := target;\n              mailbox := some 0;\n              msg := Anoma.PreMsg.MsgLocalKVStorage (LocalKVStorageMsg.ValueChanged\n                (ValueChangedKVStore.mkValueChangedKVStore@{\n                  key := key;\n                  value := \"\";\n                  timestamp := newTime\n                }))\n            }};\n            notificationMsgs := map notificationMsg (getNotificationTargets key);\n          in some ActionEffect.mk@{\n            env := newEnv;\n            msgs := responseMsg :: notificationMsgs;\n            timers := [];\n            engines := [];\n          }\n        | _ := none\n      }\n    | _ := none\n  };\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","behaviour"]},{"location":"arch/node/engines/local_key_value_storage_behaviour.html#action-labels","title":"Action Labels","text":"","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","behaviour"]},{"location":"arch/node/engines/local_key_value_storage_behaviour.html#getvalueactionlabel","title":"<code>getValueActionLabel</code>","text":"<pre><code>getValueActionLabel : LocalKVStorageActionExec := ActionExec.Seq [ getValueAction ];\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","behaviour"]},{"location":"arch/node/engines/local_key_value_storage_behaviour.html#setvalueactionlabel","title":"<code>setValueActionLabel</code>","text":"<pre><code>setValueActionLabel : LocalKVStorageActionExec := ActionExec.Seq [ setValueAction ];\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","behaviour"]},{"location":"arch/node/engines/local_key_value_storage_behaviour.html#deletevalueactionlabel","title":"<code>deleteValueActionLabel</code>","text":"<pre><code>deleteValueActionLabel : LocalKVStorageActionExec := ActionExec.Seq [ deleteValueAction ];\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","behaviour"]},{"location":"arch/node/engines/local_key_value_storage_behaviour.html#guards","title":"Guards","text":"Auxiliary Juvix code","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","behaviour"]},{"location":"arch/node/engines/local_key_value_storage_behaviour.html#localkvstorageguard","title":"<code>LocalKVStorageGuard</code>","text":"<p> <pre><code>LocalKVStorageGuard : Type :=\n  Guard\n    LocalKVStorageCfg\n    LocalKVStorageLocalState\n    LocalKVStorageMailboxState\n    LocalKVStorageTimerHandle\n    LocalKVStorageActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","behaviour"]},{"location":"arch/node/engines/local_key_value_storage_behaviour.html#localkvstorageguardoutput","title":"<code>LocalKVStorageGuardOutput</code>","text":"<p> <pre><code>LocalKVStorageGuardOutput : Type :=\n  GuardOutput\n    LocalKVStorageCfg\n    LocalKVStorageLocalState\n    LocalKVStorageMailboxState\n    LocalKVStorageTimerHandle\n    LocalKVStorageActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","behaviour"]},{"location":"arch/node/engines/local_key_value_storage_behaviour.html#localkvstorageguardeval","title":"<code>LocalKVStorageGuardEval</code>","text":"<p> <pre><code>LocalKVStorageGuardEval : Type :=\n  GuardEval\n    LocalKVStorageCfg\n    LocalKVStorageLocalState\n    LocalKVStorageMailboxState\n    LocalKVStorageTimerHandle\n    LocalKVStorageActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","behaviour"]},{"location":"arch/node/engines/local_key_value_storage_behaviour.html#getvalueguard","title":"<code>getValueGuard</code>","text":"Condition Message type is <code>LocalKVStorageMsg.GetValueRequest</code>. <pre><code>getValueGuard\n  (trigger : LocalKVStorageTimestampedTrigger)\n  (cfg : EngineCfg LocalKVStorageCfg)\n  (env : LocalKVStorageEnv)\n  : Option LocalKVStorageGuardOutput :=\n  case getEngineMsgFromTimestampedTrigger trigger of {\n    | some EngineMsg.mk@{msg := Anoma.PreMsg.MsgLocalKVStorage (LocalKVStorageMsg.GetValueRequest _)} :=\n      some GuardOutput.mk@{\n        action := getValueActionLabel;\n        args := [];\n      }\n    | _ := none\n  };\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","behaviour"]},{"location":"arch/node/engines/local_key_value_storage_behaviour.html#setvalueguard","title":"<code>setValueGuard</code>","text":"Condition Message type is <code>LocalKVStorageMsg.SetValueRequest</code>. <pre><code>setValueGuard\n  (trigger : LocalKVStorageTimestampedTrigger)\n  (cfg : EngineCfg LocalKVStorageCfg)\n  (env : LocalKVStorageEnv)\n  : Option LocalKVStorageGuardOutput :=\n  case getEngineMsgFromTimestampedTrigger trigger of {\n    | some EngineMsg.mk@{msg := Anoma.PreMsg.MsgLocalKVStorage (LocalKVStorageMsg.SetValueRequest _)} :=\n      some GuardOutput.mk@{\n        action := setValueActionLabel;\n        args := [];\n      }\n    | _ := none\n  };\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","behaviour"]},{"location":"arch/node/engines/local_key_value_storage_behaviour.html#deletevalueguard","title":"<code>deleteValueGuard</code>","text":"Condition Message type is <code>LocalKVStorageMsg.DeleteValueRequest</code>. <pre><code>deleteValueGuard\n  (trigger : LocalKVStorageTimestampedTrigger)\n  (cfg : EngineCfg LocalKVStorageCfg)\n  (env : LocalKVStorageEnv)\n  : Option LocalKVStorageGuardOutput :=\n  case getEngineMsgFromTimestampedTrigger trigger of {\n    | some EngineMsg.mk@{msg := Anoma.PreMsg.MsgLocalKVStorage (LocalKVStorageMsg.DeleteValueRequest _)} :=\n      some GuardOutput.mk@{\n        action := deleteValueActionLabel;\n        args := [];\n      }\n    | _ := none\n  };\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","behaviour"]},{"location":"arch/node/engines/local_key_value_storage_behaviour.html#the-local-key-value-storage-behaviour","title":"The Local Key-Value Storage behaviour","text":"","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","behaviour"]},{"location":"arch/node/engines/local_key_value_storage_behaviour.html#localkvstoragebehaviour","title":"<code>LocalKVStorageBehaviour</code>","text":"<pre><code>LocalKVStorageBehaviour : Type :=\n  EngineBehaviour\n    LocalKVStorageCfg\n    LocalKVStorageLocalState\n    LocalKVStorageMailboxState\n    LocalKVStorageTimerHandle\n    LocalKVStorageActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","behaviour"]},{"location":"arch/node/engines/local_key_value_storage_behaviour.html#instantiation","title":"Instantiation","text":"<pre><code>localKVStorageBehaviour : LocalKVStorageBehaviour :=\n  EngineBehaviour.mk@{\n    guards := GuardEval.First [\n      getValueGuard;\n      setValueGuard;\n      deleteValueGuard;\n    ];\n  };\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","behaviour"]},{"location":"arch/node/engines/local_key_value_storage_behaviour.html#local-key-value-storage-action-flowcharts","title":"Local Key-Value Storage Action Flowcharts","text":"","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","behaviour"]},{"location":"arch/node/engines/local_key_value_storage_behaviour.html#getvalue-flowchart","title":"<code>getValue</code> Flowchart","text":"<pre><code>flowchart TD\n  subgraph C[Conditions]\n    CMsg&gt;LocalKVStorageMsgGetValueRequest]\n  end\n\n  G(getValueGuard)\n  A(getValueAction)\n\n  C --&gt; G -- *getValueActionLabel* --&gt; A --&gt; E\n\n  subgraph E[Effects]\n    EMsg&gt;LocalKVStorageMsgGetValueReply&lt;br/&gt;key, value]\n  end</code></pre>  getValue flowchart","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","behaviour"]},{"location":"arch/node/engines/local_key_value_storage_behaviour.html#setvalue-flowchart","title":"<code>setValue</code> Flowchart","text":"<pre><code>flowchart TD\n  subgraph C[Conditions]\n    CMsg&gt;LocalKVStorageMsgSetValueRequest]\n  end\n\n  G(setValueGuard)\n  A(setValueAction)\n\n  C --&gt; G -- *setValueActionLabel* --&gt; A --&gt; E\n\n  subgraph E[Effects]\n    EEnv[(storage := Map.insert key value storage)]\n    EMsg&gt;LocalKVStorageMsgSetValueReply&lt;br/&gt;success]\n  end</code></pre>  setValue flowchart","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","behaviour"]},{"location":"arch/node/engines/local_key_value_storage_behaviour.html#deletevalue-flowchart","title":"<code>deleteValue</code> Flowchart","text":"<pre><code>flowchart TD\n  subgraph C[Conditions]\n    CMsg&gt;LocalKVStorageMsgDeleteValueRequest]\n  end\n\n  G(deleteValueGuard)\n  A(deleteValueAction)\n\n  C --&gt; G -- *deleteValueActionLabel* --&gt; A --&gt; E\n\n  subgraph E[Effects]\n    EEnv[(storage := Map.delete key storage)]\n    EMsg&gt;LocalKVStorageMsgDeleteValueReply&lt;br/&gt;success]\n  end</code></pre>  deleteValue flowchart","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","behaviour"]},{"location":"arch/node/engines/local_key_value_storage_config.html","title":"Local Key Value Storage Configuration","text":"Juvix imports <pre><code>module arch.node.engines.local_key_value_storage_config;\n\nimport prelude open;\nimport arch.node.engines.local_key_value_storage_messages open;\nimport arch.node.types.engine open;\nimport arch.node.types.messages open;\nimport arch.node.types.identities open;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","configuration"]},{"location":"arch/node/engines/local_key_value_storage_config.html#local-key-value-storage-configuration","title":"Local Key Value Storage Configuration","text":"","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","configuration"]},{"location":"arch/node/engines/local_key_value_storage_config.html#overview","title":"Overview","text":"<p>The Local Key Value Storage engine configuration contains static information for Local Key Value Storage engine instances.</p>","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","configuration"]},{"location":"arch/node/engines/local_key_value_storage_config.html#the-local-key-value-storage-configuration","title":"The Local Key Value Storage Configuration","text":"","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","configuration"]},{"location":"arch/node/engines/local_key_value_storage_config.html#localkvstoragecfg","title":"<code>LocalKVStorageCfg</code>","text":"<pre><code>type LocalKVStorageCfg := mk;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","configuration"]},{"location":"arch/node/engines/local_key_value_storage_config.html#instantiation","title":"Instantiation","text":"<p>```juvix extract-module-statements module local_key_value_storage_config_example;</p> <p>localKVStorageCfg : EngineCfg LocalKVStorageCfg :=     EngineCfg.mk@{       node := PublicKey.Curve25519PubKey \"0xabcd1234\";       name := \"key value storage\";       cfg := LocalKVStorageCfg.mk;     }   ; end; ```</p>","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","configuration"]},{"location":"arch/node/engines/local_key_value_storage_environment.html","title":"Local Key Value Storage Environment","text":"Juvix imports <pre><code>module arch.node.engines.local_key_value_storage_environment;\n\nimport prelude open;\nimport arch.node.engines.local_key_value_storage_messages open;\nimport arch.node.types.engine open;\nimport arch.node.types.messages open;\nimport arch.node.types.identities open;\nimport arch.node.types.anoma_message as Anoma open;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","environment"]},{"location":"arch/node/engines/local_key_value_storage_environment.html#local-key-value-storage-environment","title":"Local Key-Value Storage Environment","text":"","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","environment"]},{"location":"arch/node/engines/local_key_value_storage_environment.html#overview","title":"Overview","text":"<p>The Local Key-Value Storage Engine provides local storage and retrieval of data in a key-value format.</p> Auxiliary Juvix code <pre><code>axiom getNotificationTargets : StorageKey -&gt; List EngineID;\naxiom advanceTime : EpochTimestamp -&gt; EpochTimestamp;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","environment"]},{"location":"arch/node/engines/local_key_value_storage_environment.html#mailbox-state-types","title":"Mailbox state types","text":"","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","environment"]},{"location":"arch/node/engines/local_key_value_storage_environment.html#localkvstoragemailboxstate","title":"<code>LocalKVStorageMailboxState</code>","text":"<pre><code>syntax alias LocalKVStorageMailboxState := Unit;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","environment"]},{"location":"arch/node/engines/local_key_value_storage_environment.html#local-state","title":"Local state","text":"","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","environment"]},{"location":"arch/node/engines/local_key_value_storage_environment.html#localkvstoragelocalstate","title":"<code>LocalKVStorageLocalState</code>","text":"<pre><code>type LocalKVStorageLocalState := mk@{\n  storage : Map StorageKey StorageValue;\n  localClock : EpochTimestamp\n};\n</code></pre> Arguments <code>storage</code> The key-value store mapping keys to values. <code>localClock</code> The local time of the engine, used to make timestamps.","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","environment"]},{"location":"arch/node/engines/local_key_value_storage_environment.html#timer-handles","title":"Timer handles","text":"","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","environment"]},{"location":"arch/node/engines/local_key_value_storage_environment.html#localkvstoragetimerhandle","title":"<code>LocalKVStorageTimerHandle</code>","text":"<pre><code>syntax alias LocalKVStorageTimerHandle := Unit;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","environment"]},{"location":"arch/node/engines/local_key_value_storage_environment.html#localkvstoragetimestampedtrigger","title":"<code>LocalKVStorageTimestampedTrigger</code>","text":"<pre><code>LocalKVStorageTimestampedTrigger : Type :=\n  TimestampedTrigger\n    LocalKVStorageTimerHandle\n    Anoma.Msg;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","environment"]},{"location":"arch/node/engines/local_key_value_storage_environment.html#the-local-key-value-storage-environment","title":"The Local Key-Value Storage Environment","text":"","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","environment"]},{"location":"arch/node/engines/local_key_value_storage_environment.html#localkvstorageenv","title":"<code>LocalKVStorageEnv</code>","text":"<pre><code>LocalKVStorageEnv : Type :=\n  EngineEnv\n    LocalKVStorageLocalState\n    LocalKVStorageMailboxState\n    LocalKVStorageTimerHandle\n    Anoma.Msg;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","environment"]},{"location":"arch/node/engines/local_key_value_storage_environment.html#instantiation","title":"Instantiation","text":"<p>```juvix extract-module-statements module local_key_value_storage_environment_example;</p> <p>localKVStorageEnv : LocalKVStorageEnv :=     EngineEnv.mk@{       localState := LocalKVStorageLocalState.mk@{         storage := Map.empty;         localClock := 0;       };       mailboxCluster := Map.empty;       acquaintances := Set.empty;       timers := []     }   ; end; ```</p>","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","environment"]},{"location":"arch/node/engines/local_key_value_storage_messages.html","title":"Local Key Value Storage Messages","text":"Juvix imports <pre><code>module arch.node.engines.local_key_value_storage_messages;\nimport prelude open;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","message-types"]},{"location":"arch/node/engines/local_key_value_storage_messages.html#local-key-value-storage-messages","title":"Local Key-Value Storage Messages","text":"<p>These are the messages that the Local Key-Value Storage engine can receive/respond to.</p>","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","message-types"]},{"location":"arch/node/engines/local_key_value_storage_messages.html#message-interface","title":"Message interface","text":"<pre><code>type LocalKVStorageMsg :=\n  | GetValueRequest GetValueKVStoreRequest\n  | GetValueReply GetValueKVStoreReply\n  | SetValueRequest SetValueKVStoreRequest\n  | SetValueReply SetValueKVStoreReply\n  | DeleteValueRequest DeleteValueKVStoreRequest\n  | DeleteValueReply DeleteValueKVStoreReply\n  | ValueChanged ValueChangedKVStore;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","message-types"]},{"location":"arch/node/engines/local_key_value_storage_messages.html#message-sequence-diagrams","title":"Message sequence diagrams","text":"","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","message-types"]},{"location":"arch/node/engines/local_key_value_storage_messages.html#get-value-requestresponse-flow","title":"Get value request/response flow","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant KVStorage\n\n    Client -&gt;&gt;+ KVStorage: GetValueKVStoreRequest\n    KVStorage --&gt;&gt;- Client: GetValueKVStoreReply</code></pre>  Get Value Request/Reply Flow","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","message-types"]},{"location":"arch/node/engines/local_key_value_storage_messages.html#set-value-requestresponse-flow","title":"Set value request/response flow","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant KVStorage\n\n    Client -&gt;&gt;+ KVStorage: SetValueKVStoreRequest\n    KVStorage --&gt;&gt;- Client: SetValueKVStoreReply</code></pre>  Set Value Request/Reply Flow","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","message-types"]},{"location":"arch/node/engines/local_key_value_storage_messages.html#delete-value-requestresponse-flow","title":"Delete value request/response flow","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant KVStorage\n\n    Client -&gt;&gt;+ KVStorage: DeleteValueKVStoreRequest\n    KVStorage --&gt;&gt;- Client: DeleteValueKVStoreReply</code></pre>  Delete Value Request/Reply Flow","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","message-types"]},{"location":"arch/node/engines/local_key_value_storage_messages.html#message-types","title":"Message types","text":"Auxiliary Juvix code <pre><code>syntax alias StorageKey := String;\nsyntax alias StorageValue := String;\nsyntax alias EpochTimestamp := Nat;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","message-types"]},{"location":"arch/node/engines/local_key_value_storage_messages.html#getvaluekvstorerequest","title":"<code>GetValueKVStoreRequest</code>","text":"<p>Request to get a value from storage.</p> <pre><code>type GetValueKVStoreRequest := mkGetValueKVStoreRequest {\n  key : StorageKey;\n};\n</code></pre> Arguments <code>key</code> The key that maps to the requested value in the KV-store.","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","message-types"]},{"location":"arch/node/engines/local_key_value_storage_messages.html#getvaluekvstorereply","title":"<code>GetValueKVStoreReply</code>","text":"<p>Reply containing requested value.</p> <pre><code>type GetValueKVStoreReply := mkGetValueKVStoreReply {\n  key : StorageKey;\n  value : StorageValue;\n};\n</code></pre> Arguments <code>key</code> The key that maps to the requested value in the KV-store. <code>value</code> The requested value from the KV-store.","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","message-types"]},{"location":"arch/node/engines/local_key_value_storage_messages.html#setvaluekvstorerequest","title":"<code>SetValueKVStoreRequest</code>","text":"<p>Request to set a value in storage.</p> <pre><code>type SetValueKVStoreRequest := mkSetValueKVStoreRequest {\n  key : StorageKey;\n  value : StorageValue;\n};\n</code></pre> Arguments <code>key</code> The key that identifies the data in the KV-store. <code>value</code> The value to store in the KV-store.","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","message-types"]},{"location":"arch/node/engines/local_key_value_storage_messages.html#setvaluekvstorereply","title":"<code>SetValueKVStoreReply</code>","text":"<p>Reply indicating success/failure of set operation.</p> <pre><code>type SetValueKVStoreReply := mkSetValueKVStoreReply {\n  key : StorageKey;\n  success : Bool;\n};\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","message-types"]},{"location":"arch/node/engines/local_key_value_storage_messages.html#deletevaluekvstorerequest","title":"<code>DeleteValueKVStoreRequest</code>","text":"<p>Request to delete a value from storage.</p> <pre><code>type DeleteValueKVStoreRequest := mkDeleteValueKVStoreRequest {\n  key : StorageKey;\n};\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","message-types"]},{"location":"arch/node/engines/local_key_value_storage_messages.html#deletevaluekvstorereply","title":"<code>DeleteValueKVStoreReply</code>","text":"<p>Reply indicating success/failure of a delete operation.</p> <pre><code>type DeleteValueKVStoreReply := mkDeleteValueKVStoreReply {\n  key : StorageKey;\n  success : Bool;\n};\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","message-types"]},{"location":"arch/node/engines/local_key_value_storage_messages.html#valuechangedkvstore","title":"<code>ValueChangedKVStore</code>","text":"<p>Notification that a value has changed.</p> <pre><code>type ValueChangedKVStore := mkValueChangedKVStore {\n  key : StorageKey;\n  value : StorageValue;\n  timestamp : EpochTimestamp;\n};\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","message-types"]},{"location":"arch/node/engines/local_key_value_storage_messages.html#localkvstoragemsg","title":"<code>LocalKVStorageMsg</code>","text":"<pre><code>type LocalKVStorageMsg :=\n  | GetValueRequest GetValueKVStoreRequest\n  | GetValueReply GetValueKVStoreReply\n  | SetValueRequest SetValueKVStoreRequest\n  | SetValueReply SetValueKVStoreReply\n  | DeleteValueRequest DeleteValueKVStoreRequest\n  | DeleteValueReply DeleteValueKVStoreReply\n  | ValueChanged ValueChangedKVStore;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","message-types"]},{"location":"arch/node/engines/local_key_value_storage_messages.html#engine-components","title":"Engine components","text":"<ul> <li>Local Key Value Storage Configuration</li> <li>Local Key Value Storage Environment</li> <li>Local Key Value Storage Behaviour</li> </ul>","tags":["node-architecture","hardware-subsystem","engine","local-key-value-storage","message-types"]},{"location":"arch/node/engines/local_time_series_storage.html","title":"Local Time Series Storage Engine","text":"Juvix imports <pre><code>module arch.node.engines.local_time_series_storage;\n\nimport prelude open;\nimport arch.node.types.engine open;\n\nimport arch.node.engines.local_time_series_storage_messages open public;\nimport arch.node.engines.local_time_series_storage_config open public;\nimport arch.node.engines.local_time_series_storage_environment open public;\nimport arch.node.engines.local_time_series_storage_behaviour open public;\n\nimport arch.node.types.anoma as Anoma open;\n\nopen local_ts_storage_config_example;\nopen local_ts_storage_environment_example;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","engine-definition"]},{"location":"arch/node/engines/local_time_series_storage.html#local-time-series-storage-engine","title":"Local Time Series Storage Engine","text":"<p>The Local Time Series Storage Engine provides local storage and retrieval of time series data.</p>","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","engine-definition"]},{"location":"arch/node/engines/local_time_series_storage.html#purpose","title":"Purpose","text":"<p>The Local Time Series Storage Engine manages local storage and retrieval of time series data. It provides functions for recording new data, retrieving existing data, and deleting data when needed.</p>","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","engine-definition"]},{"location":"arch/node/engines/local_time_series_storage.html#engine-components","title":"Engine components","text":"<ul> <li>Local Time Series Storage Messages</li> <li>Local Time Series Storage Configuration</li> <li>Local Time Series Storage Environment</li> <li>Local Time Series Storage Behaviour</li> </ul>","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","engine-definition"]},{"location":"arch/node/engines/local_time_series_storage.html#type","title":"Type","text":"<pre><code>LocalTSStorageEngine : Type :=\n  Engine\n    LocalTSStorageCfg\n    LocalTSStorageLocalState\n    LocalTSStorageMailboxState\n    LocalTSStorageTimerHandle\n    LocalTSStorageActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","engine-definition"]},{"location":"arch/node/engines/local_time_series_storage.html#example-of-a-local-time-series-storage-engine","title":"Example of a local time series storage engine","text":"<pre><code>exampleLocalTSStorageEngine : LocalTSStorageEngine :=\n  Engine.mk@{\n    cfg := localTSStorageCfg;\n    env := localTSStorageEnv;\n    behaviour := localTSStorageBehaviour;\n  };\n</code></pre> <p>where <code>localTSStorageCfg</code> is defined as follows:</p> <p>```juvix extract-module-statements module local_ts_storage_config_example;</p> <p>localTSStorageCfg : EngineCfg LocalTSStorageCfg :=     EngineCfg.mk@{       node := PublicKey.Curve25519PubKey \"0xabcd1234\";       name := \"local time series storage\";       cfg := LocalTSStorageCfg.mk;     }   ; end; <pre><code>`localTSStorageEnv` is defined as follows:\n\n```juvix extract-module-statements\nmodule local_ts_storage_environment_example;\n\n  localTSStorageEnv : LocalTSStorageEnv :=\n    EngineEnv.mk@{\n      localState := LocalTSStorageLocalState.mk@{\n        db := \"\";\n        localClock := 0\n      };\n      mailboxCluster := Map.empty;\n      acquaintances := Set.empty;\n      timers := []\n    }\n  ;\nend;\n</code></pre></p> <p>and <code>localTSStorageBehaviour</code> is defined as follows:</p> <pre><code>localTSStorageBehaviour : LocalTSStorageBehaviour :=\n  EngineBehaviour.mk@{\n    guards := GuardEval.First [\n      getDataGuard;\n      recordDataGuard;\n      deleteDataGuard\n    ];\n  };\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","engine-definition"]},{"location":"arch/node/engines/local_time_series_storage_behaviour.html","title":"Local Time Series Storage Behaviour","text":"Juvix imports <pre><code>module arch.node.engines.local_time_series_storage_behaviour;\n\nimport arch.node.engines.local_time_series_storage_messages open;\nimport arch.node.engines.local_time_series_storage_config open;\nimport arch.node.engines.local_time_series_storage_environment open;\n\nimport prelude open;\nimport arch.node.types.basics open;\nimport arch.node.types.identities open;\nimport arch.node.types.messages open;\nimport arch.node.types.engine open;\nimport arch.node.types.anoma as Anoma open;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","behaviour"]},{"location":"arch/node/engines/local_time_series_storage_behaviour.html#local-time-series-storage-behaviour","title":"Local Time Series Storage Behaviour","text":"","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","behaviour"]},{"location":"arch/node/engines/local_time_series_storage_behaviour.html#overview","title":"Overview","text":"<p>A time series storage engine acts as a database that can store, retrieve, and delete time series data.</p>","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","behaviour"]},{"location":"arch/node/engines/local_time_series_storage_behaviour.html#action-arguments","title":"Action arguments","text":"","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","behaviour"]},{"location":"arch/node/engines/local_time_series_storage_behaviour.html#localtsstorageactionargument","title":"<code>LocalTSStorageActionArgument</code>","text":"<pre><code>type LocalTSStorageActionArgument := Unit;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","behaviour"]},{"location":"arch/node/engines/local_time_series_storage_behaviour.html#localtsstorageactionarguments","title":"<code>LocalTSStorageActionArguments</code>","text":"<pre><code>LocalTSStorageActionArguments : Type := List LocalTSStorageActionArgument;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","behaviour"]},{"location":"arch/node/engines/local_time_series_storage_behaviour.html#actions","title":"Actions","text":"Auxiliary Juvix code","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","behaviour"]},{"location":"arch/node/engines/local_time_series_storage_behaviour.html#localtsstorageaction","title":"<code>LocalTSStorageAction</code>","text":"<p> <pre><code>LocalTSStorageAction : Type :=\n  Action\n    LocalTSStorageCfg\n    LocalTSStorageLocalState\n    LocalTSStorageMailboxState\n    LocalTSStorageTimerHandle\n    LocalTSStorageActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","behaviour"]},{"location":"arch/node/engines/local_time_series_storage_behaviour.html#localtsstorageactioninput","title":"<code>LocalTSStorageActionInput</code>","text":"<p> <pre><code>LocalTSStorageActionInput : Type :=\n  ActionInput\n    LocalTSStorageCfg\n    LocalTSStorageLocalState\n    LocalTSStorageMailboxState\n    LocalTSStorageTimerHandle\n    LocalTSStorageActionArguments\n    Anoma.Msg;\n</code></pre> </p>","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","behaviour"]},{"location":"arch/node/engines/local_time_series_storage_behaviour.html#localtsstorageactioneffect","title":"<code>LocalTSStorageActionEffect</code>","text":"<p> <pre><code>LocalTSStorageActionEffect : Type :=\n  ActionEffect\n    LocalTSStorageLocalState\n    LocalTSStorageMailboxState\n    LocalTSStorageTimerHandle\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","behaviour"]},{"location":"arch/node/engines/local_time_series_storage_behaviour.html#localtsstorageactionexec","title":"<code>LocalTSStorageActionExec</code>","text":"<p> <pre><code>LocalTSStorageActionExec : Type :=\n  ActionExec\n    LocalTSStorageCfg\n    LocalTSStorageLocalState\n    LocalTSStorageMailboxState\n    LocalTSStorageTimerHandle\n    LocalTSStorageActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","behaviour"]},{"location":"arch/node/engines/local_time_series_storage_behaviour.html#getdataaction","title":"<code>getDataAction</code>","text":"<p>Get data from the time series database.</p> State update The state remains unchanged. Messages to be sent A <code>GetDataTSStorageDBReply</code> message with the requested data. Engines to be spawned No engine is created by this action. Timer updates No timers are set or cancelled. <pre><code>getDataAction\n  (input : LocalTSStorageActionInput)\n  : Option LocalTSStorageActionEffect :=\n  let\n    env := ActionInput.env input;\n    trigger := ActionInput.trigger input;\n    cfg := ActionInput.cfg input;\n    local := EngineEnv.localState env;\n  in case getEngineMsgFromTimestampedTrigger trigger of {\n    | some EngineMsg.mk@{\n        msg := Anoma.PreMsg.MsgLocalTSStorage (LocalTSStorageMsg.GetRequest request);\n        sender := sender;\n      } :=\n      let result := queryDB (LocalTSStorageLocalState.db local) (GetDataTSStorageDBRequest.query request);\n      in case result of {\n        | some data := some ActionEffect.mk@{\n            env := env;\n            msgs := [EngineMsg.mk@{\n              sender := getEngineIDFromEngineCfg cfg;\n              target := sender;\n              mailbox := some 0;\n              msg := Anoma.PreMsg.MsgLocalTSStorage (LocalTSStorageMsg.GetReply\n                GetDataTSStorageDBReply.mkGetDataTSStorageDBReply@{\n                  query := GetDataTSStorageDBRequest.query request;\n                  data := data;\n                })\n            }];\n            timers := [];\n            engines := [];\n          }\n        | none := none\n      }\n    | _ := none\n  };\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","behaviour"]},{"location":"arch/node/engines/local_time_series_storage_behaviour.html#recorddataaction","title":"<code>recordDataAction</code>","text":"<p>Record new data in the time series database.</p> State update Updates the database with new time series data, if successful. Messages to be sent A <code>RecordDataTSStorageDBReply</code> message indicating success/failure. Several <code>DataChangedTSStorageDB</code> messages to those interested engines, if successful. Engines to be spawned No engine is created by this action. Timer updates No timers are set or cancelled. <pre><code>recordDataAction\n  (input : LocalTSStorageActionInput)\n  : Option LocalTSStorageActionEffect :=\n  let\n    env := ActionInput.env input;\n    trigger := ActionInput.trigger input;\n    cfg := ActionInput.cfg input;\n    local := EngineEnv.localState env;\n    newTime := advanceTime (LocalTSStorageLocalState.localClock local)\n  in case getEngineMsgFromTimestampedTrigger trigger of {\n    | some EngineMsg.mk@{\n        msg := Anoma.PreMsg.MsgLocalTSStorage (LocalTSStorageMsg.RecordRequest request);\n        sender := sender;\n      } :=\n      let query := RecordDataTSStorageDBRequest.query request;\n          db := LocalTSStorageLocalState.db local;\n          data := queryDB db query;\n      in case data of {\n        | some value :=\n          let newDb := updateDB db query value;\n              newEnv := env@EngineEnv{\n                localState := LocalTSStorageLocalState.mk@{\n                  db := newDb;\n                  localClock := newTime\n                }\n              };\n            responseMsg := EngineMsg.mk@{\n                  sender := getEngineIDFromEngineCfg cfg;\n                  target := sender;\n                  mailbox := some 0;\n                  msg := Anoma.PreMsg.MsgLocalTSStorage (LocalTSStorageMsg.DeleteReply\n                    DeleteDataTSStorageDBReply.mkDeleteDataTSStorageDBReply@{\n                      query := query;\n                      success := true;\n                    })\n                };\n            notificationMsg := \\{target := EngineMsg.mk@{\n              sender := getEngineIDFromEngineCfg cfg;\n              target := target;\n              mailbox := some 0;\n              msg := Anoma.PreMsg.MsgLocalTSStorage (LocalTSStorageMsg.DataChanged\n                (DataChangedTSStorageDB.mkDataChangedTSStorageDB@{\n                  query := query;\n                  data := value;\n                  timestamp := newTime\n                }))\n            }};\n            notificationMsgs := map notificationMsg (getNotificationTargets query);\n          in some ActionEffect.mk@{\n              env := newEnv;\n              msgs := responseMsg :: notificationMsgs;\n              timers := [];\n              engines := [];\n            }\n        | none := some ActionEffect.mk@{\n            env := env;\n            msgs := [EngineMsg.mk@{\n              sender := getEngineIDFromEngineCfg cfg;\n              target := sender;\n              mailbox := some 0;\n              msg := Anoma.PreMsg.MsgLocalTSStorage (LocalTSStorageMsg.RecordReply\n                RecordDataTSStorageDBReply.mkRecordDataTSStorageDBReply@{\n                  query := query;\n                  success := false;\n                })\n            }];\n            timers := [];\n            engines := [];\n          }\n      }\n    | _ := none\n  };\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","behaviour"]},{"location":"arch/node/engines/local_time_series_storage_behaviour.html#deletedataaction","title":"<code>deleteDataAction</code>","text":"<p>Delete data from the time series database.</p> State update Updates the database by removing specified time series data, if successful. Messages to be sent A <code>DeleteDataTSStorageDBReply</code> message indicating success/failure. Several <code>DataChangedTSStorageDB</code> messages to those interested engines, if successful. Engines to be spawned No engine is created by this action. Timer updates No timers are set or cancelled. <pre><code>deleteDataAction\n  (input : LocalTSStorageActionInput)\n  : Option LocalTSStorageActionEffect :=\n  let\n    env := ActionInput.env input;\n    trigger := ActionInput.trigger input;\n    cfg := ActionInput.cfg input;\n    local := EngineEnv.localState env;\n    newTime := advanceTime (LocalTSStorageLocalState.localClock local)\n  in case getEngineMsgFromTimestampedTrigger trigger of {\n    | some EngineMsg.mk@{\n        msg := Anoma.PreMsg.MsgLocalTSStorage (LocalTSStorageMsg.DeleteRequest request);\n        sender := sender;\n      } :=\n      let query := DeleteDataTSStorageDBRequest.query request;\n          db := LocalTSStorageLocalState.db local;\n          data := queryDB db query;\n      in case data of {\n        | some value :=\n          let newDb := updateDB db query \"\";\n              newEnv := env@EngineEnv{\n                localState := LocalTSStorageLocalState.mk@{\n                  db := newDb;\n                  localClock := newTime\n                }\n              };\n            responseMsg := EngineMsg.mk@{\n                  sender := getEngineIDFromEngineCfg cfg;\n                  target := sender;\n                  mailbox := some 0;\n                  msg := Anoma.PreMsg.MsgLocalTSStorage (LocalTSStorageMsg.DeleteReply\n                    DeleteDataTSStorageDBReply.mkDeleteDataTSStorageDBReply@{\n                      query := query;\n                      success := true;\n                    })\n                };\n            notificationMsg := \\{target := EngineMsg.mk@{\n              sender := getEngineIDFromEngineCfg cfg;\n              target := target;\n              mailbox := some 0;\n              msg := Anoma.PreMsg.MsgLocalTSStorage (LocalTSStorageMsg.DataChanged\n                (DataChangedTSStorageDB.mkDataChangedTSStorageDB@{\n                  query := query;\n                  data := value;\n                  timestamp := newTime\n                }))\n            }};\n            notificationMsgs := map notificationMsg (getNotificationTargets query);\n          in some ActionEffect.mk@{\n              env := newEnv;\n              msgs := responseMsg :: notificationMsgs;\n              timers := [];\n              engines := [];\n            }\n        | none := some ActionEffect.mk@{\n            env := env;\n            msgs := [EngineMsg.mk@{\n              sender := getEngineIDFromEngineCfg cfg;\n              target := sender;\n              mailbox := some 0;\n              msg := Anoma.PreMsg.MsgLocalTSStorage (LocalTSStorageMsg.DeleteReply\n                DeleteDataTSStorageDBReply.mkDeleteDataTSStorageDBReply@{\n                  query := query;\n                  success := false;\n                })\n            }];\n            timers := [];\n            engines := [];\n          }\n      }\n    | _ := none\n  };\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","behaviour"]},{"location":"arch/node/engines/local_time_series_storage_behaviour.html#action-labels","title":"Action Labels","text":"","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","behaviour"]},{"location":"arch/node/engines/local_time_series_storage_behaviour.html#getdataactionlabel","title":"<code>getDataActionLabel</code>","text":"<pre><code>getDataActionLabel : LocalTSStorageActionExec := ActionExec.Seq [ getDataAction ];\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","behaviour"]},{"location":"arch/node/engines/local_time_series_storage_behaviour.html#recorddataactionlabel","title":"<code>recordDataActionLabel</code>","text":"<pre><code>recordDataActionLabel : LocalTSStorageActionExec := ActionExec.Seq [ recordDataAction ];\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","behaviour"]},{"location":"arch/node/engines/local_time_series_storage_behaviour.html#deletedataactionlabel","title":"<code>deleteDataActionLabel</code>","text":"<pre><code>deleteDataActionLabel : LocalTSStorageActionExec := ActionExec.Seq [ deleteDataAction ];\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","behaviour"]},{"location":"arch/node/engines/local_time_series_storage_behaviour.html#guards","title":"Guards","text":"Auxiliary Juvix code","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","behaviour"]},{"location":"arch/node/engines/local_time_series_storage_behaviour.html#localtsstorageguard","title":"<code>LocalTSStorageGuard</code>","text":"<p> <pre><code>LocalTSStorageGuard : Type :=\n  Guard\n    LocalTSStorageCfg\n    LocalTSStorageLocalState\n    LocalTSStorageMailboxState\n    LocalTSStorageTimerHandle\n    LocalTSStorageActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","behaviour"]},{"location":"arch/node/engines/local_time_series_storage_behaviour.html#localtsstorageguardoutput","title":"<code>LocalTSStorageGuardOutput</code>","text":"<p> <pre><code>LocalTSStorageGuardOutput : Type :=\n  GuardOutput\n    LocalTSStorageCfg\n    LocalTSStorageLocalState\n    LocalTSStorageMailboxState\n    LocalTSStorageTimerHandle\n    LocalTSStorageActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","behaviour"]},{"location":"arch/node/engines/local_time_series_storage_behaviour.html#localtsstorageguardeval","title":"<code>LocalTSStorageGuardEval</code>","text":"<p> <pre><code>LocalTSStorageGuardEval : Type :=\n  GuardEval\n    LocalTSStorageCfg\n    LocalTSStorageLocalState\n    LocalTSStorageMailboxState\n    LocalTSStorageTimerHandle\n    LocalTSStorageActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","behaviour"]},{"location":"arch/node/engines/local_time_series_storage_behaviour.html#getdataguard","title":"<code>getDataGuard</code>","text":"Condition Message type is <code>LocalTSStorageMsgGetRequest</code>. <pre><code>getDataGuard\n  (trigger : LocalTSStorageTimestampedTrigger)\n  (cfg : EngineCfg LocalTSStorageCfg)\n  (env : LocalTSStorageEnv)\n  : Option LocalTSStorageGuardOutput :=\n  case getEngineMsgFromTimestampedTrigger trigger of {\n    | some EngineMsg.mk@{\n        msg := Anoma.PreMsg.MsgLocalTSStorage (LocalTSStorageMsg.GetRequest _);\n      } := some GuardOutput.mk@{\n        action := getDataActionLabel;\n        args := [];\n      }\n    | _ := none\n  };\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","behaviour"]},{"location":"arch/node/engines/local_time_series_storage_behaviour.html#recorddataguard","title":"<code>recordDataGuard</code>","text":"Condition Message type is <code>LocalTSStorageMsgRecordRequest</code>. <pre><code>recordDataGuard\n  (trigger : LocalTSStorageTimestampedTrigger)\n  (cfg : EngineCfg LocalTSStorageCfg)\n  (env : LocalTSStorageEnv)\n  : Option LocalTSStorageGuardOutput :=\n  case getEngineMsgFromTimestampedTrigger trigger of {\n    | some EngineMsg.mk@{\n        msg := Anoma.PreMsg.MsgLocalTSStorage (LocalTSStorageMsg.RecordRequest _);\n      } := some GuardOutput.mk@{\n        action := recordDataActionLabel;\n        args := [];\n      }\n    | _ := none\n  };\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","behaviour"]},{"location":"arch/node/engines/local_time_series_storage_behaviour.html#deletedataguard","title":"<code>deleteDataGuard</code>","text":"Condition Message type is <code>LocalTSStorageMsgDeleteRequest</code>. <pre><code>deleteDataGuard\n  (trigger : LocalTSStorageTimestampedTrigger)\n  (cfg : EngineCfg LocalTSStorageCfg)\n  (env : LocalTSStorageEnv)\n  : Option LocalTSStorageGuardOutput :=\n  case getEngineMsgFromTimestampedTrigger trigger of {\n    | some EngineMsg.mk@{\n        msg := Anoma.PreMsg.MsgLocalTSStorage (LocalTSStorageMsg.DeleteRequest _);\n      } := some GuardOutput.mk@{\n        action := deleteDataActionLabel;\n        args := [];\n      }\n    | _ := none\n  };\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","behaviour"]},{"location":"arch/node/engines/local_time_series_storage_behaviour.html#the-local-time-series-storage-behaviour","title":"The Local Time Series Storage Behaviour","text":"","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","behaviour"]},{"location":"arch/node/engines/local_time_series_storage_behaviour.html#localtsstoragebehaviour","title":"<code>LocalTSStorageBehaviour</code>","text":"<pre><code>LocalTSStorageBehaviour : Type :=\n  EngineBehaviour\n    LocalTSStorageCfg\n    LocalTSStorageLocalState\n    LocalTSStorageMailboxState\n    LocalTSStorageTimerHandle\n    LocalTSStorageActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","behaviour"]},{"location":"arch/node/engines/local_time_series_storage_behaviour.html#instantiation","title":"Instantiation","text":"<pre><code>localTSStorageBehaviour : LocalTSStorageBehaviour :=\n  EngineBehaviour.mk@{\n    guards := GuardEval.First [\n      getDataGuard;\n      recordDataGuard;\n      deleteDataGuard\n    ];\n  };\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","behaviour"]},{"location":"arch/node/engines/local_time_series_storage_behaviour.html#local-time-series-storage-action-flowcharts","title":"Local Time Series Storage Action Flowcharts","text":"","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","behaviour"]},{"location":"arch/node/engines/local_time_series_storage_behaviour.html#getdata-flowchart","title":"<code>getData</code> Flowchart","text":"<pre><code>flowchart TD\n  subgraph C[Conditions]\n    CMsg&gt;LocalTSStorageMsgGetRequest]\n  end\n\n  G(getDataGuard)\n  A(getDataAction)\n\n  C --&gt; G -- *getDataActionLabel* --&gt; A --&gt; E\n\n  subgraph E[Effects]\n    EMsg&gt;LocalTSStorageMsgGetReply]\n  end</code></pre> <code>getData</code> flowchart","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","behaviour"]},{"location":"arch/node/engines/local_time_series_storage_behaviour.html#recorddata-flowchart","title":"<code>recordData</code> Flowchart","text":"<pre><code>flowchart TD\n  subgraph C[Conditions]\n    CMsg&gt;LocalTSStorageMsgRecordRequest]\n  end\n\n  G(recordDataGuard)\n  A(recordDataAction)\n\n  C --&gt; G -- *recordDataActionLabel* --&gt; A --&gt; E\n\n  subgraph E[Effects]\n    EEnv[(DB update)]\n    EMsg1&gt;LocalTSStorageMsgRecordReply]\n    EMsg2&gt;LocalTSStorageMsgDataChanged]\n  end</code></pre> <code>recordData</code> flowchart","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","behaviour"]},{"location":"arch/node/engines/local_time_series_storage_behaviour.html#deletedata-flowchart","title":"<code>deleteData</code> Flowchart","text":"<pre><code>flowchart TD\n  subgraph C[Conditions]\n    CMsg&gt;LocalTSStorageMsgDeleteRequest]\n  end\n\n  G(deleteDataGuard)\n  A(deleteDataAction)\n\n  C --&gt; G -- *deleteDataActionLabel* --&gt; A --&gt; E\n\n  subgraph E[Effects]\n    EEnv[(DB update)]\n    EMsg1&gt;LocalTSStorageMsgDeleteReply]\n    EMsg2&gt;LocalTSStorageMsgDataChanged]\n  end</code></pre> <code>deleteData</code> flowchart","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","behaviour"]},{"location":"arch/node/engines/local_time_series_storage_config.html","title":"Local Time Series Storage Configuration","text":"Juvix imports <pre><code>module arch.node.engines.local_time_series_storage_config;\n\nimport prelude open;\nimport arch.node.engines.local_time_series_storage_messages open;\nimport arch.node.types.engine open;\nimport arch.node.types.messages open;\nimport arch.node.types.identities open;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","configuration"]},{"location":"arch/node/engines/local_time_series_storage_config.html#local-time-series-storage-configuration","title":"Local Time Series Storage Configuration","text":"","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","configuration"]},{"location":"arch/node/engines/local_time_series_storage_config.html#overview","title":"Overview","text":"<p>The Local Time Series Storage engine configuration contains static information for Local Time Series Storage engine instances.</p>","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","configuration"]},{"location":"arch/node/engines/local_time_series_storage_config.html#the-local-time-series-storage-configuration","title":"The Local Time Series Storage Configuration","text":"","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","configuration"]},{"location":"arch/node/engines/local_time_series_storage_config.html#localtsstoragecfg","title":"<code>LocalTSStorageCfg</code>","text":"<pre><code>type LocalTSStorageCfg := mk;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","configuration"]},{"location":"arch/node/engines/local_time_series_storage_config.html#instantiation","title":"Instantiation","text":"<p>```juvix extract-module-statements module local_ts_storage_config_example;</p> <p>localTSStorageCfg : EngineCfg LocalTSStorageCfg :=     EngineCfg.mk@{       node := PublicKey.Curve25519PubKey \"0xabcd1234\";       name := \"local time series storage\";       cfg := LocalTSStorageCfg.mk;     }   ; end; ```</p>","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","configuration"]},{"location":"arch/node/engines/local_time_series_storage_environment.html","title":"Local Time Series Storage Environment","text":"Juvix imports <pre><code>module arch.node.engines.local_time_series_storage_environment;\n\nimport prelude open;\nimport arch.node.engines.local_time_series_storage_messages open;\nimport arch.node.types.engine open;\nimport arch.node.types.messages open;\nimport arch.node.types.identities open;\nimport arch.node.types.anoma_message as Anoma open;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","environment"]},{"location":"arch/node/engines/local_time_series_storage_environment.html#local-time-series-storage-environment","title":"Local Time Series Storage Environment","text":"","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","environment"]},{"location":"arch/node/engines/local_time_series_storage_environment.html#overview","title":"Overview","text":"<p>The Local Time Series Storage Engine maintains a database of time series data with query and update capabilities.</p>","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","environment"]},{"location":"arch/node/engines/local_time_series_storage_environment.html#mailbox-state","title":"Mailbox state","text":"<pre><code>syntax alias LocalTSStorageMailboxState := Unit;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","environment"]},{"location":"arch/node/engines/local_time_series_storage_environment.html#local-state","title":"Local state","text":"Auxiliary Juvix code <pre><code>syntax alias Database := String; -- Abstract DB type\n\naxiom updateDB : Database -&gt; TSStorageDBQuery -&gt; TSStorageDBData -&gt; Database;\naxiom queryDB : Database -&gt; TSStorageDBQuery -&gt; Option TSStorageDBData;\naxiom getNotificationTargets : TSStorageDBQuery -&gt; List EngineID;\naxiom advanceTime : EpochTimestamp -&gt; EpochTimestamp;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","environment"]},{"location":"arch/node/engines/local_time_series_storage_environment.html#localtsstoragelocalstate","title":"<code>LocalTSStorageLocalState</code>","text":"<pre><code>type LocalTSStorageLocalState :=\n  mk {\n    db : Database;\n    localClock : EpochTimestamp\n  };\n</code></pre> Arguments <code>db</code> The database storing the time series data. <code>localClock</code> The local time of the engine, used to make timestamps.","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","environment"]},{"location":"arch/node/engines/local_time_series_storage_environment.html#timer-handle","title":"Timer Handle","text":"<pre><code>syntax alias LocalTSStorageTimerHandle := Unit;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","environment"]},{"location":"arch/node/engines/local_time_series_storage_environment.html#localtsstoragetimestampedtrigger","title":"<code>LocalTSStorageTimestampedTrigger</code>","text":"<pre><code>LocalTSStorageTimestampedTrigger : Type :=\n  TimestampedTrigger\n    LocalTSStorageTimerHandle\n    Anoma.Msg;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","environment"]},{"location":"arch/node/engines/local_time_series_storage_environment.html#the-local-time-series-storage-environment","title":"The Local Time Series Storage Environment","text":"","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","environment"]},{"location":"arch/node/engines/local_time_series_storage_environment.html#localtsstorageenv","title":"<code>LocalTSStorageEnv</code>","text":"<pre><code>LocalTSStorageEnv : Type :=\n  EngineEnv\n    LocalTSStorageLocalState\n    LocalTSStorageMailboxState\n    LocalTSStorageTimerHandle\n    Anoma.Msg;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","environment"]},{"location":"arch/node/engines/local_time_series_storage_environment.html#instantiation","title":"Instantiation","text":"<p>```juvix extract-module-statements module local_ts_storage_environment_example;</p> <p>localTSStorageEnv : LocalTSStorageEnv :=     EngineEnv.mk@{       localState := LocalTSStorageLocalState.mk@{         db := \"\";         localClock := 0       };       mailboxCluster := Map.empty;       acquaintances := Set.empty;       timers := []     }   ; end; ```</p>","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","environment"]},{"location":"arch/node/engines/local_time_series_storage_messages.html","title":"Local Time Series Storage Messages","text":"Juvix imports <pre><code>module arch.node.engines.local_time_series_storage_messages;\nimport prelude open;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","message-types"]},{"location":"arch/node/engines/local_time_series_storage_messages.html#local-time-series-storage-messages","title":"Local Time Series Storage Messages","text":"<p>These are the messages that the Local Time Series Storage engine can receive/respond to.</p>","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","message-types"]},{"location":"arch/node/engines/local_time_series_storage_messages.html#message-interface","title":"Message interface","text":"<pre><code>type LocalTSStorageMsg :=\n  | GetRequest GetDataTSStorageDBRequest\n  | GetReply GetDataTSStorageDBReply\n  | RecordRequest RecordDataTSStorageDBRequest\n  | RecordReply RecordDataTSStorageDBReply\n  | DeleteRequest DeleteDataTSStorageDBRequest\n  | DeleteReply DeleteDataTSStorageDBReply\n  | DataChanged DataChangedTSStorageDB\n  ;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","message-types"]},{"location":"arch/node/engines/local_time_series_storage_messages.html#message-sequence-diagrams","title":"Message sequence diagrams","text":"","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","message-types"]},{"location":"arch/node/engines/local_time_series_storage_messages.html#getdatatsstoragedbrequest-and-getdatatsstoragedbreply","title":"<code>GetDataTSStorageDBRequest</code> and <code>GetDataTSStorageDBReply</code>","text":"<pre><code>sequenceDiagram\n    participant AnyEngine\n    participant LocalTSStorageDB\n\n    AnyEngine -&gt;&gt; LocalTSStorageDB: GetDataTSStorageDBRequest\n    LocalTSStorageDB -&gt;&gt; AnyEngine: GetDataTSStorageDBReply</code></pre>  Sequence diagram: Get data flow","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","message-types"]},{"location":"arch/node/engines/local_time_series_storage_messages.html#recorddatatsstoragedbrequest-and-recorddatatsstoragedbreply","title":"<code>RecordDataTSStorageDBRequest</code> and <code>RecordDataTSStorageDBReply</code>","text":"<pre><code>sequenceDiagram\n    participant AnyEngine\n    participant LocalTSStorageDB\n\n    AnyEngine -&gt;&gt; LocalTSStorageDB: RecordDataTSStorageDBRequest\n    LocalTSStorageDB -&gt;&gt; AnyEngine: RecordDataTSStorageDBReply</code></pre>  Sequence diagram: Record data flow","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","message-types"]},{"location":"arch/node/engines/local_time_series_storage_messages.html#deletedatatsstoragedbrequest-and-deletedatatsstoragedbreply","title":"<code>DeleteDataTSStorageDBRequest</code> and <code>DeleteDataTSStorageDBReply</code>","text":"<pre><code>sequenceDiagram\n    participant AnyEngine\n    participant LocalTSStorageDB\n\n    AnyEngine -&gt;&gt; LocalTSStorageDB: DeleteDataTSStorageDBRequest\n    LocalTSStorageDB -&gt;&gt; AnyEngine: DeleteDataTSStorageDBReply</code></pre>  Sequence diagram: Delete data flow","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","message-types"]},{"location":"arch/node/engines/local_time_series_storage_messages.html#message-types","title":"Message types","text":"Auxiliary Juvix code <pre><code>syntax alias TSStorageDBQuery := String;\nsyntax alias TSStorageDBData := String;\nsyntax alias EpochTimestamp := Nat;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","message-types"]},{"location":"arch/node/engines/local_time_series_storage_messages.html#getdatatsstoragedbrequest","title":"<code>GetDataTSStorageDBRequest</code>","text":"<pre><code>type GetDataTSStorageDBRequest := mkGetDataTSStorageDBRequest {\n  query : TSStorageDBQuery\n};\n</code></pre> Arguments <code>query</code> The query to find the requested time series data in the DB.","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","message-types"]},{"location":"arch/node/engines/local_time_series_storage_messages.html#getdatatsstoragedbreply","title":"<code>GetDataTSStorageDBReply</code>","text":"<pre><code>type GetDataTSStorageDBReply := mkGetDataTSStorageDBReply {\n  query : TSStorageDBQuery;\n  data : TSStorageDBData\n};\n</code></pre> Arguments <code>query</code> The query to find the requested time series data in the DB. <code>data</code> The requested time series data.","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","message-types"]},{"location":"arch/node/engines/local_time_series_storage_messages.html#recorddatatsstoragedbrequest","title":"<code>RecordDataTSStorageDBRequest</code>","text":"<pre><code>type RecordDataTSStorageDBRequest := mkRecordDataTSStorageDBRequest {\n  query : TSStorageDBQuery\n};\n</code></pre> Arguments <code>query</code> <p>The query that expresses the addition of the time series data into the DB.</p>","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","message-types"]},{"location":"arch/node/engines/local_time_series_storage_messages.html#recorddatatsstoragedbreply","title":"<code>RecordDataTSStorageDBReply</code>","text":"<pre><code>type RecordDataTSStorageDBReply := mkRecordDataTSStorageDBReply {\n  query : TSStorageDBQuery;\n  success : Bool\n};\n</code></pre> Arguments <code>query</code> The query that expresses the recording of the time series data into the DB. <code>success</code> The success of the operation, indicating if the data was stored successfully or not.","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","message-types"]},{"location":"arch/node/engines/local_time_series_storage_messages.html#deletedatatsstoragedbrequest","title":"<code>DeleteDataTSStorageDBRequest</code>","text":"<pre><code>type DeleteDataTSStorageDBRequest := mkDeleteDataTSStorageDBRequest {\n  query : TSStorageDBQuery\n};\n</code></pre> Arguments <code>query</code> The query that expresses the deletion of the time series data from the DB.","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","message-types"]},{"location":"arch/node/engines/local_time_series_storage_messages.html#deletedatatsstoragedbreply","title":"<code>DeleteDataTSStorageDBReply</code>","text":"<pre><code>type DeleteDataTSStorageDBReply := mkDeleteDataTSStorageDBReply {\n  query : TSStorageDBQuery;\n  success : Bool\n};\n</code></pre> Arguments <code>query</code> The query that expresses the deletion of the time series data from the DB. <code>success</code> The success of the operation, indicating if the data was deleted successfully or not.","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","message-types"]},{"location":"arch/node/engines/local_time_series_storage_messages.html#datachangedtsstoragedb","title":"<code>DataChangedTSStorageDB</code>","text":"<pre><code>type DataChangedTSStorageDB := mkDataChangedTSStorageDB {\n  query : TSStorageDBQuery;\n  data : TSStorageDBData;\n  timestamp : EpochTimestamp\n};\n</code></pre> Arguments <code>query</code> The query that expresses the change of the time series DB. <code>data</code> The changed time series data. <code>timestamp</code> The wall clock time of the moment the data was changed.","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","message-types"]},{"location":"arch/node/engines/local_time_series_storage_messages.html#localtsstoragemsg","title":"<code>LocalTSStorageMsg</code>","text":"<pre><code>type LocalTSStorageMsg :=\n  | GetRequest GetDataTSStorageDBRequest\n  | GetReply GetDataTSStorageDBReply\n  | RecordRequest RecordDataTSStorageDBRequest\n  | RecordReply RecordDataTSStorageDBReply\n  | DeleteRequest DeleteDataTSStorageDBRequest\n  | DeleteReply DeleteDataTSStorageDBReply\n  | DataChanged DataChangedTSStorageDB\n  ;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","message-types"]},{"location":"arch/node/engines/local_time_series_storage_messages.html#engine-components","title":"Engine components","text":"<ul> <li>Local Time Series Storage Configuration</li> <li>Local Time Series Storage Environment</li> <li>Local Time Series Storage Behaviour</li> </ul>","tags":["node-architecture","hardware-subsystem","engine","local-time-series-storage","message-types"]},{"location":"arch/node/engines/logging.html","title":"Logging Engine","text":"Juvix imports <pre><code>module arch.node.engines.logging;\n\nimport prelude open;\nimport arch.node.types.engine open;\n\nimport arch.node.engines.logging_messages open public;\nimport arch.node.engines.logging_environment open public;\nimport arch.node.engines.logging_behaviour open public;\nimport arch.node.engines.logging_config open public;\n\nimport arch.node.types.anoma as Anoma open;\n\nopen logging_config_example;\nopen logging_environment_example;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","logging","engine-definition"]},{"location":"arch/node/engines/logging.html#logging-engine","title":"Logging Engine","text":"","tags":["node-architecture","hardware-subsystem","engine","logging","engine-definition"]},{"location":"arch/node/engines/logging.html#purpose","title":"Purpose","text":"<p>The Logging Engine provides capabilities for recording, monitoring, analyzing, and managing events and activities locally on the physical machine that the Anoma node is running. It supports diagnostic efforts, security monitoring, performance optimization, and historical analysis to ensure stability, security, and efficiency.</p>","tags":["node-architecture","hardware-subsystem","engine","logging","engine-definition"]},{"location":"arch/node/engines/logging.html#engine-components","title":"Engine components","text":"<ul> <li>Logging Messages</li> <li>Logging Configuration</li> <li>Logging Environment</li> <li>Logging Behaviour</li> </ul>","tags":["node-architecture","hardware-subsystem","engine","logging","engine-definition"]},{"location":"arch/node/engines/logging.html#type","title":"Type","text":"<pre><code>LoggingEngine : Type :=\n  Engine\n    LoggingCfg\n    LoggingLocalState\n    LoggingMailboxState\n    LoggingTimerHandle\n    LoggingActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","logging","engine-definition"]},{"location":"arch/node/engines/logging.html#example-of-a-logging-engine","title":"Example of a logging engine","text":"<pre><code>exampleLoggingEngine : LoggingEngine :=\n  Engine.mk@{\n    cfg := loggingCfg;\n    env := loggingEnv;\n    behaviour := loggingBehaviour;\n  };\n</code></pre> <p>where <code>loggingCfg</code> is defined as follows:</p> <p>```juvix extract-module-statements module logging_config_example;</p> <p>loggingCfg : EngineCfg LoggingCfg :=     EngineCfg.mk@{       node := PublicKey.Curve25519PubKey \"0xabcd1234\";       name := \"logging\";       cfg := LoggingCfg.mk;     }   ; end; <pre><code>`loggingEnv` is defined as follows:\n\n```juvix extract-module-statements\nmodule logging_environment_example;\n\n  loggingEnv : LoggingEnv :=\n    EngineEnv.mk@{\n      localState := LoggingLocalState.mk@{\n        logbook := []\n      };\n      mailboxCluster := Map.empty;\n      acquaintances := Set.empty;\n      timers := []\n    }\n  ;\nend;\n</code></pre></p> <p>and <code>loggingBehaviour</code> is defined as follows:</p> <pre><code>loggingBehaviour : LoggingBehaviour :=\n  EngineBehaviour.mk@{\n    guards := GuardEval.First [ appendLogGuard ];\n  };\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","logging","engine-definition"]},{"location":"arch/node/engines/logging_behaviour.html","title":"Logging Behaviour","text":"Juvix imports <pre><code>module arch.node.engines.logging_behaviour;\n\nimport arch.node.engines.logging_messages open;\nimport arch.node.engines.logging_config open;\nimport arch.node.engines.logging_environment open;\n\nimport prelude open;\nimport arch.node.types.basics open;\nimport arch.node.types.identities open;\nimport arch.node.types.messages open;\nimport arch.node.types.engine open;\nimport arch.node.types.anoma as Anoma open;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","logging","behaviour"]},{"location":"arch/node/engines/logging_behaviour.html#logging-behaviour","title":"Logging Behaviour","text":"","tags":["node-architecture","hardware-subsystem","engine","logging","behaviour"]},{"location":"arch/node/engines/logging_behaviour.html#overview","title":"Overview","text":"<p>A logging engine maintains a logbook of entries and provides the capability to append new entries.</p>","tags":["node-architecture","hardware-subsystem","engine","logging","behaviour"]},{"location":"arch/node/engines/logging_behaviour.html#action-arguments","title":"Action arguments","text":"","tags":["node-architecture","hardware-subsystem","engine","logging","behaviour"]},{"location":"arch/node/engines/logging_behaviour.html#loggingactionargument","title":"<code>LoggingActionArgument</code>","text":"<pre><code>type LoggingActionArgument := Unit;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","logging","behaviour"]},{"location":"arch/node/engines/logging_behaviour.html#loggingactionarguments","title":"<code>LoggingActionArguments</code>","text":"<pre><code>LoggingActionArguments : Type := List LoggingActionArgument;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","logging","behaviour"]},{"location":"arch/node/engines/logging_behaviour.html#actions","title":"Actions","text":"Auxiliary Juvix code","tags":["node-architecture","hardware-subsystem","engine","logging","behaviour"]},{"location":"arch/node/engines/logging_behaviour.html#loggingaction","title":"<code>LoggingAction</code>","text":"<p> <pre><code>LoggingAction : Type :=\n  Action\n    LoggingCfg\n    LoggingLocalState\n    LoggingMailboxState\n    LoggingTimerHandle\n    LoggingActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","hardware-subsystem","engine","logging","behaviour"]},{"location":"arch/node/engines/logging_behaviour.html#loggingactioninput","title":"<code>LoggingActionInput</code>","text":"<p> <pre><code>LoggingActionInput : Type :=\n  ActionInput\n    LoggingCfg\n    LoggingLocalState\n    LoggingMailboxState\n    LoggingTimerHandle\n    LoggingActionArguments\n    Anoma.Msg;\n</code></pre> </p>","tags":["node-architecture","hardware-subsystem","engine","logging","behaviour"]},{"location":"arch/node/engines/logging_behaviour.html#loggingactioneffect","title":"<code>LoggingActionEffect</code>","text":"<p> <pre><code>LoggingActionEffect : Type :=\n  ActionEffect\n    LoggingLocalState\n    LoggingMailboxState\n    LoggingTimerHandle\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","hardware-subsystem","engine","logging","behaviour"]},{"location":"arch/node/engines/logging_behaviour.html#loggingactionexec","title":"<code>LoggingActionExec</code>","text":"<p> <pre><code>LoggingActionExec : Type :=\n  ActionExec\n    LoggingCfg\n    LoggingLocalState\n    LoggingMailboxState\n    LoggingTimerHandle\n    LoggingActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","hardware-subsystem","engine","logging","behaviour"]},{"location":"arch/node/engines/logging_behaviour.html#appendlogaction","title":"<code>appendLogAction</code>","text":"<p>Append new log entry to the logbook.</p> State update Add the new log entry to the logbook. Messages to be sent No messages are sent by this action. Engines to be spawned No engine is created by this action. Timer updates No timers are set or cancelled. <pre><code>appendLogAction\n  (input : LoggingActionInput)\n  : Option LoggingActionEffect :=\n  let\n    env := ActionInput.env input;\n    trigger := ActionInput.trigger input;\n  in case getEngineMsgFromTimestampedTrigger trigger of {\n    | some EngineMsg.mk@{\n        msg := Anoma.PreMsg.MsgLogging (LoggingMsg.Append (AppendValue.mk@{value := value}));\n      } :=\n      let\n        currentLogbook := LoggingLocalState.logbook (EngineEnv.localState env);\n        newLogbook := value :: currentLogbook;\n      in some ActionEffect.mk@{\n        env := env@EngineEnv{\n          localState := LoggingLocalState.mk@{\n            logbook := newLogbook\n          }\n        };\n        msgs := [];\n        timers := [];\n        engines := [];\n      }\n    | _ := none\n  };\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","logging","behaviour"]},{"location":"arch/node/engines/logging_behaviour.html#action-labels","title":"Action Labels","text":"","tags":["node-architecture","hardware-subsystem","engine","logging","behaviour"]},{"location":"arch/node/engines/logging_behaviour.html#appendlogactionlabel","title":"<code>appendLogActionLabel</code>","text":"<pre><code>appendLogActionLabel : LoggingActionExec := ActionExec.Seq [ appendLogAction ];\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","logging","behaviour"]},{"location":"arch/node/engines/logging_behaviour.html#guards","title":"Guards","text":"Auxiliary Juvix code <pre><code>LoggingGuard : Type :=\n  Guard\n    LoggingCfg\n    LoggingLocalState\n    LoggingMailboxState\n    LoggingTimerHandle\n    LoggingActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n\nLoggingGuardOutput : Type :=\n  GuardOutput\n    LoggingCfg\n    LoggingLocalState\n    LoggingMailboxState\n    LoggingTimerHandle\n    LoggingActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n\nLoggingGuardEval : Type :=\n  GuardEval\n    LoggingCfg\n    LoggingLocalState\n    LoggingMailboxState\n    LoggingTimerHandle\n    LoggingActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","logging","behaviour"]},{"location":"arch/node/engines/logging_behaviour.html#appendlogguard","title":"<code>appendLogGuard</code>","text":"<p>Guard for append log action.</p> Condition Message type is <code>Append</code>. <pre><code>appendLogGuard\n  (trigger : LoggingTimestampedTrigger)\n  (cfg : EngineCfg LoggingCfg)\n  (env : LoggingEnv)\n  : Option LoggingGuardOutput :=\n  case getEngineMsgFromTimestampedTrigger trigger of {\n    | some EngineMsg.mk@{\n        msg := Anoma.PreMsg.MsgLogging (LoggingMsg.Append _);\n      } := some GuardOutput.mk@{\n        action := appendLogActionLabel;\n        args := [];\n      }\n    | _ := none\n  };\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","logging","behaviour"]},{"location":"arch/node/engines/logging_behaviour.html#the-logging-behaviour","title":"The Logging behaviour","text":"","tags":["node-architecture","hardware-subsystem","engine","logging","behaviour"]},{"location":"arch/node/engines/logging_behaviour.html#loggingbehaviour","title":"<code>LoggingBehaviour</code>","text":"<pre><code>LoggingBehaviour : Type :=\n  EngineBehaviour\n    LoggingCfg\n    LoggingLocalState\n    LoggingMailboxState\n    LoggingTimerHandle\n    LoggingActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","logging","behaviour"]},{"location":"arch/node/engines/logging_behaviour.html#instantiation","title":"Instantiation","text":"<pre><code>loggingBehaviour : LoggingBehaviour :=\n  EngineBehaviour.mk@{\n    guards := GuardEval.First [ appendLogGuard ];\n  };\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","logging","behaviour"]},{"location":"arch/node/engines/logging_behaviour.html#logging-action-flowchart","title":"Logging Action Flowchart","text":"","tags":["node-architecture","hardware-subsystem","engine","logging","behaviour"]},{"location":"arch/node/engines/logging_behaviour.html#appendlog-flowchart","title":"<code>appendLog</code> Flowchart","text":"<pre><code>flowchart TD\n  subgraph C[Conditions]\n    CMsg&gt;Append]\n  end\n\n  G(appendLogGuard)\n  A(appendLogAction)\n\n  C --&gt; G -- *appendLogActionLabel* --&gt; A --&gt; E\n\n  subgraph E[Effects]\n    EEnv[(Update logbook)]\n  end</code></pre> <code>appendLog</code> flowchart","tags":["node-architecture","hardware-subsystem","engine","logging","behaviour"]},{"location":"arch/node/engines/logging_config.html","title":"Logging Configuration","text":"Juvix imports <pre><code>module arch.node.engines.logging_config;\n\nimport prelude open;\nimport arch.node.engines.logging_messages open;\nimport arch.node.types.engine open;\nimport arch.node.types.messages open;\nimport arch.node.types.identities open;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","logging","configuration"]},{"location":"arch/node/engines/logging_config.html#logging-configuration","title":"Logging Configuration","text":"","tags":["node-architecture","hardware-subsystem","engine","logging","configuration"]},{"location":"arch/node/engines/logging_config.html#overview","title":"Overview","text":"<p>The logging engine configuration contains static information for logging engine instances.</p>","tags":["node-architecture","hardware-subsystem","engine","logging","configuration"]},{"location":"arch/node/engines/logging_config.html#the-logging-configuration","title":"The Logging Configuration","text":"","tags":["node-architecture","hardware-subsystem","engine","logging","configuration"]},{"location":"arch/node/engines/logging_config.html#loggingcfg","title":"<code>LoggingCfg</code>","text":"<pre><code>type LoggingCfg := mk;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","logging","configuration"]},{"location":"arch/node/engines/logging_config.html#instantiation","title":"Instantiation","text":"<p>```juvix extract-module-statements module logging_config_example;</p> <p>loggingCfg : EngineCfg LoggingCfg :=     EngineCfg.mk@{       node := PublicKey.Curve25519PubKey \"0xabcd1234\";       name := \"logging\";       cfg := LoggingCfg.mk;     }   ; end; ```</p>","tags":["node-architecture","hardware-subsystem","engine","logging","configuration"]},{"location":"arch/node/engines/logging_environment.html","title":"Logging Environment","text":"Juvix imports <pre><code>module arch.node.engines.logging_environment;\n\nimport prelude open;\nimport arch.node.engines.logging_messages open;\nimport arch.node.types.engine open;\nimport arch.node.types.messages open;\nimport arch.node.types.identities open;\nimport arch.node.types.anoma_message as Anoma open;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","logging","environment"]},{"location":"arch/node/engines/logging_environment.html#logging-environment","title":"Logging Environment","text":"","tags":["node-architecture","hardware-subsystem","engine","logging","environment"]},{"location":"arch/node/engines/logging_environment.html#overview","title":"Overview","text":"<p>The logging environment maintains the state necessary for recording logs locally on the physical machine.</p>","tags":["node-architecture","hardware-subsystem","engine","logging","environment"]},{"location":"arch/node/engines/logging_environment.html#mailbox-state-types","title":"Mailbox state types","text":"","tags":["node-architecture","hardware-subsystem","engine","logging","environment"]},{"location":"arch/node/engines/logging_environment.html#loggingmailboxstate","title":"<code>LoggingMailboxState</code>","text":"<pre><code>syntax alias LoggingMailboxState := Unit;\n</code></pre> <p>The logging engine does not require complex mailbox states.</p>","tags":["node-architecture","hardware-subsystem","engine","logging","environment"]},{"location":"arch/node/engines/logging_environment.html#local-state","title":"Local state","text":"","tags":["node-architecture","hardware-subsystem","engine","logging","environment"]},{"location":"arch/node/engines/logging_environment.html#logginglocalstate","title":"<code>LoggingLocalState</code>","text":"<pre><code>type LoggingLocalState :=\n  mk@{\n    logbook : List String\n  };\n</code></pre> Arguments <code>logbook</code> List of log entries stored as strings.","tags":["node-architecture","hardware-subsystem","engine","logging","environment"]},{"location":"arch/node/engines/logging_environment.html#timer-handles","title":"Timer handles","text":"","tags":["node-architecture","hardware-subsystem","engine","logging","environment"]},{"location":"arch/node/engines/logging_environment.html#loggingtimerhandle","title":"<code>LoggingTimerHandle</code>","text":"<pre><code>syntax alias LoggingTimerHandle := Unit;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","logging","environment"]},{"location":"arch/node/engines/logging_environment.html#loggingtimestampedtrigger","title":"<code>LoggingTimestampedTrigger</code>","text":"<pre><code>LoggingTimestampedTrigger : Type :=\n  TimestampedTrigger\n    LoggingTimerHandle\n    Anoma.Msg;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","logging","environment"]},{"location":"arch/node/engines/logging_environment.html#the-logging-environment","title":"The Logging Environment","text":"","tags":["node-architecture","hardware-subsystem","engine","logging","environment"]},{"location":"arch/node/engines/logging_environment.html#loggingenv","title":"<code>LoggingEnv</code>","text":"<pre><code>LoggingEnv : Type :=\n  EngineEnv\n    LoggingLocalState\n    LoggingMailboxState\n    LoggingTimerHandle\n    Anoma.Msg;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","logging","environment"]},{"location":"arch/node/engines/logging_environment.html#instantiation","title":"Instantiation","text":"<p>```juvix extract-module-statements module logging_environment_example;</p> <p>loggingEnv : LoggingEnv :=     EngineEnv.mk@{       localState := LoggingLocalState.mk@{         logbook := []       };       mailboxCluster := Map.empty;       acquaintances := Set.empty;       timers := []     }   ; end; ```</p>","tags":["node-architecture","hardware-subsystem","engine","logging","environment"]},{"location":"arch/node/engines/logging_messages.html","title":"Logging Messages","text":"Juvix imports <pre><code>module arch.node.engines.logging_messages;\nimport prelude open;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","logging","message-types"]},{"location":"arch/node/engines/logging_messages.html#logging-messages","title":"Logging Messages","text":"<p>These are the messages that the Logging engine can receive/respond to.</p>","tags":["node-architecture","hardware-subsystem","engine","logging","message-types"]},{"location":"arch/node/engines/logging_messages.html#message-interface","title":"Message interface","text":"<pre><code>type LoggingMsg :=\n  | Append AppendValue;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","logging","message-types"]},{"location":"arch/node/engines/logging_messages.html#message-sequence-diagrams","title":"Message sequence diagrams","text":"","tags":["node-architecture","hardware-subsystem","engine","logging","message-types"]},{"location":"arch/node/engines/logging_messages.html#appending-a-log-entry","title":"Appending a log entry","text":"<pre><code>sequenceDiagram\n    participant LocalEngine\n    participant LoggingEngine\n\n    LocalEngine -&gt;&gt; LoggingEngine: Append\n    Note over LoggingEngine: Appends the value to logbook</code></pre>  A local engine sends a log entry to be appended to the logbook","tags":["node-architecture","hardware-subsystem","engine","logging","message-types"]},{"location":"arch/node/engines/logging_messages.html#message-types","title":"Message types","text":"","tags":["node-architecture","hardware-subsystem","engine","logging","message-types"]},{"location":"arch/node/engines/logging_messages.html#appendvalue","title":"<code>AppendValue</code>","text":"<pre><code>type AppendValue := mk@{\n  value : String\n};\n</code></pre> Arguments <code>value</code>: The value in string format to be added to the logbook.","tags":["node-architecture","hardware-subsystem","engine","logging","message-types"]},{"location":"arch/node/engines/logging_messages.html#loggingmsg","title":"<code>LoggingMsg</code>","text":"<pre><code>type LoggingMsg :=\n  | Append AppendValue;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","logging","message-types"]},{"location":"arch/node/engines/logging_messages.html#engine-components","title":"Engine components","text":"<ul> <li>Logging Configuration</li> <li>Logging Environment</li> <li>Logging Behaviour</li> </ul>","tags":["node-architecture","hardware-subsystem","engine","logging","message-types"]},{"location":"arch/node/engines/mempool_worker.html","title":"Mempool Worker Engine","text":"Juvix imports <pre><code>module arch.node.engines.mempool_worker;\n\nimport prelude open;\nimport arch.node.types.engine open;\n\nimport arch.node.engines.mempool_worker_config open public;\nimport arch.node.engines.mempool_worker_messages open public;\nimport arch.node.engines.mempool_worker_environment open public;\nimport arch.node.engines.mempool_worker_behaviour open public;\n\nimport arch.node.types.anoma as Anoma open;\n\nopen mempool_worker_config_example;\nopen mempool_worker_environment_example;\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","mempool-worker","engine-definition"]},{"location":"arch/node/engines/mempool_worker.html#mempool-worker-engine","title":"Mempool Worker Engine","text":"<p>The Mempool Worker Engine serves as a transaction coordinator in Anoma, managing the critical process of ordering transactions and orchestrating their execution. Think of it as a traffic controller that not only assigns each transaction a unique position in line (via a timestamp called a TxFingerprint), but also ensures all the necessary resources (state access) are locked and ready before execution begins. In the current version of Anoma (up to v0.2), there is only a single Mempool Worker Engine instance, making it the central coordinator for all transaction processing.</p> <p>When users or solvers submit transactions (via <code>MempoolWorkerMsgTransactionRequest</code>), the Worker examines the transaction's label to understand what state it may need to access - which keys it may read from and/or write to. It assigns each transaction a unique fingerprint (called a <code>timestamp</code>) that establishes its position in the execution order, and returns an acknowledgment (<code>MempoolWorkerMsgTransactionAck</code>) to the submitter. This acknowledgment includes a signature over the transaction hash and metadata, providing proof of acceptance into the processing pipeline.</p> <p>The Worker's core responsibility is managing a sophisticated locking protocol that ensures transactions can execute safely and efficiently. For each transaction, it sends <code>KVSAcquireLock</code> messages to all Shards that manage keys the transaction needs to access. These locks specify which keys will definitely be read (<code>eager_read_keys</code>), which might be read (<code>lazy_read_keys</code>), which will definitely be written (<code>will_write_keys</code>), and which might be written (<code>may_write_keys</code>). The Shards respond with <code>KVSLockAcquired</code> messages once they've recorded these access intentions.</p> <p>A crucial part of the Worker's job is tracking the \"seen-all\" points - timestamps before which all Shards have processed all relevant lock requests. It maintains two such points: <code>seen_all_writes</code> for write locks and <code>seen_all_reads</code> for read locks. When Shards confirm lock acquisition, the Worker updates these points and broadcasts them to all Shards via <code>UpdateSeenAll</code> messages. This information is vital for the Shards to know when they can safely process read requests and perform state updates, as it guarantees no earlier lock requests are still pending.</p> <p>For each transaction, the Worker spawns an Executor Engine (configured with the transaction's program and access rights) and maintains a mapping between Executors and their transactions. As Executors complete their work, they notify the Worker via <code>ExecutorMsgExecutorFinished</code> messages containing summaries of what was read and written. The Worker collects these execution summaries, maintaining a record of transaction processing outcomes.</p> <p>The Mempool Worker's state tracks pending transactions and their corresponding Executors, maintains the mapping of transactions to their fingerprints, collects lock acquisition confirmations, tracks the seen-all barriers, and stores execution summaries. This state allows it to provide the ordering and coordination services needed for Anoma's parallel execution model, where multiple transactions can process simultaneously so long as their state access patterns don't conflict, ensuring serializability.</p>","tags":["node-architecture","ordering-subsystem","engine","mempool-worker","engine-definition"]},{"location":"arch/node/engines/mempool_worker.html#purpose","title":"Purpose","text":"<p>Workers are one of the mempool engines and, up to v0.2, they are the only one and there is only a single worker.</p> <p>The worker receives transaction requests from users and solvers and batches these transaction requests, assigning a unique TxFingerprint to every new transaction. Each transaction candidate will be sent to an Executor inside an ExecuteTransaction message. Once the worker has received a KVSLockAcquired for every part of the transaction request's label (from the shards of the same Anoma validator in response to KVSAcquireLock-messages), it knows that this transaction candidate has been \"seen\" by all Shards, which implies that all shards are prepared to process lock requests from execution processes (see KVSReadRequest and KVSWrite for details). This information about locks being recorded is distributed to all shards via UpdateSeenAll messages, which contain the most recent TxFingerprint for which it is certain that all Shards have \"seen\" this transaction candidate and all previous ones from the same worker (and they are thus prepared to grant locks). Note that if shards receive transaction candidates in a different order than the final total order of transactions, UpdateSeenAll messages are necessary to avoid that shards grant locks before all locks of previous transaction executions have been served.</p> <p>Workers also are in charge of collecting and curating logs of transaction execution. Success is equivalent to all reads and writes being successful and an ExecutorFinished-message from the executor that was spawned to execute the message.</p>","tags":["node-architecture","ordering-subsystem","engine","mempool-worker","engine-definition"]},{"location":"arch/node/engines/mempool_worker.html#engine-components","title":"Engine components","text":"<ul> <li>Mempool Worker Messages</li> <li>Mempool Worker Configuration</li> <li>Mempool Worker Environment</li> <li>Mempool Worker Behaviour</li> </ul>","tags":["node-architecture","ordering-subsystem","engine","mempool-worker","engine-definition"]},{"location":"arch/node/engines/mempool_worker.html#the-type-for-a-mempool-worker-engine","title":"The type for a mempool worker engine","text":"<pre><code>MempoolWorkerEngine (KVSKey KVSDatum Executable ProgramState : Type) : Type :=\n  Engine\n    MempoolWorkerCfg\n    (MempoolWorkerLocalState KVSKey KVSDatum Executable)\n    MempoolWorkerMailboxState\n    MempoolWorkerTimerHandle\n    MempoolWorkerActionArguments\n    (Anoma.PreMsg KVSKey KVSDatum Executable)\n    (Anoma.PreCfg KVSKey KVSDatum Executable)\n    (Anoma.PreEnv KVSKey KVSDatum Executable ProgramState);\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","mempool-worker","engine-definition"]},{"location":"arch/node/engines/mempool_worker.html#example-of-a-mempool-worker-engine","title":"Example of a mempool worker engine","text":"<pre><code>exampleMempoolWorkerEngine : MempoolWorkerEngine String String ByteString String :=\n  Engine.mk@{\n    cfg := mempoolWorkerCfg;\n    env := mempoolWorkerEnv;\n    behaviour := mempoolWorkerBehaviour;\n  };\n</code></pre> <p>where <code>mempoolWorkerCfg</code> is defined as follows:</p> <p>```juvix extract-module-statements module mempool_worker_config_example;</p> <p>mempoolWorkerCfg : EngineCfg MempoolWorkerCfg :=     EngineCfg.mk@{       node := PublicKey.Curve25519PubKey \"0xabcd1234\";       name := \"mempool worker\";       cfg := MempoolWorkerCfg.mk     }   ; end; <pre><code>where [`mempoolWorkerEnv`](https://specs.anoma.net/pr-347/arch/node/engines/mempool_worker_environment.html#mempoolWorkerEnv) is defined as follows:\n\n```juvix extract-module-statements\nmodule mempool_worker_environment_example;\n\n  mempoolWorkerEnv : MempoolWorkerEnv String String ByteString :=\n    EngineEnv.mk@{\n      localState := MempoolWorkerLocalState.mk@{\n        batch_number := 0;\n        transactions := Map.empty;\n        transactionEngines := Map.empty;\n        locks_acquired := [];\n        seen_all_writes := 0;\n        seen_all_reads := 0;\n        execution_summaries := Map.empty;\n        gensym := 0\n      };\n      mailboxCluster := Map.empty;\n      acquaintances := Set.empty;\n      timers := []\n    }\n  ;\nend;\n</code></pre></p> <p>and <code>mempoolWorkerBehaviour</code> is defined as follows:</p> <pre><code>instance dummyRunnable : Runnable String String ByteString String :=\n  Runnable.mkRunnable@{\n    executeStep := \\{_ _ _ := error \"Not implemented\"};\n    halted := \\{_ := false};\n    startingState := \"\"\n  };\n\nmempoolWorkerBehaviour : MempoolWorkerBehaviour String String ByteString String :=\n  EngineBehaviour.mk@{\n    guards := GuardEval.First [\n      transactionRequestGuard;\n      lockAcquiredGuard;\n      executorFinishedGuard\n    ]\n  };\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","mempool-worker","engine-definition"]},{"location":"arch/node/engines/mempool_worker_behaviour.html","title":"Mempool Worker Behaviour","text":"Juvix imports <pre><code>module arch.node.engines.mempool_worker_behaviour;\n\nimport arch.node.engines.mempool_worker_messages open;\nimport arch.node.engines.mempool_worker_config open;\nimport arch.node.engines.mempool_worker_environment open;\nimport arch.node.engines.shard_messages open;\nimport arch.node.engines.executor_messages open;\nimport arch.node.engines.executor_config open;\nimport arch.node.engines.executor_environment open;\n\nimport prelude open;\nimport Stdlib.Data.Nat open;\nimport Stdlib.Data.List as List;\nimport Stdlib.Data.Set as Set;\nimport arch.node.types.basics open;\nimport arch.node.types.identities open;\nimport arch.node.types.messages open;\nimport arch.node.types.engine open;\nimport arch.node.types.anoma as Anoma open;\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","mempool-worker","behaviour"]},{"location":"arch/node/engines/mempool_worker_behaviour.html#mempool-worker-behaviour","title":"Mempool Worker Behaviour","text":"","tags":["node-architecture","ordering-subsystem","engine","mempool-worker","behaviour"]},{"location":"arch/node/engines/mempool_worker_behaviour.html#overview","title":"Overview","text":"<p>A mempool worker acts as a transaction coordinator, receiving transaction requests, managing their execution lifecycle, and coordinating with shards and executors.</p> Auxiliary Juvix code <pre><code>axiom sign {KVSKey Executable} : TxFingerprint -&gt; TransactionCandidate KVSKey KVSKey Executable -&gt; Signature;\naxiom hash {KVSKey Executable} : TxFingerprint -&gt; TransactionCandidate KVSKey KVSKey Executable -&gt; Hash;\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","mempool-worker","behaviour"]},{"location":"arch/node/engines/mempool_worker_behaviour.html#mempool-worker-action-flowcharts","title":"Mempool Worker Action Flowcharts","text":"","tags":["node-architecture","ordering-subsystem","engine","mempool-worker","behaviour"]},{"location":"arch/node/engines/mempool_worker_behaviour.html#transactionrequestaction-flowchart","title":"<code>transactionRequestAction</code> flowchart","text":"<p>```mermaidflowchart TD     Start([Client Request]) --&gt; MsgReq[MempoolWorkerMsgTransactionRequesttx: TransactionCandidate]</p> <pre><code>subgraph Guard[\"transactionRequestGuard\"]\n    MsgReq --&gt; ValidType{Is message type&lt;br/&gt;TransactionRequest?}\n    ValidType --&gt;|No| Reject([Reject Request])\n    ValidType --&gt;|Yes| ActionEntry[Enter Action Phase]\nend\n\nActionEntry --&gt; Action\n\nsubgraph Action[\"transactionRequestAction\"]\n    direction TB\n    GenFP[Generate new fingerprint&lt;br/&gt;from gensym]\n    GenFP --&gt; SpawnEx[Create Executor Config&lt;br/&gt;with access rights]\n    SpawnEx --&gt; UpdateState[Update local state:&lt;br/&gt;- Increment gensym&lt;br/&gt;- Add to transactions map&lt;br/&gt;- Add to engine map]\n    UpdateState --&gt; PrepLocks[Prepare lock requests&lt;br/&gt;for each shard]\nend\n\nPrepLocks --&gt; Msgs\n\nsubgraph Msgs[Messages and Effects]\n    MsgAck[TransactionAck to client&lt;br/&gt;with fingerprint &amp; signature]\n    MsgLock[KVSAcquireLock to shards&lt;br/&gt;with read/write keys]\n    SpawnEng[Spawn Executor Engine]\nend\n\nstyle Guard fill:#f0f7ff,stroke:#333,stroke-width:2px\nstyle Action fill:#fff7f0,stroke:#333,stroke-width:2px\nstyle Msgs fill:#f7fff0,stroke:#333,stroke-width:2px\n</code></pre> <p><code>``  &lt;figcaption markdown=\"span\"&gt;</code>transactionRequestAction` flowchart  </p>","tags":["node-architecture","ordering-subsystem","engine","mempool-worker","behaviour"]},{"location":"arch/node/engines/mempool_worker_behaviour.html#explanation","title":"Explanation","text":"<ol> <li>Initial Request<ul> <li>A client sends a <code>MempoolWorkerMsgTransactionRequest</code> containing:<ul> <li><code>tx</code>: The transaction candidate to be ordered and executed.</li> <li><code>resubmission</code>: Optional reference to a previous occurrence (currently unused).</li> </ul> </li> <li>The transaction candidate includes its program code and access patterns (what it will read/write). </li> </ul> </li> <li>Guard Phase (<code>transactionRequestGuard</code>)<ul> <li>Verifies message type is <code>MempoolWorkerMsgTransactionRequest</code>.</li> <li>If validation fails, request is rejected.</li> <li>On success, passes control to <code>transactionRequestActionLabel</code>. </li> </ul> </li> <li>Action Phase (<code>transactionRequestAction</code>)<ul> <li>Generates new fingerprint by incrementing gensym counter.</li> <li>Creates Executor configuration with:<ul> <li>Timestamp set to new fingerprint.</li> <li>Executable code from transaction.</li> <li>Access rights from transaction label.</li> <li>References to worker and transaction issuer.</li> </ul> </li> <li>Updates local state:<ul> <li>Increments gensym counter.</li> <li>Adds transaction to transactions map.</li> <li>Records executor ID to fingerprint mapping.</li> </ul> </li> <li>Prepares lock requests for each affected shard by:<ul> <li>Grouping keys by shard.</li> <li>Creating appropriate lock request messages. </li> </ul> </li> </ul> </li> <li>Reply Generation<ul> <li>Messages sent:<ul> <li>To client: <code>MempoolWorkerMsgTransactionAck</code> containing:<ul> <li><code>tx_hash</code>: Hash of the transaction</li> <li><code>batch_number</code>: Current batch number</li> <li><code>worker_id</code>: This worker's ID</li> <li><code>signature</code>: Worker's signature over above fields</li> </ul> </li> <li>To shards: <code>KVSAcquireLock</code> messages for each affected shard containing:<ul> <li><code>lazy_read_keys</code>: Keys that might be read</li> <li><code>eager_read_keys</code>: Keys that will definitely be read</li> <li><code>will_write_keys</code>: Keys that will definitely be written</li> <li><code>may_write_keys</code>: Keys that might be written</li> <li><code>worker</code>: This worker's ID</li> <li><code>executor</code>: ID of spawned executor</li> <li><code>timestamp</code>: Generated fingerprint </li> </ul> </li> </ul> </li> </ul> </li> <li>Replys and Effects<ul> <li>Reply Delivery<ul> <li>All messages are sent with mailbox 0 (default response mailbox).</li> <li>Transaction acknowledgment is sent back to original requester.</li> <li>Lock requests are sent to all relevant shards.</li> </ul> </li> <li>Engines spawned:<ul> <li>Creates new Executor engine with generated configuration. </li> </ul> </li> </ul> </li> </ol>","tags":["node-architecture","ordering-subsystem","engine","mempool-worker","behaviour"]},{"location":"arch/node/engines/mempool_worker_behaviour.html#important-notes","title":"Important Notes:","text":"<ul> <li>The fingerprint generation via a gensym is a simple version of what could be a more complex process </li> </ul>","tags":["node-architecture","ordering-subsystem","engine","mempool-worker","behaviour"]},{"location":"arch/node/engines/mempool_worker_behaviour.html#lockacquiredaction-flowchart","title":"<code>lockAcquiredAction</code> flowchart","text":"<p> <code>mermaid flowchart TD     Start([Shard Reply]) --&gt; MsgReq[ShardMsgKVSLockAcquired&lt;br/&gt;timestamp: TxFingerprint]      subgraph Guard[\"lockAcquiredGuard\"]         MsgReq --&gt; ValidType{Is message type&lt;br/&gt;LockAcquired?}         ValidType --&gt;|No| Reject([Reject Request])         ValidType --&gt;|Yes| ActionEntry[Enter Action Phase]     end      ActionEntry --&gt; Action      subgraph Action[\"lockAcquiredAction\"]         direction TB         AddLock[Add lock to acquired list]         AddLock --&gt; CalcMax[Calculate max consecutive:&lt;br/&gt;- Writes locked&lt;br/&gt;- Reads locked]         CalcMax --&gt; UpdateBarriers[Update seen_all barriers:&lt;br/&gt;- seen_all_writes&lt;br/&gt;- seen_all_reads]     end      UpdateBarriers --&gt; Msgs      subgraph Msgs[Messages and Effects]         BcastWrite[UpdateSeenAll to shards&lt;br/&gt;for write barrier]         BcastRead[UpdateSeenAll to shards&lt;br/&gt;for read barrier]     end</code> <code>lockAcquiredAction</code> flowchart","tags":["node-architecture","ordering-subsystem","engine","mempool-worker","behaviour"]},{"location":"arch/node/engines/mempool_worker_behaviour.html#explanation_1","title":"Explanation","text":"<ol> <li> <p>Initial Message</p> <ul> <li>A Mempool Worker receives a <code>ShardMsgKVSLockAcquired</code> message from a Shard engine.</li> <li>The message contains:<ul> <li><code>timestamp</code>: The TxFingerprint identifying which transaction's locks were acquired.</li> <li>(Implicit) The sender of the message identifies which shard has confirmed the locks.</li> </ul> </li> </ul> </li> <li> <p>Guard Phase (<code>lockAcquiredGuard</code>)</p> <ul> <li>Verifies message type is <code>ShardMsgKVSLockAcquired</code>.</li> <li>If validation fails, request is rejected.</li> <li>On success, passes control to <code>lockAcquiredActionLabel</code>.</li> </ul> </li> <li> <p>Action Phase (<code>lockAcquiredAction</code>)</p> <ul> <li>Adds the new lock to the <code>locks_acquired</code> list in state.</li> <li>Calculates new maximum consecutive sequence points by analyzing the lock history:<ul> <li>For writes: Finds highest fingerprint where all prior write locks are confirmed.</li> <li>For reads: Finds highest fingerprint where all prior read locks are confirmed.</li> </ul> </li> <li>Updates internal barriers (<code>seen_all_writes</code> and <code>seen_all_reads</code>) based on calculations.</li> <li>Constructs appropriate update messages for all shards.</li> </ul> </li> <li> <p>Reply Generation</p> <ul> <li>Constructs <code>ShardMsgUpdateSeenAll</code> messages for every shard, containing:<ul> <li>For write barrier updates:<ul> <li><code>timestamp</code>: New <code>seen_all_writes</code> value.</li> <li><code>write</code>: true.</li> </ul> </li> <li>For read barrier updates:<ul> <li><code>timestamp</code>: New <code>seen_all_reads</code> value.</li> <li><code>write</code>: false.</li> </ul> </li> </ul> </li> </ul> </li> <li> <p>Message Delivery</p> <ul> <li>Update messages are broadcast to all shards in the system.</li> <li>Uses mailbox 0 (the standard mailbox for responses).</li> </ul> </li> </ol>","tags":["node-architecture","ordering-subsystem","engine","mempool-worker","behaviour"]},{"location":"arch/node/engines/mempool_worker_behaviour.html#executorfinishedaction-flowchart","title":"<code>executorFinishedAction</code> flowchart","text":"<pre><code>flowchart TD\n    Start([Executor Reply]) --&gt; MsgReq[ExecutorMsgExecutorFinished&lt;br/&gt;success: Bool&lt;br/&gt;values_read: List KeyValue&lt;br/&gt;values_written: List KeyValue]\n\n    subgraph Guard[\"executorFinishedGuard\"]\n        MsgReq --&gt; ValidType{Is message type&lt;br/&gt;ExecutorFinished?}\n        ValidType --&gt;|No| Reject([Reject Request])\n        ValidType --&gt;|Yes| ActionEntry[Enter Action Phase]\n    end\n\n    ActionEntry --&gt; Action\n\n    subgraph Action[\"executorFinishedAction\"]\n        direction TB\n        FindTx{Lookup transaction&lt;br/&gt;for executor}\n        FindTx --&gt;|Not Found| NoAction[Do Nothing]\n        FindTx --&gt;|Found| Store[Store execution summary&lt;br/&gt;in local state]\n    end\n\n    Store --&gt; Effects\n    NoAction --&gt; NoEffect([No Effect])\n\n    subgraph Effects[Effects]\n        State[Update execution summaries&lt;br/&gt;in local state]\n    end</code></pre> <code>executorFinishedAction</code> flowchart","tags":["node-architecture","ordering-subsystem","engine","mempool-worker","behaviour"]},{"location":"arch/node/engines/mempool_worker_behaviour.html#explanation_2","title":"Explanation","text":"<ol> <li> <p>Initial Request</p> <ul> <li>An executor sends a <code>MsgExecutorFinished</code> containing:<ul> <li><code>success</code>: Boolean indicating if execution completed successfully.</li> <li><code>values_read</code>: List of all key-value pairs that were read during execution.</li> <li><code>values_written</code>: List of all key-value pairs that were written during execution.</li> </ul> </li> <li>This message represents the completion of a transaction's execution lifecycle.</li> </ul> </li> <li> <p>Guard Phase (<code>executorFinishedGuard</code>)</p> <ul> <li>Verifies message type is <code>ExecutorMsgExecutorFinished</code>.</li> <li>If validation fails, request is rejected immediately.</li> <li>On success, passes control to <code>executorFinishedLabel</code>.</li> </ul> </li> <li> <p>Action Phase (<code>executorFinishedAction</code>)</p> <ul> <li>Processes valid executor completion notifications through these steps:<ul> <li>Looks up the transaction associated with the sending executor in the <code>transactionEngines</code> map.</li> <li>If no transaction is found, the notification is ignored (this shouldn't happen in normal operation).</li> <li>If transaction is found, stores the execution summary in the <code>execution_summaries</code> map.</li> <li>The summary is indexed by the transaction's fingerprint for later reference.</li> </ul> </li> </ul> </li> <li> <p>Reply Generation</p> <ul> <li>Successful Case<ul> <li>Updates local state with the new execution summary.</li> <li>No response messages are generated.</li> </ul> </li> <li>Error Case<ul> <li>If executor not found in mapping, quietly fails.</li> <li>No error responses are sent</li> </ul> </li> </ul> </li> <li> <p>State Update</p> <ul> <li>Updates the worker's local state:<ul> <li>Adds new entry to <code>execution_summaries</code> map.</li> <li>Maps transaction fingerprint to its execution results.</li> </ul> </li> <li>No messages are sent.</li> </ul> </li> </ol>","tags":["node-architecture","ordering-subsystem","engine","mempool-worker","behaviour"]},{"location":"arch/node/engines/mempool_worker_behaviour.html#action-arguments","title":"Action arguments","text":"","tags":["node-architecture","ordering-subsystem","engine","mempool-worker","behaviour"]},{"location":"arch/node/engines/mempool_worker_behaviour.html#mempoolworkeractionargument","title":"<code>MempoolWorkerActionArgument</code>","text":"<pre><code>syntax alias MempoolWorkerActionArgument := Unit;\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","mempool-worker","behaviour"]},{"location":"arch/node/engines/mempool_worker_behaviour.html#mempoolworkeractionarguments","title":"<code>MempoolWorkerActionArguments</code>","text":"<pre><code>MempoolWorkerActionArguments : Type := List MempoolWorkerActionArgument;\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","mempool-worker","behaviour"]},{"location":"arch/node/engines/mempool_worker_behaviour.html#actions","title":"Actions","text":"Auxiliary Juvix code <pre><code>MempoolWorkerAction (KVSKey KVSDatum Executable ProgramState : Type) : Type :=\n  Action\n    MempoolWorkerCfg\n    (MempoolWorkerLocalState KVSKey KVSDatum Executable)\n    MempoolWorkerMailboxState\n    MempoolWorkerTimerHandle\n    MempoolWorkerActionArguments\n    (Anoma.PreMsg KVSKey KVSDatum Executable)\n    (Anoma.PreCfg KVSKey KVSDatum Executable)\n    (Anoma.PreEnv KVSKey KVSDatum Executable ProgramState);\n\nMempoolWorkerActionInput (KVSKey KVSDatum Executable : Type) : Type :=\n  ActionInput\n    MempoolWorkerCfg\n    (MempoolWorkerLocalState KVSKey KVSDatum Executable)\n    MempoolWorkerMailboxState\n    MempoolWorkerTimerHandle\n    MempoolWorkerActionArguments\n    (Anoma.PreMsg KVSKey KVSDatum Executable);\n\nMempoolWorkerActionEffect (KVSKey KVSDatum Executable ProgramState : Type) : Type :=\n  ActionEffect\n    (MempoolWorkerLocalState KVSKey KVSDatum Executable)\n    MempoolWorkerMailboxState\n    MempoolWorkerTimerHandle\n    (Anoma.PreMsg KVSKey KVSDatum Executable)\n    (Anoma.PreCfg KVSKey KVSDatum Executable)\n    (Anoma.PreEnv KVSKey KVSDatum Executable ProgramState);\n\nMempoolWorkerActionExec (KVSKey KVSDatum Executable ProgramState : Type) : Type :=\n  ActionExec\n    MempoolWorkerCfg\n    (MempoolWorkerLocalState KVSKey KVSDatum Executable)\n    MempoolWorkerMailboxState\n    MempoolWorkerTimerHandle\n    MempoolWorkerActionArguments\n    (Anoma.PreMsg KVSKey KVSDatum Executable)\n    (Anoma.PreCfg KVSKey KVSDatum Executable)\n    (Anoma.PreEnv KVSKey KVSDatum Executable ProgramState);\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","mempool-worker","behaviour"]},{"location":"arch/node/engines/mempool_worker_behaviour.html#transactionrequestaction","title":"<code>transactionRequestAction</code>","text":"<p>Action processing a new transaction request.</p> State update <ul> <li>Increments gensym counter<ul> <li>Adds transaction to transactions maps with new fingerprint</li> </ul> </li> </ul> Messages to be sent <ul> <li><code>TransactionAck</code> to requester<ul> <li><code>KVSAcquireLock</code> messages to relevant shards</li> </ul> </li> </ul> Engines to be spawned <ul> <li>Creates new Executor Engine for the transaction</li> </ul> Timer updates No timers are set or cancelled. <pre><code>transactionRequestAction\n  {KVSKey KVSDatum Executable ProgramState} {{Ord KVSKey}}\n  {{rinst : Runnable KVSKey KVSDatum Executable ProgramState}}\n  (input : MempoolWorkerActionInput KVSKey KVSDatum Executable)\n  : Option (MempoolWorkerActionEffect KVSKey KVSDatum Executable ProgramState) :=\n  let\n    env := ActionInput.env input;\n    cfg := ActionInput.cfg input;\n    local := EngineEnv.localState env;\n    trigger := ActionInput.trigger input;\n  in case getEngineMsgFromTimestampedTrigger trigger of {\n    | some emsg := case emsg of {\n      | EngineMsg.mk@{msg := Anoma.PreMsg.MsgMempoolWorker (MempoolWorkerMsg.TransactionRequest request); sender := sender} :=\n          let fingerprint := MempoolWorkerLocalState.gensym local + 1;\n              worker_id := getEngineIDFromEngineCfg cfg;\n              candidate := TransactionRequest.tx request;\n              executor_name := nameGen \"executor\" (snd worker_id) worker_id;\n              executor_id := mkPair none executor_name;\n              executorCfg := Anoma.PreCfg.CfgExecutor ExecutorCfg.mk@{\n                  timestamp := fingerprint;\n                  executable := TransactionCandidate.executable candidate;\n                  lazy_read_keys := Set.empty;\n                  eager_read_keys := Set.fromList (TransactionLabel.read (TransactionCandidate.label candidate));\n                  will_write_keys := Set.fromList (TransactionLabel.write (TransactionCandidate.label candidate));\n                  may_write_keys := Set.empty;\n                  worker := worker_id;\n                  issuer := sender\n                };\n              executorEnv := Anoma.PreEnv.EnvExecutor EngineEnv.mk@{\n                localState := ExecutorLocalState.mk@{\n                  program_state := Runnable.startingState {{rinst}};\n                  completed_reads := Map.empty;\n                  completed_writes := Map.empty\n                };\n                mailboxCluster := Map.empty;\n                acquaintances := Set.empty;\n                timers := []\n              };\n              newState := local@MempoolWorkerLocalState{\n                gensym := fingerprint;\n                transactions := Map.insert fingerprint candidate (MempoolWorkerLocalState.transactions local);\n                transactionEngines := Map.insert executor_id fingerprint (MempoolWorkerLocalState.transactionEngines local)\n              };\n              newEnv := env@EngineEnv{localState := newState};\n              read_keys := Set.fromList (TransactionLabel.read (TransactionCandidate.label candidate));\n              write_keys := Set.fromList (TransactionLabel.write (TransactionCandidate.label candidate));\n              shards := Set.toList (Set.map keyToShard (Set.union read_keys write_keys));\n              shardMsgs := map\n                \\{shard :=\n                  let shard_read_keys := Set.filter (\\{key := snd (keyToShard key) == snd shard}) read_keys;\n                      shard_write_keys := Set.filter (\\{key := snd (keyToShard key) == snd shard}) write_keys;\n                      lockRequest := KVSAcquireLockMsg.mkKVSAcquireLockMsg@{\n                        lazy_read_keys := Set.empty;\n                        eager_read_keys := shard_read_keys;\n                        will_write_keys := shard_write_keys;\n                        may_write_keys := Set.empty;\n                        worker := worker_id;\n                        executor := executor_id;\n                        timestamp := fingerprint\n                      };\n                  in EngineMsg.mk@{\n                    sender := worker_id;\n                    target := shard;\n                    mailbox := some 0;\n                    msg := Anoma.PreMsg.MsgShard (ShardMsg.KVSAcquireLock lockRequest)\n                  }}\n                shards;\n              ackMsg := EngineMsg.mk@{\n                sender := worker_id;\n                target := sender;\n                mailbox := some 0;\n                msg := Anoma.PreMsg.MsgMempoolWorker (MempoolWorkerMsg.TransactionAck\n                  (TransactionAck.mkTransactionAck@{\n                    tx_hash := hash fingerprint candidate;\n                    batch_number := MempoolWorkerLocalState.batch_number local;\n                    batch_start := 0;\n                    worker_id := worker_id;\n                    signature := sign fingerprint candidate\n                  }))\n              };\n          in some ActionEffect.mk@{\n            env := newEnv;\n            msgs := ackMsg :: shardMsgs;\n            timers := [];\n            engines := [mkPair executorCfg executorEnv]\n          }\n      | _ := none\n    }\n    | _ := none\n  };\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","mempool-worker","behaviour"]},{"location":"arch/node/engines/mempool_worker_behaviour.html#lockacquiredaction","title":"<code>lockAcquiredAction</code>","text":"<p>Action processing lock acquisition confirmation from shards.</p> State update <ul> <li>Adds lock to locks_acquired list<ul> <li>Updates seen_all_writes/reads counters if applicable</li> </ul> </li> </ul> Messages to be sent <ul> <li>UpdateSeenAll messages to shards when counters advance</li> </ul> Engines to be spawned None Timer updates No timers are set or cancelled. <pre><code>allLocksAcquired\n  {KVSKey Executable}\n  (isWrite : Bool)\n  (tx : TransactionCandidate KVSKey KVSKey Executable)\n  (txNum : TxFingerprint)\n  (locks : List (Pair EngineID KVSLockAcquiredMsg)) : Bool :=\n  let keys := case isWrite of {\n        | true := TransactionLabel.write (TransactionCandidate.label tx)\n        | false := TransactionLabel.read (TransactionCandidate.label tx)\n      };\n      neededShards := Set.fromList (map keyToShard keys);\n      lockingShards := Set.fromList (map fst (List.filter \\{lock := KVSLockAcquiredMsg.timestamp (snd lock) == txNum} locks));\n  in Set.isSubset neededShards lockingShards;\n</code></pre> <pre><code>--- Finds the highest transaction fingerprint N such that all transactions with fingerprints 1..N\n--- have acquired all their necessary locks of the specified type (read or write). This represents\n--- the \"safe point\" up to which shards can process transactions without worrying about missing locks.\nterminating\nfindMaxConsecutiveLocked\n  {KVSKey Executable}\n  (isWrite : Bool)\n  (transactions : Map TxFingerprint (TransactionCandidate KVSKey KVSKey Executable))\n  (locks : List (Pair EngineID KVSLockAcquiredMsg))\n  (current : TxFingerprint)\n  (prev : TxFingerprint) : TxFingerprint :=\n  case Map.lookup current transactions of {\n    | none := prev\n    | some tx := case allLocksAcquired isWrite tx current locks of {\n      | true := findMaxConsecutiveLocked isWrite transactions locks (current + 1) current\n      | false := prev\n    }\n  };\n</code></pre> <pre><code>getAllShards\n  {KVSKey Executable}\n  (transactions : Map TxFingerprint (TransactionCandidate KVSKey KVSKey Executable)) : Set EngineID :=\n  let getAllKeysFromLabel (label : TransactionLabel KVSKey KVSKey) : List KVSKey :=\n        TransactionLabel.read label ++ TransactionLabel.write label;\n      allKeys := List.concatMap\n        \\{tx := getAllKeysFromLabel (TransactionCandidate.label tx)}\n        (Map.values transactions);\n  in Set.fromList (map keyToShard allKeys);\n</code></pre> <pre><code>lockAcquiredAction\n  {KVSKey KVSDatum Executable ProgramState}\n  (input : MempoolWorkerActionInput KVSKey KVSDatum Executable)\n  : Option (MempoolWorkerActionEffect KVSKey KVSDatum Executable ProgramState) :=\n  let\n    env := ActionInput.env input;\n    local := EngineEnv.localState env;\n    trigger := ActionInput.trigger input;\n  in case getEngineMsgFromTimestampedTrigger trigger of {\n    | some emsg := case emsg of {\n      | EngineMsg.mk@{msg := Anoma.PreMsg.MsgShard (ShardMsg.KVSLockAcquired lockMsg); sender := sender} :=\n        let timestamp := KVSLockAcquiredMsg.timestamp lockMsg;\n            newLocks := (mkPair sender lockMsg) :: MempoolWorkerLocalState.locks_acquired local;\n            maxConsecutiveWrite := findMaxConsecutiveLocked true (MempoolWorkerLocalState.transactions local) newLocks 1 0;\n            maxConsecutiveRead := findMaxConsecutiveLocked false (MempoolWorkerLocalState.transactions local) newLocks 1 0;\n            newState := local@MempoolWorkerLocalState{\n              locks_acquired := newLocks;\n              seen_all_writes := maxConsecutiveWrite;\n              seen_all_reads := maxConsecutiveRead\n            };\n            newEnv := env@EngineEnv{localState := newState};\n            allShards := getAllShards (MempoolWorkerLocalState.transactions local);\n            makeUpdateMsg (target : EngineID) (isWrite : Bool) (timestamp : TxFingerprint) : EngineMsg (Anoma.PreMsg KVSKey KVSDatum Executable) :=\n              EngineMsg.mk@{\n                sender := getEngineIDFromEngineCfg (ActionInput.cfg input);\n                target := target;\n                mailbox := some 0;\n                msg := Anoma.PreMsg.MsgShard (ShardMsg.UpdateSeenAll\n                  (UpdateSeenAllMsg.mkUpdateSeenAllMsg@{\n                    timestamp := timestamp;\n                    write := isWrite\n                  }))\n              };\n            writeMessages := map \\{shard := makeUpdateMsg shard true maxConsecutiveWrite} (Set.toList allShards);\n            readMessages := map \\{shard := makeUpdateMsg shard false maxConsecutiveRead} (Set.toList allShards);\n        in some ActionEffect.mk@{\n          env := newEnv;\n          msgs := writeMessages ++ readMessages;\n          timers := [];\n          engines := []\n        }\n      | _ := none\n    }\n    | _ := none\n  };\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","mempool-worker","behaviour"]},{"location":"arch/node/engines/mempool_worker_behaviour.html#executorfinishedaction","title":"<code>executorFinishedAction</code>","text":"<p>Action processing execution completion notification from executor.</p> State update Adds execution summary to execution_summaries map Messages to be sent None Engines to be spawned None Timer updates No timers are set or cancelled. <pre><code>executorFinishedAction\n  {KVSKey KVSDatum Executable ProgramState}\n  (input : MempoolWorkerActionInput KVSKey KVSDatum Executable)\n  : Option (MempoolWorkerActionEffect KVSKey KVSDatum Executable ProgramState) :=\n  let\n    env := ActionInput.env input;\n    local := EngineEnv.localState env;\n    trigger := ActionInput.trigger input;\n  in case getEngineMsgFromTimestampedTrigger trigger of {\n    | some emsg := case emsg of {\n      | EngineMsg.mk@{msg := Anoma.PreMsg.MsgExecutor (ExecutorMsg.ExecutorFinished summary); sender := sender} :=\n          case Map.lookup sender (MempoolWorkerLocalState.transactionEngines local) of {\n            | some tr :=\n              let newState := local@MempoolWorkerLocalState{\n                    execution_summaries := Map.insert tr summary (MempoolWorkerLocalState.execution_summaries local)\n                  };\n                  newEnv := env@EngineEnv{localState := newState};\n              in some ActionEffect.mk@{\n                env := newEnv;\n                msgs := [];\n                timers := [];\n                engines := []\n              }\n            | _ := none\n          }\n      | _ := none\n    }\n    | _ := none\n  };\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","mempool-worker","behaviour"]},{"location":"arch/node/engines/mempool_worker_behaviour.html#action-labels","title":"Action Labels","text":"<pre><code>transactionRequestActionLabel\n  {KVSKey KVSDatum Executable ProgramState} {{Ord KVSKey}} {{Runnable KVSKey KVSDatum Executable ProgramState}}\n  : MempoolWorkerActionExec KVSKey KVSDatum Executable ProgramState :=\n  ActionExec.Seq [ transactionRequestAction ];\n\nlockAcquiredActionLabel\n  {KVSKey KVSDatum Executable ProgramState}\n  : MempoolWorkerActionExec KVSKey KVSDatum Executable ProgramState :=\n  ActionExec.Seq [ lockAcquiredAction ];\n\nexecutorFinishedActionLabel\n  {KVSKey KVSDatum Executable ProgramState}\n  : MempoolWorkerActionExec KVSKey KVSDatum Executable ProgramState :=\n  ActionExec.Seq [ executorFinishedAction ];\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","mempool-worker","behaviour"]},{"location":"arch/node/engines/mempool_worker_behaviour.html#guards","title":"Guards","text":"Auxiliary Juvix code <pre><code>MempoolWorkerGuard (KVSKey KVSDatum Executable ProgramState : Type) : Type :=\n  Guard\n    MempoolWorkerCfg\n    (MempoolWorkerLocalState KVSKey KVSDatum Executable)\n    MempoolWorkerMailboxState\n    MempoolWorkerTimerHandle\n    MempoolWorkerActionArguments\n    (Anoma.PreMsg KVSKey KVSDatum Executable)\n    (Anoma.PreCfg KVSKey KVSDatum Executable)\n    (Anoma.PreEnv KVSKey KVSDatum Executable ProgramState);\n\nMempoolWorkerGuardOutput (KVSKey KVSDatum Executable ProgramState : Type) : Type :=\n  GuardOutput\n    MempoolWorkerCfg\n    (MempoolWorkerLocalState KVSKey KVSDatum Executable)\n    MempoolWorkerMailboxState\n    MempoolWorkerTimerHandle\n    MempoolWorkerActionArguments\n    (Anoma.PreMsg KVSKey KVSDatum Executable)\n    (Anoma.PreCfg KVSKey KVSDatum Executable)\n    (Anoma.PreEnv KVSKey KVSDatum Executable ProgramState);\n\nMempoolWorkerGuardEval (KVSKey KVSDatum Executable ProgramState : Type) : Type :=\n  GuardEval\n    MempoolWorkerCfg\n    (MempoolWorkerLocalState KVSKey KVSDatum Executable)\n    MempoolWorkerMailboxState\n    MempoolWorkerTimerHandle\n    MempoolWorkerActionArguments\n    (Anoma.PreMsg KVSKey KVSDatum Executable)\n    (Anoma.PreCfg KVSKey KVSDatum Executable)\n    (Anoma.PreEnv KVSKey KVSDatum Executable ProgramState);\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","mempool-worker","behaviour"]},{"location":"arch/node/engines/mempool_worker_behaviour.html#transactionrequestguard","title":"<code>transactionRequestGuard</code>","text":"Condition Message type is MempoolWorkerMsgTransactionRequest <pre><code>transactionRequestGuard\n  {KVSKey KVSDatum Executable ProgramState} {{Ord KVSKey}}\n  {{Runnable KVSKey KVSDatum Executable ProgramState}}\n  (trigger : TimestampedTrigger MempoolWorkerTimerHandle (Anoma.PreMsg KVSKey KVSDatum Executable))\n  (cfg : EngineCfg MempoolWorkerCfg)\n  (env : MempoolWorkerEnv KVSKey KVSDatum Executable)\n  : Option (MempoolWorkerGuardOutput KVSKey KVSDatum Executable ProgramState) :=\n  case getEngineMsgFromTimestampedTrigger trigger of {\n    | some EngineMsg.mk@{msg := Anoma.PreMsg.MsgMempoolWorker (MempoolWorkerMsg.TransactionRequest _)} :=\n      some GuardOutput.mk@{\n        action := transactionRequestActionLabel;\n        args := []\n      }\n    | _ := none\n  };\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","mempool-worker","behaviour"]},{"location":"arch/node/engines/mempool_worker_behaviour.html#lockacquiredguard","title":"<code>lockAcquiredGuard</code>","text":"Condition Message type is ShardMsgKVSLockAc","tags":["node-architecture","ordering-subsystem","engine","mempool-worker","behaviour"]},{"location":"arch/node/engines/mempool_worker_behaviour.html#lockacquiredguard_1","title":"<code>lockAcquiredGuard</code>","text":"Condition Message type is ShardMsgKVSLockAcquired <pre><code>lockAcquiredGuard\n  {KVSKey KVSDatum Executable ProgramState}\n  (trigger : TimestampedTrigger MempoolWorkerTimerHandle (Anoma.PreMsg KVSKey KVSDatum Executable))\n  (cfg : EngineCfg MempoolWorkerCfg)\n  (env : MempoolWorkerEnv KVSKey KVSDatum Executable)\n  : Option (MempoolWorkerGuardOutput KVSKey KVSDatum Executable ProgramState) :=\n  case getEngineMsgFromTimestampedTrigger trigger of {\n    | some EngineMsg.mk@{msg := Anoma.PreMsg.MsgShard (ShardMsg.KVSLockAcquired _)} :=\n      some GuardOutput.mk@{\n        action := lockAcquiredActionLabel;\n        args := []\n      }\n    | _ := none\n  };\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","mempool-worker","behaviour"]},{"location":"arch/node/engines/mempool_worker_behaviour.html#executorfinishedguard","title":"<code>executorFinishedGuard</code>","text":"Condition Message type is ExecutorMsgExecutorFinished <pre><code>executorFinishedGuard\n  {KVSKey KVSDatum Executable ProgramState}\n  (trigger : TimestampedTrigger MempoolWorkerTimerHandle (Anoma.PreMsg KVSKey KVSDatum Executable))\n  (cfg : EngineCfg MempoolWorkerCfg)\n  (env : MempoolWorkerEnv KVSKey KVSDatum Executable)\n  : Option (MempoolWorkerGuardOutput KVSKey KVSDatum Executable ProgramState) :=\n  case getEngineMsgFromTimestampedTrigger trigger of {\n    | some EngineMsg.mk@{msg := Anoma.PreMsg.MsgExecutor (ExecutorMsg.ExecutorFinished _)} :=\n      some GuardOutput.mk@{\n        action := executorFinishedActionLabel;\n        args := []\n      }\n    | _ := none\n  };\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","mempool-worker","behaviour"]},{"location":"arch/node/engines/mempool_worker_behaviour.html#the-mempool-worker-behaviour","title":"The Mempool Worker Behaviour","text":"","tags":["node-architecture","ordering-subsystem","engine","mempool-worker","behaviour"]},{"location":"arch/node/engines/mempool_worker_behaviour.html#mempoolworkerbehaviour","title":"<code>MempoolWorkerBehaviour</code>","text":"<pre><code>MempoolWorkerBehaviour (KVSKey KVSDatum Executable ProgramState : Type) : Type :=\n  EngineBehaviour\n    MempoolWorkerCfg\n    (MempoolWorkerLocalState KVSKey KVSDatum Executable)\n    MempoolWorkerMailboxState\n    MempoolWorkerTimerHandle\n    MempoolWorkerActionArguments\n    (Anoma.PreMsg KVSKey KVSDatum Executable)\n    (Anoma.PreCfg KVSKey KVSDatum Executable)\n    (Anoma.PreEnv KVSKey KVSDatum Executable ProgramState);\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","mempool-worker","behaviour"]},{"location":"arch/node/engines/mempool_worker_behaviour.html#instantiation","title":"Instantiation","text":"<pre><code>instance dummyRunnable : Runnable String String ByteString String :=\n  Runnable.mkRunnable@{\n    executeStep := \\{_ _ _ := error \"Not implemented\"};\n    halted := \\{_ := false};\n    startingState := \"\"\n  };\n\nmempoolWorkerBehaviour : MempoolWorkerBehaviour String String ByteString String :=\n  EngineBehaviour.mk@{\n    guards := GuardEval.First [\n      transactionRequestGuard;\n      lockAcquiredGuard;\n      executorFinishedGuard\n    ]\n  };\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","mempool-worker","behaviour"]},{"location":"arch/node/engines/mempool_worker_config.html","title":"Mempool Worker Configuration","text":"Juvix imports <pre><code>module arch.node.engines.mempool_worker_config;\n\nimport prelude open;\nimport arch.node.types.engine open;\nimport arch.node.types.messages open;\nimport arch.node.types.identities open;\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","mempool-worker","configuration"]},{"location":"arch/node/engines/mempool_worker_config.html#mempool-worker-configuration","title":"Mempool Worker Configuration","text":"","tags":["node-architecture","ordering-subsystem","engine","mempool-worker","configuration"]},{"location":"arch/node/engines/mempool_worker_config.html#overview","title":"Overview","text":"<p>The Mempool Worker engine configuration contains static information for Mempool Worker engine instances.</p>","tags":["node-architecture","ordering-subsystem","engine","mempool-worker","configuration"]},{"location":"arch/node/engines/mempool_worker_config.html#the-mempool-worker-configuration","title":"The Mempool Worker Configuration","text":"","tags":["node-architecture","ordering-subsystem","engine","mempool-worker","configuration"]},{"location":"arch/node/engines/mempool_worker_config.html#mempoolworkercfg","title":"<code>MempoolWorkerCfg</code>","text":"<pre><code>type MempoolWorkerCfg := mk\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","mempool-worker","configuration"]},{"location":"arch/node/engines/mempool_worker_config.html#instantiation","title":"Instantiation","text":"<p>```juvix extract-module-statements module mempool_worker_config_example;</p> <p>mempoolWorkerCfg : EngineCfg MempoolWorkerCfg :=     EngineCfg.mk@{       node := PublicKey.Curve25519PubKey \"0xabcd1234\";       name := \"mempool worker\";       cfg := MempoolWorkerCfg.mk     }   ; end; ```</p>","tags":["node-architecture","ordering-subsystem","engine","mempool-worker","configuration"]},{"location":"arch/node/engines/mempool_worker_environment.html","title":"Mempool Worker Environment","text":"Juvix imports <pre><code>module arch.node.engines.mempool_worker_environment;\nimport prelude open;\nimport arch.node.engines.shard_messages open;\nimport arch.node.engines.executor_messages open;\nimport arch.node.engines.mempool_worker_messages open;\nimport arch.node.types.engine_environment open;\nimport arch.node.types.identities open;\nimport arch.node.types.anoma_message as Anoma open;\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","mempool-worker","environment"]},{"location":"arch/node/engines/mempool_worker_environment.html#mempool-worker-environment","title":"Mempool Worker Environment","text":"","tags":["node-architecture","ordering-subsystem","engine","mempool-worker","environment"]},{"location":"arch/node/engines/mempool_worker_environment.html#overview","title":"Overview","text":"<p>The Mempool Worker engine's environment maintains the state necessary for managing transaction requests, including information about batches, transaction candidates, and the state of lock acquisition and execution.</p>","tags":["node-architecture","ordering-subsystem","engine","mempool-worker","environment"]},{"location":"arch/node/engines/mempool_worker_environment.html#local-state","title":"Local State","text":"","tags":["node-architecture","ordering-subsystem","engine","mempool-worker","environment"]},{"location":"arch/node/engines/mempool_worker_environment.html#mempoolworkerlocalstate","title":"<code>MempoolWorkerLocalState</code>","text":"<p>The local state of the Mempool Worker engine includes the following:</p> <pre><code>type MempoolWorkerLocalState KVSKey KVSDatum Executable := mk @{\n  batch_number : BatchNumber;\n  transactions : Map TxFingerprint (TransactionCandidate KVSKey KVSKey Executable);\n  transactionEngines : Map EngineID TxFingerprint;\n  locks_acquired : List (Pair EngineID KVSLockAcquiredMsg);\n  seen_all_writes : TxFingerprint;\n  seen_all_reads : TxFingerprint;\n  execution_summaries : Map TxFingerprint (ExecutorFinishedMsg KVSKey KVSDatum);\n  gensym : TxFingerprint\n}\n</code></pre> Arguments <code>batch_number</code>: The current batch number. (Currently unused) <code>transactions</code>: A map of transaction fingerprints to their corresponding transaction candidates. <code>transactionEngines</code>: A map of engine ids for Executor Engines pointing to their transaction fingerprints. <code>locks_acquired</code>: A list of received <code>KVSLockAcquiredMsg</code>s, along with the ids of their shards. <code>seen_all_writes</code>: The highest transaction fingerprint for which all writes have been locked by the shards. <code>seen_all_reads</code>: The highest transaction fingerprint for which all reads have been locked by the shards. <code>execution_summaries</code>: A map of transaction fingerprints to their corresponding execution summaries, once received. <code>gensym</code>: A monotonically increasing number used to generate unique transaction numbers.","tags":["node-architecture","ordering-subsystem","engine","mempool-worker","environment"]},{"location":"arch/node/engines/mempool_worker_environment.html#mailbox-state","title":"Mailbox State","text":"<p>The Mempool Worker engine does not require a complex mailbox state, so we define it as a unit type:</p>","tags":["node-architecture","ordering-subsystem","engine","mempool-worker","environment"]},{"location":"arch/node/engines/mempool_worker_environment.html#mempoolworkermailboxstate","title":"<code>MempoolWorkerMailboxState</code>","text":"<pre><code>syntax alias MempoolWorkerMailboxState := Unit;\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","mempool-worker","environment"]},{"location":"arch/node/engines/mempool_worker_environment.html#timer-handle","title":"Timer Handle","text":"<p>The Mempool Worker engine does not require a timer handle, so we define it as a unit type:</p>","tags":["node-architecture","ordering-subsystem","engine","mempool-worker","environment"]},{"location":"arch/node/engines/mempool_worker_environment.html#mempoolworkertimerhandle","title":"<code>MempoolWorkerTimerHandle</code>","text":"<pre><code>syntax alias MempoolWorkerTimerHandle := Unit;\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","mempool-worker","environment"]},{"location":"arch/node/engines/mempool_worker_environment.html#the-mempool-worker-environment","title":"The Mempool Worker Environment","text":"","tags":["node-architecture","ordering-subsystem","engine","mempool-worker","environment"]},{"location":"arch/node/engines/mempool_worker_environment.html#mempoolworkerenv","title":"<code>MempoolWorkerEnv</code>","text":"<pre><code>MempoolWorkerEnv (KVSKey KVSDatum Executable : Type) : Type :=\n  EngineEnv\n    (MempoolWorkerLocalState KVSKey KVSDatum Executable)\n    MempoolWorkerMailboxState\n    MempoolWorkerTimerHandle\n    (Anoma.PreMsg KVSKey KVSDatum Executable);\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","mempool-worker","environment"]},{"location":"arch/node/engines/mempool_worker_environment.html#instantiation","title":"Instantiation","text":"<p>```juvix extract-module-statements module mempool_worker_environment_example;</p> <p>mempoolWorkerEnv : MempoolWorkerEnv String String ByteString :=     EngineEnv.mk@{       localState := MempoolWorkerLocalState.mk@{         batch_number := 0;         transactions := Map.empty;         transactionEngines := Map.empty;         locks_acquired := [];         seen_all_writes := 0;         seen_all_reads := 0;         execution_summaries := Map.empty;         gensym := 0       };       mailboxCluster := Map.empty;       acquaintances := Set.empty;       timers := []     }   ; end; ```</p>","tags":["node-architecture","ordering-subsystem","engine","mempool-worker","environment"]},{"location":"arch/node/engines/mempool_worker_messages.html","title":"Mempool Worker Messages","text":"Juvix imports <pre><code>module arch.node.engines.mempool_worker_messages;\nimport prelude open;\nimport arch.node.types.basics open;\nimport arch.node.types.identities open;\n</code></pre>","tags":["node-architecture","ordering","engine","mempool-worker","message-types"]},{"location":"arch/node/engines/mempool_worker_messages.html#mempool-worker-messages","title":"Mempool Worker Messages","text":"<p>These are the specific messages that the Mempool Worker engine can receive/respond to.</p>","tags":["node-architecture","ordering","engine","mempool-worker","message-types"]},{"location":"arch/node/engines/mempool_worker_messages.html#message-interface","title":"Message interface","text":"<pre><code>type MempoolWorkerMsg KVSKey Executable :=\n  | TransactionRequest (TransactionRequest KVSKey Executable)\n  | TransactionAck TransactionAck\n  ;\n</code></pre>","tags":["node-architecture","ordering","engine","mempool-worker","message-types"]},{"location":"arch/node/engines/mempool_worker_messages.html#message-sequence-diagrams","title":"Message sequence diagrams","text":"","tags":["node-architecture","ordering","engine","mempool-worker","message-types"]},{"location":"arch/node/engines/mempool_worker_messages.html#transaction-request-flow","title":"Transaction request flow","text":"<pre><code>sequenceDiagram\n    participant User\n    participant MempoolWorker\n    participant Shard\n    participant Executor\n\n    User-&gt;&gt;MempoolWorker: MempoolWorkerMsgTransactionRequest\n    MempoolWorker-&gt;&gt;User: MempoolWorkerMsgTransactionAck\n    MempoolWorker-&gt;&gt;Shard: KVSAcquireLock\n    Shard-&gt;&gt;MempoolWorker: KVSLockAcquired\n    MempoolWorker-&gt;&gt;Executor: ExecutorPIDAssigned\n    Executor-&gt;&gt;MempoolWorker: ExecutorFinished</code></pre>  Sequence Diagram: Transaction Request Flow","tags":["node-architecture","ordering","engine","mempool-worker","message-types"]},{"location":"arch/node/engines/mempool_worker_messages.html#message-types","title":"Message types","text":"","tags":["node-architecture","ordering","engine","mempool-worker","message-types"]},{"location":"arch/node/engines/mempool_worker_messages.html#transactionrequest","title":"<code>TransactionRequest</code>","text":"<p>A request from a user or solver to order and execute a transaction candidate.</p> <pre><code>type TransactionRequest KVSKey Executable :=\n  mkTransactionRequest {\n    tx : TransactionCandidate KVSKey KVSKey Executable;\n    resubmission : Option TxFingerprint\n  }\n</code></pre> Arguments <code>tx</code> The transaction candidate to be ordered and executed. <code>resubmission</code> Optional reference to a previous occurrence of the same transaction candidate (currently unused).","tags":["node-architecture","ordering","engine","mempool-worker","message-types"]},{"location":"arch/node/engines/mempool_worker_messages.html#transactionack","title":"<code>TransactionAck</code>","text":"<p>Acknowledgment sent to the user or solver that a transaction request has been accepted.</p> <pre><code>type TransactionAck :=\n  mkTransactionAck @{\n    tx_hash : Hash;\n    batch_number : BatchNumber;\n    batch_start : WallClockTime;\n    worker_id : EngineID;\n    signature : Signature\n  }\n</code></pre> Arguments <code>tx_hash</code> The hash of the acknowledged transaction candidate (Currently unused). <code>batch_number</code> The batch number assigned to the transaction (Currently unused). <code>batch_start</code> The wall clock time when the batch was opened (Currently unused). <code>worker_id</code> The external identity of the worker engine that processed the transaction. <code>signature</code> The signature of the worker engine over the above fields (Currently unused).","tags":["node-architecture","ordering","engine","mempool-worker","message-types"]},{"location":"arch/node/engines/mempool_worker_messages.html#mempoolworkermsg","title":"<code>MempoolWorkerMsg</code>","text":"<pre><code>type MempoolWorkerMsg KVSKey Executable :=\n  | TransactionRequest (TransactionRequest KVSKey Executable)\n  | TransactionAck TransactionAck\n  ;\n</code></pre>","tags":["node-architecture","ordering","engine","mempool-worker","message-types"]},{"location":"arch/node/engines/mempool_worker_messages.html#engine-components","title":"Engine components","text":"<ul> <li>Mempool Worker Configuration</li> <li>Mempool Worker Environment</li> <li>Mempool Worker Behaviour</li> </ul>","tags":["node-architecture","ordering","engine","mempool-worker","message-types"]},{"location":"arch/node/engines/naming.html","title":"Naming Engine","text":"Juvix imports <pre><code>module arch.node.engines.naming;\n\nimport prelude open;\nimport arch.node.types.engine open;\n\nimport arch.node.engines.naming_config open public;\nimport arch.node.engines.naming_messages open public;\nimport arch.node.engines.naming_environment open public;\nimport arch.node.engines.naming_behaviour open public;\n\nimport arch.node.types.anoma as Anoma open;\n\nopen naming_config_example;\nopen naming_environment_example;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","naming","engine-definition"]},{"location":"arch/node/engines/naming.html#naming-engine","title":"Naming Engine","text":"<p>The Naming Engine serves as the identity resolution system within Anoma, managing human-readable names (<code>IdentityName</code>) and their associations with cryptographic identities (<code>ExternalIdentity</code>). It can be compared to a decentralized DNS system that maintains verifiable connections between user-friendly names and their corresponding cryptographic identities, while requiring evidence to support these connections. The engine maintains an internal evidence store that tracks all verified name-identity associations.</p> <p>When users want to map names to identities, they interact with the engine in three main ways:</p> Name Resolution (<code>MsgNamingResolveNameRequest</code>) <p>Users provide a human-readable name and receive back any associated cryptographic identities (<code>ExternalIdentity</code>). This is like looking up who owns a domain name, but with cryptographic verification.</p> Evidence Submission (<code>MsgNamingSubmitNameEvidenceRequest</code>) <p>Users can submit evidence (<code>IdentityNameEvidence</code>) that proves the connection between a name and an identity. The engine verifies this evidence before storing it in its evidence store (<code>evidenceStore</code>). This is similar to domain name registration, but requiring cryptographic proof of the right to associate a name with an identity.</p> Evidence Querying (<code>MsgNamingQueryNameEvidenceRequest</code>) <p>Users can look up all the evidence associated with a particular cryptographic identity. This lets them verify the validity of name-to-identity mappings and understand the history of name claims.</p>","tags":["node-architecture","identity-subsystem","engine","naming","engine-definition"]},{"location":"arch/node/engines/naming.html#engine-components","title":"Engine components","text":"<ul> <li>Naming Messages</li> <li>Naming Configuration</li> <li>Naming Environment</li> <li>Naming Behaviour</li> </ul>","tags":["node-architecture","identity-subsystem","engine","naming","engine-definition"]},{"location":"arch/node/engines/naming.html#type","title":"Type","text":"<pre><code>NamingEngine : Type :=\n  Engine\n    NamingCfg\n    NamingLocalState\n    NamingMailboxState\n    NamingTimerHandle\n    NamingActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","naming","engine-definition"]},{"location":"arch/node/engines/naming.html#example-of-a-naming-engine","title":"Example of a naming engine","text":"<pre><code>exampleNamingEngine : NamingEngine :=\n  Engine.mk@{\n    cfg := namingCfg;\n    env := namingEnv;\n    behaviour := namingBehaviour;\n  };\n</code></pre> <p>where <code>namingCfg</code> is defined as follows:</p> <p>```juvix extract-module-statements module naming_config_example;</p> <p>namingCfg : EngineCfg NamingCfg :=     EngineCfg.mk@{       node := PublicKey.Curve25519PubKey \"0xabcd1234\";       name := \"naming\";       cfg := NamingCfg.mk     }   ; end; <pre><code>where `namingEnv` is defined as follows:\n\n```juvix extract-module-statements\nmodule naming_environment_example;\n\nnamingEnv : NamingEnv :=\n    EngineEnv.mk@{\n      localState := NamingLocalState.mk@{\n        evidenceStore := Set.empty;\n      };\n      mailboxCluster := Map.empty;\n      acquaintances := Set.empty;\n      timers := []\n    }\n  ;\nend;\n</code></pre></p> <p>and <code>namingBehaviour</code> is defined as follows:</p> <pre><code>namingBehaviour : NamingBehaviour :=\n  EngineBehaviour.mk@{\n    guards :=\n      GuardEval.First [\n        resolveNameGuard;\n        submitNameEvidenceGuard;\n        queryNameEvidenceGuard\n      ];\n  };\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","naming","engine-definition"]},{"location":"arch/node/engines/naming_behaviour.html","title":"Naming Behaviour","text":"Juvix imports <pre><code>module arch.node.engines.naming_behaviour;\n\nimport Stdlib.Data.Set as Set;\n\nimport prelude open;\nimport arch.node.types.messages open;\nimport arch.node.types.engine open;\nimport arch.node.types.identities open;\nimport arch.node.engines.naming_messages open;\nimport arch.node.engines.naming_config open;\nimport arch.node.engines.naming_environment open;\nimport arch.node.types.anoma as Anoma open;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","naming","behaviour"]},{"location":"arch/node/engines/naming_behaviour.html#naming-behaviour","title":"Naming Behaviour","text":"","tags":["node-architecture","identity-subsystem","engine","naming","behaviour"]},{"location":"arch/node/engines/naming_behaviour.html#overview","title":"Overview","text":"<p>The behavior of the Naming Engine defines how it processes incoming messages and updates its state accordingly.</p>","tags":["node-architecture","identity-subsystem","engine","naming","behaviour"]},{"location":"arch/node/engines/naming_behaviour.html#naming-action-flowcharts","title":"Naming Action Flowcharts","text":"","tags":["node-architecture","identity-subsystem","engine","naming","behaviour"]},{"location":"arch/node/engines/naming_behaviour.html#resolvenameaction-flowchart","title":"<code>resolveNameAction</code> flowchart","text":"<pre><code>flowchart TD\n    Start([Client Request]) --&gt; MsgReq[MsgNamingResolveNameRequest&lt;br/&gt;identityName: IdentityName]\n\n    subgraph Guard[\"resolveNameGuard\"]\n        MsgReq --&gt; ValidType{Is message type&lt;br/&gt;ResolveNameRequest?}\n        ValidType --&gt;|No| Reject([Reject Request])\n        ValidType --&gt;|Yes| ActionEntry[Enter Action Phase]\n    end\n\n    ActionEntry --&gt; Action\n\n    subgraph Action[\"resolveNameAction\"]\n        direction TB\n        Filter[Filter evidenceStore for&lt;br/&gt;matching identity name]\n        Filter --&gt; Extract[Extract external identities&lt;br/&gt;from matching evidence]\n        Extract --&gt; CreateResp[Create response with&lt;br/&gt;external identities]\n    end\n\n    CreateResp --&gt; Response[MsgNamingResolveNameReply&lt;br/&gt;externalIdentities: Set ExternalIdentity&lt;br/&gt;err: none]\n    Response --&gt; Client([Return to Client])</code></pre> <code>resolveNameAction</code> flowchart","tags":["node-architecture","identity-subsystem","engine","naming","behaviour"]},{"location":"arch/node/engines/naming_behaviour.html#explanation","title":"Explanation","text":"<ol> <li> <p>Initial Request</p> <ul> <li>A client sends a <code>MsgNamingResolveNameRequest</code> containing an identity name (<code>IdentityName</code>)</li> <li>The identity name is typically a human-readable identifier that the client wants to resolve to cryptographic identities</li> </ul> </li> <li> <p>Guard Phase (<code>resolveNameGuard</code>)</p> <ul> <li>Validates that the incoming message is a proper name resolution request</li> <li>Checks occur in the following order:<ul> <li>Verifies message type is <code>MsgNamingResolveNameRequest</code></li> <li>If validation fails, request is rejected without entering the action phase</li> <li>On success, passes control to <code>resolveNameActionLabel</code></li> </ul> </li> </ul> </li> <li> <p>Action Phase (<code>resolveNameAction</code>)</p> <ul> <li>Processes valid name resolution requests through these steps:<ul> <li>Retrieves the identity name from the request</li> <li>Scans the evidence store (<code>evidenceStore</code>) for any evidence matching this name</li> <li>Extracts all external identities from matching evidence records</li> <li>Constructs an appropriate response message</li> </ul> </li> </ul> </li> <li> <p>Response Generation</p> <ul> <li>Successful Case<ul> <li>Creates <code>MsgNamingResolveNameReply</code> with:<ul> <li><code>externalIdentities</code>: Set of all external identities associated with the name</li> <li><code>err</code>: None</li> </ul> </li> </ul> </li> <li>Empty Result Case<ul> <li>Still returns <code>MsgNamingResolveNameReply</code> with:<ul> <li><code>externalIdentities</code>: Empty set</li> <li><code>err</code>: None</li> </ul> </li> <li>Note: An empty result is not considered an error - it simply means no evidence exists for this name</li> </ul> </li> </ul> </li> <li> <p>Response Delivery</p> <ul> <li>Response is sent back to the original requester</li> <li>Response is sent to mailbox 0.</li> </ul> </li> </ol> <p>Important Notes</p> <ul> <li>The resolution process is read-only - it never modifies the evidence store</li> <li>Multiple external identities may be associated with a single name</li> </ul>","tags":["node-architecture","identity-subsystem","engine","naming","behaviour"]},{"location":"arch/node/engines/naming_behaviour.html#submitnameevidenceaction-flowchart","title":"<code>submitNameEvidenceAction</code> flowchart","text":"<pre><code>flowchart TD\n    Start([Submit Request]) --&gt; MsgReq[MsgNamingSubmitNameEvidenceRequest&lt;br/&gt;evidence: IdentityNameEvidence]\n\n    subgraph Guard[\"submitNameEvidenceGuard\"]\n        MsgReq --&gt; ValidType{Is message type&lt;br/&gt;SubmitNameEvidenceRequest?}\n        ValidType --&gt;|No| Reject([Reject Request])\n        ValidType --&gt;|Yes| ActionEntry[Enter Action Phase]\n    end\n\n    ActionEntry --&gt; Action\n\n    subgraph Action[\"submitNameEvidenceAction\"]\n        direction TB\n        Valid{Evidence&lt;br/&gt;valid?}\n        Valid --&gt;|No| ErrInvalid[Create error response:&lt;br/&gt;'Invalid evidence']\n        Valid --&gt;|Yes| Exists{Evidence&lt;br/&gt;exists?}\n        Exists --&gt;|Yes| ErrExists[Create error response:&lt;br/&gt;'Evidence already exists']\n        Exists --&gt;|No| Store[Add to evidenceStore]\n        Store --&gt; Success[Create success response]\n    end\n\n    Success --&gt; Response[MsgNamingSubmitNameEvidenceReply&lt;br/&gt;err: none]\n    ErrInvalid &amp; ErrExists --&gt; ErrResponse[MsgNamingSubmitNameEvidenceReply&lt;br/&gt;err: Some error]\n    ErrResponse &amp; Response --&gt; Client([Return to Client])</code></pre> <code>submitNameEvidenceAction</code> flowchart","tags":["node-architecture","identity-subsystem","engine","naming","behaviour"]},{"location":"arch/node/engines/naming_behaviour.html#explanation_1","title":"Explanation","text":"<ol> <li> <p>Initial Request</p> <ul> <li>A client sends a <code>MsgNamingSubmitNameEvidenceRequest</code> containing:<ul> <li><code>evidence</code>: An <code>IdentityNameEvidence</code> that proves the connection between an <code>IdentityName</code> and an <code>ExternalIdentity</code></li> <li>An <code>IdentityNameEvidence</code> contains:<ul> <li><code>identityName</code>: The human-readable name being associated with an identity</li> <li><code>externalIdentity</code>: The cryptographic identity being associated with the name</li> <li><code>evidence</code>: The cryptographic evidence supporting this association</li> </ul> </li> <li>The evidence must be in a format that can be cryptographically verified</li> </ul> </li> </ul> </li> <li> <p>Guard Phase (<code>submitNameEvidenceGuard</code>)</p> <ul> <li>Validates that the incoming message is a proper evidence submission request</li> <li>Checks occur in the following order:<ul> <li>Verifies message type is <code>MsgNamingSubmitNameEvidenceRequest</code></li> <li>If validation fails, request is rejected without entering the action phase</li> <li>On success, passes control to <code>submitNameEvidenceActionLabel</code></li> </ul> </li> </ul> </li> <li> <p>Action Phase (<code>submitNameEvidenceAction</code>)</p> <ul> <li>Processes valid evidence submissions through these steps:<ul> <li>Validates the cryptographic evidence using <code>verifyEvidence</code></li> <li>Checks for duplicate evidence in the store</li> <li>Updates the evidence store if appropriate</li> <li>Constructs an appropriate response message</li> </ul> </li> </ul> </li> <li> <p>Response Generation</p> <ul> <li>Successful Case<ul> <li>Evidence is valid and new:<ul> <li>Adds evidence to the <code>evidenceStore</code></li> <li>Creates <code>MsgNamingSubmitNameEvidenceReply</code> with:<ul> <li><code>err</code>: None</li> </ul> </li> </ul> </li> </ul> </li> <li>Error Cases<ul> <li>Invalid evidence:<ul> <li>Returns error \"Invalid evidence\"</li> </ul> </li> <li>Duplicate evidence:<ul> <li>Returns error \"Evidence already exists\"</li> </ul> </li> <li>In all error cases, returns <code>MsgNamingSubmitNameEvidenceReply</code> with:<ul> <li><code>err</code>: Some(error message)</li> </ul> </li> </ul> </li> </ul> </li> <li> <p>Response Delivery</p> <ul> <li>Response is sent back to the original requester</li> <li>Response is sent to mailbox 0.</li> </ul> </li> </ol> <p>Important Notes</p> <ul> <li>The engine maintains an append-only evidence store, never removing or modifying existing evidence. The evidence store is the only mutable state in this flow and all state changes are performed only after complete validation.</li> <li>Evidence uniqueness is checked using exact matching</li> </ul>","tags":["node-architecture","identity-subsystem","engine","naming","behaviour"]},{"location":"arch/node/engines/naming_behaviour.html#querynameevidenceaction-flowchart","title":"<code>queryNameEvidenceAction</code> flowchart","text":"<pre><code>flowchart TD\n    Start([Query Request]) --&gt; MsgReq[MsgNamingQueryNameEvidenceRequest&lt;br/&gt;externalIdentity: ExternalIdentity]\n\n    subgraph Guard[\"queryNameEvidenceGuard\"]\n        MsgReq --&gt; ValidType{Is message type&lt;br/&gt;QueryNameEvidenceRequest?}\n        ValidType --&gt;|No| Reject([Reject Request])\n        ValidType --&gt;|Yes| ActionEntry[Enter Action Phase]\n    end\n\n    ActionEntry --&gt; Action\n\n    subgraph Action[\"queryNameEvidenceAction\"]\n        direction TB\n        Filter[Filter evidenceStore for&lt;br/&gt;matching external identity]\n        Filter --&gt; CreateResp[Create response with&lt;br/&gt;relevant evidence]\n    end\n\n    CreateResp --&gt; Response[MsgNamingQueryNameEvidenceReply&lt;br/&gt;externalIdentity: ExternalIdentity&lt;br/&gt;evidence: Set IdentityNameEvidence&lt;br/&gt;err: none]\n    Response --&gt; Client([Return to Client])</code></pre> <code>queryNameEvidenceAction</code> flowchart","tags":["node-architecture","identity-subsystem","engine","naming","behaviour"]},{"location":"arch/node/engines/naming_behaviour.html#explanation_2","title":"Explanation","text":"<ol> <li> <p>Initial Request</p> <ul> <li>A client sends a <code>MsgNamingQueryNameEvidenceRequest</code> containing an external identity (<code>ExternalIdentity</code>)</li> <li>The external identity refers to the cryptographic identity for which all associated naming evidence should be retrieved</li> </ul> </li> <li> <p>Guard Phase (<code>queryNameEvidenceGuard</code>)</p> <ul> <li>Validates that the incoming message is a proper query request</li> <li>Checks occur in the following order:<ul> <li>Verifies message type is <code>MsgNamingQueryNameEvidenceRequest</code></li> <li>If validation fails, request is rejected without entering the action phase</li> <li>On success, passes control to <code>queryNameEvidenceActionLabel</code></li> </ul> </li> </ul> </li> <li> <p>Action Phase (<code>queryNameEvidenceAction</code>)</p> <ul> <li>Processes valid query requests through these steps:<ul> <li>Extracts the external identity from the request</li> <li>Filters the evidence store to find all evidence entries matching this identity</li> <li>Constructs an appropriate response message with the collected evidence</li> </ul> </li> </ul> </li> <li> <p>Response Generation</p> <ul> <li>Successful Case<ul> <li>Creates <code>MsgNamingQueryNameEvidenceReply</code> with:<ul> <li><code>externalIdentity</code>: The originally queried identity</li> <li><code>evidence</code>: Set of all matching <code>IdentityNameEvidence</code></li> <li><code>err</code>: None</li> </ul> </li> </ul> </li> <li>There are currently no implemented error cases.</li> </ul> </li> <li> <p>Response Delivery</p> <ul> <li>Response is sent back to the original requester</li> <li>Uses mailbox ID 0</li> </ul> </li> </ol> <p>Important Notes</p> <ul> <li>The query operation is read-only - it doesn't modify the evidence store</li> <li>Multiple pieces of evidence may exist for the same external identity</li> </ul>","tags":["node-architecture","identity-subsystem","engine","naming","behaviour"]},{"location":"arch/node/engines/naming_behaviour.html#action-arguments","title":"Action arguments","text":"","tags":["node-architecture","identity-subsystem","engine","naming","behaviour"]},{"location":"arch/node/engines/naming_behaviour.html#namingactionargumentreplyto-replyto","title":"<code>NamingActionArgumentReplyTo ReplyTo</code>","text":"<pre><code>type ReplyTo := mkReplyTo {\n  whoAsked : Option EngineID;\n  mailbox : Option MailboxID\n};\n</code></pre> <p>This action argument contains the address and mailbox ID of where the response message should be sent.</p> <code>whoAsked</code>: is the address of the engine that sent the message. <code>mailbox</code>: is the mailbox ID where the response message should be sent.","tags":["node-architecture","identity-subsystem","engine","naming","behaviour"]},{"location":"arch/node/engines/naming_behaviour.html#namingactionargument","title":"<code>NamingActionArgument</code>","text":"<pre><code>type NamingActionArgument :=\n  | NamingActionArgumentReplyTo ReplyTo\n;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","naming","behaviour"]},{"location":"arch/node/engines/naming_behaviour.html#namingactionarguments","title":"<code>NamingActionArguments</code>","text":"<pre><code>NamingActionArguments : Type := List NamingActionArgument;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","naming","behaviour"]},{"location":"arch/node/engines/naming_behaviour.html#actions","title":"Actions","text":"Auxiliary Juvix code","tags":["node-architecture","identity-subsystem","engine","naming","behaviour"]},{"location":"arch/node/engines/naming_behaviour.html#namingaction","title":"NamingAction","text":"<pre><code>NamingAction : Type :=\n  Action\n    NamingCfg\n    NamingLocalState\n    NamingMailboxState\n    NamingTimerHandle\n    NamingActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","naming","behaviour"]},{"location":"arch/node/engines/naming_behaviour.html#namingactioninput","title":"NamingActionInput","text":"<pre><code>NamingActionInput : Type :=\n  ActionInput\n    NamingCfg\n    NamingLocalState\n    NamingMailboxState\n    NamingTimerHandle\n    NamingActionArguments\n    Anoma.Msg;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","naming","behaviour"]},{"location":"arch/node/engines/naming_behaviour.html#namingactioneffect","title":"NamingActionEffect","text":"<pre><code>NamingActionEffect : Type :=\n  ActionEffect\n    NamingLocalState\n    NamingMailboxState\n    NamingTimerHandle\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","naming","behaviour"]},{"location":"arch/node/engines/naming_behaviour.html#namingactionexec","title":"NamingActionExec","text":"<pre><code>NamingActionExec : Type :=\n  ActionExec\n    NamingCfg\n    NamingLocalState\n    NamingMailboxState\n    NamingTimerHandle\n    NamingActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","naming","behaviour"]},{"location":"arch/node/engines/naming_behaviour.html#resolvenameaction","title":"<code>resolveNameAction</code>","text":"<p>Resolve a name to associated external identities.</p> State update No change to the local state. Messages to be sent A <code>ReplyResolveName</code> message is sent to the requester, containing matching external identities. Engines to be spawned No engines are spawned by this action. Timer updates No timers are set or cancelled. <pre><code>resolveNameAction\n  (input : NamingActionInput)\n  : Option NamingActionEffect :=\n  let\n    env := ActionInput.env input;\n    cfg := ActionInput.cfg input;\n    tt := ActionInput.trigger input;\n    localState := EngineEnv.localState env;\n    identityName := case getEngineMsgFromTimestampedTrigger tt of {\n      | some EngineMsg.mk@{msg := Anoma.PreMsg.MsgNaming (NamingMsg.ResolveNameRequest req)} :=\n          some (RequestResolveName.identityName req)\n      | _ := none\n    }\n  in case identityName of {\n    | some name := let\n        matchingEvidence := Set.filter \\{evidence :=\n          isEqual (Ord.compare (IdentityNameEvidence.identityName evidence) name)\n        } (NamingLocalState.evidenceStore localState);\n        identities := Set.fromList (map \\{evidence :=\n          IdentityNameEvidence.externalIdentity evidence\n        } (Set.toList matchingEvidence));\n        responseMsg := ReplyResolveName.mkReplyResolveName@{\n          externalIdentities := identities;\n          err := none\n        }\n      in case getEngineMsgFromTimestampedTrigger tt of {\n        | some emsg := some ActionEffect.mk@{\n            env := env;\n            msgs := [EngineMsg.mk@{\n              sender := getEngineIDFromEngineCfg cfg;\n              target := EngineMsg.sender emsg;\n              mailbox := some 0;\n              msg := Anoma.PreMsg.MsgNaming (NamingMsg.ResolveNameReply responseMsg)\n            }];\n            timers := [];\n            engines := []\n          }\n        | _ := none\n      }\n    | _ := none\n  };\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","naming","behaviour"]},{"location":"arch/node/engines/naming_behaviour.html#submitnameevidenceaction","title":"<code>submitNameEvidenceAction</code>","text":"<p>Submit new name evidence.</p> State update If the evidence doesn't already exist and is valid, it's added to the <code>evidenceStore</code>. Messages to be sent A response message is sent to the requester, confirming submission or indicating an error. Engines to be spawned No engines are spawned by this action. Timer updates No timers are set or cancelled. <pre><code>submitNameEvidenceAction\n  (input : NamingActionInput)\n  : Option NamingActionEffect :=\n  let\n    env := ActionInput.env input;\n    cfg := ActionInput.cfg input;\n    tt := ActionInput.trigger input;\n    localState := EngineEnv.localState env;\n    evidence := case getEngineMsgFromTimestampedTrigger tt of {\n      | some EngineMsg.mk@{msg := Anoma.PreMsg.MsgNaming (NamingMsg.SubmitNameEvidenceRequest req)} :=\n          some (RequestSubmitNameEvidence.evidence req)\n      | _ := none\n    }\n  in case evidence of {\n    | some ev := let\n        isValid := verifyEvidence ev;\n        alreadyExists := case isValid of {\n          | true := isElement \\{a b := a &amp;&amp; b} true (map \\{e :=\n              isEqual (Ord.compare e ev)\n            } (Set.toList (NamingLocalState.evidenceStore localState)))\n          | false := false\n        };\n        newEnv := case isValid &amp;&amp; (not alreadyExists) of {\n          | true := env@EngineEnv{\n              localState := localState@NamingLocalState{\n                evidenceStore := Set.insert ev (NamingLocalState.evidenceStore localState)\n              }\n            }\n          | false := env\n        };\n        responseMsg := ReplySubmitNameEvidence.mkReplySubmitNameEvidence@{\n          err := case isValid of {\n            | false := some \"Invalid evidence\"\n            | true := case alreadyExists of {\n                | true := some \"Evidence already exists\"\n                | false := none\n              }\n          }\n        }\n      in case getEngineMsgFromTimestampedTrigger tt of {\n        | some emsg := some ActionEffect.mk@{\n            env := newEnv;\n            msgs := [EngineMsg.mk@{\n              sender := getEngineIDFromEngineCfg cfg;\n              target := EngineMsg.sender emsg;\n              mailbox := some 0;\n              msg := Anoma.PreMsg.MsgNaming (NamingMsg.SubmitNameEvidenceReply responseMsg)\n            }];\n            timers := [];\n            engines := []\n          }\n        | _ := none\n      }\n    | _ := none\n  };\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","naming","behaviour"]},{"location":"arch/node/engines/naming_behaviour.html#querynameevidenceaction","title":"<code>queryNameEvidenceAction</code>","text":"<p>Query name evidence for a specific external identity.</p> State update No change to the local state. Messages to be sent A <code>ReplyQueryNameEvidence</code> message is sent to the requester, containing relevant evidence. Engines to be spawned No engines are spawned by this action. Timer updates No timers are set or cancelled. <pre><code>queryNameEvidenceAction\n  (input : NamingActionInput)\n  : Option NamingActionEffect :=\n  let\n    env := ActionInput.env input;\n    cfg := ActionInput.cfg input;\n    tt := ActionInput.trigger input;\n    localState := EngineEnv.localState env;\n    externalIdentity := case getEngineMsgFromTimestampedTrigger tt of {\n      | some EngineMsg.mk@{msg := Anoma.PreMsg.MsgNaming (NamingMsg.QueryNameEvidenceRequest req)} :=\n          some (RequestQueryNameEvidence.externalIdentity req)\n      | _ := none\n    }\n  in case externalIdentity of {\n    | some extId := let\n        relevantEvidence := Set.filter \\{evidence :=\n          isEqual (Ord.compare (IdentityNameEvidence.externalIdentity evidence) extId)\n        } (NamingLocalState.evidenceStore localState);\n        responseMsg := ReplyQueryNameEvidence.mkReplyQueryNameEvidence@{\n          externalIdentity := extId;\n          evidence := relevantEvidence;\n          err := none\n        }\n      in case getEngineMsgFromTimestampedTrigger tt of {\n        | some emsg := some ActionEffect.mk@{\n            env := env;\n            msgs := [EngineMsg.mk@{\n              sender := getEngineIDFromEngineCfg cfg;\n              target := EngineMsg.sender emsg;\n              mailbox := some 0;\n              msg := Anoma.PreMsg.MsgNaming (NamingMsg.QueryNameEvidenceReply responseMsg)\n            }];\n            timers := [];\n            engines := []\n          }\n        | _ := none\n      }\n    | _ := none\n  };\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","naming","behaviour"]},{"location":"arch/node/engines/naming_behaviour.html#action-labels","title":"Action Labels","text":"","tags":["node-architecture","identity-subsystem","engine","naming","behaviour"]},{"location":"arch/node/engines/naming_behaviour.html#resolvenameactionlabel","title":"<code>resolveNameActionLabel</code>","text":"<pre><code>resolveNameActionLabel : NamingActionExec := ActionExec.Seq [ resolveNameAction ];\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","naming","behaviour"]},{"location":"arch/node/engines/naming_behaviour.html#submitnameevidenceactionlabel","title":"<code>submitNameEvidenceActionLabel</code>","text":"<pre><code>submitNameEvidenceActionLabel : NamingActionExec := ActionExec.Seq [ submitNameEvidenceAction ];\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","naming","behaviour"]},{"location":"arch/node/engines/naming_behaviour.html#querynameevidenceactionlabel","title":"<code>queryNameEvidenceActionLabel</code>","text":"<pre><code>queryNameEvidenceActionLabel : NamingActionExec := ActionExec.Seq [ queryNameEvidenceAction ];\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","naming","behaviour"]},{"location":"arch/node/engines/naming_behaviour.html#guards","title":"Guards","text":"Auxiliary Juvix code","tags":["node-architecture","identity-subsystem","engine","naming","behaviour"]},{"location":"arch/node/engines/naming_behaviour.html#namingguard","title":"<code>NamingGuard</code>","text":"<p> <pre><code>NamingGuard : Type :=\n  Guard\n    NamingCfg\n    NamingLocalState\n    NamingMailboxState\n    NamingTimerHandle\n    NamingActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","identity-subsystem","engine","naming","behaviour"]},{"location":"arch/node/engines/naming_behaviour.html#namingguardoutput","title":"<code>NamingGuardOutput</code>","text":"<p> <pre><code>NamingGuardOutput : Type :=\n  GuardOutput\n    NamingCfg\n    NamingLocalState\n    NamingMailboxState\n    NamingTimerHandle\n    NamingActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","identity-subsystem","engine","naming","behaviour"]},{"location":"arch/node/engines/naming_behaviour.html#namingguardeval","title":"<code>NamingGuardEval</code>","text":"<p> <pre><code>NamingGuardEval : Type :=\n  GuardEval\n    NamingCfg\n    NamingLocalState\n    NamingMailboxState\n    NamingTimerHandle\n    NamingActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","identity-subsystem","engine","naming","behaviour"]},{"location":"arch/node/engines/naming_behaviour.html#resolvenameguard","title":"<code>resolveNameGuard</code>","text":"Condition Message type is <code>MsgNamingResolveNameRequest</code>. <pre><code>resolveNameGuard\n  (tt : TimestampedTrigger NamingTimerHandle Anoma.Msg)\n  (cfg : EngineCfg NamingCfg)\n  (env : NamingEnv)\n  : Option NamingGuardOutput :=\n  case getEngineMsgFromTimestampedTrigger tt of {\n    | some EngineMsg.mk@{\n        msg := Anoma.PreMsg.MsgNaming (NamingMsg.ResolveNameRequest _)\n      } := some GuardOutput.mk@{\n        action := resolveNameActionLabel;\n        args := []\n      }\n    | _ := none\n  };\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","naming","behaviour"]},{"location":"arch/node/engines/naming_behaviour.html#submitnameevidenceguard","title":"<code>submitNameEvidenceGuard</code>","text":"Condition Message type is <code>MsgNamingSubmitNameEvidenceRequest</code>. <pre><code>submitNameEvidenceGuard\n  (tt : TimestampedTrigger NamingTimerHandle Anoma.Msg)\n  (cfg : EngineCfg NamingCfg)\n  (env : NamingEnv)\n  : Option NamingGuardOutput :=\n  case getEngineMsgFromTimestampedTrigger tt of {\n    | some EngineMsg.mk@{\n        msg := Anoma.PreMsg.MsgNaming (NamingMsg.SubmitNameEvidenceRequest _)\n      } := some GuardOutput.mk@{\n        action := submitNameEvidenceActionLabel;\n        args := []\n      }\n    | _ := none\n  };\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","naming","behaviour"]},{"location":"arch/node/engines/naming_behaviour.html#querynameevidenceguard","title":"<code>queryNameEvidenceGuard</code>","text":"Condition Message type is <code>MsgNamingQueryNameEvidenceRequest</code>. <pre><code>queryNameEvidenceGuard\n  (tt : TimestampedTrigger NamingTimerHandle Anoma.Msg)\n  (cfg : EngineCfg NamingCfg)\n  (env : NamingEnv)\n  : Option NamingGuardOutput :=\n  case getEngineMsgFromTimestampedTrigger tt of {\n    | some EngineMsg.mk@{\n        msg := Anoma.PreMsg.MsgNaming (NamingMsg.QueryNameEvidenceRequest _)\n      } := some GuardOutput.mk@{\n        action := queryNameEvidenceActionLabel;\n        args := []\n      }\n    | _ := none\n  };\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","naming","behaviour"]},{"location":"arch/node/engines/naming_behaviour.html#the-naming-behaviour","title":"The Naming Behaviour","text":"","tags":["node-architecture","identity-subsystem","engine","naming","behaviour"]},{"location":"arch/node/engines/naming_behaviour.html#namingbehaviour","title":"<code>NamingBehaviour</code>","text":"<pre><code>NamingBehaviour : Type :=\n  EngineBehaviour\n    NamingCfg\n    NamingLocalState\n    NamingMailboxState\n    NamingTimerHandle\n    NamingActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","naming","behaviour"]},{"location":"arch/node/engines/naming_behaviour.html#instantiation","title":"Instantiation","text":"<pre><code>namingBehaviour : NamingBehaviour :=\n  EngineBehaviour.mk@{\n    guards :=\n      GuardEval.First [\n        resolveNameGuard;\n        submitNameEvidenceGuard;\n        queryNameEvidenceGuard\n      ];\n  };\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","naming","behaviour"]},{"location":"arch/node/engines/naming_config.html","title":"Naming Configuration","text":"Juvix imports <pre><code>module arch.node.engines.naming_config;\n\nimport prelude open;\nimport arch.node.engines.naming_messages open;\nimport arch.node.types.engine open;\nimport arch.node.types.messages open;\nimport arch.node.types.identities open;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","naming","configuration"]},{"location":"arch/node/engines/naming_config.html#naming-configuration","title":"Naming Configuration","text":"","tags":["node-architecture","identity-subsystem","engine","naming","configuration"]},{"location":"arch/node/engines/naming_config.html#overview","title":"Overview","text":"<p>The Naming engine configuration contains static information for Naming engine instances.</p>","tags":["node-architecture","identity-subsystem","engine","naming","configuration"]},{"location":"arch/node/engines/naming_config.html#the-naming-configuration","title":"The Naming Configuration","text":"","tags":["node-architecture","identity-subsystem","engine","naming","configuration"]},{"location":"arch/node/engines/naming_config.html#namingcfg","title":"<code>NamingCfg</code>","text":"<pre><code>type NamingCfg := mk\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","naming","configuration"]},{"location":"arch/node/engines/naming_config.html#instantiation","title":"Instantiation","text":"<p>```juvix extract-module-statements module naming_config_example;</p> <p>namingCfg : EngineCfg NamingCfg :=     EngineCfg.mk@{       node := PublicKey.Curve25519PubKey \"0xabcd1234\";       name := \"naming\";       cfg := NamingCfg.mk     }   ; end; ```</p>","tags":["node-architecture","identity-subsystem","engine","naming","configuration"]},{"location":"arch/node/engines/naming_environment.html","title":"Naming Environment","text":"Juvix imports <pre><code>module arch.node.engines.naming_environment;\n\nimport prelude open;\nimport arch.node.types.engine_environment open;\nimport arch.node.types.identities open;\nimport arch.node.engines.naming_messages open;\nimport arch.node.types.anoma_message as Anoma open;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","naming","environment"]},{"location":"arch/node/engines/naming_environment.html#naming-environment","title":"Naming Environment","text":"","tags":["node-architecture","identity-subsystem","engine","naming","environment"]},{"location":"arch/node/engines/naming_environment.html#overview","title":"Overview","text":"<p>The Naming Engine maintains the state necessary for managing associations between <code>IdentityName</code>s and <code>ExternalIdentity</code>s, including storing evidence submitted by clients.</p> Auxiliary Juvix code <pre><code>axiom verifyEvidence : IdentityNameEvidence -&gt; Bool;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","naming","environment"]},{"location":"arch/node/engines/naming_environment.html#mailbox-states","title":"Mailbox states","text":"<p>The Naming Engine does not require complex mailbox states. We define the mailbox state as <code>Unit</code>.</p>","tags":["node-architecture","identity-subsystem","engine","naming","environment"]},{"location":"arch/node/engines/naming_environment.html#namingmailboxstate","title":"<code>NamingMailboxState</code>","text":"<pre><code>syntax alias NamingMailboxState := Unit;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","naming","environment"]},{"location":"arch/node/engines/naming_environment.html#local-state","title":"Local state","text":"<p>The local state of the Naming Engine includes the evidence for name associations.</p>","tags":["node-architecture","identity-subsystem","engine","naming","environment"]},{"location":"arch/node/engines/naming_environment.html#naminglocalstate","title":"<code>NamingLocalState</code>","text":"<pre><code>type NamingLocalState := mk@{\n  evidenceStore : Set IdentityNameEvidence;\n};\n</code></pre> Arguments <code>evidenceStore</code>: The pool of evidence which the engine uses for identity verification.","tags":["node-architecture","identity-subsystem","engine","naming","environment"]},{"location":"arch/node/engines/naming_environment.html#timer-handle","title":"Timer Handle","text":"<p>The Naming Engine does not require a timer handle type. Therefore, we define the timer handle type as <code>Unit</code>.</p>","tags":["node-architecture","identity-subsystem","engine","naming","environment"]},{"location":"arch/node/engines/naming_environment.html#namingtimerhandle","title":"<code>NamingTimerHandle</code>","text":"<pre><code>syntax alias NamingTimerHandle := Unit;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","naming","environment"]},{"location":"arch/node/engines/naming_environment.html#the-naming-environment","title":"The Naming Environment","text":"","tags":["node-architecture","identity-subsystem","engine","naming","environment"]},{"location":"arch/node/engines/naming_environment.html#namingenv","title":"<code>NamingEnv</code>","text":"<pre><code>NamingEnv : Type :=\n  EngineEnv\n    NamingLocalState\n    NamingMailboxState\n    NamingTimerHandle\n    Anoma.Msg;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","naming","environment"]},{"location":"arch/node/engines/naming_environment.html#instantiation","title":"Instantiation","text":"<p>```juvix extract-module-statements module naming_environment_example;</p> <p>namingEnv : NamingEnv :=     EngineEnv.mk@{       localState := NamingLocalState.mk@{         evidenceStore := Set.empty;       };       mailboxCluster := Map.empty;       acquaintances := Set.empty;       timers := []     }   ; end; ```</p>","tags":["node-architecture","identity-subsystem","engine","naming","environment"]},{"location":"arch/node/engines/naming_messages.html","title":"Naming Messages","text":"Juvix imports <pre><code>module arch.node.engines.naming_messages;\nimport prelude open;\nimport arch.node.types.identities open;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","naming","message-types"]},{"location":"arch/node/engines/naming_messages.html#naming-messages","title":"Naming Messages","text":"","tags":["node-architecture","identity-subsystem","engine","naming","message-types"]},{"location":"arch/node/engines/naming_messages.html#message-interface","title":"Message interface","text":"<pre><code>type NamingMsg :=\n  | ResolveNameRequest RequestResolveName\n  | ResolveNameReply ReplyResolveName\n  | SubmitNameEvidenceRequest RequestSubmitNameEvidence\n  | SubmitNameEvidenceReply ReplySubmitNameEvidence\n  | QueryNameEvidenceRequest RequestQueryNameEvidence\n  | QueryNameEvidenceReply ReplyQueryNameEvidence\n  ;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","naming","message-types"]},{"location":"arch/node/engines/naming_messages.html#message-sequence-diagrams","title":"Message sequence diagrams","text":"","tags":["node-architecture","identity-subsystem","engine","naming","message-types"]},{"location":"arch/node/engines/naming_messages.html#resolving-a-name","title":"Resolving a name","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant NamingEngine\n\n    Client-&gt;&gt;NamingEngine: RequestResolveName (name)\n    Note over NamingEngine: Check stored evidence\n    NamingEngine-&gt;&gt;Client: ReplyResolveName</code></pre>  Resolving a name","tags":["node-architecture","identity-subsystem","engine","naming","message-types"]},{"location":"arch/node/engines/naming_messages.html#submitting-name-evidence","title":"Submitting name evidence","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant NamingEngine\n\n    Client-&gt;&gt;NamingEngine: RequestSubmitNameEvidence\n    Note over NamingEngine: Verify and store evidence\n    NamingEngine-&gt;&gt;Client: ReplySubmitNameEvidence</code></pre>  Submitting name evidence","tags":["node-architecture","identity-subsystem","engine","naming","message-types"]},{"location":"arch/node/engines/naming_messages.html#querying-name-evidence","title":"Querying name evidence","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant NamingEngine\n\n    Client-&gt;&gt;NamingEngine: RequestQueryNameEvidence (for ExternalIdentity)\n    Note over NamingEngine: Retrieve relevant evidence\n    NamingEngine-&gt;&gt;Client: ReplyQueryNameEvidence</code></pre>  Querying name evidence for an identity.","tags":["node-architecture","identity-subsystem","engine","naming","message-types"]},{"location":"arch/node/engines/naming_messages.html#message-types","title":"Message types","text":"","tags":["node-architecture","identity-subsystem","engine","naming","message-types"]},{"location":"arch/node/engines/naming_messages.html#requestresolvename","title":"<code>RequestResolveName</code>","text":"<pre><code>type RequestResolveName := mkRequestResolveName {\n  identityName : IdentityName\n};\n</code></pre> <p>A <code>RequestResolveName</code> asks the Naming Engine which <code>ExternalIdentity</code>s are associated with a given <code>IdentityName</code>.</p> Arguments <code>identityName</code>: The name to resolve.","tags":["node-architecture","identity-subsystem","engine","naming","message-types"]},{"location":"arch/node/engines/naming_messages.html#replyresolvename","title":"<code>ReplyResolveName</code>","text":"<pre><code>type ReplyResolveName := mkReplyResolveName {\n  externalIdentities : Set ExternalIdentity;\n  err : Option String\n};\n</code></pre> <p>A <code>ReplyResolveName</code> is returned in response to a <code>RequestResolveName</code>.</p> Arguments <code>externalIdentities</code>: A set of <code>ExternalIdentity</code>s associated with the <code>IdentityName</code>. <code>err</code>: An error message if the resolution failed.","tags":["node-architecture","identity-subsystem","engine","naming","message-types"]},{"location":"arch/node/engines/naming_messages.html#requestsubmitnameevidence","title":"<code>RequestSubmitNameEvidence</code>","text":"<pre><code>type RequestSubmitNameEvidence := mkRequestSubmitNameEvidence {\n  evidence : IdentityNameEvidence\n};\n</code></pre> <p>A <code>RequestSubmitNameEvidence</code> instructs the Naming Engine to store a new piece of <code>IdentityNameEvidence</code>.</p> Arguments <code>evidence</code>: The evidence supporting the association between an <code>IdentityName</code> and an <code>ExternalIdentity</code>.","tags":["node-architecture","identity-subsystem","engine","naming","message-types"]},{"location":"arch/node/engines/naming_messages.html#replysubmitnameevidence","title":"<code>ReplySubmitNameEvidence</code>","text":"<pre><code>type ReplySubmitNameEvidence := mkReplySubmitNameEvidence {\n  err : Option String\n};\n</code></pre> <p>A <code>ReplySubmitNameEvidence</code> is sent in response to a <code>RequestSubmitNameEvidence</code>.</p> Arguments <code>err</code>: An error message if the submission failed.","tags":["node-architecture","identity-subsystem","engine","naming","message-types"]},{"location":"arch/node/engines/naming_messages.html#requestquerynameevidence","title":"<code>RequestQueryNameEvidence</code>","text":"<pre><code>type RequestQueryNameEvidence := mkRequestQueryNameEvidence {\n  externalIdentity : ExternalIdentity\n};\n</code></pre> <p>A <code>RequestQueryNameEvidence</code> instructs the Naming Engine to return any known <code>IdentityName</code>s and <code>IdentityNameEvidence</code> associated with a specific <code>ExternalIdentity</code>.</p> Arguments <code>externalIdentity</code>: The identity for which to retrieve evidence.","tags":["node-architecture","identity-subsystem","engine","naming","message-types"]},{"location":"arch/node/engines/naming_messages.html#replyquerynameevidence","title":"<code>ReplyQueryNameEvidence</code>","text":"<pre><code>type ReplyQueryNameEvidence := mkReplyQueryNameEvidence {\n  externalIdentity : ExternalIdentity;\n  evidence : Set IdentityNameEvidence;\n  err : Option String\n};\n</code></pre> <p>A <code>ReplyQueryNameEvidence</code> provides the requested evidence.</p> Arguments <code>externalIdentity</code>: The <code>ExternalIdentity</code> associated with the returned evidence. <code>evidence</code>: A set of <code>IdentityNameEvidence</code> related to the identity. <code>err</code>: An error message if the query failed.","tags":["node-architecture","identity-subsystem","engine","naming","message-types"]},{"location":"arch/node/engines/naming_messages.html#namingmsg","title":"<code>NamingMsg</code>","text":"<pre><code>type NamingMsg :=\n  | ResolveNameRequest RequestResolveName\n  | ResolveNameReply ReplyResolveName\n  | SubmitNameEvidenceRequest RequestSubmitNameEvidence\n  | SubmitNameEvidenceReply ReplySubmitNameEvidence\n  | QueryNameEvidenceRequest RequestQueryNameEvidence\n  | QueryNameEvidenceReply ReplyQueryNameEvidence\n  ;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","naming","message-types"]},{"location":"arch/node/engines/naming_messages.html#engine-components","title":"Engine components","text":"<ul> <li>Naming Configuration</li> <li>Naming Environment</li> <li>Naming Behaviour</li> </ul>","tags":["node-architecture","identity-subsystem","engine","naming","message-types"]},{"location":"arch/node/engines/net_registry.html","title":"Network Registry Engine","text":"Juvix imports <pre><code>module arch.node.engines.net_registry;\n\nimport arch.node.engines.net_registry_messages open public;\nimport arch.node.engines.net_registry_config open public;\nimport arch.node.engines.net_registry_environment open public;\nimport arch.node.engines.net_registry_behaviour open public;\n\nimport arch.node.types.basics open;\nimport arch.node.types.engine open;\nimport arch.node.types.anoma as Anoma open;\n\nopen registry_config_example;\nopen registry_environment_example;\nopen registry_behaviour_example;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","registry","engine-definition"]},{"location":"arch/node/engines/net_registry.html#network-registry-engine","title":"Network Registry Engine","text":"","tags":["node-architecture","network-subsystem","engine","registry","engine-definition"]},{"location":"arch/node/engines/net_registry.html#purpose","title":"Purpose","text":"<p>The single Network Registry engine instance maintains a database of <code>NodeAdvert</code> and <code>TopicAdvert</code> messages that arrive from the network on each node. For each known node and topic it spawns a Router Engine or a Pub/Sub Topic Engine instance, respectively.</p>","tags":["node-architecture","network-subsystem","engine","registry","engine-definition"]},{"location":"arch/node/engines/net_registry.html#engine-components","title":"Engine components","text":"<ul> <li>Network Registry Messages</li> <li>Network Registry Configuration</li> <li>Network Registry Environment</li> <li>Network Registry Behaviour</li> </ul>","tags":["node-architecture","network-subsystem","engine","registry","engine-definition"]},{"location":"arch/node/engines/net_registry.html#the-type-for-a-network-registry-engine","title":"The type for a network registry engine","text":"<pre><code>NetworkRegistryEngine : Type :=\n  Engine\n    NetworkRegistryLocalCfg\n    NetworkRegistryLocalState\n    NetworkRegistryMailboxState\n    NetworkRegistryTimerHandle\n    NetworkRegistryActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","registry","engine-definition"]},{"location":"arch/node/engines/net_registry.html#example-instantiation","title":"Example instantiation","text":"<pre><code>exNetworkRegistryEngine : NetworkRegistryEngine :=\n  Engine.mk@{\n    cfg := exNetworkRegistryCfg;\n    env := exNetworkRegistryEnv;\n    behaviour := exNetworkRegistryBehaviour;\n  };\n</code></pre> <p>Where <code>exNetworkRegistryCfg</code> is defined as follows:</p> <p>```juvix extract-module-statements module registry_config_example;</p> <p>exNetworkRegistryCfg : NetworkRegistryCfg :=     EngineCfg.mk@{       node := PublicKey.Curve25519PubKey \"0xabcd1234\";       name := \"net-registry\";       cfg := NetworkRegistryLocalCfg.mk;     }; end; <pre><code>[`exNetworkRegistryEnv`](https://specs.anoma.net/pr-347/arch/node/engines/net_registry_environment.html#exNetworkRegistryEnv) is defined as follows:\n\n```juvix extract-module-statements\nmodule registry_environment_example;\n\n  exNetworkRegistryEnv : NetworkRegistryEnv :=\n    EngineEnv.mk@{\n      localState := NetworkRegistryLocalState.mk;\n      mailboxCluster := Map.empty;\n      acquaintances := Set.empty;\n      timers := []\n    };\nend;\n</code></pre></p> <p>and <code>exNetworkRegistryBehaviour</code> is defined as follows:</p> <pre><code>module registry_behaviour_example;\n\n  exNetworkRegistryBehaviour : NetworkRegistryBehaviour :=\n    EngineBehaviour.mk@{\n      guards :=\n        GuardEval.First [\n          exampleReplyGuard;\n        ];\n    };\nend;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","registry","engine-definition"]},{"location":"arch/node/engines/net_registry_behaviour.html","title":"Network Registry Behaviour","text":"Juvix imports <pre><code>module arch.node.engines.net_registry_behaviour;\n\nimport arch.node.engines.net_registry_messages open;\nimport arch.node.engines.net_registry_config open;\nimport arch.node.engines.net_registry_environment open;\n\nimport arch.node.types.basics open;\nimport arch.node.types.identities open;\nimport arch.node.types.messages open;\nimport arch.node.types.engine open;\nimport arch.node.types.anoma as Anoma open;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","registry","behaviour"]},{"location":"arch/node/engines/net_registry_behaviour.html#network-registry-behaviour","title":"Network Registry Behaviour","text":"","tags":["node-architecture","network-subsystem","engine","registry","behaviour"]},{"location":"arch/node/engines/net_registry_behaviour.html#overview","title":"Overview","text":"<p>A Network Registry engine acts in the ways described on this page. The action labels correspond to the actions that can be performed by the engine. Using the action labels, we describe the effects of the actions.</p>","tags":["node-architecture","network-subsystem","engine","registry","behaviour"]},{"location":"arch/node/engines/net_registry_behaviour.html#network-registry-action-flowchart","title":"Network Registry Action Flowchart","text":"","tags":["node-architecture","network-subsystem","engine","registry","behaviour"]},{"location":"arch/node/engines/net_registry_behaviour.html#examplereply-flowchart","title":"<code>exampleReply</code> Flowchart","text":"<pre><code>flowchart TD\n  subgraph C[Conditions]\n    CMsg&gt;NetworkRegistryMsgExampleRequest&lt;br/&gt;from local engine]\n    CEnv[(exampleValue &lt; 10)]\n  end\n\n  G(exampleReplyGuard)\n  A(exampleReplyAction)\n\n  C --&gt; G -- *exampleReplyActionLabel* --&gt; A --&gt; E\n\n  subgraph E[Effects]\n    EEnv[(exampleValue := exampleValue + 1)]\n    EMsg&gt;NetworkRegistryMsgExampleResponse&lt;br/&gt;argOne]\n  end</code></pre> <code>exampleReply</code> flowchart","tags":["node-architecture","network-subsystem","engine","registry","behaviour"]},{"location":"arch/node/engines/net_registry_behaviour.html#action-arguments","title":"Action arguments","text":"<p>The action arguments are set by a guard and passed to the action function as part of the <code>GuardOutput</code>.</p>","tags":["node-architecture","network-subsystem","engine","registry","behaviour"]},{"location":"arch/node/engines/net_registry_behaviour.html#networkregistryactionarguments","title":"<code>NetworkRegistryActionArguments</code>","text":"<pre><code>NetworkRegistryActionArguments : Type := Unit;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","registry","behaviour"]},{"location":"arch/node/engines/net_registry_behaviour.html#actions","title":"Actions","text":"Auxiliary Juvix code","tags":["node-architecture","network-subsystem","engine","registry","behaviour"]},{"location":"arch/node/engines/net_registry_behaviour.html#networkregistryaction","title":"<code>NetworkRegistryAction</code>","text":"<p> <pre><code>NetworkRegistryAction : Type :=\n  Action\n    NetworkRegistryLocalCfg\n    NetworkRegistryLocalState\n    NetworkRegistryMailboxState\n    NetworkRegistryTimerHandle\n    NetworkRegistryActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","network-subsystem","engine","registry","behaviour"]},{"location":"arch/node/engines/net_registry_behaviour.html#networkregistryactioninput","title":"<code>NetworkRegistryActionInput</code>","text":"<p> <pre><code>NetworkRegistryActionInput : Type :=\n  ActionInput\n    NetworkRegistryLocalCfg\n    NetworkRegistryLocalState\n    NetworkRegistryMailboxState\n    NetworkRegistryTimerHandle\n    NetworkRegistryActionArguments\n    Anoma.Msg;\n</code></pre> </p>","tags":["node-architecture","network-subsystem","engine","registry","behaviour"]},{"location":"arch/node/engines/net_registry_behaviour.html#networkregistryactioneffect","title":"<code>NetworkRegistryActionEffect</code>","text":"<p> <pre><code>NetworkRegistryActionEffect : Type :=\n  ActionEffect\n    NetworkRegistryLocalState\n    NetworkRegistryMailboxState\n    NetworkRegistryTimerHandle\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","network-subsystem","engine","registry","behaviour"]},{"location":"arch/node/engines/net_registry_behaviour.html#networkregistryactionexec","title":"<code>NetworkRegistryActionExec</code>","text":"<p> <pre><code>NetworkRegistryActionExec : Type :=\n  ActionExec\n    NetworkRegistryLocalCfg\n    NetworkRegistryLocalState\n    NetworkRegistryMailboxState\n    NetworkRegistryTimerHandle\n    NetworkRegistryActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","network-subsystem","engine","registry","behaviour"]},{"location":"arch/node/engines/net_registry_behaviour.html#examplereplyaction","title":"<code>exampleReplyAction</code>","text":"<p>Respond with a <code>NetworkRegistryMsgExampleResponse</code>.</p> State update The state remains unchanged. Messages to be sent A <code>NetworkRegistryMsgExampleReply</code> message with the data set by <code>exampleReplyGuard</code>. Engines to be spawned No engine is created by this action. Timer updates No timers are set or cancelled. <pre><code>exampleReplyAction\n  (input : NetworkRegistryActionInput)\n  : Option NetworkRegistryActionEffect :=\n  TODO {-\n  let\n    cfg := ActionInput.cfg input;\n    env := ActionInput.env input;\n    trigger := ActionInput.trigger input;\n    args := ActionInput.args input;\n  in\n    case getEngineMsgFromTimestampedTrigger trigger of {\n    | some EngineMsg.mk@{\n        msg := Anoma.PreMsg.MsgNetworkRegistry (NetworkRegistryMsgExampleRequest req);\n        sender := sender;\n        target := target;\n        mailbox := mailbox;\n      } :=\n      some ActionEffect.mk@{\n        env := env;\n        msgs := [\n          EngineMsg.mk@{\n            sender := getEngineIDFromEngineCfg cfg;\n            target := sender;\n            mailbox := some 0;\n            msg :=\n              Anoma.PreMsg.MsgNetworkRegistry\n                (NetworkRegistryMsgExampleReply\n                  (ok mkExampleReplyOk@{\n                    argOne := ExampleRequest.argOne req;\n                  }));\n          }\n        ];\n        timers := [];\n        engines := [];\n      }\n  | _ := none\n  -};\n</code></pre>","tags":["node-architecture","network-subsystem","engine","registry","behaviour"]},{"location":"arch/node/engines/net_registry_behaviour.html#action-labels","title":"Action Labels","text":"","tags":["node-architecture","network-subsystem","engine","registry","behaviour"]},{"location":"arch/node/engines/net_registry_behaviour.html#examplereplyactionlabel","title":"<code>exampleReplyActionLabel</code>","text":"<pre><code>exampleReplyActionLabel : NetworkRegistryActionExec := ActionExec.Seq [ exampleReplyAction ];\n</code></pre>","tags":["node-architecture","network-subsystem","engine","registry","behaviour"]},{"location":"arch/node/engines/net_registry_behaviour.html#guards","title":"Guards","text":"Auxiliary Juvix code","tags":["node-architecture","network-subsystem","engine","registry","behaviour"]},{"location":"arch/node/engines/net_registry_behaviour.html#networkregistryguard","title":"<code>NetworkRegistryGuard</code>","text":"<p> <pre><code>NetworkRegistryGuard : Type :=\n  Guard\n    NetworkRegistryLocalCfg\n    NetworkRegistryLocalState\n    NetworkRegistryMailboxState\n    NetworkRegistryTimerHandle\n    NetworkRegistryActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","network-subsystem","engine","registry","behaviour"]},{"location":"arch/node/engines/net_registry_behaviour.html#networkregistryguardoutput","title":"<code>NetworkRegistryGuardOutput</code>","text":"<p> <pre><code>NetworkRegistryGuardOutput : Type :=\n  GuardOutput\n    NetworkRegistryLocalCfg\n    NetworkRegistryLocalState\n    NetworkRegistryMailboxState\n    NetworkRegistryTimerHandle\n    NetworkRegistryActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","network-subsystem","engine","registry","behaviour"]},{"location":"arch/node/engines/net_registry_behaviour.html#networkregistryguardeval","title":"<code>NetworkRegistryGuardEval</code>","text":"<p> <pre><code>NetworkRegistryGuardEval : Type :=\n  GuardEval\n    NetworkRegistryLocalCfg\n    NetworkRegistryLocalState\n    NetworkRegistryMailboxState\n    NetworkRegistryTimerHandle\n    NetworkRegistryActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","network-subsystem","engine","registry","behaviour"]},{"location":"arch/node/engines/net_registry_behaviour.html#examplereplyguard","title":"<code>exampleReplyGuard</code>","text":"<p>Guard description (optional).</p> Condition Message type is <code>NetworkRegistryMsgExampleRequest</code>. <pre><code>exampleReplyGuard\n  (trigger : NetworkRegistryTimestampedTrigger)\n  (cfg : NetworkRegistryCfg)\n  (env : NetworkRegistryEnv)\n  : Option NetworkRegistryGuardOutput :=\n  TODO {-\n  case getEngineMsgFromTimestampedTrigger trigger of {\n    | some EngineMsg.mk@{\n        msg := Anoma.PreMsg.MsgNetworkRegistry (NetworkRegistryMsgExampleRequest req);\n        sender := mkPair none _; -- from local engines only (NodeID is none)\n      } := some GuardOutput.mk@{\n        action := exampleReplyActionLabel;\n        args := [];\n      }\n    | _ := none\n    -};\n</code></pre>","tags":["node-architecture","network-subsystem","engine","registry","behaviour"]},{"location":"arch/node/engines/net_registry_behaviour.html#engine-behaviour","title":"Engine behaviour","text":"","tags":["node-architecture","network-subsystem","engine","registry","behaviour"]},{"location":"arch/node/engines/net_registry_behaviour.html#networkregistrybehaviour","title":"<code>NetworkRegistryBehaviour</code>","text":"<pre><code>NetworkRegistryBehaviour : Type :=\n  EngineBehaviour\n    NetworkRegistryLocalCfg\n    NetworkRegistryLocalState\n    NetworkRegistryMailboxState\n    NetworkRegistryTimerHandle\n    NetworkRegistryActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","registry","behaviour"]},{"location":"arch/node/engines/net_registry_behaviour.html#instantiation","title":"Instantiation","text":"<pre><code>module registry_behaviour_example;\n\n  exNetworkRegistryBehaviour : NetworkRegistryBehaviour :=\n    EngineBehaviour.mk@{\n      guards :=\n        GuardEval.First [\n          exampleReplyGuard;\n        ];\n    };\nend;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","registry","behaviour"]},{"location":"arch/node/engines/net_registry_config.html","title":"Network Registry Configuration","text":"Juvix imports <pre><code>module arch.node.engines.net_registry_config;\n\nimport arch.node.engines.net_registry_messages open;\n\nimport arch.node.types.basics open;\nimport arch.node.types.engine open;\nimport arch.node.types.identities open;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","registry","configuration"]},{"location":"arch/node/engines/net_registry_config.html#network-registry-configuration","title":"Network Registry Configuration","text":"","tags":["node-architecture","network-subsystem","engine","registry","configuration"]},{"location":"arch/node/engines/net_registry_config.html#overview","title":"Overview","text":"<p>The static configuration of the engine.</p>","tags":["node-architecture","network-subsystem","engine","registry","configuration"]},{"location":"arch/node/engines/net_registry_config.html#local-configuration","title":"Local Configuration","text":"","tags":["node-architecture","network-subsystem","engine","registry","configuration"]},{"location":"arch/node/engines/net_registry_config.html#networkregistrylocalcfg","title":"<code>NetworkRegistryLocalCfg</code>","text":"<p>The type for engine-specific local configuration.</p> <pre><code>type NetworkRegistryLocalCfg :=\n  mk;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","registry","configuration"]},{"location":"arch/node/engines/net_registry_config.html#engine-configuration","title":"Engine Configuration","text":"","tags":["node-architecture","network-subsystem","engine","registry","configuration"]},{"location":"arch/node/engines/net_registry_config.html#networkregistrycfg","title":"<code>NetworkRegistryCfg</code>","text":"<pre><code>NetworkRegistryCfg : Type :=\n  EngineCfg\n    NetworkRegistryLocalCfg;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","registry","configuration"]},{"location":"arch/node/engines/net_registry_config.html#instantiation","title":"Instantiation","text":"<p>```juvix extract-module-statements module registry_config_example;</p> <p>exNetworkRegistryCfg : NetworkRegistryCfg :=     EngineCfg.mk@{       node := PublicKey.Curve25519PubKey \"0xabcd1234\";       name := \"net-registry\";       cfg := NetworkRegistryLocalCfg.mk;     }; end; ```</p>","tags":["node-architecture","network-subsystem","engine","registry","configuration"]},{"location":"arch/node/engines/net_registry_environment.html","title":"Network Registry Environment","text":"Juvix imports <pre><code>module arch.node.engines.net_registry_environment;\n\nimport arch.node.engines.net_registry_messages open;\n\nimport arch.node.types.basics open;\nimport arch.node.types.engine open;\nimport arch.node.types.messages open;\nimport arch.node.types.identities open;\nimport arch.node.types.anoma_message as Anoma open;\n</code></pre>","tags":["node-architecture","network-subsystem","registry","environment"]},{"location":"arch/node/engines/net_registry_environment.html#network-registry-environment","title":"Network Registry Environment","text":"","tags":["node-architecture","network-subsystem","registry","environment"]},{"location":"arch/node/engines/net_registry_environment.html#overview","title":"Overview","text":"<p>The Engine environment of the engine.</p>","tags":["node-architecture","network-subsystem","registry","environment"]},{"location":"arch/node/engines/net_registry_environment.html#mailbox-state","title":"Mailbox state","text":"","tags":["node-architecture","network-subsystem","registry","environment"]},{"location":"arch/node/engines/net_registry_environment.html#networkregistrymailboxstate","title":"<code>NetworkRegistryMailboxState</code>","text":"<pre><code>NetworkRegistryMailboxState : Type := Unit;\n</code></pre>","tags":["node-architecture","network-subsystem","registry","environment"]},{"location":"arch/node/engines/net_registry_environment.html#local-state","title":"Local state","text":"","tags":["node-architecture","network-subsystem","registry","environment"]},{"location":"arch/node/engines/net_registry_environment.html#networkregistrylocalstate","title":"<code>NetworkRegistryLocalState</code>","text":"<pre><code>type NetworkRegistryLocalState :=\n  mk;\n</code></pre>","tags":["node-architecture","network-subsystem","registry","environment"]},{"location":"arch/node/engines/net_registry_environment.html#timer-handles","title":"Timer handles","text":"","tags":["node-architecture","network-subsystem","registry","environment"]},{"location":"arch/node/engines/net_registry_environment.html#networkregistrytimerhandle","title":"<code>NetworkRegistryTimerHandle</code>","text":"<pre><code>NetworkRegistryTimerHandle : Type := Unit;\n</code></pre>","tags":["node-architecture","network-subsystem","registry","environment"]},{"location":"arch/node/engines/net_registry_environment.html#networkregistrytimestampedtrigger","title":"<code>NetworkRegistryTimestampedTrigger</code>","text":"<pre><code>NetworkRegistryTimestampedTrigger : Type :=\n  TimestampedTrigger\n    NetworkRegistryTimerHandle\n    Anoma.Msg;\n</code></pre>","tags":["node-architecture","network-subsystem","registry","environment"]},{"location":"arch/node/engines/net_registry_environment.html#engine-environment","title":"Engine Environment","text":"","tags":["node-architecture","network-subsystem","registry","environment"]},{"location":"arch/node/engines/net_registry_environment.html#networkregistryenv","title":"<code>NetworkRegistryEnv</code>","text":"<pre><code>NetworkRegistryEnv : Type :=\n  EngineEnv\n    NetworkRegistryLocalState\n    NetworkRegistryMailboxState\n    NetworkRegistryTimerHandle\n    Anoma.Msg;\n</code></pre>","tags":["node-architecture","network-subsystem","registry","environment"]},{"location":"arch/node/engines/net_registry_environment.html#instantiation","title":"Instantiation","text":"<p>```juvix extract-module-statements module registry_environment_example;</p> <p>exNetworkRegistryEnv : NetworkRegistryEnv :=     EngineEnv.mk@{       localState := NetworkRegistryLocalState.mk;       mailboxCluster := Map.empty;       acquaintances := Set.empty;       timers := []     }; end; ```</p>","tags":["node-architecture","network-subsystem","registry","environment"]},{"location":"arch/node/engines/net_registry_messages.html","title":"Network Registry Messages","text":"Juvix imports <pre><code>module arch.node.engines.net_registry_messages;\n\nimport arch.node.types.transport open;\n\nimport arch.node.types.basics open;\nimport arch.node.types.identities open;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","registry","message-types"]},{"location":"arch/node/engines/net_registry_messages.html#network-registry-messages","title":"Network Registry Messages","text":"<p>These are the messages that the Network Registry engine can receive/respond to.</p>","tags":["node-architecture","network-subsystem","engine","registry","message-types"]},{"location":"arch/node/engines/net_registry_messages.html#message-interface","title":"Message interface","text":"<pre><code>type NetworkRegistryMsg :=\n  | NodeAdvert NodeAdvert\n  | TopicAdvert TopicAdvert\n  | GetNodeAdvertRequest NodeID\n  | GetNodeAdvertReply GetNodeAdvertReply\n  | GetTopicAdvertRequest TopicID\n  | GetTopicAdvertReply GetTopicAdvertReply\n  ;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","registry","message-types"]},{"location":"arch/node/engines/net_registry_messages.html#message-sequence-diagrams","title":"Message sequence diagrams","text":"","tags":["node-architecture","network-subsystem","engine","registry","message-types"]},{"location":"arch/node/engines/net_registry_messages.html#examplerequest-examplereply","title":"<code>ExampleRequest</code> &amp; <code>ExampleReply</code>","text":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed ut purus eget sapien. Nulla facilisi.</p> <pre><code>sequenceDiagram\n    participant NetworkRegistryClient\n    participant NetworkRegistry\n\n    NetworkRegistryClient -&gt;&gt; NetworkRegistry: ExampleRequest\n    NetworkRegistry -&gt;&gt; NetworkRegistryClient: ExampleReplyOk\n\n    NetworkRegistryClient -&gt;&gt; NetworkRegistry: ExampleRequest\n    NetworkRegistry -&gt;&gt; NetworkRegistryClient: ExampleReplyErrorOne</code></pre>  Sequence Diagram: <code>ExampleRequest</code> &amp; <code>ExampleReply</code>","tags":["node-architecture","network-subsystem","engine","registry","message-types"]},{"location":"arch/node/engines/net_registry_messages.html#message-types","title":"Message types","text":"","tags":["node-architecture","network-subsystem","engine","registry","message-types"]},{"location":"arch/node/engines/net_registry_messages.html#networkregistrymsgnodeadvert","title":"<code>NetworkRegistryMsgNodeAdvert</code>","text":"<p>A <code>NodeAdvert</code> update from another node.</p>","tags":["node-architecture","network-subsystem","engine","registry","message-types"]},{"location":"arch/node/engines/net_registry_messages.html#nodeadvert","title":"<code>NodeAdvert</code>","text":"<p>A self-signed node advertisement contains the node's cryptographic identity and transport addresses.</p> <pre><code>type NodeAdvert :=\n  mkNodeAdvert {\n    id : NodeID;\n    addrs : List TransportAddress;\n    version : Nat;\n    created : AbsTime;\n    sig : Commitment;\n  };\n</code></pre> Arguments <code>id</code> Node identity. <code>addrs</code> Transport addresses with preferences expressed as weights. <code>version</code> Version number (incremented at every change). <code>created</code> Time of creation. <code>sig</code> Signature by <code>id</code>.","tags":["node-architecture","network-subsystem","engine","registry","message-types"]},{"location":"arch/node/engines/net_registry_messages.html#topicadvert","title":"<code>TopicAdvert</code>","text":"<p>A topic advertisement is signed by the topic creator, and contains the topic's cryptographic identity and the <code>NodeID</code> of a set of relay nodes that can be used to subscribe to the topic. These may be publishers, subscribers, or dedicated relay nodes for the topic.</p> <pre><code>type TopicAdvert :=\n  mkTopicAdvert {\n    id : TopicID;\n    relays : List NodeID;\n    tags : List String;\n    version : Nat;\n    created : AbsTime;\n    sig : Commitment;\n  };\n</code></pre>","tags":["node-architecture","network-subsystem","engine","registry","message-types"]},{"location":"arch/node/engines/net_registry_messages.html#getnodeadvertrequest","title":"<code>GetNodeAdvertRequest</code>","text":"<p>Get <code>NodeAdvert</code> for the given <code>NodeID</code>.</p> <p>Sender: any local engine.</p>","tags":["node-architecture","network-subsystem","engine","registry","message-types"]},{"location":"arch/node/engines/net_registry_messages.html#getnodeadvertreply","title":"<code>GetNodeAdvertReply</code>","text":"<p>Reply to a <code>GetNodeAdvertRequest</code>.</p>","tags":["node-architecture","network-subsystem","engine","registry","message-types"]},{"location":"arch/node/engines/net_registry_messages.html#getnodeadvertreplyok","title":"<code>GetNodeAdvertReplyOk</code>","text":"<p>Reply with locally available <code>NodeAdvert</code>.</p> <pre><code>GetNodeAdvertReplyOk : Type := NodeAdvert;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","registry","message-types"]},{"location":"arch/node/engines/net_registry_messages.html#getnodeadvertreplyerror","title":"<code>GetNodeAdvertReplyError</code>","text":"<p>Error getting <code>NodeAdvert</code>.</p> <pre><code>type GetNodeAdvertReplyError :=\n  | GetNodeAdvertReplyErrorNotFound\n  ;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","registry","message-types"]},{"location":"arch/node/engines/net_registry_messages.html#getnodeadvertreply_1","title":"<code>GetNodeAdvertReply</code>","text":"<pre><code>GetNodeAdvertReply : Type := Result GetNodeAdvertReplyError GetNodeAdvertReplyOk;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","registry","message-types"]},{"location":"arch/node/engines/net_registry_messages.html#gettopicadvertrequest","title":"<code>GetTopicAdvertRequest</code>","text":"<p>Get <code>TopicAdvert</code> for the given <code>TopicID</code>.</p> <p>Sender: any local engine.</p>","tags":["node-architecture","network-subsystem","engine","registry","message-types"]},{"location":"arch/node/engines/net_registry_messages.html#gettopicadvertreply","title":"<code>GetTopicAdvertReply</code>","text":"<p>Reply to a <code>GetTopicAdvertRequest</code>.</p>","tags":["node-architecture","network-subsystem","engine","registry","message-types"]},{"location":"arch/node/engines/net_registry_messages.html#gettopicadvertreplyok","title":"<code>GetTopicAdvertReplyOk</code>","text":"<p>Reply with locally available <code>TopicAdvert</code>.</p> <pre><code>GetTopicAdvertReplyOk : Type := TopicAdvert;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","registry","message-types"]},{"location":"arch/node/engines/net_registry_messages.html#gettopicadvertreplyerror","title":"<code>GetTopicAdvertReplyError</code>","text":"<p>Error getting <code>TopicAdvert</code>.</p> <pre><code>type GetTopicAdvertReplyError :=\n  | GetTopicAdvertReplyErrorNotFound\n  ;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","registry","message-types"]},{"location":"arch/node/engines/net_registry_messages.html#gettopicadvertreply_1","title":"<code>GetTopicAdvertReply</code>","text":"<pre><code>GetTopicAdvertReply : Type := Result GetTopicAdvertReplyError GetTopicAdvertReplyOk;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","registry","message-types"]},{"location":"arch/node/engines/net_registry_messages.html#networkregistrymsg","title":"<code>NetworkRegistryMsg</code>","text":"<pre><code>type NetworkRegistryMsg :=\n  | NodeAdvert NodeAdvert\n  | TopicAdvert TopicAdvert\n  | GetNodeAdvertRequest NodeID\n  | GetNodeAdvertReply GetNodeAdvertReply\n  | GetTopicAdvertRequest TopicID\n  | GetTopicAdvertReply GetTopicAdvertReply\n  ;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","registry","message-types"]},{"location":"arch/node/engines/net_registry_messages.html#engine-components","title":"Engine components","text":"<ul> <li>Network Registry Configuration</li> <li>Network Registry Environment</li> <li>Network Registry Behaviour</li> </ul>","tags":["node-architecture","network-subsystem","engine","registry","message-types"]},{"location":"arch/node/engines/pub_sub_topic.html","title":"Pub/Sub Topic Engine","text":"Juvix imports <pre><code>module arch.node.engines.pub_sub_topic;\n\nimport arch.node.engines.pub_sub_topic_messages open public;\nimport arch.node.engines.pub_sub_topic_config open public;\nimport arch.node.engines.pub_sub_topic_environment open public;\nimport arch.node.engines.pub_sub_topic_behaviour open public;\n\nimport arch.node.types.basics open;\nimport arch.node.types.engine open;\nimport arch.node.types.anoma as Anoma open;\n\nopen pub_sub_topic_config_example;\nopen pub_sub_topic_environment_example;\nopen pub_sub_topic_behaviour_example;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","engine-definition"]},{"location":"arch/node/engines/pub_sub_topic.html#pubsub-topic-engine","title":"Pub/Sub Topic Engine","text":"","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","engine-definition"]},{"location":"arch/node/engines/pub_sub_topic.html#purpose","title":"Purpose","text":"<p>A Pub/Sub Topic engine is responsible for topic-based publish/subscribe (pub/sub) message dissemination for a single pub/sub topic.</p> <p>The protocol allows a set of authorized publishers to publish messages in the topic, as well as local and remote engines to subscribe to it. Published messages are disseminated to all subscribers.</p> <p>The engine instance name corresponds to the <code>TopicID</code>.</p>","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","engine-definition"]},{"location":"arch/node/engines/pub_sub_topic.html#engine-components","title":"Engine components","text":"<ul> <li>Pub/Sub Topic Messages</li> <li>Pub/Sub Topic Configuration</li> <li>Pub/Sub Topic Environment</li> <li>Pub/Sub Topic Behaviour</li> </ul>","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","engine-definition"]},{"location":"arch/node/engines/pub_sub_topic.html#type","title":"Type","text":"<pre><code>PubSubTopicEngine : Type :=\n  Engine\n    PubSubTopicLocalCfg\n    PubSubTopicLocalState\n    PubSubTopicMailboxState\n    PubSubTopicTimerHandle\n    PubSubTopicActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","engine-definition"]},{"location":"arch/node/engines/pub_sub_topic.html#instantiation","title":"Instantiation","text":"<pre><code>exPubSubTopicEngine : PubSubTopicEngine :=\n  Engine.mk@{\n    cfg := exPubSubTopicCfg;\n    env := exPubSubTopicEnv;\n    behaviour := exPubSubTopicBehaviour;\n  };\n</code></pre> <p>Where <code>exPubSubTopicCfg</code> is defined as follows:</p> <p>```juvix extract-module-statements module pub_sub_topic_config_example;</p> <p>exPubSubTopicCfg : PubSubTopicCfg :=   EngineCfg.mk@{     node := PublicKey.Curve25519PubKey \"0xabcd1234\";     name := \"pub-sub-topic\";     cfg := PubSubTopicLocalCfg.mk;   };</p> <p>end; <pre><code>[`exPubSubTopicEnv`](https://specs.anoma.net/pr-347/arch/node/engines/pub_sub_topic_environment.html#exPubSubTopicEnv) is defined as follows:\n\n```juvix extract-module-statements\nmodule pub_sub_topic_environment_example;\n\nexPubSubTopicEnv : PubSubTopicEnv :=\n  EngineEnv.mk@{\n    localState := PubSubTopicLocalState.mk;\n    mailboxCluster := Map.empty;\n    acquaintances := Set.empty;\n    timers := []\n  };\n\nend;\n</code></pre></p> <p>and <code>exPubSubTopicBehaviour</code> is defined as follows:</p> <pre><code>module pub_sub_topic_behaviour_example;\n\nexPubSubTopicBehaviour : PubSubTopicBehaviour :=\n  EngineBehaviour.mk@{\n    guards :=\n      GuardEval.First [\n        exampleReplyGuard;\n      ];\n  };\n\nend;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","engine-definition"]},{"location":"arch/node/engines/pub_sub_topic_behaviour.html","title":"Pub/Sub Topic Behaviour","text":"Juvix imports <pre><code>module arch.node.engines.pub_sub_topic_behaviour;\n\nimport arch.node.engines.pub_sub_topic_messages open;\nimport arch.node.engines.pub_sub_topic_config open;\nimport arch.node.engines.pub_sub_topic_environment open;\n\nimport arch.node.types.basics open;\nimport arch.node.types.identities open;\nimport arch.node.types.messages open;\nimport arch.node.types.engine open;\nimport arch.node.types.anoma as Anoma open;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","behaviour"]},{"location":"arch/node/engines/pub_sub_topic_behaviour.html#pubsub-topic-behaviour","title":"Pub/Sub Topic Behaviour","text":"","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","behaviour"]},{"location":"arch/node/engines/pub_sub_topic_behaviour.html#overview","title":"Overview","text":"<p>A Pub/Sub Topic engine acts in the ways described on this page. The action labels correspond to the actions that can be performed by the engine. Using the action labels, we describe the effects of the actions.</p>","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","behaviour"]},{"location":"arch/node/engines/pub_sub_topic_behaviour.html#pubsub-topic-action-flowchart","title":"Pub/Sub Topic Action Flowchart","text":"","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","behaviour"]},{"location":"arch/node/engines/pub_sub_topic_behaviour.html#examplereply-flowchart","title":"<code>exampleReply</code> Flowchart","text":"<pre><code>flowchart TD\n  subgraph C[Conditions]\n    CMsg&gt;PubSubTopicMsgExampleRequest&lt;br/&gt;from local engine]\n    CEnv[(exampleValue &lt; 10)]\n  end\n\n  G(exampleReplyGuard)\n  A(exampleReplyAction)\n\n  C --&gt; G -- *exampleReplyActionLabel* --&gt; A --&gt; E\n\n  subgraph E[Effects]\n    EEnv[(exampleValue := exampleValue + 1)]\n    EMsg&gt;PubSubTopicMsgExampleResponse&lt;br/&gt;argOne]\n  end</code></pre> <code>exampleReply</code> flowchart","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","behaviour"]},{"location":"arch/node/engines/pub_sub_topic_behaviour.html#action-arguments","title":"Action arguments","text":"<p>The action arguments are set by a guard and passed to the action function as part of the <code>GuardOutput</code>.</p>","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","behaviour"]},{"location":"arch/node/engines/pub_sub_topic_behaviour.html#pubsubtopicactionarguments","title":"<code>PubSubTopicActionArguments</code>","text":"<pre><code>PubSubTopicActionArguments : Type := Unit;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","behaviour"]},{"location":"arch/node/engines/pub_sub_topic_behaviour.html#actions","title":"Actions","text":"Auxiliary Juvix code","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","behaviour"]},{"location":"arch/node/engines/pub_sub_topic_behaviour.html#pubsubtopicaction","title":"<code>PubSubTopicAction</code>","text":"<p> <pre><code>PubSubTopicAction : Type :=\n  Action\n    PubSubTopicLocalCfg\n    PubSubTopicLocalState\n    PubSubTopicMailboxState\n    PubSubTopicTimerHandle\n    PubSubTopicActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","behaviour"]},{"location":"arch/node/engines/pub_sub_topic_behaviour.html#pubsubtopicactioninput","title":"<code>PubSubTopicActionInput</code>","text":"<p> <pre><code>PubSubTopicActionInput : Type :=\n  ActionInput\n    PubSubTopicLocalCfg\n    PubSubTopicLocalState\n    PubSubTopicMailboxState\n    PubSubTopicTimerHandle\n    PubSubTopicActionArguments\n    Anoma.Msg;\n</code></pre> </p>","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","behaviour"]},{"location":"arch/node/engines/pub_sub_topic_behaviour.html#pubsubtopicactioneffect","title":"<code>PubSubTopicActionEffect</code>","text":"<p> <pre><code>PubSubTopicActionEffect : Type :=\n  ActionEffect\n    PubSubTopicLocalState\n    PubSubTopicMailboxState\n    PubSubTopicTimerHandle\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","behaviour"]},{"location":"arch/node/engines/pub_sub_topic_behaviour.html#pubsubtopicactionexec","title":"<code>PubSubTopicActionExec</code>","text":"<p> <pre><code>PubSubTopicActionExec : Type :=\n  ActionExec\n    PubSubTopicLocalCfg\n    PubSubTopicLocalState\n    PubSubTopicMailboxState\n    PubSubTopicTimerHandle\n    PubSubTopicActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","behaviour"]},{"location":"arch/node/engines/pub_sub_topic_behaviour.html#examplereplyaction","title":"<code>exampleReplyAction</code>","text":"<p>Respond with a <code>PubSubTopicMsgExampleReply</code>. Respond with a <code>PubSubTopicMsgExampleReply</code>.</p> State update The state remains unchanged. Messages to be sent A <code>PubSubTopicMsgExampleReply</code> message with the data set by <code>exampleReplyGuard</code>. Engines to be spawned No engine is created by this action. Timer updates No timers are set or cancelled. <pre><code>exampleReplyAction\n  (input : PubSubTopicActionInput)\n  : Option PubSubTopicActionEffect :=\n  TODO {-\n  let\n    cfg := ActionInput.cfg input;\n    env := ActionInput.env input;\n    trigger := ActionInput.trigger input;\n    args := ActionInput.args input;\n  in\n    case getEngineMsgFromTimestampedTrigger trigger of {\n    | some EngineMsg.mk@{\n        msg := Anoma.PreMsg.MsgPubSubTopic (PubSubTopicMsgExampleRequest req);\n        sender := sender;\n        target := target;\n        mailbox := mailbox;\n      } :=\n      some ActionEffect.mk@{\n        env := env;\n        msgs := [\n          EngineMsg.mk@{\n            sender := getEngineIDFromEngineCfg cfg;\n            target := sender;\n            mailbox := some 0;\n            msg :=\n              Anoma.PreMsg.MsgPubSubTopic\n                (PubSubTopicMsgExampleReply\n                  (ok mkExampleReplyOk@{\n                    argOne := ExampleRequest.argOne req;\n                  }));\n          }\n        ];\n        timers := [];\n        engines := [];\n      }\n  | _ := none\n  -};\n</code></pre>","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","behaviour"]},{"location":"arch/node/engines/pub_sub_topic_behaviour.html#action-labels","title":"Action Labels","text":"","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","behaviour"]},{"location":"arch/node/engines/pub_sub_topic_behaviour.html#examplereplyactionlabel","title":"<code>exampleReplyActionLabel</code>","text":"<pre><code>exampleReplyActionLabel : PubSubTopicActionExec := ActionExec.Seq [ exampleReplyAction ];\n</code></pre>","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","behaviour"]},{"location":"arch/node/engines/pub_sub_topic_behaviour.html#guards","title":"Guards","text":"Auxiliary Juvix code","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","behaviour"]},{"location":"arch/node/engines/pub_sub_topic_behaviour.html#pubsubtopicguard","title":"<code>PubSubTopicGuard</code>","text":"<p> <pre><code>PubSubTopicGuard : Type :=\n  Guard\n    PubSubTopicLocalCfg\n    PubSubTopicLocalState\n    PubSubTopicMailboxState\n    PubSubTopicTimerHandle\n    PubSubTopicActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","behaviour"]},{"location":"arch/node/engines/pub_sub_topic_behaviour.html#pubsubtopicguardoutput","title":"<code>PubSubTopicGuardOutput</code>","text":"<p> <pre><code>PubSubTopicGuardOutput : Type :=\n  GuardOutput\n    PubSubTopicLocalCfg\n    PubSubTopicLocalState\n    PubSubTopicMailboxState\n    PubSubTopicTimerHandle\n    PubSubTopicActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","behaviour"]},{"location":"arch/node/engines/pub_sub_topic_behaviour.html#pubsubtopicguardeval","title":"<code>PubSubTopicGuardEval</code>","text":"<p> <pre><code>PubSubTopicGuardEval : Type :=\n  GuardEval\n    PubSubTopicLocalCfg\n    PubSubTopicLocalState\n    PubSubTopicMailboxState\n    PubSubTopicTimerHandle\n    PubSubTopicActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","behaviour"]},{"location":"arch/node/engines/pub_sub_topic_behaviour.html#examplereplyguard","title":"<code>exampleReplyGuard</code>","text":"<p>Guard description (optional).</p> Condition Message type is <code>PubSubTopicMsgExampleRequest</code>. <pre><code>exampleReplyGuard\n  (trigger : PubSubTopicTimestampedTrigger)\n  (cfg : PubSubTopicCfg)\n  (env : PubSubTopicEnv)\n  : Option PubSubTopicGuardOutput :=\n  TODO {-\n  case getEngineMsgFromTimestampedTrigger trigger of {\n    | some EngineMsg.mk@{\n        msg := Anoma.PreMsg.MsgPubSubTopic (PubSubTopicMsgExampleRequest req);\n        sender := mkPair none _; -- from local engines only (NodeID is none)\n      } := some GuardOutput.mk@{\n        action := exampleReplyActionLabel;\n        args := [];\n      }\n    | _ := none\n    -};\n</code></pre>","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","behaviour"]},{"location":"arch/node/engines/pub_sub_topic_behaviour.html#engine-behaviour","title":"Engine behaviour","text":"","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","behaviour"]},{"location":"arch/node/engines/pub_sub_topic_behaviour.html#pubsubtopicbehaviour","title":"<code>PubSubTopicBehaviour</code>","text":"<pre><code>PubSubTopicBehaviour : Type :=\n  EngineBehaviour\n    PubSubTopicLocalCfg\n    PubSubTopicLocalState\n    PubSubTopicMailboxState\n    PubSubTopicTimerHandle\n    PubSubTopicActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","behaviour"]},{"location":"arch/node/engines/pub_sub_topic_behaviour.html#instantiation","title":"Instantiation","text":"<pre><code>module pub_sub_topic_behaviour_example;\n\nexPubSubTopicBehaviour : PubSubTopicBehaviour :=\n  EngineBehaviour.mk@{\n    guards :=\n      GuardEval.First [\n        exampleReplyGuard;\n      ];\n  };\n\nend;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","behaviour"]},{"location":"arch/node/engines/pub_sub_topic_config.html","title":"Pub/Sub Topic Configuration","text":"Juvix imports <pre><code>module arch.node.engines.pub_sub_topic_config;\n\nimport arch.node.engines.pub_sub_topic_messages open;\n\nimport arch.node.types.basics open;\nimport arch.node.types.engine open;\nimport arch.node.types.identities open;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","configuration"]},{"location":"arch/node/engines/pub_sub_topic_config.html#pubsub-topic-configuration","title":"Pub/Sub Topic Configuration","text":"","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","configuration"]},{"location":"arch/node/engines/pub_sub_topic_config.html#overview","title":"Overview","text":"<p>The static configuration of the engine.</p>","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","configuration"]},{"location":"arch/node/engines/pub_sub_topic_config.html#local-configuration","title":"Local Configuration","text":"","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","configuration"]},{"location":"arch/node/engines/pub_sub_topic_config.html#pubsubtopiclocalcfg","title":"<code>PubSubTopicLocalCfg</code>","text":"<p>The type for engine-specific local configuration.</p> <pre><code>type PubSubTopicLocalCfg :=\n  mk;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","configuration"]},{"location":"arch/node/engines/pub_sub_topic_config.html#engine-configuration","title":"Engine Configuration","text":"","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","configuration"]},{"location":"arch/node/engines/pub_sub_topic_config.html#pubsubtopiccfg","title":"<code>PubSubTopicCfg</code>","text":"<pre><code>PubSubTopicCfg : Type :=\n  EngineCfg\n    PubSubTopicLocalCfg;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","configuration"]},{"location":"arch/node/engines/pub_sub_topic_config.html#instantiation","title":"Instantiation","text":"<p>```juvix extract-module-statements module pub_sub_topic_config_example;</p> <p>exPubSubTopicCfg : PubSubTopicCfg :=   EngineCfg.mk@{     node := PublicKey.Curve25519PubKey \"0xabcd1234\";     name := \"pub-sub-topic\";     cfg := PubSubTopicLocalCfg.mk;   };</p> <p>end; ```</p>","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","configuration"]},{"location":"arch/node/engines/pub_sub_topic_environment.html","title":"Pub/Sub Topic Environment","text":"Juvix imports <pre><code>module arch.node.engines.pub_sub_topic_environment;\n\nimport arch.node.engines.pub_sub_topic_messages open;\n\nimport arch.node.types.basics open;\nimport arch.node.types.engine open;\nimport arch.node.types.messages open;\nimport arch.node.types.identities open;\nimport arch.node.types.anoma_message as Anoma open;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","environment"]},{"location":"arch/node/engines/pub_sub_topic_environment.html#pubsub-topic-environment","title":"Pub/Sub Topic Environment","text":"","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","environment"]},{"location":"arch/node/engines/pub_sub_topic_environment.html#overview","title":"Overview","text":"<p>The Engine environment of the engine.</p>","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","environment"]},{"location":"arch/node/engines/pub_sub_topic_environment.html#mailbox-state","title":"Mailbox state","text":"","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","environment"]},{"location":"arch/node/engines/pub_sub_topic_environment.html#pubsubtopicmailboxstate","title":"<code>PubSubTopicMailboxState</code>","text":"<pre><code>PubSubTopicMailboxState : Type := Unit;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","environment"]},{"location":"arch/node/engines/pub_sub_topic_environment.html#local-state","title":"Local state","text":"","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","environment"]},{"location":"arch/node/engines/pub_sub_topic_environment.html#pubsubtopiclocalstate","title":"<code>PubSubTopicLocalState</code>","text":"<pre><code>type PubSubTopicLocalState :=\n  mk;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","environment"]},{"location":"arch/node/engines/pub_sub_topic_environment.html#timer-handles","title":"Timer handles","text":"","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","environment"]},{"location":"arch/node/engines/pub_sub_topic_environment.html#pubsubtopictimerhandle","title":"<code>PubSubTopicTimerHandle</code>","text":"<pre><code>PubSubTopicTimerHandle : Type := Unit;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","environment"]},{"location":"arch/node/engines/pub_sub_topic_environment.html#pubsubtopictimestampedtrigger","title":"<code>PubSubTopicTimestampedTrigger</code>","text":"<pre><code>PubSubTopicTimestampedTrigger : Type :=\n  TimestampedTrigger\n    PubSubTopicTimerHandle\n    Anoma.Msg;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","environment"]},{"location":"arch/node/engines/pub_sub_topic_environment.html#engine-environment","title":"Engine Environment","text":"","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","environment"]},{"location":"arch/node/engines/pub_sub_topic_environment.html#pubsubtopicenv","title":"<code>PubSubTopicEnv</code>","text":"<pre><code>PubSubTopicEnv : Type :=\n  EngineEnv\n    PubSubTopicLocalState\n    PubSubTopicMailboxState\n    PubSubTopicTimerHandle\n    Anoma.Msg;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","environment"]},{"location":"arch/node/engines/pub_sub_topic_environment.html#instantiation","title":"Instantiation","text":"<p>```juvix extract-module-statements module pub_sub_topic_environment_example;</p> <p>exPubSubTopicEnv : PubSubTopicEnv :=   EngineEnv.mk@{     localState := PubSubTopicLocalState.mk;     mailboxCluster := Map.empty;     acquaintances := Set.empty;     timers := []   };</p> <p>end; ```</p>","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","environment"]},{"location":"arch/node/engines/pub_sub_topic_messages.html","title":"Pub/Sub Topic Messages","text":"Juvix imports <pre><code>module arch.node.engines.pub_sub_topic_messages;\n\nimport arch.node.engines.net_registry_messages open;\nimport arch.node.types.storage open;\n\nimport arch.node.types.basics open;\nimport arch.node.types.crypto open;\nimport arch.node.types.identities open;\nimport arch.node.types.messages open;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","message-types"]},{"location":"arch/node/engines/pub_sub_topic_messages.html#pubsub-topic-messages","title":"Pub/Sub Topic Messages","text":"<p>These are the messages that the Pub/Sub Topic engine can receive/respond to.</p>","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","message-types"]},{"location":"arch/node/engines/pub_sub_topic_messages.html#message-interface","title":"Message interface","text":"<pre><code>type PubSubTopicMsg :=\n  | Forward TopicMsg\n  | SubRequest TopicSubRequest\n  | SubReply TopicSubReply\n  | UnsubRequest TopicUnsubRequest\n  | UnsubReply TopicUnsubReply\n  ;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","message-types"]},{"location":"arch/node/engines/pub_sub_topic_messages.html#message-types","title":"Message types","text":"","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","message-types"]},{"location":"arch/node/engines/pub_sub_topic_messages.html#topicmsg","title":"<code>TopicMsg</code>","text":"<p>A message published in a topic by an authorized publisher, forwarded to the local node.</p> Auxiliary type <pre><code>type TopicMsg := mkTopicMsg@{\n  publisher : PublisherID;\n  seq : Nat;\n  deps : List TopicMsgID;\n  seen : List TopicMsgID;\n  content : TopicMsgContent;\n  sig : Commitment;\n}\n</code></pre> Arguments <code>publisher</code> Publisher identity. <code>seq</code> Per-publisher sequence number. <code>deps</code> Earlier messages this message depends on. <code>seen</code> Independent messages recently seen. <code>content</code>: Encrypted <code>TopicMsg</code>. <code>sig</code> Signature by <code>publisher</code> over the topic ID and the above fields.","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","message-types"]},{"location":"arch/node/engines/pub_sub_topic_messages.html#topicmsgid","title":"<code>TopicMsgID</code>","text":"<pre><code>syntax alias TopicMsgID := Digest;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","message-types"]},{"location":"arch/node/engines/pub_sub_topic_messages.html#topicmsgcontent","title":"<code>TopicMsgContent</code>","text":"<pre><code>type TopicMsgContent :=\n  | TopicMsgContentMsg ByteString\n  | TopicMsgContentChunk (Pair ByteString Chunk)\n  | TopicMsgContentChunkRef (Pair ByteString ChunkCommitment)\n  | TopicMsgContentAck TopicMsgAck\n  ;\n</code></pre> TopicMsgContent constructors <code>TopicMsgContentMsg</code> Encrypted <code>TopicMsg</code>. <code>TopicMsgContentChunk</code> Chunk of an object. Pair of an encrypted <code>SecretKey</code> and a <code>Chunk</code>. <code>TopicMsgContentChunkRef</code> Reference to the root chunk of an object. Pair of an encrypted <code>SecretKey</code> and a <code>ChunkCommitment</code>. <code>TopicMsgContentAck</code> Acknowledgement of a <code>TopicMsg</code>.","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","message-types"]},{"location":"arch/node/engines/pub_sub_topic_messages.html#topicmsgack","title":"<code>TopicMsgAck</code>","text":"<p>Acknowledgement of a <code>TopicMsg</code> with commitment to store it until the specified expiry date.</p> <pre><code>type TopicMsgAck := mkTopicMsgAck@{\n  expiry : AbsTime;\n}\n</code></pre> Arguments <code>expiry</code> Expiry date and time until the node commits to store the event.","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","message-types"]},{"location":"arch/node/engines/pub_sub_topic_messages.html#topicsubrequest","title":"<code>TopicSubRequest</code>","text":"<p>Pub/sub topic subscription request by a local engine or a remote node.</p> <pre><code>type TopicSubRequest := mkTopicSubRequest@{\n  topic : TopicID;\n}\n</code></pre>","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","message-types"]},{"location":"arch/node/engines/pub_sub_topic_messages.html#topicsubreply","title":"<code>TopicSubReply</code>","text":"<p>Reply to a <code>TopicSubRequest</code>.</p> Auxiliary type","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","message-types"]},{"location":"arch/node/engines/pub_sub_topic_messages.html#topicsubreplyok","title":"<code>TopicSubReplyOk</code>","text":"<p>Subscription successful.</p> <pre><code>type TopicSubReplyOk :=\n  | TopicSubReplyOkSuccess\n  ;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","message-types"]},{"location":"arch/node/engines/pub_sub_topic_messages.html#topicsubreplyerror","title":"<code>TopicSubReplyError</code>","text":"<p>Subscription failed.</p> <pre><code>type TopicSubReplyError :=\n  | TopicSubReplyErrorDenied\n  ;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","message-types"]},{"location":"arch/node/engines/pub_sub_topic_messages.html#topicsubreply-type-result-topicsubreplyok-topicsubreplyerror","title":"<pre><code>TopicSubReply : Type := Result TopicSubReplyOk TopicSubReplyError;\n</code></pre>","text":"","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","message-types"]},{"location":"arch/node/engines/pub_sub_topic_messages.html#topicunsubrequest","title":"<code>TopicUnsubRequest</code>","text":"<p>Pub/sub topic unsubscription request by a local engine or a remote node.</p> <pre><code>type TopicUnsubRequest := mkTopicUnsubRequest@{\n  topic : TopicID;\n}\n</code></pre>","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","message-types"]},{"location":"arch/node/engines/pub_sub_topic_messages.html#topicunsubreply","title":"<code>TopicUnsubReply</code>","text":"<p>Unsubscription successful.</p> Auxiliary type <pre><code>TopicUnsubReply : Type := Result TopicUnsubReplyOk TopicUnsubReplyError;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","message-types"]},{"location":"arch/node/engines/pub_sub_topic_messages.html#topicunsubreplyok","title":"<code>TopicUnsubReplyOk</code>","text":"<pre><code>type TopicUnsubReplyOk :=\n  | TopicUnsubReplyOkSuccess\n  ;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","message-types"]},{"location":"arch/node/engines/pub_sub_topic_messages.html#topicunsubreplyerror","title":"<code>TopicUnsubReplyError</code>","text":"<p>Unsubscription failed.</p> <pre><code>type TopicUnsubReplyError :=\n  | TopicUnsubReplyErrorNotSubscribed\n  ;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","message-types"]},{"location":"arch/node/engines/pub_sub_topic_messages.html#pubsubtopicmsg","title":"<code>PubSubTopicMsg</code>","text":"<p>All pub/sub topic  messages.</p> <pre><code>type PubSubTopicMsg :=\n  | Forward TopicMsg\n  | SubRequest TopicSubRequest\n  | SubReply TopicSubReply\n  | UnsubRequest TopicUnsubRequest\n  | UnsubReply TopicUnsubReply\n  ;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","message-types"]},{"location":"arch/node/engines/pub_sub_topic_messages.html#engine-components","title":"Engine components","text":"<ul> <li>Pub/Sub Topic Configuration</li> <li>Pub/Sub Topic Environment</li> <li>Pub/Sub Topic Behaviour</li> </ul>","tags":["node-architecture","network-subsystem","engine","pub-sub-topic","message-types"]},{"location":"arch/node/engines/reads_for.html","title":"ReadsFor Engine","text":"Juvix imports <pre><code>module arch.node.engines.reads_for;\n\nimport prelude open;\nimport arch.node.types.engine open;\n\nimport arch.node.engines.reads_for_messages open public;\nimport arch.node.engines.reads_for_environment open public;\nimport arch.node.engines.reads_for_behaviour open public;\n\nimport arch.node.engines.reads_for_config open public;\nimport arch.node.engines.reads_for_messages open public;\nimport arch.node.engines.reads_for_environment open public;\nimport arch.node.engines.reads_for_behaviour open public;\n\nimport arch.node.types.anoma as Anoma open;\n\nopen reads_for_config_example;\nopen reads_for_environment_example;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","readsfor","engine-definition"]},{"location":"arch/node/engines/reads_for.html#readfor-engine","title":"ReadFor Engine","text":"<p>The ReadFor Engine manages <code>reads_for</code> relationships between identities. A <code>reads_for</code> relationship indicates that one identity can read data encrypted for another identity.</p>","tags":["node-architecture","identity-subsystem","engine","readsfor","engine-definition"]},{"location":"arch/node/engines/reads_for.html#purpose","title":"Purpose","text":"<p>The ReadFor Engine maintains and manages the state of <code>reads_for</code> relationships between identities. It handles queries about these relationships, allows submission of new evidence, and provides information about existing relationships. This is useful in scenarios where data access needs to be delegated or shared.</p>","tags":["node-architecture","identity-subsystem","engine","readsfor","engine-definition"]},{"location":"arch/node/engines/reads_for.html#engine-components","title":"Engine components","text":"<ul> <li>ReadFor Messages</li> <li>ReadFor Configuration</li> <li>ReadFor Environment</li> <li>ReadFor Behaviour</li> </ul>","tags":["node-architecture","identity-subsystem","engine","readsfor","engine-definition"]},{"location":"arch/node/engines/reads_for.html#type","title":"Type","text":"<pre><code>ReadsForEngine : Type :=\n  Engine\n    ReadsForCfg\n    ReadsForLocalState\n    ReadsForMailboxState\n    ReadsForTimerHandle\n    ReadsForActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","readsfor","engine-definition"]},{"location":"arch/node/engines/reads_for.html#example-of-a-reads-for-engine","title":"Example of a reads for engine","text":"<pre><code>exampleReadsForEngine : ReadsForEngine :=\n  Engine.mk@{\n    cfg := readsForCfg;\n    env := readsForEnv;\n    behaviour := readsForBehaviour;\n  };\n</code></pre> <p>where <code>readsForCfg</code> is defined as follows:</p> <p>```juvix extract-module-statements module reads_for_config_example;</p> <p>readsForCfg : EngineCfg ReadsForCfg :=     EngineCfg.mk@{       node := PublicKey.Curve25519PubKey \"0xabcd1234\";       name := \"reads for\";       cfg := ReadsForCfg.mk     }   ; end; <pre><code>`readsForEnv` is defined as follows:\n\n```juvix extract-module-statements\nmodule reads_for_environment_example;\n\nreadsForEnv : ReadsForEnv :=\n    EngineEnv.mk@{\n      localState := ReadsForLocalState.mk@{\n        evidenceStore := Set.empty;\n      };\n      mailboxCluster := Map.empty;\n      acquaintances := Set.empty;\n      timers := []\n    }\n  ;\nend;\n</code></pre></p> <p>and <code>readsForBehaviour</code> is defined as follows:</p> <pre><code>readsForBehaviour : ReadsForBehaviour :=\n  EngineBehaviour.mk@{\n    guards :=\n      GuardEval.First [\n        readsForQueryGuard;\n        submitEvidenceGuard;\n        queryEvidenceGuard\n      ];\n  };\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","readsfor","engine-definition"]},{"location":"arch/node/engines/reads_for_behaviour.html","title":"ReadsFor Behaviour","text":"Juvix imports <pre><code>module arch.node.engines.reads_for_behaviour;\n\nimport prelude open;\nimport Stdlib.Data.Set as Set;\nimport arch.node.types.messages open;\nimport arch.node.types.engine open;\nimport arch.node.types.identities open;\nimport arch.node.engines.reads_for_messages open;\nimport arch.node.engines.reads_for_config open;\nimport arch.node.engines.reads_for_environment open;\nimport arch.node.types.anoma as Anoma open;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","readsfor","behaviour"]},{"location":"arch/node/engines/reads_for_behaviour.html#readfor-behaviour","title":"ReadFor Behaviour","text":"","tags":["node-architecture","identity-subsystem","engine","readsfor","behaviour"]},{"location":"arch/node/engines/reads_for_behaviour.html#overview","title":"Overview","text":"<p>The behavior of the ReadFor Engine defines how it processes incoming messages and updates its state accordingly.</p>","tags":["node-architecture","identity-subsystem","engine","readsfor","behaviour"]},{"location":"arch/node/engines/reads_for_behaviour.html#action-arguments","title":"Action arguments","text":"","tags":["node-architecture","identity-subsystem","engine","readsfor","behaviour"]},{"location":"arch/node/engines/reads_for_behaviour.html#readsforactionargumentreplyto-replyto","title":"<code>ReadsForActionArgumentReplyTo ReplyTo</code>","text":"<pre><code>type ReplyTo := mkReplyTo@{\n  whoAsked : Option EngineID;\n  mailbox : Option MailboxID\n};\n</code></pre> <p>This action argument contains the address and mailbox ID of where the response message should be sent.</p> Argument description   <code>whoAsked</code>: is the address of the engine that sent the message. <code>mailbox</code>: is the mailbox ID where the response should be sent.","tags":["node-architecture","identity-subsystem","engine","readsfor","behaviour"]},{"location":"arch/node/engines/reads_for_behaviour.html#readsforactionargument","title":"<code>ReadsForActionArgument</code>","text":"<pre><code>type ReadsForActionArgument :=\n  | ReadsForActionArgumentReplyTo ReplyTo\n  ;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","readsfor","behaviour"]},{"location":"arch/node/engines/reads_for_behaviour.html#readsforactionarguments","title":"<code>ReadsForActionArguments</code>","text":"<pre><code>ReadsForActionArguments : Type := List ReadsForActionArgument;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","readsfor","behaviour"]},{"location":"arch/node/engines/reads_for_behaviour.html#actions","title":"Actions","text":"Auxiliary Juvix code","tags":["node-architecture","identity-subsystem","engine","readsfor","behaviour"]},{"location":"arch/node/engines/reads_for_behaviour.html#readsforaction","title":"ReadsForAction","text":"<pre><code>ReadsForAction : Type :=\n  Action\n    ReadsForCfg\n    ReadsForLocalState\n    ReadsForMailboxState\n    ReadsForTimerHandle\n    ReadsForActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","readsfor","behaviour"]},{"location":"arch/node/engines/reads_for_behaviour.html#readsforactioninput","title":"ReadsForActionInput","text":"<pre><code>ReadsForActionInput : Type :=\n  ActionInput\n    ReadsForCfg\n    ReadsForLocalState\n    ReadsForMailboxState\n    ReadsForTimerHandle\n    ReadsForActionArguments\n    Anoma.Msg;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","readsfor","behaviour"]},{"location":"arch/node/engines/reads_for_behaviour.html#readsforactioneffect","title":"ReadsForActionEffect","text":"<pre><code>ReadsForActionEffect : Type :=\n  ActionEffect\n    ReadsForLocalState\n    ReadsForMailboxState\n    ReadsForTimerHandle\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","readsfor","behaviour"]},{"location":"arch/node/engines/reads_for_behaviour.html#readsforactionexec","title":"ReadsForActionExec","text":"<pre><code>ReadsForActionExec : Type :=\n  ActionExec\n    ReadsForCfg\n    ReadsForLocalState\n    ReadsForMailboxState\n    ReadsForTimerHandle\n    ReadsForActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","readsfor","behaviour"]},{"location":"arch/node/engines/reads_for_behaviour.html#readsforqueryaction","title":"<code>readsForQueryAction</code>","text":"<p>Process a reads for query and respond with whether the relationship exists.</p> State update The state remains unchanged. Messages to be sent A <code>ReplyReadsFor</code> message is sent back to the requester. Engines to be spawned No engine is created by this action. Timer updates No timers are set or cancelled. <pre><code>readsForQueryAction\n  (input : ReadsForActionInput)\n  : Option ReadsForActionEffect :=\n  let\n    env := ActionInput.env input;\n    tt := ActionInput.trigger input;\n    cfg := ActionInput.cfg input;\n    localState := EngineEnv.localState env\n  in\n    case getEngineMsgFromTimestampedTrigger tt of {\n    | some emsg :=\n      case emsg of {\n      | EngineMsg.mk@{msg := Anoma.PreMsg.MsgReadsFor (ReadsForMsg.Request (RequestReadsFor.mkRequestReadsFor identityA identityB))} :=\n        let\n          hasEvidence := isElement \\{a b := a &amp;&amp; b} true (map \\{ evidence :=\n              isEqual (Ord.compare (ReadsForEvidence.fromIdentity evidence) identityA) &amp;&amp;\n              isEqual (Ord.compare (ReadsForEvidence.toIdentity evidence) identityB)\n            } (Set.toList (ReadsForLocalState.evidenceStore localState)));\n          responseMsg := ReplyReadsFor.mkReplyReadsFor@{\n            readsFor := hasEvidence;\n            err := none\n          }\n        in some ActionEffect.mk@{\n          env := env;\n          msgs := [EngineMsg.mk@{\n            sender := getEngineIDFromEngineCfg cfg;\n            target := EngineMsg.sender emsg;\n            mailbox := some 0;\n            msg := Anoma.PreMsg.MsgReadsFor (ReadsForMsg.Reply responseMsg)\n          }];\n          timers := [];\n          engines := []\n        }\n      | _ := none\n      }\n    | _ := none\n    }\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","readsfor","behaviour"]},{"location":"arch/node/engines/reads_for_behaviour.html#submitevidenceaction","title":"<code>submitEvidenceAction</code>","text":"<p>Process submission of new reads for evidence.</p> State update If the evidence is valid and doesn't exist, it's added to the evidence store. Messages to be sent A <code>ReplySubmitReadsForEvidence</code> message is sent back to the requester. Engines to be spawned No engine is created by this action. Timer updates No timers are set or cancelled. <pre><code>submitEvidenceAction\n  (input : ReadsForActionInput)\n  : Option ReadsForActionEffect :=\n  let\n    env := ActionInput.env input;\n    tt := ActionInput.trigger input;\n    cfg := ActionInput.cfg input;\n    localState := EngineEnv.localState env\n  in\n    case getEngineMsgFromTimestampedTrigger tt of {\n    | some emsg :=\n      case emsg of {\n      | EngineMsg.mk@{msg := Anoma.PreMsg.MsgReadsFor (ReadsForMsg.SubmitReadsForEvidenceRequest (RequestSubmitReadsForEvidence.mkRequestSubmitReadsForEvidence evidence))} :=\n        case verifyEvidence evidence of {\n        | true :=\n          case isElement \\{a b := a &amp;&amp; b} true (map \\{e := isEqual (Ord.compare e evidence)} (Set.toList (ReadsForLocalState.evidenceStore localState))) of {\n          | true :=\n            some ActionEffect.mk@{\n              env := env;\n              msgs := [EngineMsg.mk@{\n                sender := getEngineIDFromEngineCfg cfg;\n                target := EngineMsg.sender emsg;\n                mailbox := some 0;\n                msg := Anoma.PreMsg.MsgReadsFor (ReadsForMsg.SubmitReadsForEvidenceReply (ReplySubmitReadsForEvidence.mkReplySubmitReadsForEvidence (some \"Evidence already exists.\")))\n              }];\n              timers := [];\n              engines := []\n            }\n          | false :=\n            let\n              newEvidenceStore := Set.insert evidence (ReadsForLocalState.evidenceStore localState);\n              updatedLocalState := localState@ReadsForLocalState{evidenceStore := newEvidenceStore};\n              newEnv := env@EngineEnv{localState := updatedLocalState}\n            in some ActionEffect.mk@{\n              env := newEnv;\n              msgs := [EngineMsg.mk@{\n                sender := getEngineIDFromEngineCfg cfg;\n                target := EngineMsg.sender emsg;\n                mailbox := some 0;\n                msg := Anoma.PreMsg.MsgReadsFor (ReadsForMsg.SubmitReadsForEvidenceReply (ReplySubmitReadsForEvidence.mkReplySubmitReadsForEvidence none))\n              }];\n              timers := [];\n              engines := []\n            }\n          }\n        | false :=\n          some ActionEffect.mk@{\n            env := env;\n            msgs := [EngineMsg.mk@{\n              sender := getEngineIDFromEngineCfg cfg;\n              target := EngineMsg.sender emsg;\n              mailbox := some 0;\n              msg := Anoma.PreMsg.MsgReadsFor (ReadsForMsg.SubmitReadsForEvidenceReply (ReplySubmitReadsForEvidence.mkReplySubmitReadsForEvidence (some \"Invalid evidence provided.\")))\n            }];\n            timers := [];\n            engines := []\n          }\n        }\n      | _ := none\n      }\n    | _ := none\n    }\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","readsfor","behaviour"]},{"location":"arch/node/engines/reads_for_behaviour.html#queryevidenceaction","title":"<code>queryEvidenceAction</code>","text":"<p>Query all evidence related to a specific identity.</p> State update The state remains unchanged. Messages to be sent A <code>ReplyQueryReadsForEvidence</code> message is sent back to the requester. Engines to be spawned No engine is created by this action. Timer updates No timers are set or cancelled. <pre><code>queryEvidenceAction\n  (input : ReadsForActionInput)\n  : Option ReadsForActionEffect :=\n  let\n    env := ActionInput.env input;\n    tt := ActionInput.trigger input;\n    cfg := ActionInput.cfg input;\n    localState := EngineEnv.localState env\n  in\n    case getEngineMsgFromTimestampedTrigger tt of {\n    | some emsg :=\n      case emsg of {\n      | EngineMsg.mk@{msg := Anoma.PreMsg.MsgReadsFor (ReadsForMsg.QueryReadsForEvidenceRequest (RequestQueryReadsForEvidence.mkRequestQueryReadsForEvidence identity))} :=\n        let\n          relevantEvidence := Set.filter \\{evidence :=\n              isEqual (Ord.compare (ReadsForEvidence.fromIdentity evidence) identity) ||\n              isEqual (Ord.compare (ReadsForEvidence.toIdentity evidence) identity)\n            } (ReadsForLocalState.evidenceStore localState);\n          responseMsg := ReplyQueryReadsForEvidence.mkReplyQueryReadsForEvidence@{\n              externalIdentity := identity;\n              evidence := relevantEvidence;\n              err := none\n            }\n        in some ActionEffect.mk@{\n          env := env;\n          msgs := [EngineMsg.mk@{\n            sender := getEngineIDFromEngineCfg cfg;\n            target := EngineMsg.sender emsg;\n            mailbox := some 0;\n            msg := Anoma.PreMsg.MsgReadsFor (ReadsForMsg.QueryReadsForEvidenceReply responseMsg)\n          }];\n          timers := [];\n          engines := []\n        }\n      | _ := none\n      }\n    | _ := none\n    }\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","readsfor","behaviour"]},{"location":"arch/node/engines/reads_for_behaviour.html#action-labels","title":"Action Labels","text":"","tags":["node-architecture","identity-subsystem","engine","readsfor","behaviour"]},{"location":"arch/node/engines/reads_for_behaviour.html#readsforqueryactionlabel","title":"<code>readsForQueryActionLabel</code>","text":"<pre><code>readsForQueryActionLabel : ReadsForActionExec := ActionExec.Seq [ readsForQueryAction ];\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","readsfor","behaviour"]},{"location":"arch/node/engines/reads_for_behaviour.html#submitevidenceactionlabel","title":"<code>submitEvidenceActionLabel</code>","text":"<pre><code>submitEvidenceActionLabel : ReadsForActionExec := ActionExec.Seq [ submitEvidenceAction ];\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","readsfor","behaviour"]},{"location":"arch/node/engines/reads_for_behaviour.html#queryevidenceactionlabel","title":"<code>queryEvidenceActionLabel</code>","text":"<pre><code>queryEvidenceActionLabel : ReadsForActionExec := ActionExec.Seq [ queryEvidenceAction ];\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","readsfor","behaviour"]},{"location":"arch/node/engines/reads_for_behaviour.html#guards","title":"Guards","text":"Auxiliary Juvix code","tags":["node-architecture","identity-subsystem","engine","readsfor","behaviour"]},{"location":"arch/node/engines/reads_for_behaviour.html#readsforguard","title":"<code>ReadsForGuard</code>","text":"<p> <pre><code>ReadsForGuard : Type :=\n  Guard\n    ReadsForCfg\n    ReadsForLocalState\n    ReadsForMailboxState\n    ReadsForTimerHandle\n    ReadsForActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","identity-subsystem","engine","readsfor","behaviour"]},{"location":"arch/node/engines/reads_for_behaviour.html#readsforguardoutput","title":"<code>ReadsForGuardOutput</code>","text":"<p> <pre><code>ReadsForGuardOutput : Type :=\n  GuardOutput\n    ReadsForCfg\n    ReadsForLocalState\n    ReadsForMailboxState\n    ReadsForTimerHandle\n    ReadsForActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","identity-subsystem","engine","readsfor","behaviour"]},{"location":"arch/node/engines/reads_for_behaviour.html#readsforguardeval","title":"<code>ReadsForGuardEval</code>","text":"<p> <pre><code>ReadsForGuardEval : Type :=\n  GuardEval\n    ReadsForCfg\n    ReadsForLocalState\n    ReadsForMailboxState\n    ReadsForTimerHandle\n    ReadsForActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","identity-subsystem","engine","readsfor","behaviour"]},{"location":"arch/node/engines/reads_for_behaviour.html#readsforqueryguard","title":"<code>readsForQueryGuard</code>","text":"Condition Message type is <code>MsgReadsForRequest</code>. <pre><code>readsForQueryGuard\n  (tt : TimestampedTrigger ReadsForTimerHandle Anoma.Msg)\n  (cfg : EngineCfg ReadsForCfg)\n  (env : ReadsForEnv)\n  : Option ReadsForGuardOutput :=\n  case getEngineMsgFromTimestampedTrigger tt of {\n    | some EngineMsg.mk@{msg := Anoma.PreMsg.MsgReadsFor (ReadsForMsg.Request _)} :=\n      some GuardOutput.mk@{\n        action := readsForQueryActionLabel;\n        args := []\n      }\n    | _ := none\n  }\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","readsfor","behaviour"]},{"location":"arch/node/engines/reads_for_behaviour.html#submitevidenceguard","title":"<code>submitEvidenceGuard</code>","text":"Condition Message type is <code>MsgSubmitReadsForEvidenceRequest</code>. <pre><code>submitEvidenceGuard\n  (tt : TimestampedTrigger ReadsForTimerHandle Anoma.Msg)\n  (cfg : EngineCfg ReadsForCfg)\n  (env : ReadsForEnv)\n  : Option ReadsForGuardOutput :=\n  case getEngineMsgFromTimestampedTrigger tt of {\n    | some EngineMsg.mk@{msg := Anoma.PreMsg.MsgReadsFor (ReadsForMsg.SubmitReadsForEvidenceRequest _)} :=\n      some GuardOutput.mk@{\n        action := submitEvidenceActionLabel;\n        args := []\n      }\n    | _ := none\n  }\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","readsfor","behaviour"]},{"location":"arch/node/engines/reads_for_behaviour.html#queryevidenceguard","title":"<code>queryEvidenceGuard</code>","text":"Condition Message type is <code>MsgQueryReadsForEvidenceRequest</code>. <pre><code>queryEvidenceGuard\n  (tt : TimestampedTrigger ReadsForTimerHandle Anoma.Msg)\n  (cfg : EngineCfg ReadsForCfg)\n  (env : ReadsForEnv)\n  : Option ReadsForGuardOutput :=\n  case getEngineMsgFromTimestampedTrigger tt of {\n    | some EngineMsg.mk@{msg := Anoma.PreMsg.MsgReadsFor (ReadsForMsg.QueryReadsForEvidenceRequest _)} :=\n      some GuardOutput.mk@{\n        action := queryEvidenceActionLabel;\n        args := []\n      }\n    | _ := none\n  }\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","readsfor","behaviour"]},{"location":"arch/node/engines/reads_for_behaviour.html#the-readfor-behaviour","title":"The ReadFor Behaviour","text":"","tags":["node-architecture","identity-subsystem","engine","readsfor","behaviour"]},{"location":"arch/node/engines/reads_for_behaviour.html#readsforbehaviour","title":"<code>ReadsForBehaviour</code>","text":"<pre><code>ReadsForBehaviour : Type :=\n  EngineBehaviour\n    ReadsForCfg\n    ReadsForLocalState\n    ReadsForMailboxState\n    ReadsForTimerHandle\n    ReadsForActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","readsfor","behaviour"]},{"location":"arch/node/engines/reads_for_behaviour.html#instantiation","title":"Instantiation","text":"<pre><code>readsForBehaviour : ReadsForBehaviour :=\n  EngineBehaviour.mk@{\n    guards :=\n      GuardEval.First [\n        readsForQueryGuard;\n        submitEvidenceGuard;\n        queryEvidenceGuard\n      ];\n  };\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","readsfor","behaviour"]},{"location":"arch/node/engines/reads_for_behaviour.html#readfor-action-flowcharts","title":"ReadFor Action Flowcharts","text":"","tags":["node-architecture","identity-subsystem","engine","readsfor","behaviour"]},{"location":"arch/node/engines/reads_for_behaviour.html#readsforqueryaction-flowchart","title":"<code>readsForQueryAction</code> flowchart","text":"<pre><code>flowchart TD\n  subgraph C[Conditions]\n    CMsg&gt;MsgReadsForRequest]\n  end\n\n  G(readsForQueryGuard)\n  A(readsForQueryAction)\n\n  C --&gt; G -- *readsForQueryActionLabel* --&gt; A --&gt; E\n\n  subgraph E[Effects]\n    EMsg&gt;ReplyReadsFor&lt;br/&gt;readsFor]\n  end</code></pre> <code>readsForQueryAction</code> flowchart","tags":["node-architecture","identity-subsystem","engine","readsfor","behaviour"]},{"location":"arch/node/engines/reads_for_behaviour.html#submitevidenceaction-flowchart","title":"<code>submitEvidenceAction</code> flowchart","text":"<pre><code>flowchart TD\n  subgraph C[Conditions]\n    CMsg&gt;MsgSubmitReadsForEvidenceRequest]\n  end\n\n  G(submitEvidenceGuard)\n  A(submitEvidenceAction)\n\n  C --&gt; G -- *submitEvidenceActionLabel* --&gt; A --&gt; E\n\n  subgraph E[Effects]\n    EEnv[(evidenceStore update)]\n    EMsg&gt;ReplySubmitReadsForEvidence&lt;br/&gt;error]\n  end</code></pre> <code>submitEvidenceAction</code> flowchart","tags":["node-architecture","identity-subsystem","engine","readsfor","behaviour"]},{"location":"arch/node/engines/reads_for_behaviour.html#queryevidenceaction-flowchart","title":"<code>queryEvidenceAction</code> flowchart","text":"<pre><code>flowchart TD\n  subgraph C[Conditions]\n    CMsg&gt;MsgQueryReadsForEvidenceRequest]\n  end\n\n  G(queryEvidenceGuard)\n  A(queryEvidenceAction)\n\n  C --&gt; G -- *queryEvidenceActionLabel* --&gt; A --&gt; E\n\n  subgraph E[Effects]\n    EMsg&gt;ReplyQueryReadsForEvidence&lt;br/&gt;evidence list]\n  end</code></pre> <code>queryEvidenceAction</code> flowchart","tags":["node-architecture","identity-subsystem","engine","readsfor","behaviour"]},{"location":"arch/node/engines/reads_for_config.html","title":"ReadsFor Configuration","text":"Juvix imports <pre><code>module arch.node.engines.reads_for_config;\n\nimport prelude open;\nimport arch.node.engines.reads_for_messages open;\nimport arch.node.types.engine open;\nimport arch.node.types.messages open;\nimport arch.node.types.identities open;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","readsfor","configuration"]},{"location":"arch/node/engines/reads_for_config.html#readfor-configuration","title":"ReadFor Configuration","text":"","tags":["node-architecture","identity-subsystem","engine","readsfor","configuration"]},{"location":"arch/node/engines/reads_for_config.html#overview","title":"Overview","text":"<p>The ReadFor engine configuration contains static information for ReadFor engine instances.</p>","tags":["node-architecture","identity-subsystem","engine","readsfor","configuration"]},{"location":"arch/node/engines/reads_for_config.html#the-readfor-configuration","title":"The ReadFor Configuration","text":"","tags":["node-architecture","identity-subsystem","engine","readsfor","configuration"]},{"location":"arch/node/engines/reads_for_config.html#readsforcfg","title":"<code>ReadsForCfg</code>","text":"<pre><code>type ReadsForCfg := mk\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","readsfor","configuration"]},{"location":"arch/node/engines/reads_for_config.html#instantiation","title":"Instantiation","text":"<p>```juvix extract-module-statements module reads_for_config_example;</p> <p>readsForCfg : EngineCfg ReadsForCfg :=     EngineCfg.mk@{       node := PublicKey.Curve25519PubKey \"0xabcd1234\";       name := \"reads for\";       cfg := ReadsForCfg.mk     }   ; end; ```</p>","tags":["node-architecture","identity-subsystem","engine","readsfor","configuration"]},{"location":"arch/node/engines/reads_for_environment.html","title":"ReadsFor Environment","text":"Juvix imports <pre><code>module arch.node.engines.reads_for_environment;\n\nimport prelude open;\nimport arch.node.types.engine_environment open;\nimport arch.node.types.identities open;\nimport arch.node.engines.reads_for_messages open;\nimport arch.node.types.anoma_message as Anoma open;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","readsfor","environment"]},{"location":"arch/node/engines/reads_for_environment.html#readfor-environment","title":"ReadFor Environment","text":"","tags":["node-architecture","identity-subsystem","engine","readsfor","environment"]},{"location":"arch/node/engines/reads_for_environment.html#overview","title":"Overview","text":"<p>The ReadFor Engine environment maintains the state necessary for managing <code>reads_for</code> relationships between identities, including storing evidence submitted by clients.</p> Auxiliary Juvix code <pre><code>axiom verifyEvidence : ReadsForEvidence -&gt; Bool;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","readsfor","environment"]},{"location":"arch/node/engines/reads_for_environment.html#mailbox-states","title":"Mailbox states","text":"<p>The ReadFor Engine does not require complex mailbox states. We define the mailbox state as <code>Unit</code>.</p>","tags":["node-architecture","identity-subsystem","engine","readsfor","environment"]},{"location":"arch/node/engines/reads_for_environment.html#readsformailboxstate","title":"<code>ReadsForMailboxState</code>","text":"<pre><code>syntax alias ReadsForMailboxState := Unit;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","readsfor","environment"]},{"location":"arch/node/engines/reads_for_environment.html#local-state","title":"Local state","text":"<p>The local state of the ReadFor Engine includes the evidence for reads_for relationships.</p>","tags":["node-architecture","identity-subsystem","engine","readsfor","environment"]},{"location":"arch/node/engines/reads_for_environment.html#readsforlocalstate","title":"<code>ReadsForLocalState</code>","text":"<pre><code>type ReadsForLocalState := mk@{\n  evidenceStore : Set ReadsForEvidence;\n};\n</code></pre> Arguments <code>evidenceStore</code>: The collection of validated <code>ReadsForEvidence</code> which has been submitted to the engine.","tags":["node-architecture","identity-subsystem","engine","readsfor","environment"]},{"location":"arch/node/engines/reads_for_environment.html#timer-handle","title":"Timer Handle","text":"<p>The ReadFor Engine does not require a timer handle type. Therefore, we define the timer handle type as <code>Unit</code>.</p>","tags":["node-architecture","identity-subsystem","engine","readsfor","environment"]},{"location":"arch/node/engines/reads_for_environment.html#readsfortimerhandle","title":"<code>ReadsForTimerHandle</code>","text":"<pre><code>syntax alias ReadsForTimerHandle := Unit;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","readsfor","environment"]},{"location":"arch/node/engines/reads_for_environment.html#the-readfor-environment","title":"The ReadFor Environment","text":"","tags":["node-architecture","identity-subsystem","engine","readsfor","environment"]},{"location":"arch/node/engines/reads_for_environment.html#readsforenv","title":"<code>ReadsForEnv</code>","text":"<pre><code>ReadsForEnv : Type :=\n  EngineEnv\n    ReadsForLocalState\n    ReadsForMailboxState\n    ReadsForTimerHandle\n    Anoma.Msg;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","readsfor","environment"]},{"location":"arch/node/engines/reads_for_environment.html#instantiation","title":"Instantiation","text":"<p>```juvix extract-module-statements module reads_for_environment_example;</p> <p>readsForEnv : ReadsForEnv :=     EngineEnv.mk@{       localState := ReadsForLocalState.mk@{         evidenceStore := Set.empty;       };       mailboxCluster := Map.empty;       acquaintances := Set.empty;       timers := []     }   ; end; ```</p>","tags":["node-architecture","identity-subsystem","engine","readsfor","environment"]},{"location":"arch/node/engines/reads_for_messages.html","title":"ReadsFor Messages","text":"Juvix imports <pre><code>module arch.node.engines.reads_for_messages;\nimport prelude open;\nimport arch.node.types.identities open;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","readsfor","message-types"]},{"location":"arch/node/engines/reads_for_messages.html#readsfor-messages","title":"ReadsFor Messages","text":"","tags":["node-architecture","identity-subsystem","engine","readsfor","message-types"]},{"location":"arch/node/engines/reads_for_messages.html#message-interface","title":"Message interface","text":"<pre><code>type ReadsForMsg :=\n  | Request RequestReadsFor\n  | Reply ReplyReadsFor\n  | SubmitReadsForEvidenceRequest RequestSubmitReadsForEvidence\n  | SubmitReadsForEvidenceReply ReplySubmitReadsForEvidence\n  | QueryReadsForEvidenceRequest RequestQueryReadsForEvidence\n  | QueryReadsForEvidenceReply ReplyQueryReadsForEvidence\n  ;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","readsfor","message-types"]},{"location":"arch/node/engines/reads_for_messages.html#message-sequence-diagrams","title":"Message sequence diagrams","text":"","tags":["node-architecture","identity-subsystem","engine","readsfor","message-types"]},{"location":"arch/node/engines/reads_for_messages.html#submitting-reads_for-evidence","title":"Submitting <code>reads_for</code> evidence","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant ReadsForEngine\n\n    Client-&gt;&gt;ReadsForEngine: RequestSubmitReadsForEvidence\n    Note over ReadsForEngine: Verify and store evidence\n    ReadsForEngine-&gt;&gt;Client: ReplySubmitReadsForEvidence</code></pre>  Submitting <code>reads_for</code> evidence","tags":["node-architecture","identity-subsystem","engine","readsfor","message-types"]},{"location":"arch/node/engines/reads_for_messages.html#querying-a-reads_for-relationship","title":"Querying a <code>reads_for</code> relationship","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant ReadsForEngine\n\n    Client-&gt;&gt;ReadsForEngine: RequestReadsFor (A reads for B?)\n    Note over ReadsForEngine: Check stored evidence\n    ReadsForEngine-&gt;&gt;Client: ReplyReadsFor</code></pre>  Querying a reads_for relationship","tags":["node-architecture","identity-subsystem","engine","readsfor","message-types"]},{"location":"arch/node/engines/reads_for_messages.html#querying-reads_for-evidence","title":"Querying <code>reads_for</code> evidence","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant ReadsForEngine\n\n    Client-&gt;&gt;ReadsForEngine: RequestQueryReadsForEvidence (for X)\n    Note over ReadsForEngine: Retrieve relevant evidence\n    ReadsForEngine-&gt;&gt;Client: ReplyQueryReadsForEvidence</code></pre>  Querying reads_for evidence for an identity","tags":["node-architecture","identity-subsystem","engine","readsfor","message-types"]},{"location":"arch/node/engines/reads_for_messages.html#message-types","title":"Message types","text":"","tags":["node-architecture","identity-subsystem","engine","readsfor","message-types"]},{"location":"arch/node/engines/reads_for_messages.html#requestreadsfor","title":"<code>RequestReadsFor</code>","text":"<pre><code>type RequestReadsFor := mkRequestReadsFor@{\n  externalIdentityA : ExternalIdentity;\n  externalIdentityB : ExternalIdentity\n};\n</code></pre> <p>A request to query whether <code>externalIdentityA</code> can read data encrypted to <code>externalIdentityB</code>.</p> Arguments <code>externalIdentityA</code>: The identity doing the reading. <code>externalIdentityB</code>: The identity being read for.","tags":["node-architecture","identity-subsystem","engine","readsfor","message-types"]},{"location":"arch/node/engines/reads_for_messages.html#replyreadsfor","title":"<code>ReplyReadsFor</code>","text":"<pre><code>type ReplyReadsFor := mkReplyReadsFor@{\n  readsFor : Bool;\n  err : Option String\n};\n</code></pre> <p>Reply indicating whether the <code>reads_for</code> relationship exists.</p> Arguments <code>readsFor</code>: True if <code>externalIdentityA</code> can read for <code>externalIdentityB</code>, False otherwise. <code>err</code>: An error message if the query failed.","tags":["node-architecture","identity-subsystem","engine","readsfor","message-types"]},{"location":"arch/node/engines/reads_for_messages.html#requestsubmitreadsforevidence","title":"<code>RequestSubmitReadsForEvidence</code>","text":"<pre><code>type RequestSubmitReadsForEvidence := mkRequestSubmitReadsForEvidence@{\n  evidence : ReadsForEvidence\n};\n</code></pre> <p>Request to submit evidence of a <code>reads_for</code> relationship.</p> Arguments <code>evidence</code>: The evidence supporting the <code>reads_for</code> relationship.","tags":["node-architecture","identity-subsystem","engine","readsfor","message-types"]},{"location":"arch/node/engines/reads_for_messages.html#replysubmitreadsforevidence","title":"<code>ReplySubmitReadsForEvidence</code>","text":"<pre><code>type ReplySubmitReadsForEvidence := mkReplySubmitReadsForEvidence@{\n  err : Option String\n};\n</code></pre> <p>Reply acknowledging the submission of evidence.</p> Arguments <code>err</code>: An error message if the submission failed.","tags":["node-architecture","identity-subsystem","engine","readsfor","message-types"]},{"location":"arch/node/engines/reads_for_messages.html#requestqueryreadsforevidence","title":"<code>RequestQueryReadsForEvidence</code>","text":"<pre><code>type RequestQueryReadsForEvidence := mkRequestQueryReadsForEvidence@{\n  externalIdentity : ExternalIdentity\n};\n</code></pre> <p>Request to query all <code>reads_for</code> evidence related to an identity.</p> Arguments <code>externalIdentity</code>: The identity for which to retrieve evidence.","tags":["node-architecture","identity-subsystem","engine","readsfor","message-types"]},{"location":"arch/node/engines/reads_for_messages.html#replyqueryreadsforevidence","title":"<code>ReplyQueryReadsForEvidence</code>","text":"<pre><code>type ReplyQueryReadsForEvidence := mkReplyQueryReadsForEvidence@{\n  externalIdentity : ExternalIdentity;\n  evidence : Set ReadsForEvidence;\n  err : Option String\n};\n</code></pre> <p>Reply providing the requested evidence.</p> Arguments <code>externalIdentity</code>: The identity for which evidence was requested. <code>evidence</code>: A set of <code>ReadsForEvidence</code> related to the identity. <code>err</code>: An error message if the query failed.","tags":["node-architecture","identity-subsystem","engine","readsfor","message-types"]},{"location":"arch/node/engines/reads_for_messages.html#readsformsg","title":"<code>ReadsForMsg</code>","text":"<pre><code>type ReadsForMsg :=\n  | Request RequestReadsFor\n  | Reply ReplyReadsFor\n  | SubmitReadsForEvidenceRequest RequestSubmitReadsForEvidence\n  | SubmitReadsForEvidenceReply ReplySubmitReadsForEvidence\n  | QueryReadsForEvidenceRequest RequestQueryReadsForEvidence\n  | QueryReadsForEvidenceReply ReplyQueryReadsForEvidence\n  ;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","readsfor","message-types"]},{"location":"arch/node/engines/reads_for_messages.html#engine-components","title":"Engine components","text":"<ul> <li>ReadsFor Configuration</li> <li>ReadsFor Environment</li> <li>ReadsFor Behaviour</li> </ul>","tags":["node-architecture","identity-subsystem","engine","readsfor","message-types"]},{"location":"arch/node/engines/router.html","title":"Router Engine","text":"Juvix imports <pre><code>module arch.node.engines.router;\n\nimport arch.node.engines.router_messages open;\nimport arch.node.engines.router_config open;\nimport arch.node.engines.router_environment open;\nimport arch.node.engines.router_behaviour open;\n\nimport arch.node.types.basics open;\nimport arch.node.types.engine open;\nimport arch.node.types.anoma as Anoma open;\n\nopen router_config_example;\nopen router_environment_example;\nopen router_behaviour_example;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","router","engine-definition"]},{"location":"arch/node/engines/router.html#router-engine","title":"Router Engine","text":"","tags":["node-architecture","network-subsystem","engine","router","engine-definition"]},{"location":"arch/node/engines/router.html#purpose","title":"Purpose","text":"<p>The Router engine is responsible for routing messages between local engines and remote nodes.</p>","tags":["node-architecture","network-subsystem","engine","router","engine-definition"]},{"location":"arch/node/engines/router.html#operation","title":"Operation","text":"<p>The Router may operate in different modes depending on requirements and constraints of the implementation:</p> Centralized A single Router engine instance forwards messages to &amp; from local engines.   It may integrate the functionality of Pub/Sub Topic engines as well. Decentralized A separate Router engine instance is spawned for each destination node,   each of which forward messages for a single node only.   The engine instance name is derived from <code>NodeID</code> of the destination,   which allows local engines to forward outgoing messages   via the router engine instance responsible for the destination. <p>Spawning of Router and Pub/Sub Topic engines may be implemented either manually when the first message is sent to the node or when the topic is subscribed, or automatically as soon as a <code>NodeAdvert</code> or <code>TopicAdvert</code> is known for the destination.</p> <p>In the following we assume decentralized operation with automatic spawning for simplicity.</p>","tags":["node-architecture","network-subsystem","engine","router","engine-definition"]},{"location":"arch/node/engines/router.html#engine-components","title":"Engine components","text":"<ul> <li>Router Messages</li> <li>Router Configuration</li> <li>Router Environment</li> <li>Router Behaviour</li> </ul>","tags":["node-architecture","network-subsystem","engine","router","engine-definition"]},{"location":"arch/node/engines/router.html#the-type-for-a-router-engine","title":"The type for a router engine","text":"<pre><code>RouterEngine : Type :=\n  Engine\n    RouterLocalCfg\n    RouterLocalState\n    RouterMailboxState\n    RouterTimerHandle\n    RouterActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","router","engine-definition"]},{"location":"arch/node/engines/router.html#example-of-a-router-engine","title":"Example of a router engine","text":"<pre><code>exRouterEngine : RouterEngine :=\n  Engine.mk@{\n    cfg := exRouterCfg;\n    env := exRouterEnv;\n    behaviour := exRouterBehaviour;\n  };\n</code></pre> <p>Where <code>exRouterCfg</code> is defined as follows:</p> <p>```juvix extract-module-statements module router_config_example;</p> <p>exRouterCfg : RouterCfg :=   EngineCfg.mk@{     node := PublicKey.Curve25519PubKey \"0xabcd1234\";     name := \"router-0xab12cd34\";     cfg := RouterLocalCfg.mk;   };</p> <p>end; <pre><code>[`exRouterEnv`](https://specs.anoma.net/pr-347/arch/node/engines/router_environment.html#exRouterEnv) is defined as follows:\n\n```juvix extract-module-statements\nmodule router_environment_example;\n\nexRouterEnv : RouterEnv :=\n  EngineEnv.mk@{\n    localState := RouterLocalState.mk;\n    mailboxCluster := Map.empty;\n    acquaintances := Set.empty;\n    timers := []\n  };\n\nend;\n</code></pre></p> <p>and <code>exRouterBehaviour</code> is defined as follows:</p> <pre><code>module router_behaviour_example;\n\nexRouterBehaviour : RouterBehaviour :=\n  EngineBehaviour.mk@{\n    guards :=\n      GuardEval.First [\n        exampleReplyGuard;\n      ];\n  };\n\nend;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","router","engine-definition"]},{"location":"arch/node/engines/router_behaviour.html","title":"Router Behaviour","text":"Juvix imports <pre><code>module arch.node.engines.router_behaviour;\n\nimport arch.node.engines.router_messages open;\nimport arch.node.engines.router_config open;\nimport arch.node.engines.router_environment open;\n\nimport arch.node.types.basics open;\nimport arch.node.types.identities open;\nimport arch.node.types.messages open;\nimport arch.node.types.engine open;\nimport arch.node.types.anoma as Anoma open;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","router","behaviour"]},{"location":"arch/node/engines/router_behaviour.html#router-behaviour","title":"Router Behaviour","text":"","tags":["node-architecture","network-subsystem","engine","router","behaviour"]},{"location":"arch/node/engines/router_behaviour.html#overview","title":"Overview","text":"<p>A router engine acts in the ways described on this page. The action labels correspond to the actions that can be performed by the engine. Using the action labels, we describe the effects of the actions.</p>","tags":["node-architecture","network-subsystem","engine","router","behaviour"]},{"location":"arch/node/engines/router_behaviour.html#router-action-flowchart","title":"Router Action Flowchart","text":"","tags":["node-architecture","network-subsystem","engine","router","behaviour"]},{"location":"arch/node/engines/router_behaviour.html#examplereply-flowchart","title":"<code>exampleReply</code> Flowchart","text":"<pre><code>flowchart TD\n  subgraph C[Conditions]\n    CMsg&gt;RouterMsgExampleRequest&lt;br/&gt;from local engine]\n    CEnv[(exampleValue &lt; 10)]\n  end\n\n  G(exampleReplyGuard)\n  A(exampleReplyAction)\n\n  C --&gt; G -- *exampleReplyActionLabel* --&gt; A --&gt; E\n\n  subgraph E[Effects]\n    EEnv[(exampleValue := exampleValue + 1)]\n    EMsg&gt;RouterMsgExampleResponse&lt;br/&gt;argOne]\n  end</code></pre> <code>exampleReply</code> flowchart","tags":["node-architecture","network-subsystem","engine","router","behaviour"]},{"location":"arch/node/engines/router_behaviour.html#action-arguments","title":"Action arguments","text":"<p>The action arguments are set by a guard and passed to the action function as part of the <code>GuardOutput</code>.</p>","tags":["node-architecture","network-subsystem","engine","router","behaviour"]},{"location":"arch/node/engines/router_behaviour.html#routeractionarguments","title":"<code>RouterActionArguments</code>","text":"<pre><code>RouterActionArguments : Type := Unit;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","router","behaviour"]},{"location":"arch/node/engines/router_behaviour.html#actions","title":"Actions","text":"Auxiliary Juvix code","tags":["node-architecture","network-subsystem","engine","router","behaviour"]},{"location":"arch/node/engines/router_behaviour.html#routeraction","title":"<code>RouterAction</code>","text":"<p> <pre><code>RouterAction : Type :=\n  Action\n    RouterLocalCfg\n    RouterLocalState\n    RouterMailboxState\n    RouterTimerHandle\n    RouterActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","network-subsystem","engine","router","behaviour"]},{"location":"arch/node/engines/router_behaviour.html#routeractioninput","title":"<code>RouterActionInput</code>","text":"<p> <pre><code>RouterActionInput : Type :=\n  ActionInput\n    RouterLocalCfg\n    RouterLocalState\n    RouterMailboxState\n    RouterTimerHandle\n    RouterActionArguments\n    Anoma.Msg;\n</code></pre> </p>","tags":["node-architecture","network-subsystem","engine","router","behaviour"]},{"location":"arch/node/engines/router_behaviour.html#routeractioneffect","title":"<code>RouterActionEffect</code>","text":"<p> <pre><code>RouterActionEffect : Type :=\n  ActionEffect\n    RouterLocalState\n    RouterMailboxState\n    RouterTimerHandle\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","network-subsystem","engine","router","behaviour"]},{"location":"arch/node/engines/router_behaviour.html#routeractionexec","title":"<code>RouterActionExec</code>","text":"<p> <pre><code>RouterActionExec : Type :=\n  ActionExec\n    RouterLocalCfg\n    RouterLocalState\n    RouterMailboxState\n    RouterTimerHandle\n    RouterActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","network-subsystem","engine","router","behaviour"]},{"location":"arch/node/engines/router_behaviour.html#examplereplyaction","title":"<code>exampleReplyAction</code>","text":"<p>Respond with a <code>RouterMsgExampleReply</code>.</p> State update The state remains unchanged. Messages to be sent A <code>RouterMsgExampleReply</code> message with the data set by <code>exampleReplyGuard</code>. Engines to be spawned No engine is created by this action. Timer updates No timers are set or cancelled. <pre><code>exampleReplyAction\n  (input : RouterActionInput)\n  : Option RouterActionEffect :=\n  TODO {-\n  let\n    cfg := ActionInput.cfg input;\n    env := ActionInput.env input;\n    trigger := ActionInput.trigger input;\n    args := ActionInput.args input;\n  in\n    case getEngineMsgFromTimestampedTrigger trigger of {\n    | some EngineMsg.mk@{\n        msg := Anoma.PreMsg.MsgRouter (RouterMsgExampleRequest req);\n        sender := sender;\n        target := target;\n        mailbox := mailbox;\n      } :=\n      some ActionEffect.mk@{\n        env := env;\n        msgs := [\n          EngineMsg.mk@{\n            sender := getEngineIDFromEngineCfg cfg;\n            target := sender;\n            mailbox := some 0;\n            msg :=\n              Anoma.PreMsg.MsgRouter\n                (RouterMsgExampleReply\n                  (ok mkExampleReplyOk@{\n                    argOne := ExampleRequest.argOne req;\n                  }));\n          }\n        ];\n        timers := [];\n        eng ines := [];\n      }\n  | _ := none\n  -};\n</code></pre>","tags":["node-architecture","network-subsystem","engine","router","behaviour"]},{"location":"arch/node/engines/router_behaviour.html#action-labels","title":"Action Labels","text":"","tags":["node-architecture","network-subsystem","engine","router","behaviour"]},{"location":"arch/node/engines/router_behaviour.html#examplereplyactionlabel","title":"<code>exampleReplyActionLabel</code>","text":"<pre><code>exampleReplyActionLabel : RouterActionExec := ActionExec.Seq [ exampleReplyAction ];\n</code></pre>","tags":["node-architecture","network-subsystem","engine","router","behaviour"]},{"location":"arch/node/engines/router_behaviour.html#guards","title":"Guards","text":"Auxiliary Juvix code","tags":["node-architecture","network-subsystem","engine","router","behaviour"]},{"location":"arch/node/engines/router_behaviour.html#routerguard","title":"<code>RouterGuard</code>","text":"<p> <pre><code>RouterGuard : Type :=\n  Guard\n    RouterLocalCfg\n    RouterLocalState\n    RouterMailboxState\n    RouterTimerHandle\n    RouterActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","network-subsystem","engine","router","behaviour"]},{"location":"arch/node/engines/router_behaviour.html#routerguardoutput","title":"<code>RouterGuardOutput</code>","text":"<p> <pre><code>RouterGuardOutput : Type :=\n  GuardOutput\n    RouterLocalCfg\n    RouterLocalState\n    RouterMailboxState\n    RouterTimerHandle\n    RouterActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","network-subsystem","engine","router","behaviour"]},{"location":"arch/node/engines/router_behaviour.html#routerguardeval","title":"<code>RouterGuardEval</code>","text":"<p> <pre><code>RouterGuardEval : Type :=\n  GuardEval\n    RouterLocalCfg\n    RouterLocalState\n    RouterMailboxState\n    RouterTimerHandle\n    RouterActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","network-subsystem","engine","router","behaviour"]},{"location":"arch/node/engines/router_behaviour.html#examplereplyguard","title":"<code>exampleReplyGuard</code>","text":"<p>Guard description (optional).</p> Condition Message type is <code>RouterMsgExampleRequest</code>. <pre><code>exampleReplyGuard\n  (trigger : RouterTimestampedTrigger)\n  (cfg : RouterCfg)\n  (env : RouterEnv)\n  : Option RouterGuardOutput :=\n  TODO {-\n  case getEngineMsgFromTimestampedTrigger trigger of {\n    | some EngineMsg.mk@{\n        msg := Anoma.PreMsg.MsgRouter (RouterMsgExampleRequest req);\n        sender := mkPair none _; -- from local engines only (NodeID is none)\n      } := some GuardOutput.mk@{\n        action := exampleReplyActionLabel;\n        args := [];\n      }\n    | _ := none\n  -};\n</code></pre>","tags":["node-architecture","network-subsystem","engine","router","behaviour"]},{"location":"arch/node/engines/router_behaviour.html#the-router-behaviour","title":"The Router behaviour","text":"","tags":["node-architecture","network-subsystem","engine","router","behaviour"]},{"location":"arch/node/engines/router_behaviour.html#routerbehaviour","title":"<code>RouterBehaviour</code>","text":"<pre><code>RouterBehaviour : Type :=\n  EngineBehaviour\n    RouterLocalCfg\n    RouterLocalState\n    RouterMailboxState\n    RouterTimerHandle\n    RouterActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","router","behaviour"]},{"location":"arch/node/engines/router_behaviour.html#instantiation","title":"Instantiation","text":"<pre><code>module router_behaviour_example;\n\nexRouterBehaviour : RouterBehaviour :=\n  EngineBehaviour.mk@{\n    guards :=\n      GuardEval.First [\n        exampleReplyGuard;\n      ];\n  };\n\nend;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","router","behaviour"]},{"location":"arch/node/engines/router_config.html","title":"Router Configuration","text":"Juvix imports <pre><code>module arch.node.engines.router_config;\n\nimport arch.node.engines.router_messages open;\n\nimport arch.node.types.basics open;\nimport arch.node.types.engine open;\nimport arch.node.types.identities open;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","router","configuration"]},{"location":"arch/node/engines/router_config.html#router-configuration","title":"Router Configuration","text":"","tags":["node-architecture","network-subsystem","engine","router","configuration"]},{"location":"arch/node/engines/router_config.html#overview","title":"Overview","text":"<p>The static configuration of the engine.</p>","tags":["node-architecture","network-subsystem","engine","router","configuration"]},{"location":"arch/node/engines/router_config.html#the-router-local-configuration","title":"The Router Local Configuration","text":"","tags":["node-architecture","network-subsystem","engine","router","configuration"]},{"location":"arch/node/engines/router_config.html#routerlocalcfg","title":"<code>RouterLocalCfg</code>","text":"<p>The type for engine-specific local configuration.</p> <pre><code>type RouterLocalCfg :=\n  mk;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","router","configuration"]},{"location":"arch/node/engines/router_config.html#the-router-configuration","title":"The Router Configuration","text":"","tags":["node-architecture","network-subsystem","engine","router","configuration"]},{"location":"arch/node/engines/router_config.html#routercfg","title":"<code>RouterCfg</code>","text":"<pre><code>RouterCfg : Type :=\n  EngineCfg\n    RouterLocalCfg;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","router","configuration"]},{"location":"arch/node/engines/router_config.html#instantiation","title":"Instantiation","text":"<p>```juvix extract-module-statements module router_config_example;</p> <p>exRouterCfg : RouterCfg :=   EngineCfg.mk@{     node := PublicKey.Curve25519PubKey \"0xabcd1234\";     name := \"router-0xab12cd34\";     cfg := RouterLocalCfg.mk;   };</p> <p>end; ```</p>","tags":["node-architecture","network-subsystem","engine","router","configuration"]},{"location":"arch/node/engines/router_environment.html","title":"Router Environment","text":"Juvix imports <pre><code>module arch.node.engines.router_environment;\n\nimport arch.node.engines.router_messages open;\n\nimport arch.node.types.basics open;\nimport arch.node.types.engine open;\nimport arch.node.types.messages open;\nimport arch.node.types.identities open;\nimport arch.node.types.anoma_message as Anoma open;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","router","environment"]},{"location":"arch/node/engines/router_environment.html#router-environment","title":"Router Environment","text":"","tags":["node-architecture","network-subsystem","engine","router","environment"]},{"location":"arch/node/engines/router_environment.html#overview","title":"Overview","text":"<p>The Engine environment of the engine.</p>","tags":["node-architecture","network-subsystem","engine","router","environment"]},{"location":"arch/node/engines/router_environment.html#mailbox-state","title":"Mailbox state","text":"<pre><code>RouterMailboxState : Type := Unit;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","router","environment"]},{"location":"arch/node/engines/router_environment.html#local-state","title":"Local state","text":"<pre><code>type RouterLocalState :=\n  mk;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","router","environment"]},{"location":"arch/node/engines/router_environment.html#timer-handles","title":"Timer handles","text":"<pre><code>RouterTimerHandle : Type := Unit;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","router","environment"]},{"location":"arch/node/engines/router_environment.html#timestamped-trigger","title":"Timestamped Trigger","text":"<pre><code>RouterTimestampedTrigger : Type :=\n  TimestampedTrigger\n    RouterTimerHandle\n    Anoma.Msg;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","router","environment"]},{"location":"arch/node/engines/router_environment.html#the-router-environment","title":"The Router Environment","text":"","tags":["node-architecture","network-subsystem","engine","router","environment"]},{"location":"arch/node/engines/router_environment.html#routerenv","title":"<code>RouterEnv</code>","text":"<pre><code>RouterEnv : Type :=\n  EngineEnv\n    RouterLocalState\n    RouterMailboxState\n    RouterTimerHandle\n    Anoma.Msg;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","router","environment"]},{"location":"arch/node/engines/router_environment.html#instantiation","title":"Instantiation","text":"<p>```juvix extract-module-statements module router_environment_example;</p> <p>exRouterEnv : RouterEnv :=   EngineEnv.mk@{     localState := RouterLocalState.mk;     mailboxCluster := Map.empty;     acquaintances := Set.empty;     timers := []   };</p> <p>end; ```</p>","tags":["node-architecture","network-subsystem","engine","router","environment"]},{"location":"arch/node/engines/router_messages.html","title":"Router Messages","text":"Juvix imports <pre><code>module arch.node.engines.router_messages;\n\nimport arch.node.engines.net_registry_messages open;\nimport arch.node.types.transport open;\n\nimport arch.node.types.basics open;\nimport arch.node.types.identities open;\nimport arch.node.types.messages open;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","router","message-types"]},{"location":"arch/node/engines/router_messages.html#router-messages","title":"Router Messages","text":"","tags":["node-architecture","network-subsystem","engine","router","message-types"]},{"location":"arch/node/engines/router_messages.html#message-interface","title":"Message interface","text":"<pre><code>type RouterMsg M :=\n  | NodeAdvert NodeAdvert\n  | Send (NodeOutMsg M)\n  | Recv NodeMsg\n  | ConnectRequest ConnectRequest\n  | ConnectReply ConnectReply\n  | SetPermanence ConnectionPermanence\n  ;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","router","message-types"]},{"location":"arch/node/engines/router_messages.html#message-types","title":"Message types","text":"","tags":["node-architecture","network-subsystem","engine","router","message-types"]},{"location":"arch/node/engines/router_messages.html#routermsgsend","title":"<code>RouterMsgSend</code>","text":"<p>Send an <code>EngineMsg</code> to the remote node with the given transport preferences and expiry time for send retries.</p> <p>Expected sender: any local engine.</p>","tags":["node-architecture","network-subsystem","engine","router","message-types"]},{"location":"arch/node/engines/router_messages.html#nodeoutmsg","title":"<code>NodeOutMsg</code>","text":"<p>Outgoing message to a remote node.</p> <p>Expected sender: any local engine.</p> <pre><code>type NodeOutMsg M := mkNodeOutMsg@{\n  prefs : TransportPrefs;\n  expiry : Time;\n  msg : EngineMsg M;\n};\n</code></pre>","tags":["node-architecture","network-subsystem","engine","router","message-types"]},{"location":"arch/node/engines/router_messages.html#routermsgrecv","title":"<code>RouterMsgRecv</code>","text":"<p>Receive a message from the remote node.</p> <p>Expected sender: local Transport Connection engine.</p>","tags":["node-architecture","network-subsystem","engine","router","message-types"]},{"location":"arch/node/engines/router_messages.html#nodemsg","title":"<code>NodeMsg</code>","text":"<p>A message sent between nodes.</p> <p>Sender: local Transport Connection engine.</p> <pre><code>type NodeMsg := mkNodeMsg@{\n  seq : Nat;\n  msg : EncryptedMsg;\n};\n</code></pre> Arguments <code>seq</code> Message sequence number of the sender. <code>msg</code> Encrypted <code>SerializedMsg</code> message that contains an <code>EngineMsg</code>.","tags":["node-architecture","network-subsystem","engine","router","message-types"]},{"location":"arch/node/engines/router_messages.html#connectrequest","title":"<code>ConnectRequest</code>","text":"<p>Request a connection to a remote node.</p> <p>The responder may accept or deny the request. As part of the connection establishment, first a protocol version negotiation takes place. the highest common supported protocol version is chosen, or else the connection fails.</p> <p>Nodes let each other know about their own latest <code>NodeAdvert</code> version, and the version they know of from the other party, and if necessary, send each other an updated <code>NodeAdvert</code> after the connection is established.</p> <p>Expected sender: remote Router engine.</p> <pre><code>type ConnectRequest :=\n  mkConnectRequest@{\n    proto_ver_min : Nat;\n    proto_ver_max : Nat;\n    src_node_id : NodeID;\n    dst_node_id : NodeID;\n    src_node_advert_ver : Nat;\n    dst_node_advert_ver : Nat;\n  }\n</code></pre> Arguments <code>proto_ver_min</code> Min. supported protocol version range. <code>proto_ver_max</code> Max. supported protocol version range. <code>src_node_id</code> Source node ID. <code>dst_node_id</code> Destination node ID. <code>src_node_advert_ver</code> Latest <code>NodeAdvert</code> version of the source node. <code>dst_node_advert_ver</code> Latest known <code>NodeAdvert</code> version of the destination node.","tags":["node-architecture","network-subsystem","engine","router","message-types"]},{"location":"arch/node/engines/router_messages.html#connectreply","title":"<code>ConnectReply</code>","text":"<p>Reply to a <code>ConnectRequest</code>.</p>","tags":["node-architecture","network-subsystem","engine","router","message-types"]},{"location":"arch/node/engines/router_messages.html#connectreplyok","title":"<code>ConnectReplyOk</code>","text":"<p>Accept a connection from a node.</p> <pre><code>type ConnectReplyOk :=\n  mkConnectReplyOk@{\n    proto_ver : Nat;\n    node_advert_ver : Pair Nat Nat;\n  }\n</code></pre> Arguments <code>proto_ver</code> Protocol version to use. <code>node_advert_ver</code> Latest local <code>NodeAdvert</code> version.","tags":["node-architecture","network-subsystem","engine","router","message-types"]},{"location":"arch/node/engines/router_messages.html#connectreplyerror","title":"<code>ConnectReplyError</code>","text":"<p>Refuse a connection from a node.</p> <pre><code>type ConnectReplyError :=\n  | ConnectReplyErrorOverCapacity\n  | ConnectReplyErrorIncompatible\n  | ConnectReplyErrorDenied\n  ;\n</code></pre> ConnectReplyError constructors <code>NodeConnectReplyErrorOverCapacity</code> Node over capacity. Temporary failure. <code>NodeConnectReplyErrorIncompatible</code> Incompatible protocol versions. <code>NodeConnectReplyErrorDenied</code> Connection denied by local policy.","tags":["node-architecture","network-subsystem","engine","router","message-types"]},{"location":"arch/node/engines/router_messages.html#connectreply_1","title":"<code>ConnectReply</code>","text":"<pre><code>ConnectReply : Type := Result ConnectReplyOk ConnectReplyError;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","router","message-types"]},{"location":"arch/node/engines/router_messages.html#setpermanence","title":"<code>SetPermanence</code>","text":"<p>Set connection permanence of the destination node to either ephemeral or permanent.</p> <p>Permanent connections are automatically reconnected on node start and when the connection is lost.</p> <pre><code>type ConnectionPermanence :=\n  | RouterMsgConnectionEphemeral\n  | RouterMsgConnectionPermanent\n  ;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","router","message-types"]},{"location":"arch/node/engines/router_messages.html#routermsg","title":"<code>RouterMsg</code>","text":"<p>All Router engine messages.</p> <pre><code>type RouterMsg M :=\n  | NodeAdvert NodeAdvert\n  | Send (NodeOutMsg M)\n  | Recv NodeMsg\n  | ConnectRequest ConnectRequest\n  | ConnectReply ConnectReply\n  | SetPermanence ConnectionPermanence\n  ;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","router","message-types"]},{"location":"arch/node/engines/router_messages.html#engine-components","title":"Engine components","text":"<ul> <li>Router Configuration</li> <li>Router Environment</li> <li>Router Behaviour</li> </ul>","tags":["node-architecture","network-subsystem","engine","router","message-types"]},{"location":"arch/node/engines/shard.html","title":"Shard Engine","text":"Juvix imports <pre><code>module arch.node.engines.shard;\n\nimport prelude open;\nimport arch.node.types.engine open;\n\nimport arch.node.engines.shard_config open public;\nimport arch.node.engines.shard_messages open public;\nimport arch.node.engines.shard_environment open public;\nimport arch.node.engines.shard_behaviour open public;\n\nimport arch.node.types.anoma as Anoma open;\n\nopen shard_config_example;\nopen shard_environment_example;\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","shard","engine-definition"]},{"location":"arch/node/engines/shard.html#shard","title":"Shard","text":"<p>The Shard Engine functions as a specialized multi-version concurrent database that manages state access for Anoma's distributed execution system. Think of each Shard as a guardian of a specific subset of the system's key-value pairs, maintaining not just the current values, but a complete timeline of how those values change through different transactions. This timeline-based approach allows multiple transactions to read and write state concurrently while maintaining consistency, similar to how Git allows multiple developers to work with different versions of code.</p> <p>At the heart of the Shard Engine is a sophisticated locking system that coordinates state access between transactions. Rather than using simple read/write locks, it employs a more nuanced approach using a DAG (Directed Acyclic Graph) structure. This structure tracks both the values stored at each key and, crucially, the relationships between different transactions' access requests. The Shard receives lock acquisition requests (<code>ShardMsgKVSAcquireLock</code>) from Mempool Workers, which specify exactly how a transaction intends to interact with state through several categories: eager reads (keys that will definitely be read), lazy reads (keys that might be read), definite writes (keys that will be written), and potential writes (keys that might be written).</p> <p>When a transaction needs to read a value, it can happen in two ways. With eager reads, the Shard automatically sends the value (<code>ShardMsgKVSRead</code>) as soon as it's known to be the correct version for that transaction's timestamp. With lazy reads, the transaction must explicitly request the value (<code>ShardMsgKVSReadRequest</code>). This dual approach allows for optimization - transactions can get values they definitely need right away while avoiding unnecessary data transfer for values they might not use.</p> <p>The Shard maintains ordering through two important timestamps: <code>heardAllWrites</code> and <code>heardAllReads</code>. These act like watermarks in the system - the Shard knows it won't receive any new write operations before <code>heardAllWrites</code> or any new read operations before <code>heardAllReads</code>. These watermarks, updated through <code>ShardMsgUpdateSeenAll</code> messages from Mempool Workers, allow the Shard to make important decisions about when it's safe to execute reads and when it can clean up old state versions that are no longer needed.</p> <p>The interface of the Shard Engine revolves around these key message types: <code>KVSAcquireLock</code> for securing access rights, <code>KVSReadRequest</code> for requesting values, <code>KVSWrite</code> for updating values, and <code>UpdateSeenAll</code> for maintaining order. Each write operation (<code>ShardMsgKVSWrite</code>) adds a new version to a key's timeline, while read operations need to carefully select the correct version based on transaction timestamps. When locks are successfully acquired, the Shard responds with <code>KVSLockAcquired</code> messages, allowing the Mempool Worker to track transaction progress.</p>","tags":["node-architecture","ordering-subsystem","engine","shard","engine-definition"]},{"location":"arch/node/engines/shard.html#purpose","title":"Purpose","text":"<p>The Shards together store and update the  state of the replicated state machine and   together are a component of the Execution Engines. They provide Executors with input data and update the state  according to the results of Executors' computations.</p> <p>Different shards may be on different physical machines.   </p> <p>Each shard is responsible for a set of KVSKeys and these sets are disjoint for different shards. For each of the keys that a shard is responsible for, the shard maintains a  (partially-ordered) timeline of Timestamps of  transaction candidates that may read or write to keys. Shards also keep a history of data written by each  TransactionCandidate to each key. This is multi-version concurrent storage.</p>","tags":["node-architecture","ordering-subsystem","engine","shard","engine-definition"]},{"location":"arch/node/engines/shard.html#state-of-the-shard","title":"State (of the shard)","text":"<p>For each Mempool Worker Engine, the Shard maintains:</p> <ul> <li>A Timestamp, such that all    write lock requests[^1] for    transaction candidates with earlier timestamps that this worker curates    have already been received.   Together, these timestamps represent <code>heardAllWrites</code>.</li> <li>Another Timestamp, before which    the Shard will receive no further read requests from this    Mempool Worker Engine.   For Mempool Worker Engine, this cannot be after the corresponding    write Timestamps.   We will also maintain these from each Read Backend worker.   Together, these represent <code>heardAllReads</code>.</li> </ul> <p>For each key (assigned to this Shard):</p> <ul> <li>A set of time\u200dstamps of known    transaction candidates that read and/or write that key, and for    each, some subset of:<ul> <li>A value written to that key at that time\u200dstamps    by that TransactionCandidate using a KVSWrite message</li> <li>A marker indicating that this TransactionCandidate may    (or will) write to this key, but this Shard has not yet received    a corresponding KVSWrite message.</li> <li>A marker indicating that this TransactionCandidate will read    this value, and an ExternalIdentity corresponding to the    relevant Executor.   This marker is only stored so long as the Shard doesn't know the    value.   When this value is determined, this Shard must remove this marker    and send a KVSRead message to the Executor.</li> <li>A marker indicating that this TransactionCandidate may read    this value, and an ExternalIdentity corresponding to the    relevant Executor.   If the Executor sends a KVSReadRequest for this key, the    Shard updates this marker to a \"will read\" marker.</li> </ul> </li> <li>If a Timestamp has no corresponding markers or    values written, we don't have to store it.</li> <li>If a value written is before <code>heardAllReads</code>, and there are no pending    reads or writes before it, then we can remove all earlier values    written.</li> </ul> <p>Additionally, the Shard maintains:</p> <ul> <li>A complete copy of the DAG structure produced by the    Mempool Engines.   This includes a set of all NarwhalBlockHeaders.   For Timestamps before <code>SeenAllRead</code>, if there are    no keys with a pending read or write before that    Timestamp, we can delete old DAG structure.</li> <li>A complete copy of the sequence of Anchors chosen    by Consensus Engine.   This is a sequence of consensus decisions.   For Timestamps before <code>heardAllReads</code>, if there are    no keys with a pending read or write before that    Timestamp, we can delete old anchors.</li> </ul>","tags":["node-architecture","ordering-subsystem","engine","shard","engine-definition"]},{"location":"arch/node/engines/shard.html#shard-optimizations","title":"Shard Optimizations","text":"<p>We want to execute each TransactionCandidate (evaluate the executor function in order to compute the data written) using the idea of serializability: each TransactionCandidate's reads and writes should be as if they were executed in the total order determined by the mempool (and consensus, from V2 onward). In fact, the simplest correct implementation amounts to executing all transaction candidates sequentially, repeatedly applying the executor function in a loop. However, we want to compute concurrently as possible, for minimum latency. We do this using a set of optimizations.</p>","tags":["node-architecture","ordering-subsystem","engine","shard","engine-definition"]},{"location":"arch/node/engines/shard.html#optimization-per-key-ordering","title":"Optimization: Per-Key Ordering","text":"<p>Mempool  and  consensus provides ordering  information for  the time\u200dstamps. Thus, relative to each key, transaction candidates can be totally ordered by the  Happens Before  relationship. With a total ordering of transaction candidates, Shards can send  read information (KVSReads) to Executors as soon as the  previous TransactionCandidate is complete. However, transaction candidates that access on disjoint sets of  keys can be run in parallel. In the diagram above, for example, transaction candidates <code>c</code> and  <code>d</code> can run concurrently, as can transaction candidates <code>e</code> and  <code>f</code>, and transaction candidates <code>h</code> and <code>j</code>.</p>","tags":["node-architecture","ordering-subsystem","engine","shard","engine-definition"]},{"location":"arch/node/engines/shard.html#optimization-order-with-respect-to-writes","title":"Optimization: Order With Respect To Writes","text":"<p>In fact, Shards can send read information to an Executor as soon  as the previous write's TransactionCandidate has completed  (sent a KVSWrite). All Shards really need to keep track of is a total order of writes,  and how each read is ordered with respect to writes (which write it  precedes and which write preceded it). As soon as the preceding write is complete (the Shard has received a  KVSWrite), the reads that depend on it can run concurrently. There are no \"read/read\" conflicts. In the diagram above, for example, transaction candidates <code>a</code> and <code>b</code> can run  concurrently.</p>","tags":["node-architecture","ordering-subsystem","engine","shard","engine-definition"]},{"location":"arch/node/engines/shard.html#optimization-only-wait-to-read","title":"Optimization: Only Wait to Read","text":"<p>Because we store each version written  (multi-version concurrent storage),  we do not have to execute writes in order. A Shard does not have to wait to write a later data version to a key  just because previous reads have not finished executing yet. In the diagram above, for example, only green happens-before arrows  require waiting. transaction candidates <code>a</code>, <code>b</code>, <code>c</code>, and <code>j</code> can all be executed  concurrently, as can transaction candidates <code>d</code>, <code>e</code>, and <code>i</code>.</p>","tags":["node-architecture","ordering-subsystem","engine","shard","engine-definition"]},{"location":"arch/node/engines/shard.html#optimization-execute-with-partial-order","title":"Optimization: Execute With Partial Order","text":"<p>Some mempools, including Narwhal, can provide partial order information on transactions even before consensus has determined a total order. This allows the Ordering Machine to execute some transactions before a total ordering is known. In general, for a given key, a shard can send read information to an executor when it knows precisely which write happens most recently before the read, and that write has executed.</p>","tags":["node-architecture","ordering-subsystem","engine","shard","engine-definition"]},{"location":"arch/node/engines/shard.html#heardallwrites","title":"<code>heardAllWrites</code>","text":"<p>In order to know which write happens most recently before a given  read, the Shard must know that no further writes will be added to  the timeline before the read. Mempool and consensus should  communicate a lower bound on timestamps to the Shards, called  <code>heardAllWrites</code>. The Shard is guaranteed to never receive another KVSAcquireLock  with a write operation and   Timestamp before  <code>heardAllWrites</code>. In general, a Shard cannot send a KVSRead for  a Timestamp unless   the Timestamp is before <code>heardAllWrites</code>. <code>heardAllWrites</code> consists of a TxFingerprint from each  worker engine such that the worker engine is certain  (based on KVSLockAcquireds) that the Shard has already seen all  the KVSAcquireLocks it will ever send at or before that  TxFingerprint.</p> <p>This can be on a per-key basis or simply a global lower bound. Occasionally, <code>heardAllWrites</code> should be updated with later timestamps. Each round of consensus should produce a lower bound for <code>heardAllWrites</code>, but the mempool may already have sent better bounds. Each Shard must keep track of <code>heardAllWrites</code> on each key's multi-version timeline.</p> <p>Transactions (like transaction <code>j</code> in the diagram below) containing only write operations can execute with a timestamp after <code>heardAllWrites</code>, but this simply means calculating the data they will write. Since that does not depend on state, this can of course be done at any time.</p>","tags":["node-architecture","ordering-subsystem","engine","shard","engine-definition"]},{"location":"arch/node/engines/shard.html#heardallreads","title":"<code>heardAllReads</code>","text":"<p>We want to allow Typhon to eventually garbage-collect old state. mempool and consensus should communicate a lower bound timestamp to the execution engine, called <code>heardAllReads</code>, before which there will be no more read transactions send to the execution engine. Occasionally, <code>heardAllReads</code> should be updated with later timestamps. Each Shard must keep track of <code>heardAllReads</code> on each key's multi-version timeline, so it can garbage-collect old values.</p> <p></p> <p>In the example above, our happens-before arrows have been replaced with may-happen-before arrows, representing partial ordering information from the mempool. Note that not all transactions can be executed with this partial order information.</p>","tags":["node-architecture","ordering-subsystem","engine","shard","engine-definition"]},{"location":"arch/node/engines/shard.html#conflicts","title":"Conflicts","text":"<p>There are three types of conflicts that can prevent a transaction from being executable without more ordering information.</p> <ul> <li>Write/Write Conflicts   occur when a shard cannot identify the most recent write before a given read.   In the diagram above,   transaction <code>e</code> cannot execute because it is not clear whether   transaction <code>b</code> or transaction <code>c</code> wrote most recently to the yellow key.</li> </ul> <ul> <li>Read/Write Conflicts   occur when shard cannot identify whether a read operation occurs before or   after a write,   so it is not clear if it should read the value from that write or   from a previous write.   In the diagram above,   transaction <code>g</code> cannot execute because it is not clear whether   it would read the data written to the blue key by transaction <code>d</code> or   transaction <code>i</code>.</li> </ul> <ul> <li>Transitive Conflicts   occur when a shard cannot get the data for a read because   the relevant write is conflicted.   In the diagram above,   transaction <code>h</code> cannot execute because   it cannot read the data written to the yellow key by transaction <code>g</code>, since   transaction <code>g</code> is conflicted.</li> </ul> <p>As the mempool and consensus provide the execution engine with more and more ordering information, and the partial order of timestamps is refined, all conflicts eventually resolve. In the diagram above, suppose consensus orders transaction <code>g</code> before transaction <code>i</code>. The Read/Write conflict is resolved: transaction <code>g</code> reads the data transaction <code>d</code> writes to the blue key. Then the transitive conflict is also resolved: transaction <code>h</code> will be able to execute. --&gt;</p>","tags":["node-architecture","ordering-subsystem","engine","shard","engine-definition"]},{"location":"arch/node/engines/shard.html#optimization-client-reads-as-read-only-transactions","title":"Optimization: Client Reads as Read-Only Transactions","text":"<p>With the above optimizations, transactions containing only read operations do not affect other transactions (or scheduling) at all. Therefore, they can bypass mempool and consensus altogether. Clients can simply send read-only transactions directly to the execution engine (with a label and a timestamp), and if the timestamp is after <code>heardAllReads</code>, the execution engine can simply place the transaction in the timeline of the relevant shards and execute it when possible. In the diagram above, transaction <code>f</code> is read-only.</p> <p>If client reads produce signed responses, then signed responses from a weak quorum of validators would form a light client proof.</p>","tags":["node-architecture","ordering-subsystem","engine","shard","engine-definition"]},{"location":"arch/node/engines/shard.html#engine-components","title":"Engine components","text":"<ul> <li>Shard Messages</li> <li>Shard Configuration</li> <li>Shard Environment</li> <li>Shard Behaviour</li> </ul>","tags":["node-architecture","ordering-subsystem","engine","shard","engine-definition"]},{"location":"arch/node/engines/shard.html#type","title":"Type","text":"<pre><code>ShardEngine (KVSKey KVSDatum Executable ProgramState : Type) : Type :=\n  Engine\n    ShardCfg\n    (ShardLocalState KVSKey KVSDatum)\n    ShardMailboxState\n    ShardTimerHandle\n    ShardActionArguments\n    (Anoma.PreMsg KVSKey KVSDatum Executable)\n    (Anoma.PreCfg KVSKey KVSDatum Executable)\n    (Anoma.PreEnv KVSKey KVSDatum Executable ProgramState);\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","shard","engine-definition"]},{"location":"arch/node/engines/shard.html#example-of-a-shard-engine","title":"Example of a shard engine","text":"<pre><code>exampleShardEngine : ShardEngine String String ByteString String :=\n  Engine.mk@{\n    cfg := shardCfg;\n    env := shardEnv;\n    behaviour := shardBehaviour;\n  };\n</code></pre> <p>where <code>shardCfg</code> is defined as follows:</p> <p>```juvix extract-module-statements module shard_config_example;</p> <p>shardCfg : EngineCfg ShardCfg :=     EngineCfg.mk@{       node := PublicKey.Curve25519PubKey \"0xabcd1234\";       name := \"shard\";       cfg := ShardCfg.mk;     }   ; end; <pre><code>where [`shardEnv`](https://specs.anoma.net/pr-347/arch/node/engines/shard_environment.html#shardEnv) is defined as follows:\n\n```juvix extract-module-statements\nmodule shard_environment_example;\n\n  shardEnv : ShardEnv String String :=\n    EngineEnv.mk@{\n      localState := ShardLocalState.mk@{\n        dagStructure := DAGStructure.mkDAGStructure@{\n          keyAccesses := Map.empty;\n          heardAllReads := 0;\n          heardAllWrites := 0\n        };\n        anchors := []\n      };\n      mailboxCluster := Map.empty;\n      acquaintances := Set.empty;\n      timers := []\n    }\n  ;\nend;\n</code></pre></p> <p>and <code>shardBehaviour</code> is defined as follows:</p> <pre><code>shardBehaviour : ShardBehaviour String String ByteString String :=\n  EngineBehaviour.mk@{\n    guards := GuardEval.First [\n      acquireLockGuard;\n      processWriteGuard;\n      processReadRequestGuard;\n      updateSeenAllGuard\n    ]\n  };\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","shard","engine-definition"]},{"location":"arch/node/engines/shard_behaviour.html","title":"Shard Behaviour","text":"Juvix imports <pre><code>module arch.node.engines.shard_behaviour;\n\nimport arch.node.engines.shard_messages open;\nimport arch.node.engines.shard_config open;\nimport arch.node.engines.shard_environment open;\n\nimport Stdlib.Data.Nat open;\nimport Stdlib.Data.List as List;\nimport Stdlib.Data.Set as Set;\nimport prelude open;\nimport arch.node.types.basics open;\nimport arch.node.types.identities open;\nimport arch.node.types.messages open;\nimport arch.node.types.engine open;\nimport arch.node.types.anoma as Anoma open;\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","shard","behaviour"]},{"location":"arch/node/engines/shard_behaviour.html#shard-behaviour","title":"Shard Behaviour","text":"","tags":["node-architecture","ordering-subsystem","engine","shard","behaviour"]},{"location":"arch/node/engines/shard_behaviour.html#shard-action-flowchart","title":"Shard Action Flowchart","text":"","tags":["node-architecture","ordering-subsystem","engine","shard","behaviour"]},{"location":"arch/node/engines/shard_behaviour.html#acquirelock-flowchart","title":"<code>acquireLock</code> Flowchart","text":"<pre><code>flowchart TD\n    Start([Worker Request]) --&gt; MsgReq[ShardMsgKVSAcquireLock&lt;br/&gt;keys, worker, executor, timestamp]\n\n    subgraph Guard[\"acquireLockGuard\"]\n        MsgReq --&gt; ValidType{Is message type&lt;br/&gt;KVSAcquireLock?}\n        ValidType --&gt;|No| Reject([Reject Request])\n        ValidType --&gt;|Yes| ActionEntry[Enter Action Phase]\n    end\n\n    ActionEntry --&gt; Action\n\n    subgraph Action[\"acquireLockAction\"]\n        direction TB\n        AddReads[Add read accesses to DAG&lt;br/&gt;eager and lazy]\n        AddReads --&gt; AddWrites[Add write accesses to DAG&lt;br/&gt;definite and potential]\n        AddWrites --&gt; CheckEager{Any eager reads&lt;br/&gt;ready to execute?}\n        CheckEager --&gt;|Yes| PrepReadMsgs[Create read messages&lt;br/&gt;for eligible keys]\n        CheckEager --&gt;|No| SkipReads[Skip read messages]\n        PrepReadMsgs &amp; SkipReads --&gt; PrepareLockAck[Create lock acquired&lt;br/&gt;response]\n    end\n\n    PrepareLockAck --&gt; Msgs[Send Messages]\n\n    subgraph Msgs[\"Messages Sent\"]\n        LockAck[KVSLockAcquired to Worker]\n        ReadMsgs[KVSRead messages to Executor&lt;br/&gt;for eligible eager reads]\n    end</code></pre> <code>acquireLock</code> flowchart","tags":["node-architecture","ordering-subsystem","engine","shard","behaviour"]},{"location":"arch/node/engines/shard_behaviour.html#explanation","title":"Explanation","text":"<ol> <li> <p>Initial Request</p> <ul> <li>A Mempool Worker sends a <code>ShardMsgKVSAcquireLock</code> containing:<ul> <li><code>lazy_read_keys</code>: Keys that might be read during execution.</li> <li><code>eager_read_keys</code>: Keys that will definitely be read.</li> <li><code>will_write_keys</code>: Keys that will definitely be written.</li> <li><code>may_write_keys</code>: Keys that might be written.</li> <li><code>worker</code>: ID of the requesting worker engine.</li> <li><code>executor</code>: ID of the executor that will process this transaction.</li> <li><code>timestamp</code>: Logical timestamp for transaction ordering.</li> </ul> </li> </ul> </li> <li> <p>Guard Phase (<code>acquireLockGuard</code>)</p> <ul> <li>Verifies message type is <code>ShardMsgKVSAcquireLock</code>.</li> <li>If validation fails, request is rejected immediately.</li> <li>On success, passes control to <code>acquireLockActionLabel</code>.</li> </ul> </li> <li> <p>Action Phase (<code>acquireLockAction</code>)</p> <ul> <li>Processes valid lock requests through these steps:<ul> <li>Adds read accesses to DAG for both eager and lazy reads.</li> <li>Adds write accesses to DAG for both definite and potential writes.</li> <li>Checks for any eager reads that are immediately eligible for execution.</li> <li>Creates read messages for eligible eager reads.</li> <li>Prepares lock acquisition acknowledgment.</li> <li>Records all lock information in DAG structure.</li> </ul> </li> </ul> </li> <li> <p>Reply Generation</p> <ul> <li>Always Sends:<ul> <li><code>KVSLockAcquired</code> message back to worker containing:<ul> <li><code>timestamp</code>: Same timestamp as request.</li> </ul> </li> </ul> </li> <li>Conditionally Sends:<ul> <li>If eligible eager reads found:<ul> <li><code>KVSRead</code> messages to executor containing:<ul> <li><code>timestamp</code>: Transaction timestamp.</li> <li><code>key</code>: Key that was read.</li> <li><code>data</code>: Value at that timestamp.</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li> <p>Reply Delivery</p> <ul> <li>Lock acknowledgment sent to original worker.</li> <li>Any read messages sent to specified executor.</li> <li>Uses mailbox 0 (the standard mailbox for responses).</li> </ul> </li> </ol>","tags":["node-architecture","ordering-subsystem","engine","shard","behaviour"]},{"location":"arch/node/engines/shard_behaviour.html#processwrite-flowchart","title":"<code>processWrite</code> Flowchart","text":"<pre><code>flowchart TD\n    Start([Executor Request]) --&gt; MsgReq[ShardMsgKVSWrite&lt;br/&gt;key, timestamp, data]\n\n    subgraph Guard[\"processWriteGuard\"]\n        MsgReq --&gt; ValidType{Is message type&lt;br/&gt;KVSWrite?}\n        ValidType --&gt;|No| Reject([Reject Request])\n        ValidType --&gt;|Yes| ActionEntry[Enter Action Phase]\n    end\n\n    ActionEntry --&gt; Action\n\n    subgraph Action[\"processWriteAction\"]\n        direction TB\n        CheckLock{Write lock&lt;br/&gt;exists for timestamp?}\n        CheckLock --&gt;|No| FailNoLock[Fail - No Lock]\n        CheckLock --&gt;|Yes| ValidateWrite{Valid write for&lt;br/&gt;lock type?}\n        ValidateWrite --&gt;|No| FailInvalid[Fail - Invalid Write]\n        ValidateWrite --&gt;|Yes| UpdateDAG[Update DAG with&lt;br/&gt;write data]\n        UpdateDAG --&gt; CheckReads{Eager reads&lt;br/&gt;now eligible?}\n        CheckReads --&gt;|Yes| PrepReadMsgs[Create read messages&lt;br/&gt;for eligible keys]\n        CheckReads --&gt;|No| NoReads[No messages needed]\n    end\n\n    PrepReadMsgs --&gt; SendReads[Send KVSRead messages&lt;br/&gt;to eligible executors]\n    NoReads --&gt; Complete([Complete])\n    FailNoLock &amp; FailInvalid --&gt; Fail([Fail - No Reply])</code></pre> <code>processWrite</code> flowchart","tags":["node-architecture","ordering-subsystem","engine","shard","behaviour"]},{"location":"arch/node/engines/shard_behaviour.html#explanation_1","title":"Explanation","text":"<ol> <li> <p>Initial Request</p> <ul> <li>A client sends a <code>ShardMsgKVSWrite</code> containing:<ul> <li><code>key</code>: The state key to write to.</li> <li><code>timestamp</code>: The transaction's logical timestamp.</li> <li><code>datum</code>: The value to write (or None for null writes).</li> </ul> </li> <li>This request comes from an Executor Engine that previously acquired write locks.</li> </ul> </li> <li> <p>Guard Phase (<code>processWriteGuard</code>)</p> <ul> <li>Verifies message type is <code>ShardMsgKVSWrite</code>.</li> <li>If validation fails, request is rejected immediately.</li> <li>On success, passes control to <code>processWriteActionLabel</code>.</li> </ul> </li> <li> <p>Action Phase (<code>processWriteAction</code>)</p> <ul> <li>Processes valid write requests through these steps:<ul> <li>Checks if write lock exists for the key at given timestamp.</li> <li>Validates write against lock type (null writes only valid for <code>mayWrite</code> locks).</li> <li>Updates DAG structure with new write data.</li> <li>Checks for eligible eager reads that can now proceed.</li> <li>Constructs appropriate read messages for any newly eligible reads.</li> </ul> </li> </ul> </li> <li> <p>Error Cases</p> <ul> <li>No Lock Case: Returns none if:<ul> <li>No write access exists for the timestamp.</li> <li>Write access exists but no <code>writeStatus</code> (no write lock).</li> </ul> </li> <li>Invalid Write Case: Returns none if:<ul> <li>Attempting null write on definite write lock.</li> <li>Lock exists but write is invalid for lock type.</li> </ul> </li> </ul> </li> <li> <p>Reply Delivery</p> <ul> <li>On success, sends <code>KVSRead</code> messages to Executors for any eligible eager reads.</li> <li>The original write request does not receive a direct response.</li> <li>All messages use mailbox 0 (the standard mailbox for responses).</li> </ul> </li> </ol>","tags":["node-architecture","ordering-subsystem","engine","shard","behaviour"]},{"location":"arch/node/engines/shard_behaviour.html#processreadrequest-flowchart","title":"<code>processReadRequest</code> Flowchart","text":"<pre><code>flowchart TD\n    Start([Executor Request]) --&gt; MsgReq[ShardMsgKVSReadRequest&lt;br/&gt;key, timestamp, actual]\n\n    subgraph Guard[\"processReadRequestGuard\"]\n        MsgReq --&gt; ValidType{Is message type&lt;br/&gt;KVSReadRequest?}\n        ValidType --&gt;|No| Reject([Reject Request])\n        ValidType --&gt;|Yes| ActionEntry[Enter Action Phase]\n    end\n\n    ActionEntry --&gt; Action\n\n    subgraph Action[\"processReadRequestAction\"]\n        direction TB\n        CheckBarrier{timestamp &gt;=&lt;br/&gt;heardAllReads?}\n        CheckBarrier --&gt;|No| FailTooEarly[Fail - Too Early]\n        CheckBarrier --&gt;|Yes| CheckLock{Read lock&lt;br/&gt;exists?}\n        CheckLock --&gt;|No| FailNoLock[Fail - No Lock]\n        CheckLock --&gt;|Yes| MarkRead[Mark read as completed&lt;br/&gt;in DAG]\n        MarkRead --&gt; CheckActual{actual flag&lt;br/&gt;true?}\n        CheckActual --&gt;|No| NoReply[No response needed]\n        CheckActual --&gt;|Yes| FindValue[Find most recent&lt;br/&gt;write before timestamp]\n        FindValue --&gt; HasValue{Value found?}\n        HasValue --&gt;|No| FailNoValue[Fail - No Value]\n        HasValue --&gt;|Yes| PrepReply[Create read response&lt;br/&gt;with found value]\n    end\n\n    PrepReply --&gt; SendRead[Send KVSRead message&lt;br/&gt;to executor]\n    NoReply --&gt; Complete([Complete])\n    FailTooEarly &amp; FailNoLock &amp; FailNoValue --&gt; Fail([Fail - No Reply])\n\n    style Guard fill:#f0f7ff,stroke:#333,stroke-width:2px\n    style Action fill:#fff7f0,stroke:#333,stroke-width:2px</code></pre> <code>processReadRequest</code> flowchart","tags":["node-architecture","ordering-subsystem","engine","shard","behaviour"]},{"location":"arch/node/engines/shard_behaviour.html#explanation_2","title":"Explanation","text":"<ol> <li> <p>Initial Request</p> <ul> <li>An executor sends a <code>ShardMsgKVSReadRequest</code> containing:<ul> <li><code>key</code>: The state key to read.</li> <li><code>timestamp</code>: The logical timestamp of the requesting transaction.</li> <li><code>actual</code>: Boolean flag indicating if this is a real read or just cleanup.</li> </ul> </li> <li>The key must be one that this shard is responsible for managing.</li> </ul> </li> <li> <p>Guard Phase (<code>processReadRequestGuard</code>)</p> <ul> <li>Verifies message type is <code>ShardMsgKVSReadRequest</code>.</li> <li>If validation fails, request is rejected immediately.</li> <li>On success, passes control to <code>processReadRequestActionLabel</code>.</li> </ul> </li> <li> <p>Action Phase (<code>processReadRequestAction</code>)</p> <ul> <li>Processes valid read requests through these steps:<ul> <li>Checks if timestamp is at or after the <code>heardAllReads</code> barrier.</li> <li>Verifies a read lock exists for this key at this timestamp.</li> <li>Marks the read as completed in the DAG structure.</li> <li>If <code>actual</code> flag is true, finds the most recent write value.</li> <li>Constructs appropriate response based on result.</li> </ul> </li> </ul> </li> <li> <p>Reply Generation</p> <ul> <li>Successful Case (actual = true)<ul> <li>Creates <code>ShardMsgKVSRead</code> with:<ul> <li><code>timestamp</code>: Original request timestamp.</li> <li><code>key</code>: Original request key.</li> <li><code>data</code>: Found historical value.</li> </ul> </li> </ul> </li> <li>Successful Case (actual = false)<ul> <li>No response message generated.</li> <li>Only updates internal state.</li> </ul> </li> <li>Error Cases<ul> <li>No response sent if:<ul> <li>Timestamp is before <code>heardAllReads</code>.</li> <li>No valid read lock exists.</li> <li>No historical value found.</li> </ul> </li> </ul> </li> </ul> </li> <li> <p>Reply Delivery</p> <ul> <li>Success response sent directly to requesting executor.</li> <li>Uses mailbox 0 (the standard mailbox for responses).</li> </ul> </li> </ol>","tags":["node-architecture","ordering-subsystem","engine","shard","behaviour"]},{"location":"arch/node/engines/shard_behaviour.html#updateseenall-flowchart","title":"<code>updateSeenAll</code> Flowchart","text":"<pre><code>flowchart TD\n    Start([Worker Request]) --&gt; MsgReq[ShardMsgUpdateSeenAll&lt;br/&gt;timestamp, write]\n\n    subgraph Guard[\"updateSeenAllGuard\"]\n        MsgReq --&gt; ValidType{Is message type&lt;br/&gt;UpdateSeenAll?}\n        ValidType --&gt;|No| Reject([Reject Request])\n        ValidType --&gt;|Yes| ActionEntry[Enter Action Phase]\n    end\n\n    ActionEntry --&gt; Action\n\n    subgraph Action[\"updateSeenAllAction\"]\n        direction TB\n        CheckType{What kind&lt;br/&gt;of barrier?}\n        CheckType --&gt;|write| UpdateWrites[Update heardAllWrites&lt;br/&gt;barrier]\n        CheckType --&gt;|read| UpdateReads[Update heardAllReads&lt;br/&gt;barrier]\n        UpdateWrites --&gt; CheckEager{Eager reads&lt;br/&gt;now eligible?}\n        UpdateReads --&gt; NoReads[No reads to process]\n        CheckEager --&gt;|Yes| PrepReadMsgs[Create read messages&lt;br/&gt;for eligible keys]\n        CheckEager --&gt;|No| NoNewReads[No new reads eligible]\n    end\n\n    PrepReadMsgs --&gt; SendReads[Send KVSRead messages&lt;br/&gt;to eligible executors]\n    NoReads &amp; NoNewReads --&gt; Complete([Complete])</code></pre> <code>updateSeenAll</code> flowchart","tags":["node-architecture","ordering-subsystem","engine","shard","behaviour"]},{"location":"arch/node/engines/shard_behaviour.html#explanation_3","title":"Explanation","text":"<ol> <li> <p>Initial Request</p> <ul> <li>A worker sends a <code>ShardMsgUpdateSeenAll</code> containing:<ul> <li><code>timestamp</code>: The new barrier position in the transaction timeline.</li> <li><code>write</code>: Boolean flag indicating if this updates the write barrier or read barrier.</li> </ul> </li> <li>This represents a guarantee from the worker about transaction ordering.</li> </ul> </li> <li> <p>Guard Phase (<code>updateSeenAllGuard</code>)</p> <ul> <li>Verifies message type is <code>ShardMsgUpdateSeenAll</code>.</li> <li>If validation fails, request is rejected immediately.</li> <li>On success, passes control to <code>updateSeenAllActionLabel</code>.</li> </ul> </li> <li> <p>Action Phase (<code>updateSeenAllAction</code>)</p> <ul> <li>Processes valid update requests through these steps:<ul> <li>Determines barrier type (write vs read) from message.</li> <li>For write barriers:<ul> <li>Updates <code>heardAllWrites</code> to new timestamp.</li> <li>Checks for eager reads that can now execute.</li> <li>Prepares read messages for eligible reads.</li> </ul> </li> <li>For read barriers:<ul> <li>Updates <code>heardAllReads</code> to new timestamp.</li> <li>No immediate read processing needed.</li> </ul> </li> </ul> </li> </ul> </li> <li> <p>Reply Generation</p> <ul> <li>For write barrier updates:<ul> <li>If eligible eager reads found:<ul> <li>Creates <code>KVSRead</code> messages for each eligible read.</li> <li>Includes value and timestamp for each read.</li> </ul> </li> <li>If no eligible reads, completes with no messages.</li> </ul> </li> <li>For read barrier updates:<ul> <li>Always completes with no messages.</li> <li>Read barrier updates are used for garbage collection, not triggering reads.</li> </ul> </li> </ul> </li> <li> <p>Message Delivery</p> <ul> <li>Any generated read messages are sent to their respective executors.</li> <li>No acknowledgment is sent back to the worker.</li> </ul> </li> </ol>","tags":["node-architecture","ordering-subsystem","engine","shard","behaviour"]},{"location":"arch/node/engines/shard_behaviour.html#action-arguments","title":"Action arguments","text":"","tags":["node-architecture","ordering-subsystem","engine","shard","behaviour"]},{"location":"arch/node/engines/shard_behaviour.html#shardactionargument","title":"<code>ShardActionArgument</code>","text":"<pre><code>type ShardActionArgument :=\n  | ShardActionArgumentReplyTo EngineID;\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","shard","behaviour"]},{"location":"arch/node/engines/shard_behaviour.html#shardactionarguments","title":"<code>ShardActionArguments</code>","text":"<pre><code>ShardActionArguments : Type := List ShardActionArgument;\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","shard","behaviour"]},{"location":"arch/node/engines/shard_behaviour.html#helper-functions","title":"Helper Functions","text":"<pre><code>findMostRecentWrite\n  {KVSKey KVSDatum} {{Ord KVSKey}}\n  (dag : DAGStructure KVSKey KVSDatum)\n  (key : KVSKey)\n  (timestamp : TxFingerprint)\n  : Option KVSDatum :=\n  case Map.lookup key (DAGStructure.keyAccesses dag) of {\n    | none := none\n    | some timestampMap :=\n      let validEntries :=\n        List.filter\n          \\{entry :=\n            (fst entry) &lt; timestamp &amp;&amp;\n            case KeyAccess.writeStatus (snd entry) of {\n              | some writeStatus :=\n                  -- Ignore empty maywrites.\n                  not (WriteStatus.mayWrite writeStatus &amp;&amp;\n                       isNone (WriteStatus.data writeStatus))\n              | none := false\n            }\n          }\n          (Map.toList timestampMap);\n      in case maximumBy \\{entry := fst entry} validEntries of {\n        | some (mkPair _ access) :=\n            case KeyAccess.writeStatus access of {\n              | some writeStatus := WriteStatus.data writeStatus\n              | none := none\n            }\n        | none := none\n      }\n  };\n</code></pre> <p>-- add read without prior lock <pre><code>addReadAccess\n  {KVSKey KVSDatum} {{Ord KVSKey}}\n  (dag : DAGStructure KVSKey KVSDatum)\n  (key : KVSKey)\n  (timestamp : TxFingerprint)\n  (readStatus : ReadStatus)\n  : DAGStructure KVSKey KVSDatum :=\n  let keyMap := case Map.lookup key (DAGStructure.keyAccesses dag) of {\n    | none := Map.empty\n    | some m := m\n  };\n    existingAccess := case Map.lookup timestamp keyMap of {\n    | none := KeyAccess.mkKeyAccess@{ readStatus := none; writeStatus := none }\n    | some access := access\n  };\n    newAccess := existingAccess@KeyAccess{ readStatus := some readStatus };\n    newKeyMap := Map.insert timestamp newAccess keyMap;\n    newKeyAccesses := Map.insert key newKeyMap (DAGStructure.keyAccesses dag);\n  in dag@DAGStructure{ keyAccesses := newKeyAccesses };\n</code></pre></p> <p>-- add write without prior lock <pre><code>addWriteAccess\n  {KVSKey KVSDatum} {{Ord KVSKey}}\n  (dag : DAGStructure KVSKey KVSDatum)\n  (key : KVSKey)\n  (timestamp : TxFingerprint)\n  (writeStatus : WriteStatus KVSDatum)\n  : DAGStructure KVSKey KVSDatum :=\n  let keyMap := case Map.lookup key (DAGStructure.keyAccesses dag) of {\n    | none := Map.empty\n    | some m := m\n  };\n    existingAccess := case Map.lookup timestamp keyMap of {\n    | none := KeyAccess.mkKeyAccess@{ readStatus := none; writeStatus := none }\n    | some access := access\n  };\n    newAccess := existingAccess@KeyAccess{ writeStatus := some writeStatus };\n    newKeyMap := Map.insert timestamp newAccess keyMap;\n    newKeyAccesses := Map.insert key newKeyMap (DAGStructure.keyAccesses dag);\n  in dag@DAGStructure{ keyAccesses := newKeyAccesses };\n</code></pre></p> <p>-- Replaces if read lock exists <pre><code>replaceReadAccess\n  {KVSKey KVSDatum}\n  {{Ord KVSKey}}\n  (dag : DAGStructure KVSKey KVSDatum)\n  (key : KVSKey)\n  (timestamp : TxFingerprint)\n  : Option (DAGStructure KVSKey KVSDatum) :=\n  let keyMap := case Map.lookup key (DAGStructure.keyAccesses dag) of {\n        | none := Map.empty\n        | some m := m\n      };\n      access := case Map.lookup timestamp keyMap of {\n        | none := none\n        | some a := some a\n      };\n  in case access of {\n    | some a :=\n      case KeyAccess.readStatus a of {\n        | none := none -- Fail if no readStatus/no lock\n        | some rs :=\n          let updatedReadStatus := rs@ReadStatus{ hasBeenRead := true };\n              updatedAccess := a@KeyAccess{ readStatus := some updatedReadStatus };\n              updatedKeyMap := Map.insert timestamp updatedAccess keyMap;\n              updatedKeyAccesses := Map.insert key updatedKeyMap (DAGStructure.keyAccesses dag);\n          in some dag@DAGStructure{ keyAccesses := updatedKeyAccesses }\n      }\n    | none := none -- Fail if no access exists for the timestamp\n  };\n</code></pre></p> <p>-- Replaces if write lock exists <pre><code>replaceWriteAccess\n  {KVSKey KVSDatum}\n  {{Ord KVSKey}}\n  (dag : DAGStructure KVSKey KVSDatum)\n  (key : KVSKey)\n  (timestamp : TxFingerprint)\n  (newData : Option KVSDatum)\n  : Option (DAGStructure KVSKey KVSDatum) :=\n  let keyMap := case Map.lookup key (DAGStructure.keyAccesses dag) of {\n        | none := Map.empty\n        | some m := m\n      };\n  in case Map.lookup timestamp keyMap of {\n    | some a :=\n      case KeyAccess.writeStatus a of {\n        | none := none -- Fail if no writeStatus exists/no write lock\n        | some ws := case isNone newData &amp;&amp; not (WriteStatus.mayWrite ws) of {\n            | true := none -- null writes can only happen on mayWrites\n            | false :=\n                let data := case newData of {\n                              | none := WriteStatus.data ws -- Do not update and do not fail if nothing needs to be written.\n                              | some dat := some dat\n                    };\n                    updatedAccess := a@KeyAccess{ writeStatus := some ws@WriteStatus{ data := data } };\n                    updatedKeyMap := Map.insert timestamp updatedAccess keyMap;\n                    updatedKeyAccesses := Map.insert key updatedKeyMap (DAGStructure.keyAccesses dag);\n                in some dag@DAGStructure{ keyAccesses := updatedKeyAccesses }\n        }\n      }\n    | none := none -- Fail if no access exists for the timestamp\n  };\n</code></pre></p> <pre><code>generateReadMsg\n  {KVSKey KVSDatum Executable}\n  (sender : EngineID)\n  (key : KVSKey)\n  (timestamp : TxFingerprint)\n  (data : KVSDatum)\n  (executor : EngineID)\n  : EngineMsg (PreMsg KVSKey KVSDatum Executable) :=\n  EngineMsg.mk@{\n    sender := sender;\n    target := executor;\n    mailbox := some 0;\n    msg := Anoma.PreMsg.MsgShard (ShardMsg.KVSRead KVSReadMsg.mkKVSReadMsg@{\n      timestamp := timestamp;\n      key := key;\n      data := data\n    })\n  };\n</code></pre> <pre><code>-- Try to send a read message for a valid, pending eager read lock.\nexecEagerReadsAtTime\n  {KVSKey KVSDatum Executable}\n  {{Ord KVSKey}}\n  (sender : EngineID)\n  (dag : DAGStructure KVSKey KVSDatum)\n  (key : KVSKey)\n  (timestamp : TxFingerprint)\n  (access : KeyAccess KVSDatum)\n  : Option (Pair (DAGStructure KVSKey KVSDatum) (EngineMsg (Anoma.PreMsg KVSKey KVSDatum Executable))) :=\n  case KeyAccess.readStatus access of {\n    | some readStatus :=\n      case ReadStatus.isEager readStatus &amp;&amp; not (ReadStatus.hasBeenRead readStatus) of {\n        | true :=\n          case timestamp &lt; DAGStructure.heardAllWrites dag &amp;&amp;\n               timestamp &gt;= DAGStructure.heardAllReads dag of {\n            | true :=\n              case findMostRecentWrite dag key timestamp of {\n                | some data :=\n                  let newReadStatus := readStatus@ReadStatus{\n                        hasBeenRead := true\n                      };\n                      newDag := addReadAccess dag key timestamp newReadStatus;\n                      msg := generateReadMsg sender key timestamp data (ReadStatus.executor readStatus);\n                  in some (mkPair newDag msg)\n                | none := none\n              }\n            | false := none\n          }\n        | false := none\n      }\n    | none := none\n  };\n</code></pre> <pre><code>-- Try to send a read messages for valid, pending eager read locks of a key.\nexecEagerReadsAtKey\n  {KVSKey KVSDatum Executable}\n  {{Ord KVSKey}}\n  (sender : EngineID)\n  (dag : DAGStructure KVSKey KVSDatum)\n  (key : KVSKey)\n  (timestampMap : Map TxFingerprint (KeyAccess KVSDatum))\n  : Pair (DAGStructure KVSKey KVSDatum) (List (EngineMsg (Anoma.PreMsg KVSKey KVSDatum Executable))) :=\n  let processTimestamp := \\{k v acc :=\n    case acc of {\n      | mkPair currDag msgs :=\n        case execEagerReadsAtTime sender currDag key k v of {\n          | some processed := mkPair (fst processed) ((snd processed) :: msgs)\n          | none := acc\n        }\n    }\n  };\n  in Map.foldr processTimestamp (mkPair dag []) timestampMap;\n</code></pre> <pre><code>-- Try to send all read messages for valid, pending eager read locks.\nexecEagerReads\n  {KVSKey KVSDatum Executable}\n  {{Ord KVSKey}}\n  (sender : EngineID)\n  (dag : DAGStructure KVSKey KVSDatum)\n  : Pair (DAGStructure KVSKey KVSDatum) (List (EngineMsg (Anoma.PreMsg KVSKey KVSDatum Executable))) :=\n  let processKey := \\{k v acc :=\n    case acc of {\n      | mkPair currDag msgs :=\n        let processed := execEagerReadsAtKey sender currDag k v;\n        in mkPair (fst processed) (msgs ++ snd processed)\n    }\n  };\n  in Map.foldr processKey (mkPair dag []) (DAGStructure.keyAccesses dag);\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","shard","behaviour"]},{"location":"arch/node/engines/shard_behaviour.html#actions","title":"Actions","text":"Auxiliary Juvix code","tags":["node-architecture","ordering-subsystem","engine","shard","behaviour"]},{"location":"arch/node/engines/shard_behaviour.html#shardaction","title":"<code>ShardAction</code>","text":"<pre><code>ShardAction (KVSKey KVSDatum Executable ProgramState : Type) : Type :=\n  Action\n    ShardCfg\n    (ShardLocalState KVSKey KVSDatum)\n    ShardMailboxState\n    ShardTimerHandle\n    ShardActionArguments\n    (Anoma.PreMsg KVSKey KVSDatum Executable)\n    (Anoma.PreCfg KVSKey KVSDatum Executable)\n    (Anoma.PreEnv KVSKey KVSDatum Executable ProgramState);\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","shard","behaviour"]},{"location":"arch/node/engines/shard_behaviour.html#shardactioninput","title":"<code>ShardActionInput</code>","text":"<pre><code>ShardActionInput (KVSKey KVSDatum Executable : Type) : Type :=\n  ActionInput\n    ShardCfg\n    (ShardLocalState KVSKey KVSDatum)\n    ShardMailboxState\n    ShardTimerHandle\n    ShardActionArguments\n    (Anoma.PreMsg KVSKey KVSDatum Executable);\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","shard","behaviour"]},{"location":"arch/node/engines/shard_behaviour.html#shardactioneffect","title":"<code>ShardActionEffect</code>","text":"<pre><code>ShardActionEffect (KVSKey KVSDatum Executable ProgramState : Type) : Type :=\n  ActionEffect\n    (ShardLocalState KVSKey KVSDatum)\n    ShardMailboxState\n    ShardTimerHandle\n    (Anoma.PreMsg KVSKey KVSDatum Executable)\n    (Anoma.PreCfg KVSKey KVSDatum Executable)\n    (Anoma.PreEnv KVSKey KVSDatum Executable ProgramState);\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","shard","behaviour"]},{"location":"arch/node/engines/shard_behaviour.html#shardactionexec","title":"<code>ShardActionExec</code>","text":"<pre><code>ShardActionExec (KVSKey KVSDatum Executable ProgramState : Type) : Type :=\n  ActionExec\n    ShardCfg\n    (ShardLocalState KVSKey KVSDatum)\n    ShardMailboxState\n    ShardTimerHandle\n    ShardActionArguments\n    (Anoma.PreMsg KVSKey KVSDatum Executable)\n    (Anoma.PreCfg KVSKey KVSDatum Executable)\n    (Anoma.PreEnv KVSKey KVSDatum Executable ProgramState);\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","shard","behaviour"]},{"location":"arch/node/engines/shard_behaviour.html#acquirelockaction","title":"<code>acquireLockAction</code>","text":"<p>Process lock acquisition request and send confirmation.</p> State update Update DAG with new read/write accesses. Messages to be sent KVSLockAcquired message to worker. <pre><code>acquireLockAction\n  {KVSKey KVSDatum Executable ProgramState}\n  {{Ord KVSKey}}\n  (input : ShardActionInput KVSKey KVSDatum Executable)\n  : Option (ShardActionEffect KVSKey KVSDatum Executable ProgramState) :=\n  let cfg := ActionInput.cfg input;\n      env := ActionInput.env input;\n      local := EngineEnv.localState env;\n      trigger := ActionInput.trigger input;\n  in case getEngineMsgFromTimestampedTrigger trigger of {\n    | some EngineMsg.mk@{\n        msg := Anoma.PreMsg.MsgShard (ShardMsg.KVSAcquireLock lockMsg)\n      } :=\n      let addEagerReadAccesses := \\{key dag :=\n            let readStatus := ReadStatus.mkReadStatus@{\n                  hasBeenRead := false;\n                  isEager := true;\n                  executor := KVSAcquireLockMsg.executor lockMsg\n                };\n            in addReadAccess dag key (KVSAcquireLockMsg.timestamp lockMsg) readStatus\n            };\n          addLazyReadAccesses := \\{key dag :=\n            let readStatus := ReadStatus.mkReadStatus@{\n                  hasBeenRead := false;\n                  isEager := false;\n                  executor := KVSAcquireLockMsg.executor lockMsg\n                };\n            in addReadAccess dag key (KVSAcquireLockMsg.timestamp lockMsg) readStatus\n            };\n          addWillWriteAccesses := \\{key dag :=\n            let writeStatus := WriteStatus.mkWriteStatus@{\n                  data := none;\n                  mayWrite := false\n                };\n            in addWriteAccess dag key (KVSAcquireLockMsg.timestamp lockMsg) writeStatus\n            };\n          addMayWriteAccesses := \\{key dag :=\n            let writeStatus := WriteStatus.mkWriteStatus@{\n                  data := none;\n                  mayWrite := true\n                };\n            in addWriteAccess dag key (KVSAcquireLockMsg.timestamp lockMsg) writeStatus\n            };\n          dagWithEagerReads := Set.foldr addEagerReadAccesses (ShardLocalState.dagStructure local) (KVSAcquireLockMsg.eager_read_keys lockMsg);\n          dagWithAllReads := Set.foldr addLazyReadAccesses dagWithEagerReads (KVSAcquireLockMsg.lazy_read_keys lockMsg);\n          dagWithWillWrites := Set.foldr addWillWriteAccesses dagWithAllReads (KVSAcquireLockMsg.will_write_keys lockMsg);\n          dagWithAllWrites := Set.foldr addMayWriteAccesses dagWithWillWrites (KVSAcquireLockMsg.may_write_keys lockMsg);\n          propagationResult := execEagerReads (getEngineIDFromEngineCfg cfg) dagWithAllWrites;\n          newLocal := local@ShardLocalState{dagStructure := fst propagationResult};\n          newEnv := env@EngineEnv{localState := newLocal};\n      in some ActionEffect.mk@{\n        env := newEnv;\n        msgs :=\n          EngineMsg.mk@{\n            sender := getEngineIDFromEngineCfg (ActionInput.cfg input);\n            target := KVSAcquireLockMsg.worker lockMsg;\n            mailbox := some 0;\n            msg := Anoma.PreMsg.MsgShard (ShardMsg.KVSLockAcquired KVSLockAcquiredMsg.mkKVSLockAcquiredMsg@{timestamp := KVSAcquireLockMsg.timestamp lockMsg})\n          } :: snd propagationResult;\n        timers := [];\n        engines := []\n      }\n    | _ := none\n  };\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","shard","behaviour"]},{"location":"arch/node/engines/shard_behaviour.html#processwriteaction","title":"<code>processWriteAction</code>","text":"<p>Process write request and potentially trigger eager reads.</p> State update Update DAG with write data and trigger eager reads. Messages to be sent KVSRead messages if eligible eager reads are found. <pre><code>processWriteAction\n  {KVSKey KVSDatum Executable ProgramState}\n  {{Ord KVSKey}}\n  (input : ShardActionInput KVSKey KVSDatum Executable)\n  : Option (ShardActionEffect KVSKey KVSDatum Executable ProgramState) :=\n  let cfg := ActionInput.cfg input;\n      env := ActionInput.env input;\n      local := EngineEnv.localState env;\n      trigger := ActionInput.trigger input;\n  in case getEngineMsgFromTimestampedTrigger trigger of {\n    | some EngineMsg.mk@{\n        msg := Anoma.PreMsg.MsgShard (ShardMsg.KVSWrite writeMsg)\n      } :=\n      let dag := ShardLocalState.dagStructure local;\n          key := KVSWriteMsg.key writeMsg;\n          timestamp := KVSWriteMsg.timestamp writeMsg;\n      in case replaceWriteAccess dag key timestamp (KVSWriteMsg.datum writeMsg) of {\n        | some updatedDag :=\n          let propagationResult := execEagerReads (getEngineIDFromEngineCfg cfg) updatedDag;\n              newLocal := local@ShardLocalState{ dagStructure := fst propagationResult };\n              newEnv := env@EngineEnv{ localState := newLocal };\n              readMsgs := snd propagationResult;\n          in some ActionEffect.mk@{\n            env := newEnv;\n            msgs := readMsgs;\n            timers := [];\n            engines := []\n          }\n        | none := none\n      }\n    | _ := none\n  };\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","shard","behaviour"]},{"location":"arch/node/engines/shard_behaviour.html#processreadrequestaction","title":"<code>processReadRequestAction</code>","text":"<p>Process read request and potentially send read response.</p> State update Update DAG with read request status. Messages to be sent KVSRead message if read data is available. <pre><code>processReadRequestAction\n  {KVSKey KVSDatum Executable ProgramState}\n  {{Ord KVSKey}}\n  (input : ShardActionInput KVSKey KVSDatum Executable)\n  : Option (ShardActionEffect KVSKey KVSDatum Executable ProgramState) :=\n  let cfg := ActionInput.cfg input;\n      env := ActionInput.env input;\n      local := EngineEnv.localState env;\n      trigger := ActionInput.trigger input;\n  in case getEngineMsgFromTimestampedTrigger trigger of {\n    | some EngineMsg.mk@{\n        sender := sender;\n        msg := Anoma.PreMsg.MsgShard (ShardMsg.KVSReadRequest readReqMsg)\n      } :=\n      let dag := ShardLocalState.dagStructure local;\n          key := KVSReadRequestMsg.key readReqMsg;\n          timestamp := KVSReadRequestMsg.timestamp readReqMsg;\n          actual := KVSReadRequestMsg.actual readReqMsg;\n      in case timestamp &gt;= DAGStructure.heardAllReads dag of {\n        | false := none\n        | true :=\n          case replaceReadAccess dag key timestamp of {\n            | none := none -- Fail if no valid read lock exists\n            | some updatedDag :=\n              case actual of {\n                | false :=\n                  -- If `actual` is false, just update the DAG and return.\n                  let newLocal := local@ShardLocalState{ dagStructure := updatedDag };\n                      newEnv := env@EngineEnv{ localState := newLocal };\n                  in some ActionEffect.mk@{\n                    env := newEnv;\n                    msgs := [];\n                    timers := [];\n                    engines := []\n                  }\n                | true :=\n                  case findMostRecentWrite updatedDag key timestamp of {\n                    | none := none\n                    | some data :=\n                      let readMsg := EngineMsg.mk@{\n                            sender := getEngineIDFromEngineCfg cfg;\n                            target := sender;\n                            mailbox := some 0;\n                            msg := Anoma.PreMsg.MsgShard (ShardMsg.KVSRead KVSReadMsg.mkKVSReadMsg@{\n                              timestamp := timestamp;\n                              key := key;\n                              data := data\n                            })\n                          };\n                          newLocal := local@ShardLocalState{ dagStructure := updatedDag };\n                          newEnv := env@EngineEnv{ localState := newLocal };\n                      in some ActionEffect.mk@{\n                        env := newEnv;\n                        msgs := [readMsg];\n                        timers := [];\n                        engines := []\n                      }\n                  }\n              }\n          }\n      }\n    | _ := none\n  };\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","shard","behaviour"]},{"location":"arch/node/engines/shard_behaviour.html#updateseenallaction","title":"<code>updateSeenAllAction</code>","text":"<p>Process seen-all update and potentially trigger eager reads.</p> State update Update DAG barriers and trigger eager reads. Messages to be sent KVSRead messages if eligible eager reads are found. <pre><code>updateSeenAllAction\n  {KVSKey KVSDatum Executable ProgramState}\n  {{Ord KVSKey}}\n  (input : ShardActionInput KVSKey KVSDatum Executable)\n  : Option (ShardActionEffect KVSKey KVSDatum Executable ProgramState) :=\n  let cfg := ActionInput.cfg input;\n      env := ActionInput.env input;\n      local := EngineEnv.localState env;\n      trigger := ActionInput.trigger input;\n  in case getEngineMsgFromTimestampedTrigger trigger of {\n    | some EngineMsg.mk@{\n        msg := Anoma.PreMsg.MsgShard (ShardMsg.UpdateSeenAll updateMsg)\n      } :=\n      let oldDag := ShardLocalState.dagStructure local;\n          newDag := case UpdateSeenAllMsg.write updateMsg of {\n            | true := oldDag@DAGStructure{\n                heardAllWrites := UpdateSeenAllMsg.timestamp updateMsg\n              }\n            | false := oldDag@DAGStructure{\n                heardAllReads := UpdateSeenAllMsg.timestamp updateMsg\n              }\n          };\n          propagationResult := case UpdateSeenAllMsg.write updateMsg of {\n            | true := execEagerReads (getEngineIDFromEngineCfg cfg) newDag\n            | false := mkPair newDag []\n          };\n          newLocal := local@ShardLocalState{dagStructure := fst propagationResult};\n          newEnv := env@EngineEnv{localState := newLocal};\n          readMsgs := snd propagationResult;\n      in some ActionEffect.mk@{\n          env := newEnv;\n          msgs := readMsgs;\n          timers := [];\n          engines := []\n        }\n    | _ := none\n  };\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","shard","behaviour"]},{"location":"arch/node/engines/shard_behaviour.html#action-labels","title":"Action Labels","text":"","tags":["node-architecture","ordering-subsystem","engine","shard","behaviour"]},{"location":"arch/node/engines/shard_behaviour.html#acquirelockactionlabel","title":"<code>acquireLockActionLabel</code>","text":"<pre><code>acquireLockActionLabel\n  {KVSKey KVSDatum Executable ProgramState}\n  {{Ord KVSKey}}\n  : ShardActionExec KVSKey KVSDatum Executable ProgramState := ActionExec.Seq [ acquireLockAction ];\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","shard","behaviour"]},{"location":"arch/node/engines/shard_behaviour.html#processwriteactionlabel","title":"<code>processWriteActionLabel</code>","text":"<pre><code>processWriteActionLabel\n  {KVSKey KVSDatum Executable ProgramState}\n  {{Ord KVSKey}}\n  : ShardActionExec KVSKey KVSDatum Executable ProgramState := ActionExec.Seq [ processWriteAction ];\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","shard","behaviour"]},{"location":"arch/node/engines/shard_behaviour.html#processreadrequestactionlabel","title":"<code>processReadRequestActionLabel</code>","text":"<pre><code>processReadRequestActionLabel\n  {KVSKey KVSDatum Executable ProgramState}\n  {{Ord KVSKey}}\n  : ShardActionExec KVSKey KVSDatum Executable ProgramState := ActionExec.Seq [ processReadRequestAction ];\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","shard","behaviour"]},{"location":"arch/node/engines/shard_behaviour.html#updateseenallactionlabel","title":"<code>updateSeenAllActionLabel</code>","text":"<pre><code>updateSeenAllActionLabel\n  {KVSKey KVSDatum Executable ProgramState}\n  {{Ord KVSKey}}\n  : ShardActionExec KVSKey KVSDatum Executable ProgramState := ActionExec.Seq [ updateSeenAllAction ];\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","shard","behaviour"]},{"location":"arch/node/engines/shard_behaviour.html#guards","title":"Guards","text":"Auxiliary Juvix code","tags":["node-architecture","ordering-subsystem","engine","shard","behaviour"]},{"location":"arch/node/engines/shard_behaviour.html#shardguard","title":"<code>ShardGuard</code>","text":"<pre><code>ShardGuard (KVSKey KVSDatum Executable ProgramState : Type) : Type :=\n  Guard\n    ShardCfg\n    (ShardLocalState KVSKey KVSDatum)\n    ShardMailboxState\n    ShardTimerHandle\n    ShardActionArguments\n    (Anoma.PreMsg KVSKey KVSDatum Executable)\n    (Anoma.PreCfg KVSKey KVSDatum Executable)\n    (Anoma.PreEnv KVSKey KVSDatum Executable ProgramState);\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","shard","behaviour"]},{"location":"arch/node/engines/shard_behaviour.html#shardguardoutput","title":"<code>ShardGuardOutput</code>","text":"<pre><code>ShardGuardOutput (KVSKey KVSDatum Executable ProgramState : Type) : Type :=\n  GuardOutput\n    ShardCfg\n    (ShardLocalState KVSKey KVSDatum)\n    ShardMailboxState\n    ShardTimerHandle\n    ShardActionArguments\n    (Anoma.PreMsg KVSKey KVSDatum Executable)\n    (Anoma.PreCfg KVSKey KVSDatum Executable)\n    (Anoma.PreEnv KVSKey KVSDatum Executable ProgramState);\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","shard","behaviour"]},{"location":"arch/node/engines/shard_behaviour.html#shardguardeval","title":"<code>ShardGuardEval</code>","text":"<pre><code>ShardGuardEval (KVSKey KVSDatum Executable ProgramState : Type) : Type :=\n  GuardEval\n    ShardCfg\n    (ShardLocalState KVSKey KVSDatum)\n    ShardMailboxState\n    ShardTimerHandle\n    ShardActionArguments\n    (Anoma.PreMsg KVSKey KVSDatum Executable)\n    (Anoma.PreCfg KVSKey KVSDatum Executable)\n    (Anoma.PreEnv KVSKey KVSDatum Executable ProgramState);\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","shard","behaviour"]},{"location":"arch/node/engines/shard_behaviour.html#acquirelockguard","title":"<code>acquireLockGuard</code>","text":"Condition Message type is ShardMsgKVSAcquireLock. <pre><code>acquireLockGuard\n  {KVSKey KVSDatum Executable ProgramState}\n  {{Ord KVSKey}}\n  (trigger : TimestampedTrigger ShardTimerHandle (Anoma.PreMsg KVSKey KVSDatum Executable))\n  (cfg : EngineCfg ShardCfg)\n  (env : ShardEnv KVSKey KVSDatum)\n  : Option (ShardGuardOutput KVSKey KVSDatum Executable ProgramState) :=\n  case getEngineMsgFromTimestampedTrigger trigger of {\n    | some EngineMsg.mk@{\n        msg := Anoma.PreMsg.MsgShard (ShardMsg.KVSAcquireLock _)\n      } :=\n      some GuardOutput.mk@{\n        action := acquireLockActionLabel;\n        args := []\n      }\n    | _ := none\n  };\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","shard","behaviour"]},{"location":"arch/node/engines/shard_behaviour.html#processwriteguard","title":"<code>processWriteGuard</code>","text":"Condition Message type is ShardMsgKVSWrite. <pre><code>processWriteGuard\n  {KVSKey KVSDatum Executable ProgramState}\n  {{Ord KVSKey}}\n  (trigger : TimestampedTrigger ShardTimerHandle (Anoma.PreMsg KVSKey KVSDatum Executable))\n  (cfg : EngineCfg ShardCfg)\n  (env : ShardEnv KVSKey KVSDatum)\n  : Option (ShardGuardOutput KVSKey KVSDatum Executable ProgramState) :=\n  case getEngineMsgFromTimestampedTrigger trigger of {\n    | some EngineMsg.mk@{\n        msg := Anoma.PreMsg.MsgShard (ShardMsg.KVSWrite _)\n      } :=\n      some GuardOutput.mk@{\n        action := processWriteActionLabel;\n        args := []\n      }\n    | _ := none\n  };\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","shard","behaviour"]},{"location":"arch/node/engines/shard_behaviour.html#processreadrequestguard","title":"<code>processReadRequestGuard</code>","text":"Condition Message type is ShardMsgKVSReadRequest. <pre><code>processReadRequestGuard\n  {KVSKey KVSDatum Executable ProgramState}\n  {{Ord KVSKey}}\n  (trigger : TimestampedTrigger ShardTimerHandle (Anoma.PreMsg KVSKey KVSDatum Executable))\n  (cfg : EngineCfg ShardCfg)\n  (env : ShardEnv KVSKey KVSDatum)\n  : Option (ShardGuardOutput KVSKey KVSDatum Executable ProgramState) :=\n  case getEngineMsgFromTimestampedTrigger trigger of {\n    | some EngineMsg.mk@{\n        msg := Anoma.PreMsg.MsgShard (ShardMsg.KVSReadRequest _)\n      } :=\n      some GuardOutput.mk@{\n        action := processReadRequestActionLabel;\n        args := []\n      }\n    | _ := none\n  };\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","shard","behaviour"]},{"location":"arch/node/engines/shard_behaviour.html#updateseenallguard","title":"<code>updateSeenAllGuard</code>","text":"Condition Message type is ShardMsgUpdateSeenAll. <pre><code>updateSeenAllGuard\n  {KVSKey KVSDatum Executable ProgramState}\n  {{Ord KVSKey}}\n  (trigger : TimestampedTrigger ShardTimerHandle (Anoma.PreMsg KVSKey KVSDatum Executable))\n  (cfg : EngineCfg ShardCfg)\n  (env : ShardEnv KVSKey KVSDatum)\n  : Option (ShardGuardOutput KVSKey KVSDatum Executable ProgramState) :=\n  case getEngineMsgFromTimestampedTrigger trigger of {\n    | some EngineMsg.mk@{\n        msg := Anoma.PreMsg.MsgShard (ShardMsg.UpdateSeenAll _)\n      } :=\n      some GuardOutput.mk@{\n        action := updateSeenAllActionLabel;\n        args := []\n      }\n    | _ := none\n  };\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","shard","behaviour"]},{"location":"arch/node/engines/shard_behaviour.html#the-shard-behaviour","title":"The Shard Behaviour","text":"","tags":["node-architecture","ordering-subsystem","engine","shard","behaviour"]},{"location":"arch/node/engines/shard_behaviour.html#shardbehaviour","title":"<code>ShardBehaviour</code>","text":"<pre><code>ShardBehaviour (KVSKey KVSDatum Executable ProgramState : Type) : Type :=\n  EngineBehaviour\n    ShardCfg\n    (ShardLocalState KVSKey KVSDatum)\n    ShardMailboxState\n    ShardTimerHandle\n    ShardActionArguments\n    (Anoma.PreMsg KVSKey KVSDatum Executable)\n    (Anoma.PreCfg KVSKey KVSDatum Executable)\n    (Anoma.PreEnv KVSKey KVSDatum Executable ProgramState);\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","shard","behaviour"]},{"location":"arch/node/engines/shard_behaviour.html#instantiation","title":"Instantiation","text":"<pre><code>shardBehaviour : ShardBehaviour String String ByteString String :=\n  EngineBehaviour.mk@{\n    guards := GuardEval.First [\n      acquireLockGuard;\n      processWriteGuard;\n      processReadRequestGuard;\n      updateSeenAllGuard\n    ]\n  };\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","shard","behaviour"]},{"location":"arch/node/engines/shard_config.html","title":"Shard Configuration","text":"Juvix imports <pre><code>module arch.node.engines.shard_config;\n\nimport prelude open;\nimport arch.node.engines.shard_messages open;\nimport arch.node.types.engine open;\nimport arch.node.types.messages open;\nimport arch.node.types.identities open;\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","shard","configuration"]},{"location":"arch/node/engines/shard_config.html#shard-configuration","title":"Shard Configuration","text":"","tags":["node-architecture","ordering-subsystem","engine","shard","configuration"]},{"location":"arch/node/engines/shard_config.html#overview","title":"Overview","text":"<p>The shard configuration contains static information for shard engine instances.</p>","tags":["node-architecture","ordering-subsystem","engine","shard","configuration"]},{"location":"arch/node/engines/shard_config.html#the-shard-configuration","title":"The Shard Configuration","text":"","tags":["node-architecture","ordering-subsystem","engine","shard","configuration"]},{"location":"arch/node/engines/shard_config.html#shardcfg","title":"<code>ShardCfg</code>","text":"<pre><code>type ShardCfg := mk;\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","shard","configuration"]},{"location":"arch/node/engines/shard_config.html#instantiation","title":"Instantiation","text":"<p>```juvix extract-module-statements module shard_config_example;</p> <p>shardCfg : EngineCfg ShardCfg :=     EngineCfg.mk@{       node := PublicKey.Curve25519PubKey \"0xabcd1234\";       name := \"shard\";       cfg := ShardCfg.mk;     }   ; end; ```</p>","tags":["node-architecture","ordering-subsystem","engine","shard","configuration"]},{"location":"arch/node/engines/shard_environment.html","title":"Shard Environment","text":"Juvix imports <pre><code>module arch.node.engines.shard_environment;\nimport prelude open;\nimport arch.node.engines.shard_messages open;\nimport arch.node.types.engine open;\nimport arch.node.types.messages open;\nimport arch.node.types.identities open;\nimport arch.node.types.anoma_message as Anoma open;\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","shard","environment"]},{"location":"arch/node/engines/shard_environment.html#shard-environment","title":"Shard Environment","text":"","tags":["node-architecture","ordering-subsystem","engine","shard","environment"]},{"location":"arch/node/engines/shard_environment.html#overview","title":"Overview","text":"<p>The shard environment maintains state about key-value pairs, tracking read and write accesses for each key across different transaction timestamps. It provides multi-version concurrent storage capabilities.</p>","tags":["node-architecture","ordering-subsystem","engine","shard","environment"]},{"location":"arch/node/engines/shard_environment.html#mailbox-states","title":"Mailbox states","text":"<pre><code>syntax alias ShardMailboxState := Unit;\n</code></pre> <p>The shard engine does not require complex mailbox states. Therefore, we define the mailbox state type as <code>Unit</code>.</p>","tags":["node-architecture","ordering-subsystem","engine","shard","environment"]},{"location":"arch/node/engines/shard_environment.html#local-state","title":"Local state","text":"Auxiliary Juvix code <p> <pre><code>type ReadStatus := mkReadStatus {\n  hasBeenRead : Bool;\n  isEager : Bool;\n  executor : EngineID\n};\n\ntype WriteStatus KVSDatum := mkWriteStatus @{\n  data : Option KVSDatum;\n  mayWrite : Bool\n};\n\ntype KeyAccess KVSDatum := mkKeyAccess @{\n  readStatus : Option ReadStatus;\n  writeStatus : Option (WriteStatus KVSDatum)\n};\n\ntype DAGStructure KVSKey KVSDatum := mkDAGStructure @{\n  keyAccesses : Map KVSKey (Map TxFingerprint (KeyAccess KVSDatum));\n  heardAllReads : TxFingerprint;\n  heardAllWrites : TxFingerprint\n};\n</code></pre> </p>","tags":["node-architecture","ordering-subsystem","engine","shard","environment"]},{"location":"arch/node/engines/shard_environment.html#shardlocalstate","title":"<code>ShardLocalState</code>","text":"<pre><code>type ShardLocalState KVSKey KVSDatum := mk @{\n  dagStructure : DAGStructure KVSKey KVSDatum;\n  anchors : List NarwhalBlock\n};\n</code></pre> Arguments <code>dagStructure</code> Structure tracking all key accesses across transactions, including read/write status and <code>heardAll</code> points <code>anchors</code> Sequence of consensus decisions (Currently unused)","tags":["node-architecture","ordering-subsystem","engine","shard","environment"]},{"location":"arch/node/engines/shard_environment.html#timer-handles","title":"Timer handles","text":"<pre><code>syntax alias ShardTimerHandle := Unit;\n</code></pre> <p>The shard engine does not require timers. Therefore, we define the timer handle type as <code>Unit</code>.</p>","tags":["node-architecture","ordering-subsystem","engine","shard","environment"]},{"location":"arch/node/engines/shard_environment.html#the-shard-environment","title":"The Shard Environment","text":"","tags":["node-architecture","ordering-subsystem","engine","shard","environment"]},{"location":"arch/node/engines/shard_environment.html#shardenv","title":"<code>ShardEnv</code>","text":"<pre><code>ShardEnv (KVSKey KVSDatum : Type) : Type :=\n  EngineEnv\n    (ShardLocalState KVSKey KVSDatum)\n    ShardMailboxState\n    ShardTimerHandle\n    Anoma.Msg;\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","shard","environment"]},{"location":"arch/node/engines/shard_environment.html#instantiation","title":"Instantiation","text":"<p>```juvix extract-module-statements module shard_environment_example;</p> <p>shardEnv : ShardEnv String String :=     EngineEnv.mk@{       localState := ShardLocalState.mk@{         dagStructure := DAGStructure.mkDAGStructure@{           keyAccesses := Map.empty;           heardAllReads := 0;           heardAllWrites := 0         };         anchors := []       };       mailboxCluster := Map.empty;       acquaintances := Set.empty;       timers := []     }   ; end; ```</p>","tags":["node-architecture","ordering-subsystem","engine","shard","environment"]},{"location":"arch/node/engines/shard_messages.html","title":"Shard Messages","text":"Juvix imports <pre><code>module arch.node.engines.shard_messages;\nimport prelude open;\nimport arch.node.types.basics open;\nimport arch.node.types.identities open;\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","shard","message-types"]},{"location":"arch/node/engines/shard_messages.html#shard-messages","title":"Shard Messages","text":"<p>These are the messages that the Shard engine can receive/respond to.</p>","tags":["node-architecture","ordering-subsystem","engine","shard","message-types"]},{"location":"arch/node/engines/shard_messages.html#message-interface","title":"Message interface","text":"<pre><code>type ShardMsg KVSKey KVSDatum :=\n  | KVSReadRequest (KVSReadRequestMsg KVSKey)\n  | KVSWrite (KVSWriteMsg KVSKey KVSDatum)\n  | KVSAcquireLock (KVSAcquireLockMsg KVSKey)\n  | KVSLockAcquired (KVSLockAcquiredMsg)\n  | KVSRead (KVSReadMsg KVSKey KVSDatum)\n  | UpdateSeenAll (UpdateSeenAllMsg)\n  ;\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","shard","message-types"]},{"location":"arch/node/engines/shard_messages.html#message-sequence-diagrams","title":"Message sequence diagrams","text":"","tags":["node-architecture","ordering-subsystem","engine","shard","message-types"]},{"location":"arch/node/engines/shard_messages.html#transaction-lock-and-read-flow","title":"Transaction lock and read flow","text":"<pre><code>sequenceDiagram\n    participant WorkerEngine\n    participant Shard\n    participant Executor\n    participant Mempool\n    participant Consensus\n\n    WorkerEngine-&gt;&gt;Shard: KVSAcquireLock\n    Shard-&gt;&gt;WorkerEngine: KVSLockAcquired\n    Executor-&gt;&gt;Shard: KVSReadRequest\n    Mempool-&gt;&gt;Shard: UpdateSeenAll\n    Consensus-&gt;&gt;Shard: AnchorChosen\n    Shard-&gt;&gt;Executor: KVSRead\n    Executor-&gt;&gt;Shard: KVSWrite</code></pre>  Sequence Diagram: Transaction Lock and Read Flow","tags":["node-architecture","ordering-subsystem","engine","shard","message-types"]},{"location":"arch/node/engines/shard_messages.html#message-types","title":"Message types","text":"","tags":["node-architecture","ordering-subsystem","engine","shard","message-types"]},{"location":"arch/node/engines/shard_messages.html#kvsreadrequestmsg","title":"<code>KVSReadRequestMsg</code>","text":"<p>Read request from an Executor Engine.</p> <pre><code>type KVSReadRequestMsg KVSKey :=\n  mkKVSReadRequestMsg@{\n    timestamp : TxFingerprint;\n    key : KVSKey;\n    actual : Bool\n  }\n</code></pre> Arguments <code>timestamp</code> The logical timestamp identifying the transaction at which to read <code>key</code> The key to read <code>actual</code> True if value is actually needed, false if just cleaning up a lazy read","tags":["node-architecture","ordering-subsystem","engine","shard","message-types"]},{"location":"arch/node/engines/shard_messages.html#kvswritemsg","title":"<code>KVSWriteMsg</code>","text":"<p>Write request from an Executor Engine.</p> <pre><code>type KVSWriteMsg KVSKey KVSDatum :=\n  mkKVSWriteMsg@{\n    timestamp : TxFingerprint;\n    key : KVSKey;\n    datum : Option KVSDatum\n  }\n</code></pre> Arguments <code>timestamp</code> The logical timestamp identifying the transaction in which to write <code>key</code> The key to write to <code>datum</code> The data to write, or <code>none</code> to indicate no write","tags":["node-architecture","ordering-subsystem","engine","shard","message-types"]},{"location":"arch/node/engines/shard_messages.html#updateseenallmsg","title":"<code>UpdateSeenAllMsg</code>","text":"<p>Update about seen transactions from a Mempool Worker Engine.</p> <pre><code>type UpdateSeenAllMsg :=\n  mkUpdateSeenAllMsg@{\n    timestamp : TxFingerprint;\n    write : Bool\n  }\n</code></pre> Arguments <code>timestamp</code> The logical timestamp at which to push the SeenAll value. <code>write</code> Whether it is the <code>SeenAllReads</code> or <code>SeenAllWrites</code> to update.","tags":["node-architecture","ordering-subsystem","engine","shard","message-types"]},{"location":"arch/node/engines/shard_messages.html#kvsacquirelockmsg","title":"<code>KVSAcquireLockMsg</code>","text":"<p>Request to acquire locks for transaction execution.</p> <pre><code>type KVSAcquireLockMsg KVSKey :=\n  mkKVSAcquireLockMsg@{\n    lazy_read_keys : Set KVSKey;\n    eager_read_keys : Set KVSKey;\n    will_write_keys : Set KVSKey;\n    may_write_keys : Set KVSKey;\n    worker : EngineID;\n    executor : EngineID;\n    timestamp : TxFingerprint\n  }\n</code></pre> Arguments <code>lazy_read_keys</code> Keys this transaction may read (only send values read in response to <code>KVSReadRequest</code>s) <code>eager_read_keys</code> Keys this transaction will read (send values read as soon as possible) <code>will_write_keys</code> Keys this transaction will write <code>may_write_keys</code> Keys this transaction may write <code>worker</code> The Worker Engine in charge of the transaction <code>executor</code> The Executor for this transaction <code>timestamp</code> Specifies the transaction affiliated with these locks","tags":["node-architecture","ordering-subsystem","engine","shard","message-types"]},{"location":"arch/node/engines/shard_messages.html#kvslockacquiredmsg","title":"<code>KVSLockAcquiredMsg</code>","text":"<p>Confirmation that locks were acquired.</p> <pre><code>type KVSLockAcquiredMsg :=\n  mkKVSLockAcquiredMsg@{\n    timestamp : TxFingerprint\n  }\n</code></pre> Arguments <code>timestamp</code> The timestamp of the transaction which was locked.","tags":["node-architecture","ordering-subsystem","engine","shard","message-types"]},{"location":"arch/node/engines/shard_messages.html#kvsreadmsg","title":"<code>KVSReadMsg</code>","text":"<p>Value read response to executor.</p> <pre><code>type KVSReadMsg KVSKey KVSDatum :=\n  mkKVSReadMsg@{\n    timestamp : TxFingerprint;\n    key : KVSKey;\n    data : KVSDatum\n  }\n</code></pre> Arguments <code>timestamp</code> The timestamp of the transaction which was read. <code>key</code> The key which was read. <code>data</code> The the data read.","tags":["node-architecture","ordering-subsystem","engine","shard","message-types"]},{"location":"arch/node/engines/shard_messages.html#shardmsg","title":"<code>ShardMsg</code>","text":"<pre><code>type ShardMsg KVSKey KVSDatum :=\n  | KVSReadRequest (KVSReadRequestMsg KVSKey)\n  | KVSWrite (KVSWriteMsg KVSKey KVSDatum)\n  | KVSAcquireLock (KVSAcquireLockMsg KVSKey)\n  | KVSLockAcquired (KVSLockAcquiredMsg)\n  | KVSRead (KVSReadMsg KVSKey KVSDatum)\n  | UpdateSeenAll (UpdateSeenAllMsg)\n  ;\n</code></pre>","tags":["node-architecture","ordering-subsystem","engine","shard","message-types"]},{"location":"arch/node/engines/shard_messages.html#engine-components","title":"Engine components","text":"<ul> <li>Shard Configuration</li> <li>Shard Environment</li> <li>Shard Behaviour</li> </ul>","tags":["node-architecture","ordering-subsystem","engine","shard","message-types"]},{"location":"arch/node/engines/signs_for.html","title":"SignsFor Engine","text":"Juvix imports <pre><code>module arch.node.engines.signs_for;\n\nimport prelude open;\nimport arch.node.types.engine open;\n\nimport arch.node.engines.signs_for_config open public;\nimport arch.node.engines.signs_for_messages open public;\nimport arch.node.engines.signs_for_environment open public;\nimport arch.node.engines.signs_for_behaviour open public;\n\nimport arch.node.types.anoma as Anoma open;\n\nopen signs_for_config_example;\nopen signs_for_environment_example;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","signsfor"]},{"location":"arch/node/engines/signs_for.html#signsfor-engine","title":"SignsFor Engine","text":"<p>The SignsFor Engine manages signs for relationships between identities. A \"signs for\" relationship indicates that one identity can produce signatures (commitments) on behalf of another identity.</p>","tags":["node-architecture","identity-subsystem","engine","signsfor"]},{"location":"arch/node/engines/signs_for.html#purpose","title":"Purpose","text":"<p>The SignsFor Engine maintains and manages the state of sings for relationships between identities. It handles queries about these relationships, allows submission of new evidence, and provides information about existing relationships. This is useful in scenarios where signature delegation or proxy signing is required.</p>","tags":["node-architecture","identity-subsystem","engine","signsfor"]},{"location":"arch/node/engines/signs_for.html#engine-components","title":"Engine components","text":"<ul> <li>SignsFor Messages</li> <li>SignsFor Configuration</li> <li>SignsFor Environment</li> <li>SignsFor Behaviour</li> </ul>","tags":["node-architecture","identity-subsystem","engine","signsfor"]},{"location":"arch/node/engines/signs_for.html#type","title":"Type","text":"<pre><code>SignsForEngine : Type :=\n  Engine\n    SignsForCfg\n    SignsForLocalState\n    SignsForMailboxState\n    SignsForTimerHandle\n    SignsForActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","signsfor"]},{"location":"arch/node/engines/signs_for.html#example-of-a-signsfor-engine","title":"Example of a signsFor engine","text":"<pre><code>exampleSignsForEngine : SignsForEngine :=\n  Engine.mk@{\n    cfg := signsForCfg;\n    env := signsForEnv;\n    behaviour := signsForBehaviour;\n  };\n</code></pre> <p>where <code>signsForCfg</code> is defined as follows:</p> <p>```juvix extract-module-statements module signs_for_config_example;</p> <p>signsForCfg : EngineCfg SignsForCfg :=     EngineCfg.mk@{       node := PublicKey.Curve25519PubKey \"0xabcd1234\";       name := \"signs for\";       cfg := SignsForCfg.mk     }   ; end; <pre><code>`signsForEnv` is defined as follows:\n\n```juvix extract-module-statements\nmodule signs_for_environment_example;\n\nsignsForEnv : SignsForEnv :=\n    EngineEnv.mk@{\n      localState := SignsForLocalState.mk@{\n        evidenceStore := Set.empty\n      };\n      mailboxCluster := Map.empty;\n      acquaintances := Set.empty;\n      timers := []\n    }\n  ;\nend;\n</code></pre></p> <p>and <code>signsForBehaviour</code> is defined as follows:</p> <pre><code>signsForBehaviour : SignsForBehaviour :=\n  EngineBehaviour.mk@{\n    guards := GuardEval.First [\n      signsForQueryGuard;\n      submitEvidenceGuard;\n      queryEvidenceGuard\n    ]\n  };\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","signsfor"]},{"location":"arch/node/engines/signs_for_behaviour.html","title":"SignsFor Behaviour","text":"Juvix imports <pre><code>module arch.node.engines.signs_for_behaviour;\n\nimport prelude open;\nimport Stdlib.Data.Set as Set;\nimport arch.node.types.messages open;\nimport arch.node.types.engine open;\nimport arch.node.types.identities open;\nimport arch.node.engines.signs_for_environment open;\nimport arch.node.engines.signs_for_messages open;\nimport arch.node.engines.signs_for_config open;\nimport arch.node.types.anoma as Anoma open;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","signsfor","behaviour"]},{"location":"arch/node/engines/signs_for_behaviour.html#signsfor-behaviour","title":"SignsFor Behaviour","text":"","tags":["node-architecture","identity-subsystem","engine","signsfor","behaviour"]},{"location":"arch/node/engines/signs_for_behaviour.html#overview","title":"Overview","text":"<p>The behavior of the SignsFor Engine defines how it processes incoming messages and updates its state accordingly.</p>","tags":["node-architecture","identity-subsystem","engine","signsfor","behaviour"]},{"location":"arch/node/engines/signs_for_behaviour.html#action-arguments","title":"Action arguments","text":"","tags":["node-architecture","identity-subsystem","engine","signsfor","behaviour"]},{"location":"arch/node/engines/signs_for_behaviour.html#signsforactionargumentreplyto-replyto","title":"<code>SignsForActionArgumentReplyTo ReplyTo</code>","text":"<pre><code>type ReplyTo := mkReplyTo@{\n  whoAsked : Option EngineID;\n  mailbox : Option MailboxID;\n};\n</code></pre> <p>This action argument contains the address and mailbox ID of where the response message should be sent.</p> <code>whoAsked</code>: The engine ID of the requester. <code>mailbox</code>: The mailbox ID where the response should be sent.","tags":["node-architecture","identity-subsystem","engine","signsfor","behaviour"]},{"location":"arch/node/engines/signs_for_behaviour.html#signsforactionargument","title":"<code>SignsForActionArgument</code>","text":"<pre><code>type SignsForActionArgument :=\n  | SignsForActionArgumentReplyTo ReplyTo\n  ;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","signsfor","behaviour"]},{"location":"arch/node/engines/signs_for_behaviour.html#signsforactionarguments","title":"<code>SignsForActionArguments</code>","text":"<pre><code>SignsForActionArguments : Type := List SignsForActionArgument;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","signsfor","behaviour"]},{"location":"arch/node/engines/signs_for_behaviour.html#actions","title":"Actions","text":"Auxiliary Juvix code","tags":["node-architecture","identity-subsystem","engine","signsfor","behaviour"]},{"location":"arch/node/engines/signs_for_behaviour.html#signsforaction","title":"SignsForAction","text":"<pre><code>SignsForAction : Type :=\n  Action\n    SignsForCfg\n    SignsForLocalState\n    SignsForMailboxState\n    SignsForTimerHandle\n    SignsForActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","signsfor","behaviour"]},{"location":"arch/node/engines/signs_for_behaviour.html#signsforactioninput","title":"SignsForActionInput","text":"<pre><code>SignsForActionInput : Type :=\n  ActionInput\n    SignsForCfg\n    SignsForLocalState\n    SignsForMailboxState\n    SignsForTimerHandle\n    SignsForActionArguments\n    Anoma.Msg;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","signsfor","behaviour"]},{"location":"arch/node/engines/signs_for_behaviour.html#signsforactioneffect","title":"SignsForActionEffect","text":"<pre><code>SignsForActionEffect : Type :=\n  ActionEffect\n    SignsForLocalState\n    SignsForMailboxState\n    SignsForTimerHandle\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","signsfor","behaviour"]},{"location":"arch/node/engines/signs_for_behaviour.html#signsforactionexec","title":"SignsForActionExec","text":"<pre><code>SignsForActionExec : Type :=\n  ActionExec\n    SignsForCfg\n    SignsForLocalState\n    SignsForMailboxState\n    SignsForTimerHandle\n    SignsForActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","signsfor","behaviour"]},{"location":"arch/node/engines/signs_for_behaviour.html#signsforqueryaction","title":"<code>signsForQueryAction</code>","text":"<p>Respond to a signs_for query.</p> State update The state remains unchanged. Messages to be sent A <code>ReplySignsFor</code> message is sent back to the requester. Engines to be spawned No engine is created by this action. Timer updates No timers are set or cancelled. <pre><code>signsForQueryAction\n  (input : SignsForActionInput)\n  : Option SignsForActionEffect :=\n  let\n    env := ActionInput.env input;\n    cfg := ActionInput.cfg input;\n    tt := ActionInput.trigger input;\n    localState := EngineEnv.localState env;\n  in\n    case getEngineMsgFromTimestampedTrigger tt of {\n    | some EngineMsg.mk@{\n        msg := Anoma.PreMsg.MsgSignsFor (SignsForMsg.SignsForRequest (RequestSignsFor.mkRequestSignsFor externalIdentityA externalIdentityB));\n        sender := msgSender\n      } :=\n      let\n        hasEvidence := isElement \\{a b := a &amp;&amp; b} true (map \\{ evidence :=\n          isEqual (Ord.compare (SignsForEvidence.fromIdentity evidence) externalIdentityA) &amp;&amp;\n          isEqual (Ord.compare (SignsForEvidence.toIdentity evidence) externalIdentityB)\n        } (Set.toList (SignsForLocalState.evidenceStore localState)));\n        responseMsg := ReplySignsFor.mkReplySignsFor@{\n          signsFor := hasEvidence;\n          err := none\n        };\n      in some ActionEffect.mk@{\n        env := env;\n        msgs := [EngineMsg.mk@{\n          sender := getEngineIDFromEngineCfg cfg;\n          target := msgSender;\n          mailbox := some 0;\n          msg := Anoma.PreMsg.MsgSignsFor (SignsForMsg.SignsForReply responseMsg)\n        }];\n        timers := [];\n        engines := []\n      }\n    | _ := none\n    }\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","signsfor","behaviour"]},{"location":"arch/node/engines/signs_for_behaviour.html#submitevidenceaction","title":"<code>submitEvidenceAction</code>","text":"<p>Submit new signs_for evidence.</p> State update If the evidence doesn't already exist and is valid, it's added to the <code>evidenceStore</code> in the local state. Messages to be sent A <code>ReplySubmitSignsForEvidence</code> message is sent back to the requester. Engines to be spawned No engine is created by this action. Timer updates No timers are set or cancelled. <pre><code>submitEvidenceAction\n  (input : SignsForActionInput)\n  : Option SignsForActionEffect :=\n  let\n    env := ActionInput.env input;\n    cfg := ActionInput.cfg input;\n    tt := ActionInput.trigger input;\n    localState := EngineEnv.localState env;\n  in\n    case getEngineMsgFromTimestampedTrigger tt of {\n    | some EngineMsg.mk@{\n        msg := Anoma.PreMsg.MsgSignsFor (SignsForMsg.SubmitSignsForEvidenceRequest (RequestSubmitSignsForEvidence.mkRequestSubmitSignsForEvidence evidence));\n        sender := msgSender\n      } := case verifyEvidence evidence of {\n        | true :=\n          let\n            alreadyExists := isElement \\{a b := a &amp;&amp; b} true (map \\{e :=\n              isEqual (Ord.compare e evidence)\n            } (Set.toList (SignsForLocalState.evidenceStore localState)));\n          in case alreadyExists of {\n            | true :=\n              let\n                responseMsg := ReplySubmitSignsForEvidence.mkReplySubmitSignsForEvidence@{\n                  err := some \"Evidence already exists.\"\n                };\n              in some ActionEffect.mk@{\n                env := env;\n                msgs := [EngineMsg.mk@{\n                  sender := getEngineIDFromEngineCfg cfg;\n                  target := msgSender;\n                  mailbox := some 0;\n                  msg := Anoma.PreMsg.MsgSignsFor (SignsForMsg.SubmitSignsForEvidenceReply responseMsg)\n                }];\n                timers := [];\n                engines := []\n              }\n            | false :=\n              let\n                newEvidenceStore := Set.insert evidence (SignsForLocalState.evidenceStore localState);\n                updatedLocalState := localState@SignsForLocalState{\n                  evidenceStore := newEvidenceStore\n                };\n                newEnv := env@EngineEnv{\n                  localState := updatedLocalState\n                };\n                responseMsg := ReplySubmitSignsForEvidence.mkReplySubmitSignsForEvidence@{\n                  err := none\n                };\n              in some ActionEffect.mk@{\n                env := newEnv;\n                msgs := [EngineMsg.mk@{\n                  sender := getEngineIDFromEngineCfg cfg;\n                  target := msgSender;\n                  mailbox := some 0;\n                  msg := Anoma.PreMsg.MsgSignsFor (SignsForMsg.SubmitSignsForEvidenceReply responseMsg)\n                }];\n                timers := [];\n                engines := []\n              }\n          }\n        | false :=\n          let\n            responseMsg := ReplySubmitSignsForEvidence.mkReplySubmitSignsForEvidence@{\n              err := some \"Invalid evidence provided.\"\n            };\n          in some ActionEffect.mk@{\n            env := env;\n            msgs := [EngineMsg.mk@{\n              sender := getEngineIDFromEngineCfg cfg;\n              target := msgSender;\n              mailbox := some 0;\n              msg := Anoma.PreMsg.MsgSignsFor (SignsForMsg.SubmitSignsForEvidenceReply responseMsg)\n            }];\n            timers := [];\n            engines := []\n          }\n      }\n    | _ := none\n    }\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","signsfor","behaviour"]},{"location":"arch/node/engines/signs_for_behaviour.html#queryevidenceaction","title":"<code>queryEvidenceAction</code>","text":"<p>Query signs_for evidence for a specific identity.</p> State update The state remains unchanged. Messages to be sent A <code>ReplyQuerySignsForEvidence</code> message is sent back to the requester. Engines to be spawned No engine is created by this action. Timer updates No timers are set or cancelled. <pre><code>queryEvidenceAction\n  (input : SignsForActionInput)\n  : Option SignsForActionEffect :=\n  let\n    env := ActionInput.env input;\n    cfg := ActionInput.cfg input;\n    tt := ActionInput.trigger input;\n    localState := EngineEnv.localState env;\n  in\n    case getEngineMsgFromTimestampedTrigger tt of {\n    | some EngineMsg.mk@{\n        msg := Anoma.PreMsg.MsgSignsFor (SignsForMsg.QuerySignsForEvidenceRequest (RequestQuerySignsForEvidence.mkRequestQuerySignsForEvidence externalIdentity));\n        sender := msgSender\n      } :=\n      let\n        relevantEvidence := Set.filter \\{evidence :=\n          isEqual (Ord.compare (SignsForEvidence.fromIdentity evidence) externalIdentity) ||\n          isEqual (Ord.compare (SignsForEvidence.toIdentity evidence) externalIdentity)\n        } (SignsForLocalState.evidenceStore localState);\n        responseMsg := ReplyQuerySignsForEvidence.mkReplyQuerySignsForEvidence@{\n          externalIdentity := externalIdentity;\n          evidence := relevantEvidence;\n          err := none\n        };\n      in some ActionEffect.mk@{\n        env := env;\n        msgs := [EngineMsg.mk@{\n          sender := getEngineIDFromEngineCfg cfg;\n          target := msgSender;\n          mailbox := some 0;\n          msg := Anoma.PreMsg.MsgSignsFor (SignsForMsg.QuerySignsForEvidenceReply responseMsg)\n        }];\n        timers := [];\n        engines := []\n      }\n    | _ := none\n    }\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","signsfor","behaviour"]},{"location":"arch/node/engines/signs_for_behaviour.html#action-labels","title":"Action Labels","text":"","tags":["node-architecture","identity-subsystem","engine","signsfor","behaviour"]},{"location":"arch/node/engines/signs_for_behaviour.html#signsforqueryactionlabel","title":"<code>signsForQueryActionLabel</code>","text":"<pre><code>signsForQueryActionLabel : SignsForActionExec := ActionExec.Seq [ signsForQueryAction ];\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","signsfor","behaviour"]},{"location":"arch/node/engines/signs_for_behaviour.html#submitevidenceactionlabel","title":"<code>submitEvidenceActionLabel</code>","text":"<pre><code>submitEvidenceActionLabel : SignsForActionExec := ActionExec.Seq [ submitEvidenceAction ];\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","signsfor","behaviour"]},{"location":"arch/node/engines/signs_for_behaviour.html#queryevidenceactionlabel","title":"<code>queryEvidenceActionLabel</code>","text":"<pre><code>queryEvidenceActionLabel : SignsForActionExec := ActionExec.Seq [ queryEvidenceAction ];\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","signsfor","behaviour"]},{"location":"arch/node/engines/signs_for_behaviour.html#guards","title":"Guards","text":"Auxiliary Juvix code","tags":["node-architecture","identity-subsystem","engine","signsfor","behaviour"]},{"location":"arch/node/engines/signs_for_behaviour.html#signsforguard","title":"<code>SignsForGuard</code>","text":"<p> <pre><code>SignsForGuard : Type :=\n  Guard\n    SignsForCfg\n    SignsForLocalState\n    SignsForMailboxState\n    SignsForTimerHandle\n    SignsForActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","identity-subsystem","engine","signsfor","behaviour"]},{"location":"arch/node/engines/signs_for_behaviour.html#signsforguardoutput","title":"<code>SignsForGuardOutput</code>","text":"<p> <pre><code>SignsForGuardOutput : Type :=\n  GuardOutput\n    SignsForCfg\n    SignsForLocalState\n    SignsForMailboxState\n    SignsForTimerHandle\n    SignsForActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","identity-subsystem","engine","signsfor","behaviour"]},{"location":"arch/node/engines/signs_for_behaviour.html#signsforguardeval","title":"<code>SignsForGuardEval</code>","text":"<p> <pre><code>SignsForGuardEval : Type :=\n  GuardEval\n    SignsForCfg\n    SignsForLocalState\n    SignsForMailboxState\n    SignsForTimerHandle\n    SignsForActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","identity-subsystem","engine","signsfor","behaviour"]},{"location":"arch/node/engines/signs_for_behaviour.html#signsforqueryguard","title":"<code>signsForQueryGuard</code>","text":"Condition Message type is <code>MsgSignsForRequest</code>. <pre><code>signsForQueryGuard\n  (tt : TimestampedTrigger SignsForTimerHandle Anoma.Msg)\n  (cfg : EngineCfg SignsForCfg)\n  (env : SignsForEnv)\n  : Option SignsForGuardOutput :=\n  case getEngineMsgFromTimestampedTrigger tt of {\n    | some EngineMsg.mk@{\n        msg := Anoma.PreMsg.MsgSignsFor (SignsForMsg.SignsForRequest _);\n      } := some GuardOutput.mk@{\n        action := signsForQueryActionLabel;\n        args := []\n      }\n    | _ := none\n    };\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","signsfor","behaviour"]},{"location":"arch/node/engines/signs_for_behaviour.html#submitevidenceguard","title":"<code>submitEvidenceGuard</code>","text":"Condition Message type is <code>MsgSubmitSignsForEvidenceRequest</code>. <pre><code>submitEvidenceGuard\n  (tt : TimestampedTrigger SignsForTimerHandle Anoma.Msg)\n  (cfg : EngineCfg SignsForCfg)\n  (env : SignsForEnv)\n  : Option SignsForGuardOutput :=\n  case getEngineMsgFromTimestampedTrigger tt of {\n    | some EngineMsg.mk@{\n        msg := Anoma.PreMsg.MsgSignsFor (SignsForMsg.SubmitSignsForEvidenceRequest _);\n      } := some GuardOutput.mk@{\n        action := submitEvidenceActionLabel;\n        args := []\n      }\n    | _ := none\n    };\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","signsfor","behaviour"]},{"location":"arch/node/engines/signs_for_behaviour.html#queryevidenceguard","title":"<code>queryEvidenceGuard</code>","text":"Condition Message type is <code>MsgQuerySignsForEvidenceRequest</code>. <pre><code>queryEvidenceGuard\n  (tt : TimestampedTrigger SignsForTimerHandle Anoma.Msg)\n  (cfg : EngineCfg SignsForCfg)\n  (env : SignsForEnv)\n  : Option SignsForGuardOutput :=\n  case getEngineMsgFromTimestampedTrigger tt of {\n    | some EngineMsg.mk@{\n        msg := Anoma.PreMsg.MsgSignsFor (SignsForMsg.QuerySignsForEvidenceRequest _);\n      } := some GuardOutput.mk@{\n        action := queryEvidenceActionLabel;\n        args := []\n      }\n    | _ := none\n    };\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","signsfor","behaviour"]},{"location":"arch/node/engines/signs_for_behaviour.html#the-signsfor-behaviour","title":"The SignsFor Behaviour","text":"","tags":["node-architecture","identity-subsystem","engine","signsfor","behaviour"]},{"location":"arch/node/engines/signs_for_behaviour.html#signsforbehaviour","title":"<code>SignsForBehaviour</code>","text":"<pre><code>SignsForBehaviour : Type :=\n  EngineBehaviour\n    SignsForCfg\n    SignsForLocalState\n    SignsForMailboxState\n    SignsForTimerHandle\n    SignsForActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","signsfor","behaviour"]},{"location":"arch/node/engines/signs_for_behaviour.html#instantiation","title":"Instantiation","text":"<pre><code>signsForBehaviour : SignsForBehaviour :=\n  EngineBehaviour.mk@{\n    guards := GuardEval.First [\n      signsForQueryGuard;\n      submitEvidenceGuard;\n      queryEvidenceGuard\n    ]\n  };\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","signsfor","behaviour"]},{"location":"arch/node/engines/signs_for_behaviour.html#signsfor-action-flowcharts","title":"SignsFor Action Flowcharts","text":"","tags":["node-architecture","identity-subsystem","engine","signsfor","behaviour"]},{"location":"arch/node/engines/signs_for_behaviour.html#signsforqueryaction-flowchart","title":"<code>signsForQueryAction</code> flowchart","text":"<pre><code>flowchart TD\n  subgraph C[Conditions]\n    CMsg&gt;MsgSignsForRequest]\n  end\n\n  G(signsForQueryGuard)\n  A(signsForQueryAction)\n\n  C --&gt; G -- *signsForQueryActionLabel* --&gt; A --&gt; E\n\n  subgraph E[Effects]\n    EMsg&gt;MsgSignsForReply&lt;br/&gt;signsFor result]\n  end</code></pre>  signsForQueryAction flowchart","tags":["node-architecture","identity-subsystem","engine","signsfor","behaviour"]},{"location":"arch/node/engines/signs_for_behaviour.html#submitevidenceaction-flowchart","title":"<code>submitEvidenceAction</code> flowchart","text":"<pre><code>flowchart TD\n  subgraph C[Conditions]\n    CMsg&gt;MsgSubmitSignsForEvidenceRequest]\n  end\n\n  G(submitEvidenceGuard)\n  A(submitEvidenceAction)\n\n  C --&gt; G -- *submitEvidenceActionLabel* --&gt; A --&gt; E\n\n  subgraph E[Effects]\n    EEnv[(evidenceStore update)]\n    EMsg&gt;MsgSubmitSignsForEvidenceReply]\n  end</code></pre>  submitEvidenceAction flowchart","tags":["node-architecture","identity-subsystem","engine","signsfor","behaviour"]},{"location":"arch/node/engines/signs_for_behaviour.html#queryevidenceaction-flowchart","title":"<code>queryEvidenceAction</code> flowchart","text":"<pre><code>flowchart TD\n  subgraph C[Conditions]\n    CMsg&gt;MsgQuerySignsForEvidenceRequest]\n  end\n\n  G(queryEvidenceGuard)\n  A(queryEvidenceAction)\n\n  C --&gt; G -- *queryEvidenceActionLabel* --&gt; A --&gt; E\n\n  subgraph E[Effects]\n    EMsg&gt;MsgQuerySignsForEvidenceReply&lt;br/&gt;matching evidence]\n  end</code></pre>  queryEvidenceAction flowchart","tags":["node-architecture","identity-subsystem","engine","signsfor","behaviour"]},{"location":"arch/node/engines/signs_for_config.html","title":"SignsFor Configuration","text":"Juvix imports <pre><code>module arch.node.engines.signs_for_config;\n\nimport prelude open;\nimport arch.node.engines.signs_for_messages open;\nimport arch.node.types.engine open;\nimport arch.node.types.messages open;\nimport arch.node.types.identities open;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","signsfor","configuration"]},{"location":"arch/node/engines/signs_for_config.html#signsfor-configuration","title":"SignsFor Configuration","text":"","tags":["node-architecture","identity-subsystem","engine","signsfor","configuration"]},{"location":"arch/node/engines/signs_for_config.html#overview","title":"Overview","text":"<p>The SignsFor engine configuration contains static information for SignsFor engine instances.</p>","tags":["node-architecture","identity-subsystem","engine","signsfor","configuration"]},{"location":"arch/node/engines/signs_for_config.html#the-signsfor-configuration","title":"The SignsFor Configuration","text":"","tags":["node-architecture","identity-subsystem","engine","signsfor","configuration"]},{"location":"arch/node/engines/signs_for_config.html#signsforcfg","title":"<code>SignsForCfg</code>","text":"<pre><code>type SignsForCfg := mk;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","signsfor","configuration"]},{"location":"arch/node/engines/signs_for_config.html#instantiation","title":"Instantiation","text":"<p>```juvix extract-module-statements module signs_for_config_example;</p> <p>signsForCfg : EngineCfg SignsForCfg :=     EngineCfg.mk@{       node := PublicKey.Curve25519PubKey \"0xabcd1234\";       name := \"signs for\";       cfg := SignsForCfg.mk     }   ; end; ```</p>","tags":["node-architecture","identity-subsystem","engine","signsfor","configuration"]},{"location":"arch/node/engines/signs_for_environment.html","title":"SignsFor Environment","text":"Juvix imports <pre><code>module arch.node.engines.signs_for_environment;\n\nimport prelude open;\nimport arch.node.types.messages open;\nimport arch.node.types.engine_environment open;\nimport arch.node.types.identities open;\nimport arch.node.engines.signs_for_messages open;\nimport arch.node.types.anoma_message as Anoma open;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","signsfor","environment"]},{"location":"arch/node/engines/signs_for_environment.html#signsfor-environment","title":"SignsFor Environment","text":"","tags":["node-architecture","identity-subsystem","engine","signsfor","environment"]},{"location":"arch/node/engines/signs_for_environment.html#overview","title":"Overview","text":"<p>The SignsFor Engine environment maintains the state necessary for managing <code>signs_for</code> relationships between identities, including storing evidence submitted by clients.</p> Auxiliary Juvix code <pre><code>axiom verifyEvidence : SignsForEvidence -&gt; Bool;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","signsfor","environment"]},{"location":"arch/node/engines/signs_for_environment.html#mailbox-states","title":"Mailbox states","text":"<p>The SignsFor Engine does not require complex mailbox states. We define the mailbox state as <code>Unit</code>.</p>","tags":["node-architecture","identity-subsystem","engine","signsfor","environment"]},{"location":"arch/node/engines/signs_for_environment.html#signsformailboxstate","title":"<code>SignsForMailboxState</code>","text":"<pre><code>syntax alias SignsForMailboxState := Unit;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","signsfor","environment"]},{"location":"arch/node/engines/signs_for_environment.html#local-state","title":"Local state","text":"<p>The local state of the SignsFor Engine includes the evidence for signs_for relationships.</p>","tags":["node-architecture","identity-subsystem","engine","signsfor","environment"]},{"location":"arch/node/engines/signs_for_environment.html#signsforlocalstate","title":"<code>SignsForLocalState</code>","text":"<pre><code>type SignsForLocalState := mk@{\n  evidenceStore : Set SignsForEvidence;\n};\n</code></pre> Arguments <code>evidenceStore</code>: The collection of validated <code>SignsForEvidence</code> which has been submitted to the engine.","tags":["node-architecture","identity-subsystem","engine","signsfor","environment"]},{"location":"arch/node/engines/signs_for_environment.html#timer-handle","title":"Timer Handle","text":"<p>The SignsFor Engine does not require a timer handle type. Therefore, we define the timer handle type as <code>Unit</code>.</p>","tags":["node-architecture","identity-subsystem","engine","signsfor","environment"]},{"location":"arch/node/engines/signs_for_environment.html#signsfortimerhandle","title":"<code>SignsForTimerHandle</code>","text":"<pre><code>syntax alias SignsForTimerHandle := Unit;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","signsfor","environment"]},{"location":"arch/node/engines/signs_for_environment.html#the-signsfor-environment","title":"The SignsFor Environment","text":"","tags":["node-architecture","identity-subsystem","engine","signsfor","environment"]},{"location":"arch/node/engines/signs_for_environment.html#signsforenv","title":"<code>SignsForEnv</code>","text":"<pre><code>SignsForEnv : Type :=\n  EngineEnv\n    SignsForLocalState\n    SignsForMailboxState\n    SignsForTimerHandle\n    Anoma.Msg;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","signsfor","environment"]},{"location":"arch/node/engines/signs_for_environment.html#instantiation","title":"Instantiation","text":"<p>```juvix extract-module-statements module signs_for_environment_example;</p> <p>signsForEnv : SignsForEnv :=     EngineEnv.mk@{       localState := SignsForLocalState.mk@{         evidenceStore := Set.empty       };       mailboxCluster := Map.empty;       acquaintances := Set.empty;       timers := []     }   ; end; ```</p>","tags":["node-architecture","identity-subsystem","engine","signsfor","environment"]},{"location":"arch/node/engines/signs_for_messages.html","title":"SignsFor Messages","text":"Juvix imports <pre><code>module arch.node.engines.signs_for_messages;\nimport prelude open;\nimport arch.node.types.identities open;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","signsfor","message-types"]},{"location":"arch/node/engines/signs_for_messages.html#signsfor-messages","title":"SignsFor Messages","text":"","tags":["node-architecture","identity-subsystem","engine","signsfor","message-types"]},{"location":"arch/node/engines/signs_for_messages.html#message-interface","title":"Message interface","text":"<pre><code>type SignsForMsg :=\n  | SignsForRequest RequestSignsFor\n  | SignsForReply ReplySignsFor\n  | SubmitSignsForEvidenceRequest RequestSubmitSignsForEvidence\n  | SubmitSignsForEvidenceReply ReplySubmitSignsForEvidence\n  | QuerySignsForEvidenceRequest RequestQuerySignsForEvidence\n  | QuerySignsForEvidenceReply ReplyQuerySignsForEvidence\n  ;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","signsfor","message-types"]},{"location":"arch/node/engines/signs_for_messages.html#message-sequence-diagrams","title":"Message sequence diagrams","text":"","tags":["node-architecture","identity-subsystem","engine","signsfor","message-types"]},{"location":"arch/node/engines/signs_for_messages.html#submitting-signs_for-evidence","title":"Submitting <code>signs_for</code> evidence","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant SignsForEngine\n\n    Client-&gt;&gt;SignsForEngine: RequestSubmitSignsForEvidence\n    Note over SignsForEngine: Process and store evidence\n    SignsForEngine-&gt;&gt;Client: ReplySubmitSignsForEvidence</code></pre>  Submitting evidence of a signs_for relationship","tags":["node-architecture","identity-subsystem","engine","signsfor","message-types"]},{"location":"arch/node/engines/signs_for_messages.html#querying-signs_for-relationship","title":"Querying <code>signs_for</code> relationship","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant SignsForEngine\n\n    Client-&gt;&gt;SignsForEngine: RequestSignsFor (X signs for Y?)\n    Note over SignsForEngine: Check stored evidence\n    SignsForEngine-&gt;&gt;Client: ReplySignsFor</code></pre>  Querying whether a specific signs_for relationship exists","tags":["node-architecture","identity-subsystem","engine","signsfor","message-types"]},{"location":"arch/node/engines/signs_for_messages.html#retrieving-signs_for-evidence","title":"Retrieving <code>signs_for</code> evidence","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant SignsForEngine\n\n    Client-&gt;&gt;SignsForEngine: RequestQuerySignsForEvidence (for X)\n    Note over SignsForEngine: Retrieve relevant evidence\n    SignsForEngine-&gt;&gt;Client: ReplyQuerySignsForEvidence</code></pre>  Retrieving all signs_for evidence related to a particular identity","tags":["node-architecture","identity-subsystem","engine","signsfor","message-types"]},{"location":"arch/node/engines/signs_for_messages.html#message-types","title":"Message types","text":"","tags":["node-architecture","identity-subsystem","engine","signsfor","message-types"]},{"location":"arch/node/engines/signs_for_messages.html#requestsignsfor","title":"<code>RequestSignsFor</code>","text":"<pre><code>type RequestSignsFor := mkRequestSignsFor {\n  externalIdentityA : ExternalIdentity;\n  externalIdentityB : ExternalIdentity\n};\n</code></pre> <p>A <code>RequestSignsFor</code> queries whether <code>externalIdentityA</code> can sign on behalf of <code>externalIdentityB</code>.</p> Arguments <code>externalIdentityA</code>: The identity attempting to sign. <code>externalIdentityB</code>: The identity on whose behalf the signature is made.","tags":["node-architecture","identity-subsystem","engine","signsfor","message-types"]},{"location":"arch/node/engines/signs_for_messages.html#msgsignsforreply-replysignsfor","title":"<code>MsgSignsForReply ReplySignsFor</code>","text":"<pre><code>type ReplySignsFor := mkReplySignsFor {\n  signsFor : Bool;\n  err : Option String\n};\n</code></pre> <p>A <code>ReplySignsFor</code> indicates whether the <code>signs_for</code> relationship exists.</p> Arguments <code>signsFor</code>: True if <code>externalIdentityA</code> can sign for <code>externalIdentityB</code>, False otherwise. <code>err</code>: An error message if the query failed.","tags":["node-architecture","identity-subsystem","engine","signsfor","message-types"]},{"location":"arch/node/engines/signs_for_messages.html#requestsubmitsignsforevidence","title":"<code>RequestSubmitSignsForEvidence</code>","text":"<pre><code>type RequestSubmitSignsForEvidence := mkRequestSubmitSignsForEvidence {\n  evidence : SignsForEvidence\n};\n</code></pre> <p>A <code>RequestSubmitSignsForEvidence</code> submits evidence of a <code>signs_for</code> relationship.</p> Arguments <code>evidence</code>: The evidence supporting the <code>signs_for</code> relationship.","tags":["node-architecture","identity-subsystem","engine","signsfor","message-types"]},{"location":"arch/node/engines/signs_for_messages.html#replysubmitsignsforevidence","title":"<code>ReplySubmitSignsForEvidence</code>","text":"<pre><code>type ReplySubmitSignsForEvidence := mkReplySubmitSignsForEvidence {\n  err : Option String\n};\n</code></pre> <p>A <code>ReplySubmitSignsForEvidence</code> acknowledges the submission of evidence.</p> Arguments <code>err</code>: An error message if the submission failed.","tags":["node-architecture","identity-subsystem","engine","signsfor","message-types"]},{"location":"arch/node/engines/signs_for_messages.html#requestquerysignsforevidence","title":"<code>RequestQuerySignsForEvidence</code>","text":"<pre><code>type RequestQuerySignsForEvidence := mkRequestQuerySignsForEvidence {\n  externalIdentity : ExternalIdentity\n};\n</code></pre> <p>A <code>RequestQuerySignsForEvidence</code> queries all <code>signs_for</code> evidence related to an identity.</p> Arguments <code>externalIdentity</code>: The identity for which to retrieve evidence.","tags":["node-architecture","identity-subsystem","engine","signsfor","message-types"]},{"location":"arch/node/engines/signs_for_messages.html#replyquerysignsforevidence","title":"<code>ReplyQuerySignsForEvidence</code>","text":"<pre><code>type ReplyQuerySignsForEvidence := mkReplyQuerySignsForEvidence {\n  externalIdentity : ExternalIdentity;\n  evidence : Set SignsForEvidence;\n  err : Option String\n};\n</code></pre> <p>A <code>ReplyQuerySignsForEvidence</code> provides the requested evidence.</p> Arguments <code>externalIdentity</code>: The identity for which to retrieve evidence. <code>evidence</code>: A set of <code>SignsForEvidence</code> related to the identity. <code>err</code>: An error message if the query failed.","tags":["node-architecture","identity-subsystem","engine","signsfor","message-types"]},{"location":"arch/node/engines/signs_for_messages.html#signsformsg","title":"<code>SignsForMsg</code>","text":"<pre><code>type SignsForMsg :=\n  | SignsForRequest RequestSignsFor\n  | SignsForReply ReplySignsFor\n  | SubmitSignsForEvidenceRequest RequestSubmitSignsForEvidence\n  | SubmitSignsForEvidenceReply ReplySubmitSignsForEvidence\n  | QuerySignsForEvidenceRequest RequestQuerySignsForEvidence\n  | QuerySignsForEvidenceReply ReplyQuerySignsForEvidence\n  ;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","signsfor","message-types"]},{"location":"arch/node/engines/signs_for_messages.html#engine-components","title":"Engine components","text":"<ul> <li>SignsFor Configuration</li> <li>SignsFor Environment</li> <li>SignsFor Behaviour</li> </ul>","tags":["node-architecture","identity-subsystem","engine","signsfor","message-types"]},{"location":"arch/node/engines/storage.html","title":"Storage Engine","text":"Juvix imports <pre><code>module arch.node.engines.storage;\n\nimport arch.node.engines.storage_messages open public;\nimport arch.node.engines.storage_config open public;\nimport arch.node.engines.storage_environment open public;\nimport arch.node.engines.storage_behaviour open public;\n\nimport arch.node.types.basics open;\nimport arch.node.types.engine open;\nimport arch.node.types.anoma as Anoma open;\n\nopen storage_config_example;\nopen storage_environment_example;\nopen storage_behaviour_example;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","storage","engine-definition"]},{"location":"arch/node/engines/storage.html#storage-engine","title":"Storage Engine","text":"","tags":["node-architecture","network-subsystem","engine","storage","engine-definition"]},{"location":"arch/node/engines/storage.html#purpose","title":"Purpose","text":"<p>The Storage engine implements distributed object storage. Each stored object is encrypted using convergent encryption with a key derived from the hash of the content and a secret key, then the ciphertext is split into equal-sized parts, and organized in a Merkle-tree.</p> <p>A <code>Chunk</code> is a Merkle-tree node that is stored by nodes in the network. An associated access control list may limit access to the chunk to a set of nodes, e.g. publisher or subscribers of a Topic.</p> <p>Nodes may commit to store a <code>Chunk</code> via a <code>ChunkCommitment</code> sent to a pub/sub Topic or shared directly with certain nodes, and keep track of known commitments by other nodes. This allows nodes to respond to chunk requests with either the chunk itself if available locally, or with a <code>ChunkCommitment</code> by a node that stores the requested chunk.</p>","tags":["node-architecture","network-subsystem","engine","storage","engine-definition"]},{"location":"arch/node/engines/storage.html#engine-components","title":"Engine components","text":"<ul> <li>Storage Messages</li> <li>Storage Configuration</li> <li>Storage Environment</li> <li>Storage Behaviour</li> </ul>","tags":["node-architecture","network-subsystem","engine","storage","engine-definition"]},{"location":"arch/node/engines/storage.html#the-type-for-a-storage-engine","title":"The type for a storage engine","text":"<pre><code>StorageEngine : Type :=\n  Engine\n    StorageLocalCfg\n    StorageLocalState\n    StorageMailboxState\n    StorageTimerHandle\n    StorageActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","storage","engine-definition"]},{"location":"arch/node/engines/storage.html#example-of-a-storage-engine","title":"Example of a storage engine","text":"<pre><code>exStorageEngine : StorageEngine :=\n  Engine.mk@{\n    cfg := exStorageCfg;\n    env := exStorageEnv;\n    behaviour := exStorageBehaviour;\n  };\n</code></pre> <p>Where <code>exStorageCfg</code> is defined as follows:</p> <p>```juvix extract-module-statements module storage_config_example;</p> <p>exStorageCfg : StorageCfg :=   EngineCfg.mk@{     node := PublicKey.Curve25519PubKey \"0xabcd1234\";     name := \"storage\";     cfg := StorageLocalCfg.mk;   };</p> <p>end; <pre><code>[`exStorageEnv`](https://specs.anoma.net/pr-347/arch/node/engines/storage_environment.html#exStorageEnv) is defined as follows:\n\n```juvix extract-module-statements\nmodule storage_environment_example;\n\nexStorageEnv : StorageEnv :=\n  EngineEnv.mk@{\n    localState := StorageLocalState.mk;\n    mailboxCluster := Map.empty;\n    acquaintances := Set.empty;\n    timers := []\n  };\n\nend;\n</code></pre></p> <p>and <code>exStorageBehaviour</code> is defined as follows:</p> <pre><code>module storage_behaviour_example;\n\nexStorageBehaviour : StorageBehaviour :=\n  EngineBehaviour.mk@{\n    guards :=\n      GuardEval.First [\n        exampleReplyGuard;\n      ];\n  };\n\nend;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","storage","engine-definition"]},{"location":"arch/node/engines/storage_behaviour.html","title":"Storage Behaviour","text":"Juvix imports <pre><code>module arch.node.engines.storage_behaviour;\n\nimport arch.node.engines.storage_messages open;\nimport arch.node.engines.storage_config open;\nimport arch.node.engines.storage_environment open;\n\nimport arch.node.types.basics open;\nimport arch.node.types.identities open;\nimport arch.node.types.messages open;\nimport arch.node.types.engine open;\nimport arch.node.types.anoma as Anoma open;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","storage","behaviour"]},{"location":"arch/node/engines/storage_behaviour.html#storage-behaviour","title":"Storage Behaviour","text":"","tags":["node-architecture","network-subsystem","engine","storage","behaviour"]},{"location":"arch/node/engines/storage_behaviour.html#overview","title":"Overview","text":"<p>A Storage engine acts in the ways described on this page. The action labels correspond to the actions that can be performed by the engine. Using the action labels, we describe the effects of the actions.</p>","tags":["node-architecture","network-subsystem","engine","storage","behaviour"]},{"location":"arch/node/engines/storage_behaviour.html#storage-action-flowchart","title":"Storage Action Flowchart","text":"","tags":["node-architecture","network-subsystem","engine","storage","behaviour"]},{"location":"arch/node/engines/storage_behaviour.html#examplereply-flowchart","title":"<code>exampleReply</code> Flowchart","text":"<pre><code>flowchart TD\n  subgraph C[Conditions]\n    CMsg&gt;StorageMsgExampleRequest&lt;br/&gt;from local engine]\n    CEnv[(exampleValue &lt; 10)]\n  end\n\n  G(exampleReplyGuard)\n  A(exampleReplyAction)\n\n  C --&gt; G -- *exampleReplyActionLabel* --&gt; A --&gt; E\n\n  subgraph E[Effects]\n    EEnv[(exampleValue := exampleValue + 1)]\n    EMsg&gt;StorageMsgExampleResponse&lt;br/&gt;argOne]\n  end</code></pre> <code>exampleReply</code> flowchart","tags":["node-architecture","network-subsystem","engine","storage","behaviour"]},{"location":"arch/node/engines/storage_behaviour.html#action-arguments","title":"Action arguments","text":"<p>The action arguments are set by a guard and passed to the action function as part of the <code>GuardOutput</code>.</p>","tags":["node-architecture","network-subsystem","engine","storage","behaviour"]},{"location":"arch/node/engines/storage_behaviour.html#storageactionarguments","title":"<code>StorageActionArguments</code>","text":"<pre><code>StorageActionArguments : Type := Unit;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","storage","behaviour"]},{"location":"arch/node/engines/storage_behaviour.html#actions","title":"Actions","text":"Auxiliary Juvix code","tags":["node-architecture","network-subsystem","engine","storage","behaviour"]},{"location":"arch/node/engines/storage_behaviour.html#storageaction","title":"<code>StorageAction</code>","text":"<p> <pre><code>StorageAction : Type :=\n  Action\n    StorageLocalCfg\n    StorageLocalState\n    StorageMailboxState\n    StorageTimerHandle\n    StorageActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","network-subsystem","engine","storage","behaviour"]},{"location":"arch/node/engines/storage_behaviour.html#storageactioninput","title":"<code>StorageActionInput</code>","text":"<p> <pre><code>StorageActionInput : Type :=\n  ActionInput\n    StorageLocalCfg\n    StorageLocalState\n    StorageMailboxState\n    StorageTimerHandle\n    StorageActionArguments\n    Anoma.Msg;\n</code></pre> </p>","tags":["node-architecture","network-subsystem","engine","storage","behaviour"]},{"location":"arch/node/engines/storage_behaviour.html#storageactioneffect","title":"<code>StorageActionEffect</code>","text":"<p> <pre><code>StorageActionEffect : Type :=\n  ActionEffect\n    StorageLocalState\n    StorageMailboxState\n    StorageTimerHandle\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","network-subsystem","engine","storage","behaviour"]},{"location":"arch/node/engines/storage_behaviour.html#storageactionexec","title":"<code>StorageActionExec</code>","text":"<p> <pre><code>StorageActionExec : Type :=\n  ActionExec\n    StorageLocalCfg\n    StorageLocalState\n    StorageMailboxState\n    StorageTimerHandle\n    StorageActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","network-subsystem","engine","storage","behaviour"]},{"location":"arch/node/engines/storage_behaviour.html#examplereplyaction","title":"<code>exampleReplyAction</code>","text":"<p>Respond with a <code>StorageMsgExampleReply</code>.</p> State update The state remains unchanged. Messages to be sent A <code>StorageMsgExampleReply</code> message with the data set by <code>exampleReplyGuard</code>. Engines to be spawned No engine is created by this action. Timer updates No timers are set or cancelled. <pre><code>exampleReplyAction\n  (input : StorageActionInput)\n  : Option StorageActionEffect :=\n  TODO {-\n  let\n    cfg := ActionInput.cfg input;\n    env := ActionInput.env input;\n    trigger := ActionInput.trigger input;\n    args := ActionInput.args input;\n  in\n    case getEngineMsgFromTimestampedTrigger trigger of {\n    | some EngineMsg.mk@{\n        msg := Anoma.PreMsg.MsgStorage (StorageMsgExampleRequest req);\n        sender := sender;\n        target := target;\n        mailbox := mailbox;\n      } :=\n      some ActionEffect.mk@{\n        env := env;\n        msgs := [\n          EngineMsg.mk@{\n            sender := getEngineIDFromEngineCfg cfg;\n            target := sender;\n            mailbox := some 0;\n            msg :=\n              Anoma.PreMsg.MsgStorage\n                (StorageMsgExampleReply\n                  (ok mkExampleReplyOk@{\n                    argOne := ExampleRequest.argOne req;\n                  }));\n          }\n        ];\n        timers := [];\n        engines := [];\n      }\n  | _ := none\n  -};\n</code></pre>","tags":["node-architecture","network-subsystem","engine","storage","behaviour"]},{"location":"arch/node/engines/storage_behaviour.html#action-labels","title":"Action Labels","text":"","tags":["node-architecture","network-subsystem","engine","storage","behaviour"]},{"location":"arch/node/engines/storage_behaviour.html#examplereplyactionlabel","title":"<code>exampleReplyActionLabel</code>","text":"<pre><code>exampleReplyActionLabel : StorageActionExec := ActionExec.Seq [ exampleReplyAction ];\n</code></pre>","tags":["node-architecture","network-subsystem","engine","storage","behaviour"]},{"location":"arch/node/engines/storage_behaviour.html#guards","title":"Guards","text":"Auxiliary Juvix code","tags":["node-architecture","network-subsystem","engine","storage","behaviour"]},{"location":"arch/node/engines/storage_behaviour.html#storageguard","title":"<code>StorageGuard</code>","text":"<p> <pre><code>StorageGuard : Type :=\n  Guard\n    StorageLocalCfg\n    StorageLocalState\n    StorageMailboxState\n    StorageTimerHandle\n    StorageActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","network-subsystem","engine","storage","behaviour"]},{"location":"arch/node/engines/storage_behaviour.html#storageguardoutput","title":"<code>StorageGuardOutput</code>","text":"<p> <pre><code>StorageGuardOutput : Type :=\n  GuardOutput\n    StorageLocalCfg\n    StorageLocalState\n    StorageMailboxState\n    StorageTimerHandle\n    StorageActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","network-subsystem","engine","storage","behaviour"]},{"location":"arch/node/engines/storage_behaviour.html#storageguardeval","title":"<code>StorageGuardEval</code>","text":"<p> <pre><code>StorageGuardEval : Type :=\n  GuardEval\n    StorageLocalCfg\n    StorageLocalState\n    StorageMailboxState\n    StorageTimerHandle\n    StorageActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","network-subsystem","engine","storage","behaviour"]},{"location":"arch/node/engines/storage_behaviour.html#examplereplyguard","title":"<code>exampleReplyGuard</code>","text":"<p>Guard description (optional).</p> Condition Message type is <code>StorageMsgExampleRequest</code>. <pre><code>exampleReplyGuard\n  (trigger : StorageTimestampedTrigger)\n  (cfg : StorageCfg)\n  (env : StorageEnv)\n  : Option StorageGuardOutput :=\n  TODO {-\n  case getEngineMsgFromTimestampedTrigger trigger of {\n    | some EngineMsg.mk@{\n        msg := Anoma.PreMsg.MsgStorage (StorageMsgExampleRequest req);\n        sender := mkPair none _; -- from local engines only (NodeID is none)\n      } := some GuardOutput.mk@{\n        action := exampleReplyActionLabel;\n        args := [];\n      }\n    | _ := none\n    -};\n</code></pre>","tags":["node-architecture","network-subsystem","engine","storage","behaviour"]},{"location":"arch/node/engines/storage_behaviour.html#engine-behaviour","title":"Engine behaviour","text":"","tags":["node-architecture","network-subsystem","engine","storage","behaviour"]},{"location":"arch/node/engines/storage_behaviour.html#storagebehaviour","title":"<code>StorageBehaviour</code>","text":"<pre><code>StorageBehaviour : Type :=\n  EngineBehaviour\n    StorageLocalCfg\n    StorageLocalState\n    StorageMailboxState\n    StorageTimerHandle\n    StorageActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","storage","behaviour"]},{"location":"arch/node/engines/storage_behaviour.html#instantiation","title":"Instantiation","text":"<pre><code>module storage_behaviour_example;\n\nexStorageBehaviour : StorageBehaviour :=\n  EngineBehaviour.mk@{\n    guards :=\n      GuardEval.First [\n        exampleReplyGuard;\n      ];\n  };\n\nend;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","storage","behaviour"]},{"location":"arch/node/engines/storage_config.html","title":"Storage Configuration","text":"Juvix imports <pre><code>module arch.node.engines.storage_config;\n\nimport arch.node.engines.storage_messages open;\n\nimport arch.node.types.basics open;\nimport arch.node.types.engine open;\nimport arch.node.types.identities open;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","storage","configuration"]},{"location":"arch/node/engines/storage_config.html#storage-configuration","title":"Storage Configuration","text":"","tags":["node-architecture","network-subsystem","engine","storage","configuration"]},{"location":"arch/node/engines/storage_config.html#overview","title":"Overview","text":"<p>The static configuration of the engine.</p>","tags":["node-architecture","network-subsystem","engine","storage","configuration"]},{"location":"arch/node/engines/storage_config.html#local-configuration","title":"Local Configuration","text":"","tags":["node-architecture","network-subsystem","engine","storage","configuration"]},{"location":"arch/node/engines/storage_config.html#storagelocalcfg","title":"<code>StorageLocalCfg</code>","text":"<p>The type for engine-specific local configuration.</p> <pre><code>type StorageLocalCfg :=\n  mk;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","storage","configuration"]},{"location":"arch/node/engines/storage_config.html#engine-configuration","title":"Engine Configuration","text":"","tags":["node-architecture","network-subsystem","engine","storage","configuration"]},{"location":"arch/node/engines/storage_config.html#storagecfg","title":"<code>StorageCfg</code>","text":"<pre><code>StorageCfg : Type :=\n  EngineCfg\n    StorageLocalCfg;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","storage","configuration"]},{"location":"arch/node/engines/storage_config.html#instantiation","title":"Instantiation","text":"<p>```juvix extract-module-statements module storage_config_example;</p> <p>exStorageCfg : StorageCfg :=   EngineCfg.mk@{     node := PublicKey.Curve25519PubKey \"0xabcd1234\";     name := \"storage\";     cfg := StorageLocalCfg.mk;   };</p> <p>end; ```</p>","tags":["node-architecture","network-subsystem","engine","storage","configuration"]},{"location":"arch/node/engines/storage_environment.html","title":"Storage Environment","text":"Juvix imports <pre><code>module arch.node.engines.storage_environment;\n\nimport arch.node.engines.storage_messages open;\n\nimport arch.node.types.basics open;\nimport arch.node.types.engine open;\nimport arch.node.types.messages open;\nimport arch.node.types.identities open;\nimport arch.node.types.anoma_message as Anoma open;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","storage","environment"]},{"location":"arch/node/engines/storage_environment.html#storage-environment","title":"Storage Environment","text":"","tags":["node-architecture","network-subsystem","engine","storage","environment"]},{"location":"arch/node/engines/storage_environment.html#overview","title":"Overview","text":"<p>The Engine environment of the engine.</p>","tags":["node-architecture","network-subsystem","engine","storage","environment"]},{"location":"arch/node/engines/storage_environment.html#mailbox-state","title":"Mailbox state","text":"","tags":["node-architecture","network-subsystem","engine","storage","environment"]},{"location":"arch/node/engines/storage_environment.html#storagemailboxstate","title":"<code>StorageMailboxState</code>","text":"<pre><code>StorageMailboxState : Type := Unit;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","storage","environment"]},{"location":"arch/node/engines/storage_environment.html#local-state","title":"Local state","text":"","tags":["node-architecture","network-subsystem","engine","storage","environment"]},{"location":"arch/node/engines/storage_environment.html#storagelocalstate","title":"<code>StorageLocalState</code>","text":"<pre><code>type StorageLocalState :=\n  mk;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","storage","environment"]},{"location":"arch/node/engines/storage_environment.html#timer-handles","title":"Timer handles","text":"","tags":["node-architecture","network-subsystem","engine","storage","environment"]},{"location":"arch/node/engines/storage_environment.html#storagetimerhandle","title":"<code>StorageTimerHandle</code>","text":"<pre><code>StorageTimerHandle : Type := Unit;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","storage","environment"]},{"location":"arch/node/engines/storage_environment.html#storagetimestampedtrigger","title":"<code>StorageTimestampedTrigger</code>","text":"<pre><code>StorageTimestampedTrigger : Type :=\n  TimestampedTrigger\n    StorageTimerHandle\n    Anoma.Msg;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","storage","environment"]},{"location":"arch/node/engines/storage_environment.html#engine-environment","title":"Engine Environment","text":"","tags":["node-architecture","network-subsystem","engine","storage","environment"]},{"location":"arch/node/engines/storage_environment.html#storageenv","title":"<code>StorageEnv</code>","text":"<pre><code>StorageEnv : Type :=\n  EngineEnv\n    StorageLocalState\n    StorageMailboxState\n    StorageTimerHandle\n    Anoma.Msg;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","storage","environment"]},{"location":"arch/node/engines/storage_environment.html#instantiation","title":"Instantiation","text":"<p>```juvix extract-module-statements module storage_environment_example;</p> <p>exStorageEnv : StorageEnv :=   EngineEnv.mk@{     localState := StorageLocalState.mk;     mailboxCluster := Map.empty;     acquaintances := Set.empty;     timers := []   };</p> <p>end; ```</p>","tags":["node-architecture","network-subsystem","engine","storage","environment"]},{"location":"arch/node/engines/storage_messages.html","title":"Storage Messages","text":"Juvix imports <pre><code>module arch.node.engines.storage_messages;\n\nimport arch.node.types.storage open;\n\nimport arch.node.types.basics open;\nimport arch.node.types.crypto open;\nimport arch.node.types.identities open;\nimport arch.node.types.messages open;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","storage","message-types"]},{"location":"arch/node/engines/storage_messages.html#storage-engine","title":"Storage Engine","text":"","tags":["node-architecture","network-subsystem","engine","storage","message-types"]},{"location":"arch/node/engines/storage_messages.html#message-interface","title":"Message interface","text":"<pre><code>type StorageMsg :=\n  | ChunkGetRequest ChunkGetRequest\n  | ChunkGetReply ChunkGetReply\n  | ChunkPutRequest Chunk\n  | ChunkPutReply ChunkPutReply\n  ;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","storage","message-types"]},{"location":"arch/node/engines/storage_messages.html#message-sequence-diagrams","title":"Message sequence diagrams","text":"","tags":["node-architecture","network-subsystem","engine","storage","message-types"]},{"location":"arch/node/engines/storage_messages.html#storage-message-sequence-diagram","title":"Storage message sequence diagram","text":"<pre><code>sequenceDiagram</code></pre>  Chunk request &amp; response.","tags":["node-architecture","network-subsystem","engine","storage","message-types"]},{"location":"arch/node/engines/storage_messages.html#message-types","title":"Message types","text":"","tags":["node-architecture","network-subsystem","engine","storage","message-types"]},{"location":"arch/node/engines/storage_messages.html#chunkgetrequest","title":"<code>ChunkGetRequest</code>","text":"<p>Request for a chunk of an object.</p> <p>Source: any local engine or remote Storage engine.</p> <pre><code>type ChunkGetRequest := mkChunkRequest {\n  chunk : ChunkID;\n  children : Either Bool Nat;\n}\n</code></pre> Arguments <code>chunk</code> Chunk ID <code>children</code> Request children recursively: <p>- <code>False</code>: none,   - <code>True</code>: all,   - <code>Nat</code>: up to nth level.</p>","tags":["node-architecture","network-subsystem","engine","storage","message-types"]},{"location":"arch/node/engines/storage_messages.html#chunkgetreply","title":"<code>ChunkGetReply</code>","text":"<p>Reply to a <code>ChunkGetRequest</code>.</p> Auxiliary type <pre><code>ChunkGetReply : Type := Result ChunkGetReplyOk ChunkGetReplyError;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","storage","message-types"]},{"location":"arch/node/engines/storage_messages.html#chunkgetreplyok","title":"<code>ChunkGetReplyOk</code>","text":"<p>Chunk found.</p> <p>When available, the chunk contents are returned, otherwise a list of commitments by nodes that store the chunk.</p> <pre><code>type ChunkGetReplyOk :=\n  | ChunkGetReplyOkContent Chunk\n  | ChunkGetReplyOkCommitment (Set ChunkCommitment)\n  ;\n</code></pre> <code>ChunkGetReplyOk</code> constructors <code>ChunkGetReplyOkContent</code> Reply with chunk content. <code>ChunkGetReplyOkCommitment</code> Reply with a set of known storage commitments. Each such commitment contains a <code>NodeID</code> that stores the chunk until the time specified. To retrieve the chunk, the requestor should issue another <code>ChunkGetRequest</code> to one of these nodes, trying them in the order of most recently successfully contacted.","tags":["node-architecture","network-subsystem","engine","storage","message-types"]},{"location":"arch/node/engines/storage_messages.html#chunkgetreplyerror","title":"<code>ChunkGetReplyError</code>","text":"<p>Chunk not found.</p> <pre><code>type ChunkGetReplyError :=\n  | ChunkGetReplyErrorNotFound\n  ;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","storage","message-types"]},{"location":"arch/node/engines/storage_messages.html#chunkputrequest","title":"<code>ChunkPutRequest</code>","text":"<p>Request to store a chunk. May be restricted to local engines.</p> Auxiliary type <pre><code>ChunkPutReply : Type := Result ChunkPutReplyOk ChunkPutReplyError;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","storage","message-types"]},{"location":"arch/node/engines/storage_messages.html#chunkputrequestok","title":"<code>ChunkPutRequestOk</code>","text":"<p>Request to store a chunk.</p> <pre><code>type ChunkPutRequestOk :=\n  | ChunkPutRequestOkSuccess\n  ;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","storage","message-types"]},{"location":"arch/node/engines/storage_messages.html#chunkputreplyok","title":"<code>ChunkPutReplyOk</code>","text":"<p>Chunk stored successfully or already exists.</p> <pre><code>type ChunkPutReplyOk :=\n  | ChunkPutReplyOkStored\n  | ChunkPutReplyOkExists\n  ;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","storage","message-types"]},{"location":"arch/node/engines/storage_messages.html#chunkputreplyerror","title":"<code>ChunkPutReplyError</code>","text":"<p>Failed to store chunk.</p> <pre><code>type ChunkPutReplyError :=\n  | ChunkPutReplyErrorFailed\n  ;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","storage","message-types"]},{"location":"arch/node/engines/storage_messages.html#storagemsg","title":"<code>StorageMsg</code>","text":"<p>All storage protocol messages.</p> <pre><code>type StorageMsg :=\n  | ChunkGetRequest ChunkGetRequest\n  | ChunkGetReply ChunkGetReply\n  | ChunkPutRequest Chunk\n  | ChunkPutReply ChunkPutReply\n  ;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","storage","message-types"]},{"location":"arch/node/engines/storage_messages.html#engine-components","title":"Engine components","text":"<ul> <li>Storage Configuration</li> <li>Storage Environment</li> <li>Storage Behaviour</li> </ul>","tags":["node-architecture","network-subsystem","engine","storage","message-types"]},{"location":"arch/node/engines/ticker.html","title":"Ticker Engine","text":"Juvix imports <pre><code>module arch.node.engines.ticker;\n\nimport prelude open;\nimport arch.node.types.engine_environment open;\nimport arch.node.types.engine_behaviour open;\nimport arch.node.types.engine open;\n\nimport arch.node.engines.ticker_config open public;\nimport arch.node.engines.ticker_messages open public;\nimport arch.node.engines.ticker_environment open public;\nimport arch.node.engines.ticker_behaviour open public;\n\nimport arch.node.types.anoma as Anoma open;\n\nopen ticker_config_example;\nopen ticker_environment_example;\n</code></pre>","tags":["node-architecture","example","engine","ticker","engine-definition"]},{"location":"arch/node/engines/ticker.html#ticker-engine","title":"Ticker Engine","text":"<p>The Ticker engine provides a simple counter functionality, allowing clients to increment a counter and retrieve its current value.</p>","tags":["node-architecture","example","engine","ticker","engine-definition"]},{"location":"arch/node/engines/ticker.html#purpose","title":"Purpose","text":"<p>A ticker engine maintains a counter in its local state. It increases the counter when it receives an <code>Increment</code> message and provides the updated result upon receiving a <code>Count</code> message. The initial state initializes the counter.</p>","tags":["node-architecture","example","engine","ticker","engine-definition"]},{"location":"arch/node/engines/ticker.html#engine-components","title":"Engine components","text":"<ul> <li>Ticker Messages</li> <li>Ticker Configuration</li> <li>Ticker Environment</li> <li>Ticker Behaviour</li> </ul>","tags":["node-architecture","example","engine","ticker","engine-definition"]},{"location":"arch/node/engines/ticker.html#useful-links","title":"Useful links","text":"<ul> <li>Composable Semantic Models for Actor Theories</li> </ul>","tags":["node-architecture","example","engine","ticker","engine-definition"]},{"location":"arch/node/engines/ticker.html#type","title":"Type","text":"<pre><code>TickerEngine : Type :=\n  Engine\n    TickerLocalCfg\n    TickerLocalState\n    TickerMailboxState\n    TickerTimerHandle\n    TickerActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","example","engine","ticker","engine-definition"]},{"location":"arch/node/engines/ticker.html#example-of-a-ticker-engine","title":"Example of a ticker engine","text":"<pre><code>exampleTickerEngine : TickerEngine :=\n  Engine.mk@{\n    cfg := tickerCfg;\n    env := tickerEnv;\n    behaviour := tickerBehaviour;\n  };\n</code></pre> <p>where <code>tickerCfg</code> is defined as follows:</p> <p>```juvix extract-module-statements module ticker_config_example;</p> <p>tickerCfg : TickerCfg :=     EngineCfg.mk@{       node := PublicKey.Curve25519PubKey \"0xabcd1234\";       name := \"ticker\";       cfg := TickerLocalCfg.mk;     }   ; end; <pre><code>`tickerEnv` is defined as follows:\n\n```juvix extract-module-statements\nmodule ticker_environment_example;\n\ntickerEnv : TickerEnv :=\n  EngineEnv.mk@{\n    localState := TickerLocalState.mk@{\n      counter := 0\n    };\n    mailboxCluster := Map.empty;\n    acquaintances := Set.empty;\n    timers := []\n  };\nend;\n</code></pre></p> <p>and <code>tickerBehaviour</code> is defined as follows:</p> <pre><code>tickerBehaviour : TickerBehaviour :=\n  EngineBehaviour.mk@{\n    guards :=\n      GuardEval.First [\n        incrementGuard;\n        countReplyGuard\n      ];\n  };\n</code></pre>","tags":["node-architecture","example","engine","ticker","engine-definition"]},{"location":"arch/node/engines/ticker_behaviour.html","title":"Ticker Behaviour","text":"Juvix imports <pre><code>module arch.node.engines.ticker_behaviour;\n\nimport arch.node.engines.ticker_messages open;\nimport arch.node.engines.ticker_config open;\nimport arch.node.engines.ticker_environment open;\n\nimport prelude open;\nimport arch.node.types.basics open;\nimport arch.node.types.identities open;\nimport arch.node.types.messages open;\nimport arch.node.types.engine open;\nimport arch.node.types.anoma as Anoma open;\n</code></pre>","tags":["node-architecture","example","engine","ticker","behaviour"]},{"location":"arch/node/engines/ticker_behaviour.html#ticker-behaviour","title":"Ticker Behaviour","text":"","tags":["node-architecture","example","engine","ticker","behaviour"]},{"location":"arch/node/engines/ticker_behaviour.html#overview","title":"Overview","text":"<p>The Ticker engine maintains a counter as local state and allows two actions: incrementing the counter and sending the current counter value.</p>","tags":["node-architecture","example","engine","ticker","behaviour"]},{"location":"arch/node/engines/ticker_behaviour.html#action-arguments","title":"Action arguments","text":"","tags":["node-architecture","example","engine","ticker","behaviour"]},{"location":"arch/node/engines/ticker_behaviour.html#tickeractionargumentreplyto-replyto","title":"<code>TickerActionArgumentReplyTo ReplyTo</code>","text":"<pre><code>type ReplyTo := mkReplyTo@{\n  whoAsked : Option EngineID;\n  mailbox : Option MailboxID;\n};\n</code></pre> <p>This action argument contains the address and mailbox ID of where the response message should be sent.</p> Arguments <code>whoAsked</code>: is the address of the engine that sent the message. <code>mailbox</code>: is the mailbox ID where the response message should be sent.","tags":["node-architecture","example","engine","ticker","behaviour"]},{"location":"arch/node/engines/ticker_behaviour.html#tickeractionargument","title":"<code>TickerActionArgument</code>","text":"<pre><code>type TickerActionArgument :=\n  | TickerActionArgumentReplyTo ReplyTo\n  ;\n</code></pre>","tags":["node-architecture","example","engine","ticker","behaviour"]},{"location":"arch/node/engines/ticker_behaviour.html#tickeractionarguments","title":"<code>TickerActionArguments</code>","text":"<pre><code>TickerActionArguments : Type := List TickerActionArgument;\n</code></pre>","tags":["node-architecture","example","engine","ticker","behaviour"]},{"location":"arch/node/engines/ticker_behaviour.html#actions","title":"Actions","text":"Auxiliary Juvix code","tags":["node-architecture","example","engine","ticker","behaviour"]},{"location":"arch/node/engines/ticker_behaviour.html#tickeraction","title":"<code>TickerAction</code>","text":"<pre><code>TickerAction : Type :=\n  Action\n    TickerLocalCfg\n    TickerLocalState\n    TickerMailboxState\n    TickerTimerHandle\n    TickerActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","example","engine","ticker","behaviour"]},{"location":"arch/node/engines/ticker_behaviour.html#tickeractioninput","title":"<code>TickerActionInput</code>","text":"<pre><code>TickerActionInput : Type :=\n  ActionInput\n    TickerLocalCfg\n    TickerLocalState\n    TickerMailboxState\n    TickerTimerHandle\n    TickerActionArguments\n    Anoma.Msg;\n</code></pre>","tags":["node-architecture","example","engine","ticker","behaviour"]},{"location":"arch/node/engines/ticker_behaviour.html#tickeractioneffect","title":"<code>TickerActionEffect</code>","text":"<pre><code>TickerActionEffect : Type :=\n  ActionEffect\n    TickerLocalState\n    TickerMailboxState\n    TickerTimerHandle\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","example","engine","ticker","behaviour"]},{"location":"arch/node/engines/ticker_behaviour.html#tickeractionexec","title":"<code>TickerActionExec</code>","text":"<pre><code>TickerActionExec : Type :=\n  ActionExec\n    TickerLocalCfg\n    TickerLocalState\n    TickerMailboxState\n    TickerTimerHandle\n    TickerActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","example","engine","ticker","behaviour"]},{"location":"arch/node/engines/ticker_behaviour.html#incrementaction","title":"<code>incrementAction</code>","text":"<p>Increment the counter.</p> State update The counter value is increased by one. Messages to be sent No messages are added to the send queue. Engines to be spawned No engine is created by this action. Timer updates No timers are set or cancelled. <pre><code>incrementAction\n  (input : TickerActionInput)\n  : Option TickerActionEffect :=\n  let\n    env := ActionInput.env input;\n    counterValue := TickerLocalState.counter (EngineEnv.localState env)\n  in some ActionEffect.mk@{\n      env := env@EngineEnv{\n        localState := TickerLocalState.mk@{\n          counter := counterValue + 1\n        }\n      };\n      msgs := [];\n      timers := [];\n      engines := [];\n    }\n</code></pre>","tags":["node-architecture","example","engine","ticker","behaviour"]},{"location":"arch/node/engines/ticker_behaviour.html#countreplyaction","title":"<code>countReplyAction</code>","text":"<p>Respond with the counter value.</p> State update The state remains unchanged. Messages to be sent A message with the current counter value is sent to the requester. Engines to be spawned No engine is created by this action. Timer updates No timers are set or cancelled. <pre><code>countReplyAction\n  (input : TickerActionInput)\n  : Option TickerActionEffect :=\n  let\n    cfg := ActionInput.cfg input;\n    env := ActionInput.env input;\n    trigger := ActionInput.trigger input;\n    counterValue := TickerLocalState.counter (EngineEnv.localState env)\n  in\n    case getEngineMsgFromTimestampedTrigger trigger of {\n    | some emsg :=\n      some ActionEffect.mk@{\n        env := env;\n        msgs := [\n          EngineMsg.mk@{\n            sender := getEngineIDFromEngineCfg cfg;\n            target := EngineMsg.sender emsg;\n            mailbox := some 0;\n            msg :=\n              Anoma.PreMsg.MsgTicker\n                (TickerMsg.CountReply\n                  CountReply.mkCountReply@{\n                    counter := counterValue;\n                  })\n          }\n        ];\n        timers := [];\n        engines := [];\n      }\n    | _ := none\n    };\n</code></pre>","tags":["node-architecture","example","engine","ticker","behaviour"]},{"location":"arch/node/engines/ticker_behaviour.html#action-labels","title":"Action Labels","text":"","tags":["node-architecture","example","engine","ticker","behaviour"]},{"location":"arch/node/engines/ticker_behaviour.html#incrementactionlabel","title":"<code>incrementActionLabel</code>","text":"<pre><code>incrementActionLabel : TickerActionExec :=  ActionExec.Seq [ incrementAction ];\n</code></pre>","tags":["node-architecture","example","engine","ticker","behaviour"]},{"location":"arch/node/engines/ticker_behaviour.html#countreplyactionlabel","title":"<code>countReplyActionLabel</code>","text":"<pre><code>countReplyActionLabel : TickerActionExec := ActionExec.Seq [ countReplyAction ];\n</code></pre>","tags":["node-architecture","example","engine","ticker","behaviour"]},{"location":"arch/node/engines/ticker_behaviour.html#guards","title":"Guards","text":"Auxiliary Juvix code","tags":["node-architecture","example","engine","ticker","behaviour"]},{"location":"arch/node/engines/ticker_behaviour.html#tickerguard","title":"<code>TickerGuard</code>","text":"<p> <pre><code>TickerGuard : Type :=\n  Guard\n    TickerLocalCfg\n    TickerLocalState\n    TickerMailboxState\n    TickerTimerHandle\n    TickerActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","example","engine","ticker","behaviour"]},{"location":"arch/node/engines/ticker_behaviour.html#tickerguardoutput","title":"<code>TickerGuardOutput</code>","text":"<p> <pre><code>TickerGuardOutput : Type :=\n  GuardOutput\n    TickerLocalCfg\n    TickerLocalState\n    TickerMailboxState\n    TickerTimerHandle\n    TickerActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","example","engine","ticker","behaviour"]},{"location":"arch/node/engines/ticker_behaviour.html#tickerguardeval","title":"<code>TickerGuardEval</code>","text":"<p> <pre><code>TickerGuardEval : Type :=\n  GuardEval\n    TickerLocalCfg\n    TickerLocalState\n    TickerMailboxState\n    TickerTimerHandle\n    TickerActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","example","engine","ticker","behaviour"]},{"location":"arch/node/engines/ticker_behaviour.html#incrementguard","title":"<code>incrementGuard</code>","text":"Condition Message type is <code>TickerMsgIncrement</code>. <pre><code>incrementGuard\n  (trigger : TimestampedTrigger TickerTimerHandle Anoma.Msg)\n  (cfg : TickerCfg)\n  (env : TickerEnv)\n  : Option TickerGuardOutput :=\n  let\n    emsg := getEngineMsgFromTimestampedTrigger trigger;\n  in\n    case emsg of {\n    | some EngineMsg.mk@{\n        msg := (Anoma.PreMsg.MsgTicker TickerMsg.Increment);\n      } :=\n      some GuardOutput.mk@{\n        action := incrementActionLabel;\n        args := [];\n      }\n  | _ := none\n  };\n</code></pre>","tags":["node-architecture","example","engine","ticker","behaviour"]},{"location":"arch/node/engines/ticker_behaviour.html#countreplyguard","title":"<code>countReplyGuard</code>","text":"Condition Message type is <code>TickerMsgCountRequest</code>. <pre><code>countReplyGuard\n  (trigger : TimestampedTrigger TickerTimerHandle Anoma.Msg)\n  (cfg : TickerCfg)\n  (env : TickerEnv)\n  : Option TickerGuardOutput :=\n  case getEngineMsgFromTimestampedTrigger trigger of {\n    | some EngineMsg.mk@{\n        msg := Anoma.PreMsg.MsgTicker TickerMsg.CountRequest;\n      } := some GuardOutput.mk@{\n        action := countReplyActionLabel;\n        args := [];\n      }\n    | _ := none\n    };\n</code></pre>","tags":["node-architecture","example","engine","ticker","behaviour"]},{"location":"arch/node/engines/ticker_behaviour.html#the-ticker-behaviour","title":"The Ticker behaviour","text":"","tags":["node-architecture","example","engine","ticker","behaviour"]},{"location":"arch/node/engines/ticker_behaviour.html#tickerbehaviour","title":"<code>TickerBehaviour</code>","text":"<pre><code>TickerBehaviour : Type :=\n  EngineBehaviour\n    TickerLocalCfg\n    TickerLocalState\n    TickerMailboxState\n    TickerTimerHandle\n    TickerActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","example","engine","ticker","behaviour"]},{"location":"arch/node/engines/ticker_behaviour.html#instantiation","title":"Instantiation","text":"<pre><code>tickerBehaviour : TickerBehaviour :=\n  EngineBehaviour.mk@{\n    guards :=\n      GuardEval.First [\n        incrementGuard;\n        countReplyGuard\n      ];\n  };\n</code></pre>","tags":["node-architecture","example","engine","ticker","behaviour"]},{"location":"arch/node/engines/ticker_behaviour.html#ticker-action-flowchart","title":"Ticker Action Flowchart","text":"","tags":["node-architecture","example","engine","ticker","behaviour"]},{"location":"arch/node/engines/ticker_behaviour.html#incrementaction-flowchart","title":"<code>incrementAction</code> flowchart","text":"<pre><code>flowchart TD\n  subgraph C[Conditions]\n    CMsg&gt;TickerMsgIncrement]\n  end\n\n  G(incrementGuard)\n  A(incrementAction)\n\n  C --&gt; G -- *incrementActionLabel* --&gt; A --&gt; E\n\n  subgraph E[Effects]\n    EEnv[(counter := counter + 1)]\n  end</code></pre> <code>incrementAction</code> flowchart","tags":["node-architecture","example","engine","ticker","behaviour"]},{"location":"arch/node/engines/ticker_behaviour.html#countreplyaction-flowchart","title":"<code>countReplyAction</code> flowchart","text":"<pre><code>flowchart TD\n  subgraph C[Conditions]\n    CMsg&gt;TickerMsgCountRequest]\n  end\n\n  G(countReplyGuard)\n  A(countReplyAction)\n\n  C --&gt; G -- *countReplyActionLabel* --&gt; A --&gt; E\n\n  subgraph E[Effects]\n    EMsg&gt;TickerMsgCountReply&lt;br/&gt;counter]\n  end</code></pre> <code>countReplyAction</code> flowchart","tags":["node-architecture","example","engine","ticker","behaviour"]},{"location":"arch/node/engines/ticker_config.html","title":"Ticker Configuration","text":"Juvix imports <pre><code>module arch.node.engines.ticker_config;\n\nimport prelude open;\nimport arch.node.engines.ticker_messages open;\nimport arch.node.types.engine open;\nimport arch.node.types.messages open;\nimport arch.node.types.identities open;\n</code></pre>","tags":["node-architecture","example","engine","ticker","configuration"]},{"location":"arch/node/engines/ticker_config.html#ticker-configuration","title":"Ticker Configuration","text":"","tags":["node-architecture","example","engine","ticker","configuration"]},{"location":"arch/node/engines/ticker_config.html#overview","title":"Overview","text":"<p>The static configuration of the engine.</p>","tags":["node-architecture","example","engine","ticker","configuration"]},{"location":"arch/node/engines/ticker_config.html#the-ticker-local-configuration","title":"The Ticker Local Configuration","text":"","tags":["node-architecture","example","engine","ticker","configuration"]},{"location":"arch/node/engines/ticker_config.html#tickerlocalcfg","title":"<code>TickerLocalCfg</code>","text":"<p>The type for engine-specific local configuration.</p> <pre><code>type TickerLocalCfg :=\n  mk;\n</code></pre>","tags":["node-architecture","example","engine","ticker","configuration"]},{"location":"arch/node/engines/ticker_config.html#the-ticker-configuration","title":"The Ticker Configuration","text":"","tags":["node-architecture","example","engine","ticker","configuration"]},{"location":"arch/node/engines/ticker_config.html#tickercfg","title":"<code>TickerCfg</code>","text":"<pre><code>TickerCfg : Type :=\n  EngineCfg\n    TickerLocalCfg;\n</code></pre>","tags":["node-architecture","example","engine","ticker","configuration"]},{"location":"arch/node/engines/ticker_config.html#instantiation","title":"Instantiation","text":"<p>```juvix extract-module-statements module ticker_config_example;</p> <p>tickerCfg : TickerCfg :=     EngineCfg.mk@{       node := PublicKey.Curve25519PubKey \"0xabcd1234\";       name := \"ticker\";       cfg := TickerLocalCfg.mk;     }   ; end; ```</p>","tags":["node-architecture","example","engine","ticker","configuration"]},{"location":"arch/node/engines/ticker_environment.html","title":"Ticker Environment","text":"Juvix imports <pre><code>module arch.node.engines.ticker_environment;\n\nimport prelude open;\nimport arch.node.types.basics open;\nimport arch.node.engines.ticker_messages open;\nimport arch.node.types.engine_environment open;\nimport arch.node.types.messages open;\nimport arch.node.types.identities open;\nimport arch.node.types.anoma_message as Anoma open;\n</code></pre>","tags":["node-architecture","example","engine","ticker","environment"]},{"location":"arch/node/engines/ticker_environment.html#overview","title":"Overview","text":"<p>The sole data item of the ticker environment that deserves mention is the counter; we do not need timers, or mailbox state.</p>","tags":["node-architecture","example","engine","ticker","environment"]},{"location":"arch/node/engines/ticker_environment.html#mailbox-states","title":"Mailbox states","text":"<pre><code>syntax alias TickerMailboxState := Unit;\n</code></pre>","tags":["node-architecture","example","engine","ticker","environment"]},{"location":"arch/node/engines/ticker_environment.html#local-state","title":"Local state","text":"<pre><code>type TickerLocalState := mk@{\n  counter : Nat\n};\n</code></pre> Arguments <code>counter</code>: The counter value.","tags":["node-architecture","example","engine","ticker","environment"]},{"location":"arch/node/engines/ticker_environment.html#timer-handle","title":"Timer Handle","text":"<pre><code>syntax alias TickerTimerHandle := Unit;\n</code></pre> <p>The ticker does not require a timer handle type. Therefore, we define the timer handle type as <code>Unit</code>.</p>","tags":["node-architecture","example","engine","ticker","environment"]},{"location":"arch/node/engines/ticker_environment.html#timestamped-trigger","title":"Timestamped Trigger","text":"<pre><code>TickerTimestampedTrigger : Type :=\n  TimestampedTrigger\n    TickerTimerHandle\n    Anoma.Msg;\n</code></pre>","tags":["node-architecture","example","engine","ticker","environment"]},{"location":"arch/node/engines/ticker_environment.html#the-ticker-environment","title":"The Ticker Environment","text":"","tags":["node-architecture","example","engine","ticker","environment"]},{"location":"arch/node/engines/ticker_environment.html#tickerenv","title":"<code>TickerEnv</code>","text":"<pre><code>TickerEnv : Type :=\n  EngineEnv\n    TickerLocalState\n    TickerMailboxState\n    TickerTimerHandle\n    Anoma.Msg;\n</code></pre>","tags":["node-architecture","example","engine","ticker","environment"]},{"location":"arch/node/engines/ticker_environment.html#instantiation","title":"Instantiation","text":"<p>```juvix extract-module-statements module ticker_environment_example;</p> <p>tickerEnv : TickerEnv :=   EngineEnv.mk@{     localState := TickerLocalState.mk@{       counter := 0     };     mailboxCluster := Map.empty;     acquaintances := Set.empty;     timers := []   }; end; ```</p>","tags":["node-architecture","example","engine","ticker","environment"]},{"location":"arch/node/engines/ticker_messages.html","title":"Ticker Messages","text":"Juvix imports <pre><code>module arch.node.engines.ticker_messages;\nimport prelude open;\n</code></pre>","tags":["node-architecture","example","engine","ticker","message-types"]},{"location":"arch/node/engines/ticker_messages.html#ticker-messages","title":"Ticker Messages","text":"","tags":["node-architecture","example","engine","ticker","message-types"]},{"location":"arch/node/engines/ticker_messages.html#message-interface","title":"Message interface","text":"<pre><code>type TickerMsg :=\n  | Increment\n  | CountRequest\n  | CountReply CountReply\n</code></pre>","tags":["node-architecture","example","engine","ticker","message-types"]},{"location":"arch/node/engines/ticker_messages.html#message-sequence-diagram","title":"Message sequence diagram","text":"","tags":["node-architecture","example","engine","ticker","message-types"]},{"location":"arch/node/engines/ticker_messages.html#requesting-a-counter-value","title":"Requesting a counter value","text":"<pre><code>sequenceDiagram\n    participant Ticker\n    participant EngineTickerClient\n\n    EngineTickerClient -&gt;&gt; Ticker: Send TickerMsgIncrement\n    Note over Ticker: Counter = 1\n\n    EngineTickerClient -&gt;&gt; Ticker: Send TickerMsgIncrement\n    Note over Ticker: Counter = 2\n\n    EngineTickerClient -&gt;&gt; Ticker: Send TickerMsgCount\n    Ticker -&gt;&gt; EngineTickerClient: Respond with Counter (2)</code></pre>  A client interacts with the <code>Ticker</code> engine, which increments and responds with the counter value.","tags":["node-architecture","example","engine","ticker","message-types"]},{"location":"arch/node/engines/ticker_messages.html#message-types","title":"Message types","text":"","tags":["node-architecture","example","engine","ticker","message-types"]},{"location":"arch/node/engines/ticker_messages.html#tickermsgincrement","title":"<code>TickerMsgIncrement</code>","text":"<p>A <code>TickerMsgIncrement</code> message instructs the engine to increase the counter. This message doesn't require any arguments.</p>","tags":["node-architecture","example","engine","ticker","message-types"]},{"location":"arch/node/engines/ticker_messages.html#tickermsgcountrequest","title":"<code>TickerMsgCountRequest</code>","text":"<p>A <code>TickerMsgCountRequest</code> message requests the engine to send the current counter value back to the requester. This message doesn't require any arguments.</p>","tags":["node-architecture","example","engine","ticker","message-types"]},{"location":"arch/node/engines/ticker_messages.html#countreply","title":"<code>CountReply</code>","text":"<p>The <code>CountReply</code> payload contains the counter value.</p> <pre><code>type CountReply : Type :=\n  mkCountReply {\n    counter : Nat;\n  }\n</code></pre> Arguments <code>counter</code> The counter value.","tags":["node-architecture","example","engine","ticker","message-types"]},{"location":"arch/node/engines/ticker_messages.html#tickermsg","title":"<code>TickerMsg</code>","text":"<pre><code>type TickerMsg :=\n  | Increment\n  | CountRequest\n  | CountReply CountReply\n</code></pre>","tags":["node-architecture","example","engine","ticker","message-types"]},{"location":"arch/node/engines/ticker_messages.html#engine-components","title":"Engine components","text":"<ul> <li>Ticker Configuration</li> <li>Ticker Environment</li> <li>Ticker Behaviour</li> </ul>","tags":["node-architecture","example","engine","ticker","message-types"]},{"location":"arch/node/engines/transport.html","title":"Transport","text":"Juvix imports <pre><code>module arch.node.engines.transport;\n\nimport arch.node.engines.transport_messages open;\nimport arch.node.engines.transport_config open;\nimport arch.node.engines.transport_environment open;\nimport arch.node.engines.transport_behaviour open;\n\nimport arch.node.types.basics open;\nimport arch.node.types.engine open;\nimport arch.node.types.anoma as Anoma open;\n\nopen transport_config_example;\nopen transport_environment_example;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","transport","engine-definition"]},{"location":"arch/node/engines/transport.html#transport-engine","title":"Transport Engine","text":"","tags":["node-architecture","network-subsystem","engine","transport","engine-definition"]},{"location":"arch/node/engines/transport.html#purpose","title":"Purpose","text":"<p>The Transport engine is responsible for establishing and accepting transport connections via one of the Transport Protocol engines, each of which responsible for a specific transport protocol, such as QUIC or TLS.</p>","tags":["node-architecture","network-subsystem","engine","transport","engine-definition"]},{"location":"arch/node/engines/transport.html#engine-components","title":"Engine components","text":"<ul> <li>Transport Messages</li> <li>Transport Config</li> <li>Transport Environment</li> <li>Transport Behaviour</li> </ul>","tags":["node-architecture","network-subsystem","engine","transport","engine-definition"]},{"location":"arch/node/engines/transport.html#the-type-for-a-transport-engine","title":"The type for a transport engine","text":"<pre><code>TransportEngine : Type :=\n  Engine\n    TransportLocalCfg\n    TransportLocalState\n    TransportMailboxState\n    TransportTimerHandle\n    TransportActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","transport","engine-definition"]},{"location":"arch/node/engines/transport.html#instantiation","title":"Instantiation","text":"<pre><code>transportEngine : TransportEngine :=\n  Engine.mk@{\n    cfg := transportCfg;\n    env := transportEnv;\n    behaviour := transportBehaviour;\n  };\n</code></pre> <p>Where <code>transportCfg</code> is defined as follows:</p> <p>```juvix extract-module-statements module transport_config_example;</p> <p>transportCfg : TransportCfg :=     EngineCfg.mk@{       node := PublicKey.Curve25519PubKey \"0xabcd1234\";       name := \"transport\";       cfg := TransportLocalCfg.mk;     }   ; end; <pre><code>`transportEnv` is defined as follows:\n\n```juvix extract-module-statements\nmodule transport_environment_example;\n\n  transportEnv : TransportEnv :=\n    EngineEnv.mk@{\n      localState := TransportLocalState.mk;\n      mailboxCluster := Map.empty;\n      acquaintances := Set.empty;\n      timers := []\n    }\n  ;\nend;\n</code></pre></p> <p>and <code>transportBehaviour</code> is defined as follows:</p> <pre><code>transportBehaviour : TransportBehaviour :=\n  EngineBehaviour.mk@{\n    guards :=\n      GuardEval.First [\n        exampleReplyGuard;\n      ];\n  };\n</code></pre>","tags":["node-architecture","network-subsystem","engine","transport","engine-definition"]},{"location":"arch/node/engines/transport_behaviour.html","title":"Transport behaviour","text":"Juvix imports <pre><code>module arch.node.engines.transport_behaviour;\n\nimport arch.node.engines.transport_messages open;\nimport arch.node.engines.transport_config open;\nimport arch.node.engines.transport_environment open;\n\nimport arch.node.types.basics open;\nimport arch.node.types.identities open;\nimport arch.node.types.messages open;\nimport arch.node.types.engine open;\nimport arch.node.types.anoma as Anoma open;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_behaviour.html#transport-behaviour","title":"Transport Behaviour","text":"","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_behaviour.html#overview","title":"Overview","text":"<p>A transport engine acts in the ways described on this page. The action labels correspond to the actions that can be performed by the engine. Using the action labels, we describe the effects of the actions.</p>","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_behaviour.html#transport-action-flowchart","title":"Transport Action Flowchart","text":"","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_behaviour.html#examplereply-flowchart","title":"<code>exampleReply</code> Flowchart","text":"<pre><code>flowchart TD\n  subgraph C[Conditions]\n    CMsg&gt;TransportMsgExampleRequest&lt;br/&gt;from local engine]\n    CEnv[(exampleValue &lt; 10)]\n  end\n\n  G(exampleReplyGuard)\n  A(exampleReplyAction)\n\n  C --&gt; G -- *exampleReplyActionLabel* --&gt; A --&gt; E\n\n  subgraph E[Effects]\n    EEnv[(exampleValue := exampleValue + 1)]\n    EMsg&gt;TransportMsgExampleResponse&lt;br/&gt;argOne]\n  end</code></pre> <code>exampleReply</code> flowchart","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_behaviour.html#action-arguments","title":"Action arguments","text":"<p>The action arguments are set by a guard and passed to the action function as part of the <code>GuardOutput</code>.</p>","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_behaviour.html#transportactionarguments","title":"<code>TransportActionArguments</code>","text":"<pre><code>TransportActionArguments : Type := Unit;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_behaviour.html#actions","title":"Actions","text":"Auxiliary Juvix code","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_behaviour.html#transportaction","title":"<code>TransportAction</code>","text":"<p> <pre><code>TransportAction : Type :=\n  Action\n    TransportLocalCfg\n    TransportLocalState\n    TransportMailboxState\n    TransportTimerHandle\n    TransportActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_behaviour.html#transportactioninput","title":"<code>TransportActionInput</code>","text":"<p> <pre><code>TransportActionInput : Type :=\n  ActionInput\n    TransportLocalCfg\n    TransportLocalState\n    TransportMailboxState\n    TransportTimerHandle\n    TransportActionArguments\n    Anoma.Msg;\n</code></pre> </p>","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_behaviour.html#transportactioneffect","title":"<code>TransportActionEffect</code>","text":"<p> <pre><code>TransportActionEffect : Type :=\n  ActionEffect\n    TransportLocalState\n    TransportMailboxState\n    TransportTimerHandle\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_behaviour.html#transportactionexec","title":"<code>TransportActionExec</code>","text":"<p> <pre><code>TransportActionExec : Type :=\n  ActionExec\n    TransportLocalCfg\n    TransportLocalState\n    TransportMailboxState\n    TransportTimerHandle\n    TransportActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_behaviour.html#examplereplyaction","title":"<code>exampleReplyAction</code>","text":"<p>Respond with a <code>TransportMsgExampleReply</code>.</p> State update The state remains unchanged. Messages to be sent A <code>TransportMsgExampleReply</code> message with the data set by <code>exampleReplyGuard</code>. Engines to be spawned No engine is created by this action. Timer updates No timers are set or cancelled. <pre><code>exampleReplyAction\n  (input : TransportActionInput)\n  : Option TransportActionEffect :=\n  TODO {-\n  let\n    cfg := ActionInput.cfg input;\n    env := ActionInput.env input;\n    trigger := ActionInput.trigger input;\n    args := ActionInput.args input;\n  in\n    case getEngineMsgFromTimestampedTrigger trigger of {\n    | some EngineMsg.mk@{\n        msg := Anoma.PreMsg.MsgTransport (TransportMsgExampleRequest req);\n        sender := sender;\n        target := target;\n        mailbox := mailbox;\n      } :=\n      some ActionEffect.mk@{\n        env := env;\n        msgs := [\n          EngineMsg.mk@{\n            sender := getEngineIDFromEngineCfg cfg;\n            target := sender;\n            mailbox := some 0;\n            msg :=\n              Anoma.PreMsg.MsgTransport\n                (TransportMsgExampleReply\n                  (ok mkExampleReplyOk@{\n                    argOne := ExampleRequest.argOne req;\n                  }));\n          }\n        ];\n        timers := [];\n        eng ines := [];\n      }\n  | _ := none\n  -};\n</code></pre>","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_behaviour.html#action-labels","title":"Action Labels","text":"","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_behaviour.html#examplereplyactionlabel","title":"<code>exampleReplyActionLabel</code>","text":"<pre><code>exampleReplyActionLabel : TransportActionExec := ActionExec.Seq [ exampleReplyAction ];\n</code></pre>","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_behaviour.html#guards","title":"Guards","text":"Auxiliary Juvix code","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_behaviour.html#transportguard","title":"<code>TransportGuard</code>","text":"<p> <pre><code>TransportGuard : Type :=\n  Guard\n    TransportLocalCfg\n    TransportLocalState\n    TransportMailboxState\n    TransportTimerHandle\n    TransportActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_behaviour.html#transportguardoutput","title":"<code>TransportGuardOutput</code>","text":"<p> <pre><code>TransportGuardOutput : Type :=\n  GuardOutput\n    TransportLocalCfg\n    TransportLocalState\n    TransportMailboxState\n    TransportTimerHandle\n    TransportActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_behaviour.html#transportguardeval","title":"<code>TransportGuardEval</code>","text":"<p> <pre><code>TransportGuardEval : Type :=\n  GuardEval\n    TransportLocalCfg\n    TransportLocalState\n    TransportMailboxState\n    TransportTimerHandle\n    TransportActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_behaviour.html#examplereplyguard","title":"<code>exampleReplyGuard</code>","text":"<p>Guard description (optional).</p> Condition Message type is <code>TransportMsgExampleRequest</code>. <pre><code>exampleReplyGuard\n  (trigger : TransportTimestampedTrigger)\n  (cfg : TransportCfg)\n  (env : TransportEnv)\n  : Option TransportGuardOutput :=\n  TODO {-\n  case getEngineMsgFromTimestampedTrigger trigger of {\n    | some EngineMsg.mk@{\n        msg := Anoma.PreMsg.MsgTransport (TransportMsgExampleRequest req);\n        sender := mkPair none _; -- from local engines only (NodeID is none)\n      } := some GuardOutput.mk@{\n        action := exampleReplyActionLabel;\n        args := [];\n      }\n    | _ := none\n  -};\n</code></pre>","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_behaviour.html#the-transport-behaviour","title":"The Transport behaviour","text":"","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_behaviour.html#transportbehaviour","title":"<code>TransportBehaviour</code>","text":"<pre><code>TransportBehaviour : Type :=\n  EngineBehaviour\n    TransportLocalCfg\n    TransportLocalState\n    TransportMailboxState\n    TransportTimerHandle\n    TransportActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_behaviour.html#instantiation","title":"Instantiation","text":"<pre><code>transportBehaviour : TransportBehaviour :=\n  EngineBehaviour.mk@{\n    guards :=\n      GuardEval.First [\n        exampleReplyGuard;\n      ];\n  };\n</code></pre>","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_config.html","title":"Transport config","text":"Juvix imports <pre><code>module arch.node.engines.transport_config;\n\nimport arch.node.engines.transport_messages open;\n\nimport arch.node.types.basics open;\nimport arch.node.types.engine open;\nimport arch.node.types.identities open;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","transport","configuration"]},{"location":"arch/node/engines/transport_config.html#transport-configuration","title":"Transport Configuration","text":"","tags":["node-architecture","network-subsystem","engine","transport","configuration"]},{"location":"arch/node/engines/transport_config.html#overview","title":"Overview","text":"<p>The static configuration of the engine.</p>","tags":["node-architecture","network-subsystem","engine","transport","configuration"]},{"location":"arch/node/engines/transport_config.html#the-transport-local-configuration","title":"The Transport Local Configuration","text":"","tags":["node-architecture","network-subsystem","engine","transport","configuration"]},{"location":"arch/node/engines/transport_config.html#transportlocalcfg","title":"<code>TransportLocalCfg</code>","text":"<p>The type for engine-specific local configuration.</p> <pre><code>type TransportLocalCfg :=\n  mk;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","transport","configuration"]},{"location":"arch/node/engines/transport_config.html#the-transport-configuration","title":"The Transport Configuration","text":"","tags":["node-architecture","network-subsystem","engine","transport","configuration"]},{"location":"arch/node/engines/transport_config.html#transportcfg","title":"<code>TransportCfg</code>","text":"<pre><code>TransportCfg : Type :=\n  EngineCfg\n    TransportLocalCfg;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","transport","configuration"]},{"location":"arch/node/engines/transport_config.html#instantiation","title":"Instantiation","text":"<p>```juvix extract-module-statements module transport_config_example;</p> <p>transportCfg : TransportCfg :=     EngineCfg.mk@{       node := PublicKey.Curve25519PubKey \"0xabcd1234\";       name := \"transport\";       cfg := TransportLocalCfg.mk;     }   ; end; ```</p>","tags":["node-architecture","network-subsystem","engine","transport","configuration"]},{"location":"arch/node/engines/transport_connection.html","title":"Transport Connection Engine","text":"<p>icon: octicons/gear-24 search:   exclude: false tags:   - node-architecture   - network-subsystem   - engine   - transport   - engine-definition</p> Juvix imports <pre><code>module arch.node.engines.transport_connection;\n\nimport arch.node.engines.transport_connection_messages open;\nimport arch.node.engines.transport_connection_config open;\nimport arch.node.engines.transport_connection_environment open;\nimport arch.node.engines.transport_connection_behaviour open;\n\nimport arch.node.types.basics open;\nimport arch.node.types.engine open;\nimport arch.node.types.anoma as Anoma open;\n\nopen transport_connection_config_example;\nopen transport_connection_environment_example;\nopen transport_connection_behaviour_example;\n</code></pre>"},{"location":"arch/node/engines/transport_connection.html#transport-connection-engine","title":"Transport Connection Engine","text":""},{"location":"arch/node/engines/transport_connection.html#purpose","title":"Purpose","text":"<p>A Transport Protocol engine is responsible for accepting and initiating transport connections for one specific transport protocol, such as QUIC or TLS.</p>"},{"location":"arch/node/engines/transport_connection.html#engine-components","title":"Engine components","text":"<ul> <li>Transport Connection Messages</li> <li>Transport Connection Configuration</li> <li>Transport Connection Environment</li> <li>Transport Connection Behaviour</li> </ul>"},{"location":"arch/node/engines/transport_connection.html#the-type-for-a-transport-connection-engine","title":"The type for a transport connection engine","text":"<pre><code>TransportConnectionEngine : Type :=\n  Engine\n    TransportConnectionLocalCfg\n    TransportConnectionLocalState\n    TransportConnectionMailboxState\n    TransportConnectionTimerHandle\n    TransportConnectionActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>"},{"location":"arch/node/engines/transport_connection.html#example-of-a-transport-connection-engine","title":"Example of a transport connection engine","text":"<pre><code>exTransportConnectionEngine : TransportConnectionEngine :=\n  Engine.mk@{\n    cfg := exTransportConnectionCfg;\n    env := exTransportConnectionEnv;\n    behaviour := exTransportConnectionBehaviour;\n  };\n</code></pre> <p>Where <code>exTransportConnectionCfg</code> is defined as follows:</p> <p>```juvix extract-module-statements module transport_connection_config_example;</p> <p>exTransportConnectionCfg : TransportConnectionCfg :=   EngineCfg.mk@{     node := PublicKey.Curve25519PubKey \"0xabcd1234\";     name := \"transport-connection\";     cfg := TransportConnectionLocalCfg.mk;   };</p> <p>end; <pre><code>[`exTransportConnectionEnv`](https://specs.anoma.net/pr-347/arch/node/engines/transport_connection_environment.html#exTransportConnectionEnv) is defined as follows:\n\n```juvix extract-module-statements\nmodule transport_connection_environment_example;\n\nexTransportConnectionEnv : TransportConnectionEnv :=\n  EngineEnv.mk@{\n    localState := TransportConnectionLocalState.mk;\n    mailboxCluster := Map.empty;\n    acquaintances := Set.empty;\n    timers := []\n  };\n\nend;\n</code></pre></p> <p>and <code>exTransportConnectionBehaviour</code> is defined as follows:</p> <pre><code>module transport_connection_behaviour_example;\n\nexTransportConnectionBehaviour : TransportConnectionBehaviour :=\n  EngineBehaviour.mk@{\n    guards :=\n      GuardEval.First [\n        exampleReplyGuard;\n      ];\n  };\n\nend;\n</code></pre>"},{"location":"arch/node/engines/transport_connection_behaviour.html","title":"Transport Connection Behaviour","text":"Juvix imports <pre><code>module arch.node.engines.transport_connection_behaviour;\n\nimport arch.node.engines.transport_connection_messages open;\nimport arch.node.engines.transport_connection_config open;\nimport arch.node.engines.transport_connection_environment open;\n\nimport arch.node.types.basics open;\nimport arch.node.types.identities open;\nimport arch.node.types.messages open;\nimport arch.node.types.engine open;\nimport arch.node.types.anoma as Anoma open;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_connection_behaviour.html#transport-connection-behaviour","title":"Transport Connection Behaviour","text":"","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_connection_behaviour.html#overview","title":"Overview","text":"<p>A Transport Connection engine acts in the ways described on this page. The action labels correspond to the actions that can be performed by the engine. Using the action labels, we describe the effects of the actions.</p>","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_connection_behaviour.html#transport-connection-action-flowchart","title":"Transport Connection Action Flowchart","text":"","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_connection_behaviour.html#examplereply-flowchart","title":"<code>exampleReply</code> Flowchart","text":"<pre><code>flowchart TD\n  subgraph C[Conditions]\n    CMsg&gt;TransportConnectionMsgExampleRequest&lt;br/&gt;from local engine]\n    CEnv[(exampleValue &lt; 10)]\n  end\n\n  G(exampleReplyGuard)\n  A(exampleReplyAction)\n\n  C --&gt; G -- *exampleReplyActionLabel* --&gt; A --&gt; E\n\n  subgraph E[Effects]\n    EEnv[(exampleValue := exampleValue + 1)]\n    EMsg&gt;TransportConnectionMsgExampleResponse&lt;br/&gt;argOne]\n  end</code></pre> <code>exampleReply</code> flowchart","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_connection_behaviour.html#action-arguments","title":"Action arguments","text":"<p>The action arguments are set by a guard and passed to the action function as part of the <code>GuardOutput</code>.</p>","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_connection_behaviour.html#transportconnectionactionarguments","title":"<code>TransportConnectionActionArguments</code>","text":"<pre><code>TransportConnectionActionArguments : Type := Unit;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_connection_behaviour.html#actions","title":"Actions","text":"Auxiliary Juvix code","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_connection_behaviour.html#transportconnectionaction","title":"<code>TransportConnectionAction</code>","text":"<p> <pre><code>TransportConnectionAction : Type :=\n  Action\n    TransportConnectionLocalCfg\n    TransportConnectionLocalState\n    TransportConnectionMailboxState\n    TransportConnectionTimerHandle\n    TransportConnectionActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_connection_behaviour.html#transportconnectionactioninput","title":"<code>TransportConnectionActionInput</code>","text":"<p> <pre><code>TransportConnectionActionInput : Type :=\n  ActionInput\n    TransportConnectionLocalCfg\n    TransportConnectionLocalState\n    TransportConnectionMailboxState\n    TransportConnectionTimerHandle\n    TransportConnectionActionArguments\n    Anoma.Msg;\n</code></pre> </p>","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_connection_behaviour.html#transportconnectionactioneffect","title":"<code>TransportConnectionActionEffect</code>","text":"<p> <pre><code>TransportConnectionActionEffect : Type :=\n  ActionEffect\n    TransportConnectionLocalState\n    TransportConnectionMailboxState\n    TransportConnectionTimerHandle\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_connection_behaviour.html#transportconnectionactionexec","title":"<code>TransportConnectionActionExec</code>","text":"<p> <pre><code>TransportConnectionActionExec : Type :=\n  ActionExec\n    TransportConnectionLocalCfg\n    TransportConnectionLocalState\n    TransportConnectionMailboxState\n    TransportConnectionTimerHandle\n    TransportConnectionActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_connection_behaviour.html#examplereplyaction","title":"<code>exampleReplyAction</code>","text":"<p>Respond with a <code>TransportConnectionMsgExampleReply</code>.</p> State update The state remains unchanged. Messages to be sent A <code>TransportConnectionMsgExampleReply</code> message with the data set by <code>exampleReplyGuard</code>. Engines to be spawned No engine is created by this action. Timer updates No timers are set or cancelled. <pre><code>exampleReplyAction\n  (input : TransportConnectionActionInput)\n  : Option TransportConnectionActionEffect :=\n  TODO {-\n  let\n    cfg := ActionInput.cfg input;\n    env := ActionInput.env input;\n    trigger := ActionInput.trigger input;\n    args := ActionInput.args input;\n  in\n    case getEngineMsgFromTimestampedTrigger trigger of {\n    | some EngineMsg.mk@{\n        msg := Anoma.PreMsg.MsgTransportConnection (TransportConnectionMsgExampleRequest req);\n        sender := sender;\n        target := target;\n        mailbox := mailbox;\n      } :=\n      some ActionEffect.mk@{\n        env := env;\n        msgs := [\n          EngineMsg.mk@{\n            sender := getEngineIDFromEngineCfg cfg;\n            target := sender;\n            mailbox := some 0;\n            msg :=\n              Anoma.PreMsg.MsgTransportConnection\n                (TransportConnectionMsgExampleReply\n                  (ok mkExampleReplyOk@{\n                    argOne := ExampleRequest.argOne req;\n                  }));\n          }\n        ];\n        timers := [];\n        engines := [];\n      }\n  | _ := none\n  -};\n</code></pre>","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_connection_behaviour.html#action-labels","title":"Action Labels","text":"","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_connection_behaviour.html#examplereplyactionlabel","title":"<code>exampleReplyActionLabel</code>","text":"<pre><code>exampleReplyActionLabel : TransportConnectionActionExec := ActionExec.Seq [ exampleReplyAction ];\n</code></pre>","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_connection_behaviour.html#guards","title":"Guards","text":"Auxiliary Juvix code","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_connection_behaviour.html#transportconnectionguard","title":"<code>TransportConnectionGuard</code>","text":"<p> <pre><code>TransportConnectionGuard : Type :=\n  Guard\n    TransportConnectionLocalCfg\n    TransportConnectionLocalState\n    TransportConnectionMailboxState\n    TransportConnectionTimerHandle\n    TransportConnectionActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_connection_behaviour.html#transportconnectionguardoutput","title":"<code>TransportConnectionGuardOutput</code>","text":"<p> <pre><code>TransportConnectionGuardOutput : Type :=\n  GuardOutput\n    TransportConnectionLocalCfg\n    TransportConnectionLocalState\n    TransportConnectionMailboxState\n    TransportConnectionTimerHandle\n    TransportConnectionActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_connection_behaviour.html#transportconnectionguardeval","title":"<code>TransportConnectionGuardEval</code>","text":"<p> <pre><code>TransportConnectionGuardEval : Type :=\n  GuardEval\n    TransportConnectionLocalCfg\n    TransportConnectionLocalState\n    TransportConnectionMailboxState\n    TransportConnectionTimerHandle\n    TransportConnectionActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_connection_behaviour.html#examplereplyguard","title":"<code>exampleReplyGuard</code>","text":"<p>Guard description (optional).</p> Condition Message type is <code>TransportConnectionMsgExampleRequest</code>. <pre><code>exampleReplyGuard\n  (trigger : TransportConnectionTimestampedTrigger)\n  (cfg : TransportConnectionCfg)\n  (env : TransportConnectionEnv)\n  : Option TransportConnectionGuardOutput :=\n  TODO {-\n  case getEngineMsgFromTimestampedTrigger trigger of {\n    | some EngineMsg.mk@{\n        msg := Anoma.PreMsg.MsgTransportConnection (TransportConnectionMsgExampleRequest req);\n        sender := mkPair none _; -- from local engines only (NodeID is none)\n      } := some GuardOutput.mk@{\n        action := exampleReplyActionLabel;\n        args := [];\n      }\n    | _ := none\n  -};\n</code></pre>","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_connection_behaviour.html#the-transport-connection-behaviour","title":"The Transport Connection behaviour","text":"","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_connection_behaviour.html#transportconnectionbehaviour","title":"<code>TransportConnectionBehaviour</code>","text":"<pre><code>TransportConnectionBehaviour : Type :=\n  EngineBehaviour\n    TransportConnectionLocalCfg\n    TransportConnectionLocalState\n    TransportConnectionMailboxState\n    TransportConnectionTimerHandle\n    TransportConnectionActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_connection_behaviour.html#instantiation","title":"Instantiation","text":"<pre><code>module transport_connection_behaviour_example;\n\nexTransportConnectionBehaviour : TransportConnectionBehaviour :=\n  EngineBehaviour.mk@{\n    guards :=\n      GuardEval.First [\n        exampleReplyGuard;\n      ];\n  };\n\nend;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_connection_config.html","title":"Transport Connection Configuration","text":"Juvix imports <pre><code>module arch.node.engines.transport_connection_config;\n\nimport arch.node.engines.transport_connection_messages open;\n\nimport arch.node.types.basics open;\nimport arch.node.types.engine open;\nimport arch.node.types.identities open;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","transport","configuration"]},{"location":"arch/node/engines/transport_connection_config.html#transport-connection-configuration","title":"Transport Connection Configuration","text":"","tags":["node-architecture","network-subsystem","engine","transport","configuration"]},{"location":"arch/node/engines/transport_connection_config.html#overview","title":"Overview","text":"<p>The static configuration of the engine.</p>","tags":["node-architecture","network-subsystem","engine","transport","configuration"]},{"location":"arch/node/engines/transport_connection_config.html#the-transport-connection-local-configuration","title":"The Transport Connection Local Configuration","text":"","tags":["node-architecture","network-subsystem","engine","transport","configuration"]},{"location":"arch/node/engines/transport_connection_config.html#transportconnectionlocalcfg","title":"<code>TransportConnectionLocalCfg</code>","text":"<p>The type for engine-specific local configuration.</p> <pre><code>type TransportConnectionLocalCfg :=\n  mk;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","transport","configuration"]},{"location":"arch/node/engines/transport_connection_config.html#the-transport-connection-configuration","title":"The Transport Connection Configuration","text":"","tags":["node-architecture","network-subsystem","engine","transport","configuration"]},{"location":"arch/node/engines/transport_connection_config.html#transportconnectioncfg","title":"<code>TransportConnectionCfg</code>","text":"<pre><code>TransportConnectionCfg : Type :=\n  EngineCfg\n    TransportConnectionLocalCfg;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","transport","configuration"]},{"location":"arch/node/engines/transport_connection_config.html#instantiation","title":"Instantiation","text":"<p>```juvix extract-module-statements module transport_connection_config_example;</p> <p>exTransportConnectionCfg : TransportConnectionCfg :=   EngineCfg.mk@{     node := PublicKey.Curve25519PubKey \"0xabcd1234\";     name := \"transport-connection\";     cfg := TransportConnectionLocalCfg.mk;   };</p> <p>end; ```</p>","tags":["node-architecture","network-subsystem","engine","transport","configuration"]},{"location":"arch/node/engines/transport_connection_environment.html","title":"Transport Connection Environment","text":"Juvix imports <pre><code>module arch.node.engines.transport_connection_environment;\n\nimport arch.node.types.basics open;\nimport arch.node.types.engine open;\nimport arch.node.types.messages open;\nimport arch.node.types.identities open;\nimport arch.node.types.anoma_message as Anoma open;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","transport","environment"]},{"location":"arch/node/engines/transport_connection_environment.html#transport-connection-environment","title":"Transport Connection Environment","text":"","tags":["node-architecture","network-subsystem","engine","transport","environment"]},{"location":"arch/node/engines/transport_connection_environment.html#overview","title":"Overview","text":"<p>The Engine environment of the engine.</p>","tags":["node-architecture","network-subsystem","engine","transport","environment"]},{"location":"arch/node/engines/transport_connection_environment.html#mailbox-states","title":"Mailbox states","text":"<pre><code>syntax alias TransportConnectionMailboxState := Unit;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","transport","environment"]},{"location":"arch/node/engines/transport_connection_environment.html#local-state","title":"Local state","text":"<pre><code>type TransportConnectionLocalState := mk;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","transport","environment"]},{"location":"arch/node/engines/transport_connection_environment.html#timer-handle","title":"Timer Handle","text":"<pre><code>TransportConnectionTimerHandle : Type := Unit;\n</code></pre> <p>The TransportConnection does not require a timer handle type. Therefore, we define the timer handle type as <code>Unit</code>.</p>","tags":["node-architecture","network-subsystem","engine","transport","environment"]},{"location":"arch/node/engines/transport_connection_environment.html#timestamped-trigger","title":"Timestamped Trigger","text":"<pre><code>TransportConnectionTimestampedTrigger : Type :=\n  TimestampedTrigger\n    TransportConnectionTimerHandle\n    Anoma.Msg;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","transport","environment"]},{"location":"arch/node/engines/transport_connection_environment.html#the-transport-connection-environment","title":"The Transport Connection Environment","text":"","tags":["node-architecture","network-subsystem","engine","transport","environment"]},{"location":"arch/node/engines/transport_connection_environment.html#transportconnectionenv","title":"<code>TransportConnectionEnv</code>","text":"<pre><code>TransportConnectionEnv : Type :=\n  EngineEnv\n    TransportConnectionLocalState\n    TransportConnectionMailboxState\n    TransportConnectionTimerHandle\n    Anoma.Msg;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","transport","environment"]},{"location":"arch/node/engines/transport_connection_environment.html#instantiation","title":"Instantiation","text":"<p>```juvix extract-module-statements module transport_connection_environment_example;</p> <p>exTransportConnectionEnv : TransportConnectionEnv :=   EngineEnv.mk@{     localState := TransportConnectionLocalState.mk;     mailboxCluster := Map.empty;     acquaintances := Set.empty;     timers := []   };</p> <p>end; ```</p>","tags":["node-architecture","network-subsystem","engine","transport","environment"]},{"location":"arch/node/engines/transport_connection_messages.html","title":"Transport Connection Messages","text":"Juvix imports <pre><code>module arch.node.engines.transport_connection_messages;\n\nimport arch.node.engines.router_messages open;\n\nimport arch.node.types.transport open;\nimport arch.node.types.basics open;\nimport arch.node.types.identities open;\nimport arch.node.types.messages open;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","transport","message-types"]},{"location":"arch/node/engines/transport_connection_messages.html#transport-connection-messages","title":"Transport Connection Messages","text":"<p>These are the messages that the Transport Connection engine can receive.</p>","tags":["node-architecture","network-subsystem","engine","transport","message-types"]},{"location":"arch/node/engines/transport_connection_messages.html#message-interface","title":"Message interface","text":"<pre><code>type TransportConnectionMsg :=\n  | Send TransportConnectionOutMsg\n  ;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","transport","message-types"]},{"location":"arch/node/engines/transport_connection_messages.html#message-types","title":"Message types","text":"","tags":["node-architecture","network-subsystem","engine","transport","message-types"]},{"location":"arch/node/engines/transport_connection_messages.html#transportconnectionoutmsg","title":"<code>TransportConnectionOutMsg</code>","text":"<p>Send a message to the remote node via the established connection.</p> <pre><code>type TransportConnectionOutMsg := mkTransportConnectionOutMsg {\n  expiry : Time;\n  msg : NodeMsg;\n}\n</code></pre> Arguments <code>expiry</code>: Time after which the message expires. <code>msg</code>: The message to send.","tags":["node-architecture","network-subsystem","engine","transport","message-types"]},{"location":"arch/node/engines/transport_connection_messages.html#transportconnectionmsg","title":"<code>TransportConnectionMsg</code>","text":"<pre><code>type TransportConnectionMsg :=\n  | Send TransportConnectionOutMsg\n  ;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","transport","message-types"]},{"location":"arch/node/engines/transport_connection_messages.html#engine-components","title":"Engine components","text":"<ul> <li>Transport Connection Configuration</li> <li>Transport Connection Environment</li> <li>Transport Connection Behaviour</li> </ul>","tags":["node-architecture","network-subsystem","engine","transport","message-types"]},{"location":"arch/node/engines/transport_environment.html","title":"Transport environment","text":"Juvix imports <pre><code>module arch.node.engines.transport_environment;\n\nimport arch.node.engines.transport_messages open;\n\nimport arch.node.types.basics open;\nimport arch.node.types.engine open;\nimport arch.node.types.messages open;\nimport arch.node.types.identities open;\nimport arch.node.types.anoma_message as Anoma open;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","transport","environment"]},{"location":"arch/node/engines/transport_environment.html#transport-environment","title":"Transport Environment","text":"","tags":["node-architecture","network-subsystem","engine","transport","environment"]},{"location":"arch/node/engines/transport_environment.html#overview","title":"Overview","text":"<p>The Engine environment of the engine.</p>","tags":["node-architecture","network-subsystem","engine","transport","environment"]},{"location":"arch/node/engines/transport_environment.html#mailbox-state","title":"Mailbox state","text":"","tags":["node-architecture","network-subsystem","engine","transport","environment"]},{"location":"arch/node/engines/transport_environment.html#transportmailboxstate","title":"<code>TransportMailboxState</code>","text":"<pre><code>TransportMailboxState : Type := Unit;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","transport","environment"]},{"location":"arch/node/engines/transport_environment.html#local-state","title":"Local state","text":"","tags":["node-architecture","network-subsystem","engine","transport","environment"]},{"location":"arch/node/engines/transport_environment.html#transportlocalstate","title":"<code>TransportLocalState</code>","text":"<pre><code>type TransportLocalState :=\n  mk;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","transport","environment"]},{"location":"arch/node/engines/transport_environment.html#timer-handles","title":"Timer handles","text":"","tags":["node-architecture","network-subsystem","engine","transport","environment"]},{"location":"arch/node/engines/transport_environment.html#transporttimerhandle","title":"<code>TransportTimerHandle</code>","text":"<pre><code>TransportTimerHandle : Type := Unit;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","transport","environment"]},{"location":"arch/node/engines/transport_environment.html#transporttimestampedtrigger","title":"<code>TransportTimestampedTrigger</code>","text":"<pre><code>TransportTimestampedTrigger : Type :=\n  TimestampedTrigger\n    TransportTimerHandle\n    Anoma.Msg;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","transport","environment"]},{"location":"arch/node/engines/transport_environment.html#the-transport-environment","title":"The Transport Environment","text":"","tags":["node-architecture","network-subsystem","engine","transport","environment"]},{"location":"arch/node/engines/transport_environment.html#transportenv","title":"<code>TransportEnv</code>","text":"<pre><code>TransportEnv : Type :=\n  EngineEnv\n    TransportLocalState\n    TransportMailboxState\n    TransportTimerHandle\n    Anoma.Msg;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","transport","environment"]},{"location":"arch/node/engines/transport_environment.html#instantiation","title":"Instantiation","text":"<p>```juvix extract-module-statements module transport_environment_example;</p> <p>transportEnv : TransportEnv :=     EngineEnv.mk@{       localState := TransportLocalState.mk;       mailboxCluster := Map.empty;       acquaintances := Set.empty;       timers := []     }   ; end; ```</p>","tags":["node-architecture","network-subsystem","engine","transport","environment"]},{"location":"arch/node/engines/transport_messages.html","title":"Transport messages","text":"Juvix imports <pre><code>module arch.node.engines.transport_messages;\n\nimport arch.node.types.transport open;\n\nimport arch.node.types.basics open;\nimport arch.node.types.identities open;\nimport arch.node.types.messages open;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","transport","message-types"]},{"location":"arch/node/engines/transport_messages.html#transport-messages","title":"Transport Messages","text":"<p>These are the messages that the Transport engine can receive.</p>","tags":["node-architecture","network-subsystem","engine","transport","message-types"]},{"location":"arch/node/engines/transport_messages.html#message-interface","title":"Message interface","text":"<pre><code>type TransportMsg :=\n  | Send TransportOutMsg\n  ;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","transport","message-types"]},{"location":"arch/node/engines/transport_messages.html#message-types","title":"Message types","text":"","tags":["node-architecture","network-subsystem","engine","transport","message-types"]},{"location":"arch/node/engines/transport_messages.html#transportoutmsg","title":"<code>TransportOutMsg</code>","text":"<p>Send a message to a remote node via the given transport address.</p> <p>The Transport Protocol engine forwards the given message to the Transport Protocol engine responsible for the protocol of the given transport address.</p> <pre><code>type TransportOutMsg := mkTransportOutMsg {\n  addr : TransportAddress;\n  msg : ByteString;\n}\n</code></pre>","tags":["node-architecture","network-subsystem","engine","transport","message-types"]},{"location":"arch/node/engines/transport_messages.html#transportmsg","title":"<code>TransportMsg</code>","text":"<pre><code>type TransportMsg :=\n  | Send TransportOutMsg\n  ;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","transport","message-types"]},{"location":"arch/node/engines/transport_protocol.html","title":"Transport Protocol Engine","text":"<p>icon: octicons/gear-24 search:   exclude: false tags:   - node-architecture   - network-subsystem   - engine   - transport   - engine-definition</p> Juvix imports <pre><code>module arch.node.engines.transport_protocol;\n\nimport arch.node.engines.transport_protocol_messages open;\nimport arch.node.engines.transport_protocol_config open;\nimport arch.node.engines.transport_protocol_environment open;\nimport arch.node.engines.transport_protocol_behaviour open;\n\nimport arch.node.types.basics open;\nimport arch.node.types.engine open;\nimport arch.node.types.anoma as Anoma open;\n\nopen transport_protocol_config_example;\nopen transport_protocol_environment_example;\nopen transport_protocol_behaviour_example;\n</code></pre>"},{"location":"arch/node/engines/transport_protocol.html#transport-protocol-engine","title":"Transport Protocol Engine","text":""},{"location":"arch/node/engines/transport_protocol.html#purpose","title":"Purpose","text":"<p>A Transport Protocol engine is responsible for accepting and initiating transport connections for one specific transport protocol, such as QUIC or TLS.</p>"},{"location":"arch/node/engines/transport_protocol.html#engine-components","title":"Engine components","text":"<ul> <li>Transport Protocol Messages</li> <li>Transport Protocol Configuration</li> <li>Transport Protocol Environment</li> <li>Transport Protocol Behaviour</li> </ul>"},{"location":"arch/node/engines/transport_protocol.html#the-type-for-a-transport-protocol-engine","title":"The type for a transport protocol engine","text":"<pre><code>TransportProtocolEngine : Type :=\n  Engine\n    TransportProtocolLocalCfg\n    TransportProtocolLocalState\n    TransportProtocolMailboxState\n    TransportProtocolTimerHandle\n    TransportProtocolActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>"},{"location":"arch/node/engines/transport_protocol.html#example-of-a-transport-protocol-engine","title":"Example of a transport protocol engine","text":"<pre><code>exTransportProtocolEngine : TransportProtocolEngine :=\n  Engine.mk@{\n    cfg := exTransportProtocolCfg;\n    env := exTransportProtocolEnv;\n    behaviour := exTransportProtocolBehaviour;\n  };\n</code></pre> <p>Where <code>exTransportProtocolCfg</code> is defined as follows:</p> <p>```juvix extract-module-statements module transport_protocol_config_example;</p> <p>exTransportProtocolCfg : TransportProtocolCfg :=   EngineCfg.mk@{     node := PublicKey.Curve25519PubKey \"0xabcd1234\";     name := \"transport-protocol\";     cfg := TransportProtocolLocalCfg.mk;   };</p> <p>end; <pre><code>[`exTransportProtocolEnv`](https://specs.anoma.net/pr-347/arch/node/engines/transport_protocol_environment.html#exTransportProtocolEnv) is defined as follows:\n\n```juvix extract-module-statements\nmodule transport_protocol_environment_example;\n\nexTransportProtocolEnv : TransportProtocolEnv :=\n  EngineEnv.mk@{\n    localState := TransportProtocolLocalState.mk;\n    mailboxCluster := Map.empty;\n    acquaintances := Set.empty;\n    timers := []\n  };\n\nend;\n</code></pre></p> <p>and <code>exTransportProtocolBehaviour</code> is defined as follows:</p> <pre><code>module transport_protocol_behaviour_example;\n\nexTransportProtocolBehaviour : TransportProtocolBehaviour :=\n  EngineBehaviour.mk@{\n    guards :=\n      GuardEval.First [\n        exampleReplyGuard;\n      ];\n  };\n\nend;\n</code></pre>"},{"location":"arch/node/engines/transport_protocol_behaviour.html","title":"Transport Protocol Behaviour","text":"Juvix imports <pre><code>module arch.node.engines.transport_protocol_behaviour;\n\nimport arch.node.engines.transport_protocol_messages open;\nimport arch.node.engines.transport_protocol_config open;\nimport arch.node.engines.transport_protocol_environment open;\n\nimport arch.node.types.basics open;\nimport arch.node.types.identities open;\nimport arch.node.types.messages open;\nimport arch.node.types.engine open;\nimport arch.node.types.anoma as Anoma open;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_protocol_behaviour.html#transport-protocol-behaviour","title":"Transport Protocol Behaviour","text":"","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_protocol_behaviour.html#overview","title":"Overview","text":"<p>A Transport Protocol engine acts in the ways described on this page. The action labels correspond to the actions that can be performed by the engine. Using the action labels, we describe the effects of the actions.</p>","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_protocol_behaviour.html#transport-protocol-action-flowchart","title":"Transport Protocol Action Flowchart","text":"","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_protocol_behaviour.html#examplereply-flowchart","title":"<code>exampleReply</code> Flowchart","text":"<pre><code>flowchart TD\n  subgraph C[Conditions]\n    CMsg&gt;TransportProtocolMsgExampleRequest&lt;br/&gt;from local engine]\n    CEnv[(exampleValue &lt; 10)]\n  end\n\n  G(exampleReplyGuard)\n  A(exampleReplyAction)\n\n  C --&gt; G -- *exampleReplyActionLabel* --&gt; A --&gt; E\n\n  subgraph E[Effects]\n    EEnv[(exampleValue := exampleValue + 1)]\n    EMsg&gt;TransportProtocolMsgExampleResponse&lt;br/&gt;argOne]\n  end</code></pre> <code>exampleReply</code> flowchart","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_protocol_behaviour.html#action-arguments","title":"Action arguments","text":"<p>The action arguments are set by a guard and passed to the action function as part of the <code>GuardOutput</code>.</p>","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_protocol_behaviour.html#transportprotocolactionarguments","title":"<code>TransportProtocolActionArguments</code>","text":"<pre><code>TransportProtocolActionArguments : Type := Unit;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_protocol_behaviour.html#actions","title":"Actions","text":"Auxiliary Juvix code","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_protocol_behaviour.html#transportprotocolaction","title":"<code>TransportProtocolAction</code>","text":"<p> <pre><code>TransportProtocolAction : Type :=\n  Action\n    TransportProtocolLocalCfg\n    TransportProtocolLocalState\n    TransportProtocolMailboxState\n    TransportProtocolTimerHandle\n    TransportProtocolActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_protocol_behaviour.html#transportprotocolactioninput","title":"<code>TransportProtocolActionInput</code>","text":"<p> <pre><code>TransportProtocolActionInput : Type :=\n  ActionInput\n    TransportProtocolLocalCfg\n    TransportProtocolLocalState\n    TransportProtocolMailboxState\n    TransportProtocolTimerHandle\n    TransportProtocolActionArguments\n    Anoma.Msg;\n</code></pre> </p>","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_protocol_behaviour.html#transportprotocolactioneffect","title":"<code>TransportProtocolActionEffect</code>","text":"<p> <pre><code>TransportProtocolActionEffect : Type :=\n  ActionEffect\n    TransportProtocolLocalState\n    TransportProtocolMailboxState\n    TransportProtocolTimerHandle\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_protocol_behaviour.html#transportprotocolactionexec","title":"<code>TransportProtocolActionExec</code>","text":"<p> <pre><code>TransportProtocolActionExec : Type :=\n  ActionExec\n    TransportProtocolLocalCfg\n    TransportProtocolLocalState\n    TransportProtocolMailboxState\n    TransportProtocolTimerHandle\n    TransportProtocolActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_protocol_behaviour.html#examplereplyaction","title":"<code>exampleReplyAction</code>","text":"<p>Respond with a <code>TransportProtocolMsgExampleReply</code>.</p> State update The state remains unchanged. Messages to be sent A <code>TransportProtocolMsgExampleReply</code> message with the data set by <code>exampleReplyGuard</code>. Engines to be spawned No engine is created by this action. Timer updates No timers are set or cancelled. <pre><code>exampleReplyAction\n  (input : TransportProtocolActionInput)\n  : Option TransportProtocolActionEffect :=\n  TODO {-\n  let\n    cfg := ActionInput.cfg input;\n    env := ActionInput.env input;\n    trigger := ActionInput.trigger input;\n    args := ActionInput.args input;\n  in\n    case getEngineMsgFromTimestampedTrigger trigger of {\n    | some EngineMsg.mk@{\n        msg := Anoma.PreMsg.MsgTransportProtocol (TransportProtocolMsgExampleRequest req);\n        sender := sender;\n        target := target;\n        mailbox := mailbox;\n      } :=\n      some ActionEffect.mk@{\n        env := env;\n        msgs := [\n          EngineMsg.mk@{\n            sender := getEngineIDFromEngineCfg cfg;\n            target := sender;\n            mailbox := some 0;\n            msg :=\n              Anoma.PreMsg.MsgTransportProtocol\n                (TransportProtocolMsgExampleReply\n                  (ok mkExampleReplyOk@{\n                    argOne := ExampleRequest.argOne req;\n                  }));\n          }\n        ];\n        timers := [];\n        engines := [];\n      }\n  | _ := none\n  -};\n</code></pre>","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_protocol_behaviour.html#action-labels","title":"Action Labels","text":"","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_protocol_behaviour.html#examplereplyactionlabel","title":"<code>exampleReplyActionLabel</code>","text":"<pre><code>exampleReplyActionLabel : TransportProtocolActionExec := ActionExec.Seq [ exampleReplyAction ];\n</code></pre>","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_protocol_behaviour.html#guards","title":"Guards","text":"Auxiliary Juvix code","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_protocol_behaviour.html#transportprotocolguard","title":"<code>TransportProtocolGuard</code>","text":"<p> <pre><code>TransportProtocolGuard : Type :=\n  Guard\n    TransportProtocolLocalCfg\n    TransportProtocolLocalState\n    TransportProtocolMailboxState\n    TransportProtocolTimerHandle\n    TransportProtocolActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_protocol_behaviour.html#transportprotocolguardoutput","title":"<code>TransportProtocolGuardOutput</code>","text":"<p> <pre><code>TransportProtocolGuardOutput : Type :=\n  GuardOutput\n    TransportProtocolLocalCfg\n    TransportProtocolLocalState\n    TransportProtocolMailboxState\n    TransportProtocolTimerHandle\n    TransportProtocolActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_protocol_behaviour.html#transportprotocolguardeval","title":"<code>TransportProtocolGuardEval</code>","text":"<p> <pre><code>TransportProtocolGuardEval : Type :=\n  GuardEval\n    TransportProtocolLocalCfg\n    TransportProtocolLocalState\n    TransportProtocolMailboxState\n    TransportProtocolTimerHandle\n    TransportProtocolActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_protocol_behaviour.html#examplereplyguard","title":"<code>exampleReplyGuard</code>","text":"<p>Guard description (optional).</p> Condition Message type is <code>TransportProtocolMsgExampleRequest</code>. <pre><code>exampleReplyGuard\n  (trigger : TransportProtocolTimestampedTrigger)\n  (cfg : TransportProtocolCfg)\n  (env : TransportProtocolEnv)\n  : Option TransportProtocolGuardOutput :=\n  TODO {-\n  case getEngineMsgFromTimestampedTrigger trigger of {\n    | some EngineMsg.mk@{\n        msg := Anoma.PreMsg.MsgTransportProtocol (TransportProtocolMsgExampleRequest req);\n        sender := mkPair none _; -- from local engines only (NodeID is none)\n      } := some GuardOutput.mk@{\n        action := exampleReplyActionLabel;\n        args := [];\n      }\n    | _ := none\n  -};\n</code></pre>","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_protocol_behaviour.html#the-transport-protocol-behaviour","title":"The Transport Protocol behaviour","text":"","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_protocol_behaviour.html#transportprotocolbehaviour","title":"<code>TransportProtocolBehaviour</code>","text":"<pre><code>TransportProtocolBehaviour : Type :=\n  EngineBehaviour\n    TransportProtocolLocalCfg\n    TransportProtocolLocalState\n    TransportProtocolMailboxState\n    TransportProtocolTimerHandle\n    TransportProtocolActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_protocol_behaviour.html#instantiation","title":"Instantiation","text":"<pre><code>module transport_protocol_behaviour_example;\n\nexTransportProtocolBehaviour : TransportProtocolBehaviour :=\n  EngineBehaviour.mk@{\n    guards :=\n      GuardEval.First [\n        exampleReplyGuard;\n      ];\n  };\n\nend;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","transport","behaviour"]},{"location":"arch/node/engines/transport_protocol_config.html","title":"Transport Protocol Configuration","text":"Juvix imports <pre><code>module arch.node.engines.transport_protocol_config;\n\nimport arch.node.types.basics open;\nimport arch.node.types.basics open;\nimport arch.node.types.engine open;\nimport arch.node.types.identities open;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","transport","configuration"]},{"location":"arch/node/engines/transport_protocol_config.html#transport-protocol-configuration","title":"Transport Protocol Configuration","text":"","tags":["node-architecture","network-subsystem","engine","transport","configuration"]},{"location":"arch/node/engines/transport_protocol_config.html#overview","title":"Overview","text":"<p>The static configuration of the engine.</p>","tags":["node-architecture","network-subsystem","engine","transport","configuration"]},{"location":"arch/node/engines/transport_protocol_config.html#the-transport-protocol-local-configuration","title":"The Transport Protocol Local Configuration","text":"","tags":["node-architecture","network-subsystem","engine","transport","configuration"]},{"location":"arch/node/engines/transport_protocol_config.html#transportprotocollocalcfg","title":"<code>TransportProtocolLocalCfg</code>","text":"<p>The type for engine-specific local configuration.</p> <pre><code>type TransportProtocolLocalCfg :=\n  mk;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","transport","configuration"]},{"location":"arch/node/engines/transport_protocol_config.html#the-transport-protocol-configuration","title":"The Transport Protocol Configuration","text":"","tags":["node-architecture","network-subsystem","engine","transport","configuration"]},{"location":"arch/node/engines/transport_protocol_config.html#transportprotocolcfg","title":"<code>TransportProtocolCfg</code>","text":"<pre><code>TransportProtocolCfg : Type :=\n  EngineCfg\n    TransportProtocolLocalCfg;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","transport","configuration"]},{"location":"arch/node/engines/transport_protocol_config.html#instantiation","title":"Instantiation","text":"<p>```juvix extract-module-statements module transport_protocol_config_example;</p> <p>exTransportProtocolCfg : TransportProtocolCfg :=   EngineCfg.mk@{     node := PublicKey.Curve25519PubKey \"0xabcd1234\";     name := \"transport-protocol\";     cfg := TransportProtocolLocalCfg.mk;   };</p> <p>end; ```</p>","tags":["node-architecture","network-subsystem","engine","transport","configuration"]},{"location":"arch/node/engines/transport_protocol_environment.html","title":"Transport Protocol Environment","text":"Juvix imports <pre><code>module arch.node.engines.transport_protocol_environment;\n\nimport arch.node.types.basics open;\nimport arch.node.types.engine open;\nimport arch.node.types.messages open;\nimport arch.node.types.identities open;\nimport arch.node.types.anoma_message as Anoma open;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","transport","environment"]},{"location":"arch/node/engines/transport_protocol_environment.html#transport-protocol-environment","title":"Transport Protocol Environment","text":"","tags":["node-architecture","network-subsystem","engine","transport","environment"]},{"location":"arch/node/engines/transport_protocol_environment.html#overview","title":"Overview","text":"<p>The Engine environment of the engine.</p>","tags":["node-architecture","network-subsystem","engine","transport","environment"]},{"location":"arch/node/engines/transport_protocol_environment.html#mailbox-states","title":"Mailbox states","text":"<pre><code>syntax alias TransportProtocolMailboxState := Unit;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","transport","environment"]},{"location":"arch/node/engines/transport_protocol_environment.html#local-state","title":"Local state","text":"<pre><code>type TransportProtocolLocalState := mk;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","transport","environment"]},{"location":"arch/node/engines/transport_protocol_environment.html#timer-handle","title":"Timer Handle","text":"<pre><code>TransportProtocolTimerHandle : Type := Unit;\n</code></pre> <p>The TransportProtocol does not require a timer handle type. Therefore, we define the timer handle type as <code>Unit</code>.</p>","tags":["node-architecture","network-subsystem","engine","transport","environment"]},{"location":"arch/node/engines/transport_protocol_environment.html#timestamped-trigger","title":"Timestamped Trigger","text":"<pre><code>TransportProtocolTimestampedTrigger : Type :=\n  TimestampedTrigger\n    TransportProtocolTimerHandle\n    Anoma.Msg;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","transport","environment"]},{"location":"arch/node/engines/transport_protocol_environment.html#the-transport-protocol-environment","title":"The Transport Protocol Environment","text":"","tags":["node-architecture","network-subsystem","engine","transport","environment"]},{"location":"arch/node/engines/transport_protocol_environment.html#transportprotocolenv","title":"<code>TransportProtocolEnv</code>","text":"<pre><code>TransportProtocolEnv : Type :=\n  EngineEnv\n    TransportProtocolLocalState\n    TransportProtocolMailboxState\n    TransportProtocolTimerHandle\n    Anoma.Msg;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","transport","environment"]},{"location":"arch/node/engines/transport_protocol_environment.html#instantiation","title":"Instantiation","text":"<p>```juvix extract-module-statements module transport_protocol_environment_example;</p> <p>exTransportProtocolEnv : TransportProtocolEnv :=   EngineEnv.mk@{     localState := TransportProtocolLocalState.mk;     mailboxCluster := Map.empty;     acquaintances := Set.empty;     timers := []   };</p> <p>end; ```</p>","tags":["node-architecture","network-subsystem","engine","transport","environment"]},{"location":"arch/node/engines/transport_protocol_messages.html","title":"Transport Protocol Messages","text":"Juvix imports <pre><code>module arch.node.engines.transport_protocol_messages;\n\nimport arch.node.types.transport open;\nimport arch.node.engines.router_messages open;\n\nimport arch.node.types.basics open;\nimport arch.node.types.identities open;\nimport arch.node.types.messages open;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","transport","message-types"]},{"location":"arch/node/engines/transport_protocol_messages.html#transport-protocol-messages","title":"Transport Protocol Messages","text":"<p>These are the messages that the Transport Protocol engine can receive.</p>","tags":["node-architecture","network-subsystem","engine","transport","message-types"]},{"location":"arch/node/engines/transport_protocol_messages.html#message-interface","title":"Message interface","text":"<pre><code>type TransportProtocolMsg :=\n  | Send TransportOutMsg\n  ;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","transport","message-types"]},{"location":"arch/node/engines/transport_protocol_messages.html#message-types","title":"Message types","text":"","tags":["node-architecture","network-subsystem","engine","transport","message-types"]},{"location":"arch/node/engines/transport_protocol_messages.html#transportoutmsg","title":"<code>TransportOutMsg</code>","text":"<p>Send a message to a remote node via the given transport address.</p> <p>The Transport Protocol engine spawns a new Transport Connection engine instance for the connection if it does not exist yet, and forwards the given message to it.</p> <pre><code>type TransportOutMsg := mkTransportOutMsg@{\n  addr : TransportAddress;\n  prefs : TransportPrefs;\n  expiry : Time;\n  msg : NodeMsg;\n}\n</code></pre> Arguments <code>addr</code> Transport address. <code>prefs</code> Transport preferences. <code>expiry</code> Expiry time for send retries. <code>msg</code> Node message.","tags":["node-architecture","network-subsystem","engine","transport","message-types"]},{"location":"arch/node/engines/transport_protocol_messages.html#transportprotocolmsg","title":"<code>TransportProtocolMsg</code>","text":"<pre><code>type TransportProtocolMsg :=\n  | Send TransportOutMsg\n  ;\n</code></pre>","tags":["node-architecture","network-subsystem","engine","transport","message-types"]},{"location":"arch/node/engines/transport_protocol_messages.html#engine-components","title":"Engine components","text":"<ul> <li>Transport Protocol Configuration</li> <li>Transport Protocol Environment</li> <li>Transport Protocol Behaviour</li> </ul>","tags":["node-architecture","network-subsystem","engine","transport","message-types"]},{"location":"arch/node/engines/verification.html","title":"Verification Engine","text":"Juvix imports <pre><code>module arch.node.engines.verification;\n\nimport prelude open;\nimport arch.node.types.engine open;\n\nimport arch.node.engines.verification_config open public;\nimport arch.node.engines.verification_messages open public;\nimport arch.node.engines.verification_environment open public;\nimport arch.node.engines.verification_behaviour open public;\n\nimport arch.node.types.anoma as Anoma open;\n\nopen verification_config_example;\nopen verification_environment_example;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","verification","engine-definition"]},{"location":"arch/node/engines/verification.html#verification-engine","title":"Verification Engine","text":"<p>The Verification Engine provides signature verification services within Anoma. It can check cryptographic signatures/commitments (a <code>Commitment</code>) against data (a <code>Signable</code>) in two modes: direct verification against a specified identity, or verification that takes into account \"signs_for\" relationships through integration with a SignsFor Engine (specified via <code>signsForEngineAddress</code> in its configuration) which allows some identities to sign on behalf of other identities. One may compare the verification service to how a notary might verify not just a signature, but also check if the signer had proper authority to sign on behalf of another party.</p> <p>When users submit a verification request (via a <code>MsgVerificationRequest</code> message), they provide the data, the commitment/signature to verify, the supposed external identity that made the commitment, and whether to use signs-for relationships (via the <code>useSignsFor</code> flag). If signs-for checking is disabled, the engine directly verifies the signature using the configured verifier. If signs-for checking is enabled, the engine first queries the SignsFor Engine for evidence of signing relationships, then uses this additional context during verification. The engine returns a boolean result (via a <code>MsgVerificationReply</code> message) indicating whether the signature is valid.</p> <p>The verification process is atomic - each request either succeeds with a clear yes/no answer or fails with an error message. The engine's state only keeps track of pending requests when signs-for relationships need to be checked. Requests are added to a queue associated with the request, and this queue is cleared once information is provided by the SignsFor Engine.</p>","tags":["node-architecture","identity-subsystem","engine","verification","engine-definition"]},{"location":"arch/node/engines/verification.html#engine-components","title":"Engine components","text":"<ul> <li>Verification Messages</li> <li>Verification Configuration</li> <li>Verification Environment</li> <li>Verification Behaviour</li> </ul>","tags":["node-architecture","identity-subsystem","engine","verification","engine-definition"]},{"location":"arch/node/engines/verification.html#type","title":"Type","text":"<pre><code>VerificationEngine : Type :=\n  Engine\n    VerificationCfg\n    VerificationLocalState\n    VerificationMailboxState\n    VerificationTimerHandle\n    VerificationActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","verification","engine-definition"]},{"location":"arch/node/engines/verification.html#example-of-a-verification-engine","title":"Example of a verification engine","text":"<pre><code>exampleVerificationEngine : VerificationEngine :=\n  Engine.mk@{\n    cfg := verificationCfg;\n    env := verificationEnv;\n    behaviour := verificationBehaviour;\n  };\n</code></pre> <p>where <code>verificationCfg</code> is defined as follows:</p> <p>```juvix extract-module-statements module verification_config_example;</p> <p>verificationCfg : EngineCfg VerificationCfg :=     EngineCfg.mk@{       node := PublicKey.Curve25519PubKey \"0xabcd1234\";       name := \"verification\";       cfg := VerificationCfg.mk@{         verifier := { _ := Verifier.mkVerifier@{           verify := { _ _ := true};           verifierHash := HASH.mkHASH@{             ordKey := OrdKey.mkOrdKey@{                 compare := Ord.compare             };             hash := {x := \"0x1234abcd\"};           };         }};         backend := Backend.LocalMemory;         signsForEngineAddress := mkPair none \"Blah\"       };     }   ; end; <pre><code>`verificationEnv` is defined as follows:\n\n```juvix extract-module-statements\nmodule verification_environment_example;\n\nverificationEnv : VerificationEnv :=\n    EngineEnv.mk@{\n      localState := VerificationLocalState.mk@{\n        pendingRequests := Map.empty\n      };\n      mailboxCluster := Map.empty;\n      acquaintances := Set.empty;\n      timers := []\n    }\n  ;\nend;\n</code></pre></p> <p>and <code>verificationBehaviour</code> is defined as follows:</p> <pre><code>verificationBehaviour : VerificationBehaviour :=\n  EngineBehaviour.mk@{\n    guards := GuardEval.First [\n      verifyGuard;\n      signsForReplyGuard\n    ]\n  };\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","verification","engine-definition"]},{"location":"arch/node/engines/verification_behaviour.html","title":"Verification Behaviour","text":"Juvix imports <pre><code>module arch.node.engines.verification_behaviour;\n\nimport prelude open;\nimport arch.node.types.messages open;\nimport arch.system.identity.identity open hiding {ExternalIdentity};\nimport arch.node.types.engine open;\nimport arch.node.engines.verification_config open;\nimport arch.node.engines.verification_environment open;\nimport arch.node.engines.verification_messages open;\nimport arch.node.engines.signs_for_messages open;\nimport arch.node.types.crypto open;\nimport arch.node.types.identities open;\nimport arch.node.types.anoma as Anoma open;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","verification","behaviour"]},{"location":"arch/node/engines/verification_behaviour.html#verification-behaviour","title":"Verification Behaviour","text":"","tags":["node-architecture","identity-subsystem","engine","verification","behaviour"]},{"location":"arch/node/engines/verification_behaviour.html#overview","title":"Overview","text":"<p>The behavior of the Verification Engine defines how it processes incoming verification requests and produces the corresponding responses.</p>","tags":["node-architecture","identity-subsystem","engine","verification","behaviour"]},{"location":"arch/node/engines/verification_behaviour.html#verification-action-flowchart","title":"Verification Action Flowchart","text":"","tags":["node-architecture","identity-subsystem","engine","verification","behaviour"]},{"location":"arch/node/engines/verification_behaviour.html#verifyaction-flowchart","title":"<code>verifyAction</code> flowchart","text":"<pre><code>flowchart TD\n    Start([Client Request]) --&gt; MsgReq[MsgVerificationRequest&lt;br/&gt;data: Signable&lt;br/&gt;commitment: Commitment&lt;br/&gt;externalIdentity: ExternalIdentity&lt;br/&gt;useSignsFor: Bool]\n\n    subgraph Guard[\"verifyGuard\"]\n        MsgReq --&gt; ValidType{Is message type&lt;br/&gt;VerificationRequest?}\n        ValidType --&gt;|No| Reject([Reject Request])\n        ValidType --&gt;|Yes| ActionEntry[Enter Action Phase]\n    end\n\n    ActionEntry --&gt; Action\n\n    subgraph Action[\"verifyAction\"]\n        direction TB\n        SignsFor{useSignsFor&lt;br/&gt;flag?}\n        SignsFor --&gt;|No| DirectVerify[Verify using configured&lt;br/&gt;verifier]\n        SignsFor --&gt;|Yes| CheckPending{Existing requests&lt;br/&gt;for this identity?}\n\n        CheckPending --&gt;|Yes| StorePending[Add to pending&lt;br/&gt;request list only]\n        CheckPending --&gt;|No| SendAndStore[Send SignsFor request&lt;br/&gt;and store in pending]\n\n        DirectVerify --&gt; Response1[Prepare immediate response]\n    end\n\n    Response1 --&gt; MsgResp1[MsgVerificationReply&lt;br/&gt;result: Bool&lt;br/&gt;err: none]\n    SendAndStore --&gt; SignsForQuery[MsgQuerySignsForEvidenceRequest&lt;br/&gt;to SignsFor Engine]\n    MsgResp1 --&gt; Client([Return to Client])</code></pre> <code>verifyAction</code> flowchart","tags":["node-architecture","identity-subsystem","engine","verification","behaviour"]},{"location":"arch/node/engines/verification_behaviour.html#explanation","title":"Explanation","text":"<ol> <li> <p>Initial Request</p> <ul> <li>A client sends a <code>MsgVerificationRequest</code> containing:<ul> <li><code>data</code>: The original data (<code>Signable</code>) that was allegedly signed</li> <li><code>commitment</code>: The signature (<code>Commitment</code>) to verify</li> <li><code>externalIdentity</code>: The identity that supposedly made the signature</li> <li><code>useSignsFor</code>: Flag indicating whether to check signs-for relationships</li> </ul> </li> </ul> </li> <li> <p>Guard Phase (<code>verifyGuard</code>)</p> <ul> <li>Validates that the incoming message is a proper verification request</li> <li>Checks occur in the following order:<ul> <li>Verifies message type is <code>MsgVerificationRequest</code></li> <li>If validation fails, request is rejected without entering the action phase</li> <li>On success, passes control to <code>verifyActionLabel</code></li> </ul> </li> </ul> </li> <li> <p>Action Phase (<code>verifyAction</code>)</p> <ul> <li>Processing branches based on the <code>useSignsFor</code> flag:</li> </ul> <ul> <li> <p>Direct Verification Path (useSignsFor = false)</p> <ul> <li>Directly verifies the commitment using the configured verifier</li> <li>Creates <code>MsgVerificationReply</code> with:<ul> <li><code>result</code>: Boolean indicating if verification succeeded</li> <li><code>err</code>: None (or Some error message if verification failed)</li> </ul> </li> <li>Sends response immediately back to requester</li> </ul> </li> </ul> <ul> <li> <p>SignsFor Path (useSignsFor = true)</p> <ul> <li>Checks if there are existing pending requests for this identity</li> <li>If this is the first request:<ul> <li>Stores request in pending requests map</li> <li>Sends <code>MsgQuerySignsForEvidenceRequest</code> to SignsFor Engine</li> </ul> </li> <li>If there are existing requests:<ul> <li>Only stores new request in pending requests map</li> </ul> </li> <li>No immediate response is sent to client</li> </ul> </li> </ul> </li> <li> <p>State Management</p> <ul> <li>For direct verification: No state changes</li> <li>For signs-for verification:<ul> <li>Updates pendingRequests map in VerificationLocalState</li> <li>Stores:<ul> <li>The requester's engine ID</li> <li>The data to verify</li> <li>The commitment to verify</li> </ul> </li> <li>Maintains these until signs-for evidence is received</li> </ul> </li> </ul> </li> </ol> <p>Important Notes</p> <ul> <li>Multiple requests for the same identity are batched to avoid duplicate signs-for queries</li> <li>The engine ensures exactly one signs-for query per identity is in flight at any time</li> </ul>","tags":["node-architecture","identity-subsystem","engine","verification","behaviour"]},{"location":"arch/node/engines/verification_behaviour.html#signsforreplyaction-flowchart","title":"<code>signsForReplyAction</code> flowchart","text":"<pre><code>flowchart TD\n    Start([Client Request]) --&gt; MsgReq[MsgVerificationRequest&lt;br/&gt;data: Signable&lt;br/&gt;commitment: Commitment&lt;br/&gt;externalIdentity: ExternalIdentity&lt;br/&gt;useSignsFor: Bool]\n\n    subgraph Guard[\"verifyGuard\"]\n        MsgReq --&gt; ValidType{Is message type&lt;br/&gt;VerificationRequest?}\n        ValidType --&gt;|No| Reject([Reject Request])\n        ValidType --&gt;|Yes| ActionEntry[Enter Action Phase]\n    end\n\n    ActionEntry --&gt; Action\n\n    subgraph Action[\"verifyAction\"]\n        direction TB\n        SignsFor{useSignsFor&lt;br/&gt;flag?}\n        SignsFor --&gt;|No| DirectVerify[Verify using configured&lt;br/&gt;verifier]\n        SignsFor --&gt;|Yes| CheckPending{Existing requests&lt;br/&gt;for this identity?}\n\n        CheckPending --&gt;|Yes| StorePending[Add to pending&lt;br/&gt;request list]\n        CheckPending --&gt;|No| RequestSF[Send SignsFor&lt;br/&gt;evidence request]\n\n        StorePending &amp; RequestSF --&gt; UpdateState[Update state with&lt;br/&gt;pending request]\n        DirectVerify --&gt; Response1[Prepare immediate response]\n        UpdateState --&gt; Response2[Prepare pending response]\n    end\n\n    Response1 --&gt; MsgResp1[MsgVerificationReply&lt;br/&gt;result: Bool&lt;br/&gt;err: none]\n    Response2 --&gt; MsgResp2[MsgQuerySignsForEvidenceRequest&lt;br/&gt;to SignsFor Engine]\n\n    MsgResp1 &amp; MsgResp2 --&gt; Client([Return to Client])</code></pre> <code>signsForReplyAction</code> flowchart","tags":["node-architecture","identity-subsystem","engine","verification","behaviour"]},{"location":"arch/node/engines/verification_behaviour.html#explanation_1","title":"Explanation","text":"<p>Let me provide a detailed explanation of the SignsFor Reply flow chart, following the style used for previous engines:</p>","tags":["node-architecture","identity-subsystem","engine","verification","behaviour"]},{"location":"arch/node/engines/verification_behaviour.html#signsfor-reply-flow","title":"SignsFor Reply Flow","text":"<ol> <li> <p>Initial Request</p> <ul> <li>A message arrives from the SignsFor Engine containing:<ul> <li><code>externalIdentity</code>: The identity the evidence relates to</li> <li><code>evidence</code>: The signs-for relationships evidence</li> <li><code>err</code>: Any error that occurred during evidence gathering</li> </ul> </li> </ul> </li> <li> <p>Guard Phase (<code>signsForReplyGuard</code>)</p> <ul> <li>Validates incoming messages through these checks:<ul> <li>Verifies message type is <code>MsgQuerySignsForEvidenceReply</code></li> <li>Verifies the message sender is the known SignsFor Engine address</li> <li>If validation fails, request is rejected without entering action phase</li> <li>On success, passes control to <code>signsForReplyActionLabel</code></li> </ul> </li> </ul> </li> <li> <p>Action Phase (<code>signsForReplyAction</code>)</p> <ul> <li>Processes the SignsFor evidence reply through these steps:<ul> <li>Checks map of pending requests for the given external identity</li> <li>If no pending requests exist:<ul> <li>No action needed</li> <li>No responses are generated</li> </ul> </li> <li>If pending requests exist:<ul> <li>Processes each pending request using the received evidence</li> <li>For each request, verifies the commitment using both the verifier and the signs-for evidence</li> <li>Generates verification responses for all pending requesters</li> <li>Clears all pending requests for this identity from the state</li> </ul> </li> </ul> </li> </ul> </li> <li> <p>Response Generation</p> <ul> <li>For each pending requester:<ul> <li>Creates <code>MsgVerificationReply</code> containing:<ul> <li><code>result</code>: Boolean indicating if verification succeeded</li> <li><code>err</code>: None (or Some error if verification failed)</li> </ul> </li> </ul> </li> <li>All responses are sent back to their original requesters</li> <li>Each response uses mailbox ID 0</li> </ul> </li> </ol> <p>Important Notes</p> <ul> <li>The engine processes all pending requests for an identity at once when evidence arrives</li> <li>The state is cleaned up (pending requests removed) regardless of verification results</li> <li>Each original requester gets their own individual response</li> </ul>","tags":["node-architecture","identity-subsystem","engine","verification","behaviour"]},{"location":"arch/node/engines/verification_behaviour.html#action-arguments","title":"Action arguments","text":"","tags":["node-architecture","identity-subsystem","engine","verification","behaviour"]},{"location":"arch/node/engines/verification_behaviour.html#replyto","title":"<code>ReplyTo</code>","text":"<pre><code>type ReplyTo := mkReplyTo@{\n  whoAsked : Option EngineID;\n  mailbox : Option MailboxID\n};\n</code></pre> <p>This action argument contains the address and mailbox ID of where the response message should be sent.</p> Arguments <code>whoAsked</code>: The engine ID of the requester. <code>mailbox</code>: The mailbox ID where the response should be sent.","tags":["node-architecture","identity-subsystem","engine","verification","behaviour"]},{"location":"arch/node/engines/verification_behaviour.html#verificationactionargument","title":"<code>VerificationActionArgument</code>","text":"<pre><code>type VerificationActionArgument :=\n  | VerificationActionArgumentReplyTo ReplyTo\n;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","verification","behaviour"]},{"location":"arch/node/engines/verification_behaviour.html#verificationactionarguments","title":"<code>VerificationActionArguments</code>","text":"<pre><code>VerificationActionArguments : Type := List VerificationActionArgument;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","verification","behaviour"]},{"location":"arch/node/engines/verification_behaviour.html#actions","title":"Actions","text":"Auxiliary Juvix code","tags":["node-architecture","identity-subsystem","engine","verification","behaviour"]},{"location":"arch/node/engines/verification_behaviour.html#verificationaction","title":"<code>VerificationAction</code>","text":"<pre><code>VerificationAction : Type :=\n  Action\n    VerificationCfg\n    VerificationLocalState\n    VerificationMailboxState\n    VerificationTimerHandle\n    VerificationActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","verification","behaviour"]},{"location":"arch/node/engines/verification_behaviour.html#verificationactioninput","title":"<code>VerificationActionInput</code>","text":"<pre><code>VerificationActionInput : Type :=\n  ActionInput\n    VerificationCfg\n    VerificationLocalState\n    VerificationMailboxState\n    VerificationTimerHandle\n    VerificationActionArguments\n    Anoma.Msg;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","verification","behaviour"]},{"location":"arch/node/engines/verification_behaviour.html#verificationactioneffect","title":"<code>VerificationActionEffect</code>","text":"<pre><code>VerificationActionEffect : Type :=\n  ActionEffect\n    VerificationLocalState\n    VerificationMailboxState\n    VerificationTimerHandle\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","verification","behaviour"]},{"location":"arch/node/engines/verification_behaviour.html#verificationactionexec","title":"<code>VerificationActionExec</code>","text":"<pre><code>VerificationActionExec : Type :=\n  ActionExec\n    VerificationCfg\n    VerificationLocalState\n    VerificationMailboxState\n    VerificationTimerHandle\n    VerificationActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","verification","behaviour"]},{"location":"arch/node/engines/verification_behaviour.html#verifyaction","title":"<code>verifyAction</code>","text":"<p>Verify a commitment.</p> State update If <code>useSignsFor</code> is true, the state is updated to store pending requests. Otherwise, the state remains unchanged. Messages to be sent If <code>useSignsFor</code> is false, a <code>ReplyVerification</code> message is sent back to the requester. If <code>useSignsFor</code> is true and it's the first request for this identity, a <code>QuerySignsForEvidenceRequest</code> is sent to the SignsFor Engine. Engines to be spawned No engines are created by this action. Timer updates No timers are set or cancelled. <pre><code>verifyAction\n  (input : VerificationActionInput)\n  : Option VerificationActionEffect :=\n  let\n    env := ActionInput.env input;\n    cfg := ActionInput.cfg input;\n    tt := ActionInput.trigger input;\n    localState := EngineEnv.localState env\n  in case getEngineMsgFromTimestampedTrigger tt of {\n    | some emsg :=\n      case emsg of {\n        | EngineMsg.mk@{msg := Anoma.PreMsg.MsgVerification (VerificationMsg.Request (RequestVerification.mkRequestVerification data commitment externalIdentity useSignsFor))} :=\n          case useSignsFor of {\n            | false :=\n              some ActionEffect.mk@{\n                env := env;\n                msgs := [\n                  EngineMsg.mk@{\n                    sender := getEngineIDFromEngineCfg cfg;\n                    target := EngineMsg.sender emsg;\n                    mailbox := some 0;\n                    msg := Anoma.PreMsg.MsgVerification (VerificationMsg.Reply (ReplyVerification.mkReplyVerification\n                      (Verifier.verify\n                        (VerificationCfg.verifier (EngineCfg.cfg cfg) Set.empty externalIdentity)\n                        (VerificationCfg.backend (EngineCfg.cfg cfg))\n                        data commitment)\n                      none))\n                  }\n                ];\n                timers := [];\n                engines := []\n              }\n            | true :=\n              let\n                existingRequests := Map.lookup externalIdentity (VerificationLocalState.pendingRequests localState);\n                newPendingList := case existingRequests of {\n                  | some reqs := reqs ++ [mkPair (EngineMsg.sender emsg) (mkPair data commitment)]\n                  | none := [mkPair (EngineMsg.sender emsg) (mkPair data commitment)]\n                };\n                newPendingRequests := Map.insert externalIdentity newPendingList (VerificationLocalState.pendingRequests localState);\n                newLocalState := localState@VerificationLocalState{\n                  pendingRequests := newPendingRequests\n                };\n                newEnv := env@EngineEnv{\n                  localState := newLocalState\n                }\n              in some ActionEffect.mk@{\n                env := newEnv;\n                msgs := case existingRequests of {\n                  | some _ := []\n                  | none := [\n                    EngineMsg.mk@{\n                      sender := getEngineIDFromEngineCfg cfg;\n                      target := VerificationCfg.signsForEngineAddress (EngineCfg.cfg cfg);\n                      mailbox := some 0;\n                      msg := Anoma.PreMsg.MsgSignsFor (SignsForMsg.QuerySignsForEvidenceRequest (RequestQuerySignsForEvidence.mkRequestQuerySignsForEvidence externalIdentity))\n                    }\n                  ]\n                };\n                timers := [];\n                engines := []\n              }\n          }\n        | _ := none\n      }\n    | _ := none\n  };\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","verification","behaviour"]},{"location":"arch/node/engines/verification_behaviour.html#signsforreplyaction","title":"<code>signsForReplyAction</code>","text":"<p>Process a signs-for response and handle pending requests.</p> State update The state is updated to remove the processed pending requests for the given external identity. Messages to be sent <code>ReplyVerification</code> messages are sent to all requesters who were waiting for this SignsFor evidence. Engines to be spawned No engines are created by this action. Timer updates No timers are set or cancelled. <pre><code>signsForReplyAction\n  (input : VerificationActionInput)\n  : Option VerificationActionEffect :=\n  let\n    env := ActionInput.env input;\n    cfg := ActionInput.cfg input;\n    tt := ActionInput.trigger input;\n    localState := EngineEnv.localState env\n  in case getEngineMsgFromTimestampedTrigger tt of {\n    | some emsg :=\n      case emsg of {\n        | EngineMsg.mk@{msg := Anoma.PreMsg.MsgSignsFor (SignsForMsg.QuerySignsForEvidenceReply (ReplyQuerySignsForEvidence.mkReplyQuerySignsForEvidence externalIdentity evidence err))} :=\n          case Map.lookup externalIdentity (VerificationLocalState.pendingRequests localState) of {\n            | some reqs :=\n              let\n                newPendingRequests := Map.delete externalIdentity (VerificationLocalState.pendingRequests localState);\n                newLocalState := localState@VerificationLocalState{\n                  pendingRequests := newPendingRequests\n                };\n                newEnv := env@EngineEnv{\n                  localState := newLocalState\n                }\n              in some ActionEffect.mk@{\n                env := newEnv;\n                msgs := map (\\{req :=\n                  let\n                    whoAsked := fst req;\n                    data := fst (snd req);\n                    commitment := snd (snd req)\n                  in EngineMsg.mk@{\n                    sender := getEngineIDFromEngineCfg cfg;\n                    target := whoAsked;\n                    mailbox := some 0;\n                    msg := Anoma.PreMsg.MsgVerification (VerificationMsg.Reply (ReplyVerification.mkReplyVerification\n                      (Verifier.verify\n                        (VerificationCfg.verifier (EngineCfg.cfg cfg) evidence externalIdentity)\n                        (VerificationCfg.backend (EngineCfg.cfg cfg))\n                        data commitment)\n                      none))\n                  }}) reqs;\n                timers := [];\n                engines := []\n              }\n            | none := some ActionEffect.mk@{\n              env := env;\n              msgs := [];\n              timers := [];\n              engines := []\n            }\n          }\n        | _ := none\n      }\n    | _ := none\n  };\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","verification","behaviour"]},{"location":"arch/node/engines/verification_behaviour.html#action-labels","title":"Action Labels","text":"","tags":["node-architecture","identity-subsystem","engine","verification","behaviour"]},{"location":"arch/node/engines/verification_behaviour.html#verifyactionlabel","title":"<code>verifyActionLabel</code>","text":"<pre><code>verifyActionLabel : VerificationActionExec := ActionExec.Seq [ verifyAction ];\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","verification","behaviour"]},{"location":"arch/node/engines/verification_behaviour.html#signsforreplyactionlabel","title":"<code>signsForReplyActionLabel</code>","text":"<pre><code>signsForReplyActionLabel : VerificationActionExec := ActionExec.Seq [ signsForReplyAction ];\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","verification","behaviour"]},{"location":"arch/node/engines/verification_behaviour.html#guards","title":"Guards","text":"Auxiliary Juvix code","tags":["node-architecture","identity-subsystem","engine","verification","behaviour"]},{"location":"arch/node/engines/verification_behaviour.html#verificationguard","title":"<code>VerificationGuard</code>","text":"<p> <pre><code>VerificationGuard : Type :=\n  Guard\n    VerificationCfg\n    VerificationLocalState\n    VerificationMailboxState\n    VerificationTimerHandle\n    VerificationActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","identity-subsystem","engine","verification","behaviour"]},{"location":"arch/node/engines/verification_behaviour.html#verificationguardoutput","title":"<code>VerificationGuardOutput</code>","text":"<p> <pre><code>VerificationGuardOutput : Type :=\n  GuardOutput\n    VerificationCfg\n    VerificationLocalState\n    VerificationMailboxState\n    VerificationTimerHandle\n    VerificationActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","identity-subsystem","engine","verification","behaviour"]},{"location":"arch/node/engines/verification_behaviour.html#verificationguardeval","title":"<code>VerificationGuardEval</code>","text":"<p> <pre><code>VerificationGuardEval : Type :=\n  GuardEval\n    VerificationCfg\n    VerificationLocalState\n    VerificationMailboxState\n    VerificationTimerHandle\n    VerificationActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","identity-subsystem","engine","verification","behaviour"]},{"location":"arch/node/engines/verification_behaviour.html#verifyguard","title":"<code>verifyGuard</code>","text":"Condition Message type is <code>VerificationRequest</code>. <pre><code>verifyGuard\n  (tt : TimestampedTrigger VerificationTimerHandle Anoma.Msg)\n  (cfg : EngineCfg VerificationCfg)\n  (env : VerificationEnv)\n  : Option VerificationGuardOutput :=\n  case getEngineMsgFromTimestampedTrigger tt of {\n    | some EngineMsg.mk@{\n        msg := Anoma.PreMsg.MsgVerification (VerificationMsg.Request _);\n      } :=\n      some GuardOutput.mk@{\n        action := verifyActionLabel;\n        args := []\n      }\n    | _ := none\n  };\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","verification","behaviour"]},{"location":"arch/node/engines/verification_behaviour.html#signsforreplyguard","title":"<code>signsForReplyGuard</code>","text":"Condition Message is a signs-for response from the SignsFor engine. <pre><code>signsForReplyGuard\n  (tt : TimestampedTrigger VerificationTimerHandle Anoma.Msg)\n  (cfg : EngineCfg VerificationCfg)\n  (env : VerificationEnv)\n  : Option VerificationGuardOutput :=\n  case getEngineMsgFromTimestampedTrigger tt of {\n    | some emsg :=\n      case emsg of {\n        | EngineMsg.mk@{\n            msg := Anoma.PreMsg.MsgSignsFor (SignsForMsg.QuerySignsForEvidenceReply _);\n            sender := sender\n          } :=\n          case isEqual (Ord.compare sender (VerificationCfg.signsForEngineAddress (EngineCfg.cfg cfg))) of {\n            | true := some GuardOutput.mk@{\n              action := signsForReplyActionLabel;\n              args := []\n            }\n            | false := none\n          }\n        | _ := none\n      }\n    | none := none\n  };\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","verification","behaviour"]},{"location":"arch/node/engines/verification_behaviour.html#the-verification-behaviour","title":"The Verification Behaviour","text":"","tags":["node-architecture","identity-subsystem","engine","verification","behaviour"]},{"location":"arch/node/engines/verification_behaviour.html#verificationbehaviour","title":"<code>VerificationBehaviour</code>","text":"<pre><code>VerificationBehaviour : Type :=\n  EngineBehaviour\n    VerificationCfg\n    VerificationLocalState\n    VerificationMailboxState\n    VerificationTimerHandle\n    VerificationActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","verification","behaviour"]},{"location":"arch/node/engines/verification_behaviour.html#instantiation","title":"Instantiation","text":"<pre><code>verificationBehaviour : VerificationBehaviour :=\n  EngineBehaviour.mk@{\n    guards := GuardEval.First [\n      verifyGuard;\n      signsForReplyGuard\n    ]\n  };\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","verification","behaviour"]},{"location":"arch/node/engines/verification_config.html","title":"Verification Configuration","text":"Juvix imports <pre><code>module arch.node.engines.verification_config;\n\nimport prelude open;\nimport arch.node.engines.verification_messages open;\nimport arch.node.types.engine open;\nimport arch.node.types.messages open;\nimport arch.node.types.identities open;\nimport arch.system.identity.identity open hiding {ExternalIdentity};\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","verification","configuration"]},{"location":"arch/node/engines/verification_config.html#verification-configuration","title":"Verification Configuration","text":"","tags":["node-architecture","identity-subsystem","engine","verification","configuration"]},{"location":"arch/node/engines/verification_config.html#overview","title":"Overview","text":"<p>The Verification engine configuration contains static information for Verification engine instances.</p>","tags":["node-architecture","identity-subsystem","engine","verification","configuration"]},{"location":"arch/node/engines/verification_config.html#the-verification-configuration","title":"The Verification Configuration","text":"<p>The configuration of a Verification Engine instance includes the identity's verification capabilities, the address of an associated <code>SignsFor</code> engine, and a specific backend.</p>","tags":["node-architecture","identity-subsystem","engine","verification","configuration"]},{"location":"arch/node/engines/verification_config.html#verificationcfg","title":"<code>VerificationCfg</code>","text":"<pre><code>type VerificationCfg := mk@{\n  verifier : Set SignsForEvidence -&gt; ExternalIdentity -&gt; Verifier ByteString Backend Signable Commitment;\n  backend : Backend;\n  signsForEngineAddress : EngineID;\n}\n</code></pre> Arguments <code>verifier</code>: Function to generate verifier for a set of evidence and an identity. It takes a set of evidence, an identity, and returns a verifier. <code>backend</code>: The backend to use for verification. <code>signsForEngineAddress</code>: The address of the associated SignsFor engine.","tags":["node-architecture","identity-subsystem","engine","verification","configuration"]},{"location":"arch/node/engines/verification_config.html#instantiation","title":"Instantiation","text":"<p>```juvix extract-module-statements module verification_config_example;</p> <p>verificationCfg : EngineCfg VerificationCfg :=     EngineCfg.mk@{       node := PublicKey.Curve25519PubKey \"0xabcd1234\";       name := \"verification\";       cfg := VerificationCfg.mk@{         verifier := { _ := Verifier.mkVerifier@{           verify := { _ _ := true};           verifierHash := HASH.mkHASH@{             ordKey := OrdKey.mkOrdKey@{                 compare := Ord.compare             };             hash := {x := \"0x1234abcd\"};           };         }};         backend := Backend.LocalMemory;         signsForEngineAddress := mkPair none \"Blah\"       };     }   ; end; ```</p>","tags":["node-architecture","identity-subsystem","engine","verification","configuration"]},{"location":"arch/node/engines/verification_environment.html","title":"Verification Environment","text":"Juvix imports <pre><code>module arch.node.engines.verification_environment;\n\nimport prelude open;\nimport arch.node.types.messages open;\nimport arch.node.types.engine_environment open;\nimport arch.node.types.identities open;\nimport arch.node.engines.verification_messages open;\nimport arch.node.types.anoma_message as Anoma open;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","verification","environment"]},{"location":"arch/node/engines/verification_environment.html#verification-environment","title":"Verification Environment","text":"","tags":["node-architecture","identity-subsystem","engine","verification","environment"]},{"location":"arch/node/engines/verification_environment.html#overview","title":"Overview","text":"<p>The Verification Engine is stateless and does not maintain any internal state between requests. It relies on external information (like the <code>signs_for</code> relationships) for its operations.</p>","tags":["node-architecture","identity-subsystem","engine","verification","environment"]},{"location":"arch/node/engines/verification_environment.html#mailbox-states","title":"Mailbox states","text":"<p>The Verification Engine does not require complex mailbox states. We define the mailbox state as <code>Unit</code>.</p>","tags":["node-architecture","identity-subsystem","engine","verification","environment"]},{"location":"arch/node/engines/verification_environment.html#verificationmailboxstate","title":"<code>VerificationMailboxState</code>","text":"<pre><code>syntax alias VerificationMailboxState := Unit;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","verification","environment"]},{"location":"arch/node/engines/verification_environment.html#local-state","title":"Local state","text":"<p>The local state of a Verification Engine instance contains a map to a list of pending requests which require <code>SignsFor</code> information which is requested from the associated <code>SignsFor</code> engine.</p>","tags":["node-architecture","identity-subsystem","engine","verification","environment"]},{"location":"arch/node/engines/verification_environment.html#verificationlocalstate","title":"<code>VerificationLocalState</code>","text":"<pre><code>type VerificationLocalState := mk@{\n  pendingRequests : Map ExternalIdentity (List (Pair EngineID (Pair Signable Commitment)));\n};\n</code></pre> Arguments <code>pendingRequests</code>: The backlog of verification requests still in processing.","tags":["node-architecture","identity-subsystem","engine","verification","environment"]},{"location":"arch/node/engines/verification_environment.html#timer-handle","title":"Timer Handle","text":"<p>The Verification Engine does not require a timer handle type. Therefore, we define the timer handle type as <code>Unit</code>.</p>","tags":["node-architecture","identity-subsystem","engine","verification","environment"]},{"location":"arch/node/engines/verification_environment.html#verificationtimerhandle","title":"<code>VerificationTimerHandle</code>","text":"<pre><code>syntax alias VerificationTimerHandle := Unit;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","verification","environment"]},{"location":"arch/node/engines/verification_environment.html#the-verification-environment","title":"The Verification Environment","text":"","tags":["node-architecture","identity-subsystem","engine","verification","environment"]},{"location":"arch/node/engines/verification_environment.html#verificationenv","title":"<code>VerificationEnv</code>","text":"<pre><code>VerificationEnv : Type :=\n  EngineEnv\n    VerificationLocalState\n    VerificationMailboxState\n    VerificationTimerHandle\n    Anoma.Msg;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","verification","environment"]},{"location":"arch/node/engines/verification_environment.html#instantiation","title":"Instantiation","text":"<p>```juvix extract-module-statements module verification_environment_example;</p> <p>verificationEnv : VerificationEnv :=     EngineEnv.mk@{       localState := VerificationLocalState.mk@{         pendingRequests := Map.empty       };       mailboxCluster := Map.empty;       acquaintances := Set.empty;       timers := []     }   ; end; ```</p>","tags":["node-architecture","identity-subsystem","engine","verification","environment"]},{"location":"arch/node/engines/verification_messages.html","title":"Verification Messages","text":"Juvix imports <pre><code>module arch.node.engines.verification_messages;\nimport prelude open;\nimport arch.node.types.identities open;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","verification","message-types"]},{"location":"arch/node/engines/verification_messages.html#verification-messages","title":"Verification Messages","text":"","tags":["node-architecture","identity-subsystem","engine","verification","message-types"]},{"location":"arch/node/engines/verification_messages.html#message-interface","title":"Message interface","text":"<pre><code>type VerificationMsg :=\n  | Request RequestVerification\n  | Reply ReplyVerification\n  ;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","verification","message-types"]},{"location":"arch/node/engines/verification_messages.html#message-sequence-diagrams","title":"Message sequence diagrams","text":"","tags":["node-architecture","identity-subsystem","engine","verification","message-types"]},{"location":"arch/node/engines/verification_messages.html#verification-sequence-without-signs_for-evidence","title":"Verification sequence (without <code>signs_for</code> evidence)","text":"<pre><code>sequenceDiagram\n    participant C as Client\n    participant VE as Verification Engine\n\n    C-&gt;&gt;VE: RequestVerification(useSignsFor=false)\n    Note over VE: Verify commitment directly for external identity\n    VE--&gt;&gt;C: ReplyVerification</code></pre>  Sequence diagram for verification (no <code>signs_for</code> evidence).","tags":["node-architecture","identity-subsystem","engine","verification","message-types"]},{"location":"arch/node/engines/verification_messages.html#verification-sequence-with-signs_for-evidence","title":"Verification sequence (with <code>signs_for</code> evidence)","text":"<pre><code>sequenceDiagram\n    participant C as Client\n    participant VE as Verification Engine\n    participant SF as SignsFor Engine\n\n    C-&gt;&gt;VE: RequestVerification(useSignsFor=true)\n    VE-&gt;&gt;SF: QuerySignsForEvidenceRequest\n    Note over SF: Retrieve signs_for evidence\n    SF--&gt;&gt;VE: QuerySignsForEvidenceReply\n    Note over VE: Verify commitment using SignsFor evidence\n    VE--&gt;&gt;C: ReplyVerification</code></pre>  Sequence diagram for verification (with <code>signs_for</code> evidence).","tags":["node-architecture","identity-subsystem","engine","verification","message-types"]},{"location":"arch/node/engines/verification_messages.html#message-types","title":"Message types","text":"","tags":["node-architecture","identity-subsystem","engine","verification","message-types"]},{"location":"arch/node/engines/verification_messages.html#requestverification","title":"<code>RequestVerification</code>","text":"<pre><code>type RequestVerification := mkRequestVerification@{\n  data : Signable;\n  commitment : Commitment;\n  externalIdentity : ExternalIdentity;\n  useSignsFor : Bool\n};\n</code></pre> <p>A <code>RequestVerification</code> instructs the Verification Engine to verify a commitment (signature) from a particular external identity, possibly using known <code>signs_for</code> relationships.</p> Arguments <code>data</code>: The data that was signed. <code>commitment</code>: The commitment (signature) to verify. <code>externalIdentity</code>: The external identity that supposedly made the commitment. <code>useSignsFor</code>: Whether or not to use known <code>signs_for</code> relationships.","tags":["node-architecture","identity-subsystem","engine","verification","message-types"]},{"location":"arch/node/engines/verification_messages.html#replyverification","title":"<code>ReplyVerification</code>","text":"<pre><code>type ReplyVerification := mkReplyVerification@{\n  result : Bool;\n  err : Option String\n};\n</code></pre> <p>A <code>ReplyVerification</code> contains the result of verifying a commitment in response to a <code>RequestVerification</code>.</p> Arguments <code>result</code>: True if the verification succeeded, False otherwise. <code>err</code>: An error message if verification failed.","tags":["node-architecture","identity-subsystem","engine","verification","message-types"]},{"location":"arch/node/engines/verification_messages.html#verificationmsg","title":"<code>VerificationMsg</code>","text":"<pre><code>type VerificationMsg :=\n  | Request RequestVerification\n  | Reply ReplyVerification\n  ;\n</code></pre>","tags":["node-architecture","identity-subsystem","engine","verification","message-types"]},{"location":"arch/node/engines/verification_messages.html#engine-components","title":"Engine components","text":"<ul> <li>Verification Configuration</li> <li>Verification Environment</li> <li>Verification Behaviour</li> </ul>","tags":["node-architecture","identity-subsystem","engine","verification","message-types"]},{"location":"arch/node/engines/wall_clock.html","title":"Wall Clock Engine","text":"Juvix imports <pre><code>module arch.node.engines.wall_clock;\n\nimport prelude open;\nimport arch.node.types.engine_environment open;\nimport arch.node.types.engine_behaviour open;\nimport arch.node.types.engine open;\n\nimport arch.node.engines.wall_clock_config open public;\nimport arch.node.engines.wall_clock_messages open public;\nimport arch.node.engines.wall_clock_environment open public;\nimport arch.node.engines.wall_clock_behaviour open public;\n\nimport arch.node.types.anoma as Anoma open;\n\nopen wall_clock_config_example;\nopen wall_clock_environment_example;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","wall-clock-engine","engine-definition"]},{"location":"arch/node/engines/wall_clock.html#wall-clock-engine","title":"Wall Clock Engine","text":"","tags":["node-architecture","hardware-subsystem","engine","wall-clock-engine","engine-definition"]},{"location":"arch/node/engines/wall_clock.html#purpose","title":"Purpose","text":"<p>The Wall Clock Engine provides a mechanism for tracking and managing time locally on the physical machine that the Anoma node is running. It abstracts away the details of the underlying hardware and provides an interface for getting real-time clock functionality.</p>","tags":["node-architecture","hardware-subsystem","engine","wall-clock-engine","engine-definition"]},{"location":"arch/node/engines/wall_clock.html#engine-components","title":"Engine components","text":"<ul> <li>Wall Clock Messages</li> <li>Wall Clock Configuration</li> <li>Wall Clock Environment</li> <li>Wall Clock Behaviour</li> </ul>","tags":["node-architecture","hardware-subsystem","engine","wall-clock-engine","engine-definition"]},{"location":"arch/node/engines/wall_clock.html#type","title":"Type","text":"<pre><code>WallClockEngine : Type :=\n  Engine\n    WallClockCfg\n    WallClockLocalState\n    WallClockMailboxState\n    WallClockTimerHandle\n    WallClockActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","wall-clock-engine","engine-definition"]},{"location":"arch/node/engines/wall_clock.html#example-of-a-wall-clock-engine","title":"Example of a wall clock engine","text":"<pre><code>exampleWallClockEngine : WallClockEngine :=\n  Engine.mk@{\n    cfg := wallClockCfg;\n    env := wallClockEnv;\n    behaviour := wallClockBehaviour;\n  };\n</code></pre> <p>where <code>wallClockCfg</code> is defined as follows:</p> <p>```juvix extract-module-statements module wall_clock_config_example;</p> <p>wallClockCfg : EngineCfg WallClockCfg :=     EngineCfg.mk@{       node := PublicKey.Curve25519PubKey \"0xabcd1234\";       name := \"wall clock\";       cfg := WallClockCfg.mk;     }   ; end; <pre><code>`wallClockEnv` is defined as follows:\n\n```juvix extract-module-statements\nmodule wall_clock_environment_example;\n\n  wallClockEnv : WallClockEnv :=\n    EngineEnv.mk@{\n      localState := WallClockLocalState.mk@{\n        currentTime := 0\n      };\n      mailboxCluster := Map.empty;\n      acquaintances := Set.empty;\n      timers := []\n    }\n  ;\nend;\n</code></pre></p> <p>and <code>wallClockBehaviour</code> is defined as follows:</p> <pre><code>wallClockBehaviour : WallClockBehaviour :=\n  EngineBehaviour.mk@{\n    guards := GuardEval.First [\n      getTimeGuard\n    ];\n  };\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","wall-clock-engine","engine-definition"]},{"location":"arch/node/engines/wall_clock_behaviour.html","title":"Wall Clock Behaviour","text":"Juvix imports <pre><code>module arch.node.engines.wall_clock_behaviour;\n\nimport arch.node.engines.wall_clock_messages open;\nimport arch.node.engines.wall_clock_config open;\nimport arch.node.engines.wall_clock_environment open;\n\nimport prelude open;\nimport arch.node.types.basics open;\nimport arch.node.types.identities open;\nimport arch.node.types.messages open;\nimport arch.node.types.engine open;\nimport arch.node.types.anoma as Anoma open;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","wall-clock-engine","behaviour"]},{"location":"arch/node/engines/wall_clock_behaviour.html#wall-clock-behaviour","title":"Wall Clock Behaviour","text":"","tags":["node-architecture","hardware-subsystem","engine","wall-clock-engine","behaviour"]},{"location":"arch/node/engines/wall_clock_behaviour.html#overview","title":"Overview","text":"<p>The behavior of the Wall Clock Engine defines how it processes get time requests and produces time results using the current wall clock time.</p>","tags":["node-architecture","hardware-subsystem","engine","wall-clock-engine","behaviour"]},{"location":"arch/node/engines/wall_clock_behaviour.html#action-arguments","title":"Action arguments","text":"","tags":["node-architecture","hardware-subsystem","engine","wall-clock-engine","behaviour"]},{"location":"arch/node/engines/wall_clock_behaviour.html#messagefrom","title":"<code>MessageFrom</code>","text":"<pre><code>type MessageFrom := mkMessageFrom@{\n  whoAsked : Option EngineID;\n  mailbox : Option MailboxID\n};\n</code></pre> Arguments <code>whoAsked</code>: The engine ID of the requester. <code>mailbox</code>: The mailbox ID where the response message should be sent.","tags":["node-architecture","hardware-subsystem","engine","wall-clock-engine","behaviour"]},{"location":"arch/node/engines/wall_clock_behaviour.html#wallclockactionargument","title":"<code>WallClockActionArgument</code>","text":"<pre><code>type WallClockActionArgument :=\n  | WallClockActionArgumentFrom MessageFrom;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","wall-clock-engine","behaviour"]},{"location":"arch/node/engines/wall_clock_behaviour.html#wallclockactionarguments","title":"<code>WallClockActionArguments</code>","text":"<pre><code>WallClockActionArguments : Type := List WallClockActionArgument;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","wall-clock-engine","behaviour"]},{"location":"arch/node/engines/wall_clock_behaviour.html#actions","title":"Actions","text":"Auxiliary Juvix code","tags":["node-architecture","hardware-subsystem","engine","wall-clock-engine","behaviour"]},{"location":"arch/node/engines/wall_clock_behaviour.html#wallclockaction","title":"WallClockAction","text":"<p> <pre><code>WallClockAction : Type :=\n  Action\n    WallClockCfg\n    WallClockLocalState\n    WallClockMailboxState\n    WallClockTimerHandle\n    WallClockActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","hardware-subsystem","engine","wall-clock-engine","behaviour"]},{"location":"arch/node/engines/wall_clock_behaviour.html#wallclockactioninput","title":"WallClockActionInput","text":"<p> <pre><code>WallClockActionInput : Type :=\n  ActionInput\n    WallClockCfg\n    WallClockLocalState\n    WallClockMailboxState\n    WallClockTimerHandle\n    WallClockActionArguments\n    Anoma.Msg;\n</code></pre> </p>","tags":["node-architecture","hardware-subsystem","engine","wall-clock-engine","behaviour"]},{"location":"arch/node/engines/wall_clock_behaviour.html#wallclockactioneffect","title":"<code>WallClockActionEffect</code>","text":"<p> <pre><code>WallClockActionEffect : Type :=\n  ActionEffect\n    WallClockLocalState\n    WallClockMailboxState\n    WallClockTimerHandle\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","hardware-subsystem","engine","wall-clock-engine","behaviour"]},{"location":"arch/node/engines/wall_clock_behaviour.html#wallclockactionexec","title":"<code>WallClockActionExec</code>","text":"<p> <pre><code>WallClockActionExec : Type :=\n  ActionExec\n    WallClockCfg\n    WallClockLocalState\n    WallClockMailboxState\n    WallClockTimerHandle\n    WallClockActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","hardware-subsystem","engine","wall-clock-engine","behaviour"]},{"location":"arch/node/engines/wall_clock_behaviour.html#gettimeaction","title":"<code>getTimeAction</code>","text":"<p>Return the current wall clock time.</p> State update Time will have advanced. Messages to be sent A <code>WallClockGetTimeResult</code> message with the current time. Engines to be spawned No engine is created by this action. Timer updates No timers are set or cancelled. <pre><code>getTimeAction\n  (input : WallClockActionInput)\n  : Option WallClockActionEffect :=\n  let\n    cfg := ActionInput.cfg input;\n    env := ActionInput.env input;\n    trigger := ActionInput.trigger input;\n    currentTime := WallClockLocalState.currentTime (EngineEnv.localState env);\n    newTime := advanceTime currentTime;\n  in\n    case getEngineMsgFromTimestampedTrigger trigger of {\n    | some emsg :=\n      some ActionEffect.mk@{\n        env := env@EngineEnv{\n          localState := WallClockLocalState.mk@{\n            currentTime := newTime\n          }\n        };\n        msgs := [\n          EngineMsg.mk@{\n            sender := getEngineIDFromEngineCfg cfg;\n            target := EngineMsg.sender emsg;\n            mailbox := some 0;\n            msg :=\n              Anoma.PreMsg.MsgWallClock\n                (WallClockMsg.GetTimeResult\n                  TimeResult.mk@{\n                    epochTime := newTime\n                  })\n          }\n        ];\n        timers := [];\n        engines := [];\n      }\n    | _ := none\n    };\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","wall-clock-engine","behaviour"]},{"location":"arch/node/engines/wall_clock_behaviour.html#action-labels","title":"Action Labels","text":"","tags":["node-architecture","hardware-subsystem","engine","wall-clock-engine","behaviour"]},{"location":"arch/node/engines/wall_clock_behaviour.html#gettimeactionlabel","title":"<code>getTimeActionLabel</code>","text":"<pre><code>getTimeActionLabel : WallClockActionExec := ActionExec.Seq [ getTimeAction ];\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","wall-clock-engine","behaviour"]},{"location":"arch/node/engines/wall_clock_behaviour.html#guards","title":"Guards","text":"Auxiliary Juvix code","tags":["node-architecture","hardware-subsystem","engine","wall-clock-engine","behaviour"]},{"location":"arch/node/engines/wall_clock_behaviour.html#wallclockguard","title":"<code>WallClockGuard</code>","text":"<p> <pre><code>WallClockGuard : Type :=\n  Guard\n    WallClockCfg\n    WallClockLocalState\n    WallClockMailboxState\n    WallClockTimerHandle\n    WallClockActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","hardware-subsystem","engine","wall-clock-engine","behaviour"]},{"location":"arch/node/engines/wall_clock_behaviour.html#wallclockguardoutput","title":"<code>WallClockGuardOutput</code>","text":"<p> <pre><code>WallClockGuardOutput : Type :=\n  GuardOutput\n    WallClockCfg\n    WallClockLocalState\n    WallClockMailboxState\n    WallClockTimerHandle\n    WallClockActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","hardware-subsystem","engine","wall-clock-engine","behaviour"]},{"location":"arch/node/engines/wall_clock_behaviour.html#wallclockguardeval","title":"<code>WallClockGuardEval</code>","text":"<p> <pre><code>WallClockGuardEval : Type :=\n  GuardEval\n    WallClockCfg\n    WallClockLocalState\n    WallClockMailboxState\n    WallClockTimerHandle\n    WallClockActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["node-architecture","hardware-subsystem","engine","wall-clock-engine","behaviour"]},{"location":"arch/node/engines/wall_clock_behaviour.html#gettimeguard","title":"<code>getTimeGuard</code>","text":"Condition Message type is <code>WallClockGetTime</code>. <pre><code>getTimeGuard\n  (trigger : TimestampedTrigger WallClockTimerHandle Anoma.Msg)\n  (cfg : EngineCfg WallClockCfg)\n  (env : WallClockEnv)\n  : Option WallClockGuardOutput :=\n  case getEngineMsgFromTimestampedTrigger trigger of {\n    | some EngineMsg.mk@{\n        msg := Anoma.PreMsg.MsgWallClock WallClockMsg.GetTime;\n      } := some GuardOutput.mk@{\n        action := getTimeActionLabel;\n        args := [];\n      }\n    | _ := none\n    };\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","wall-clock-engine","behaviour"]},{"location":"arch/node/engines/wall_clock_behaviour.html#the-wall-clock-behaviour","title":"The Wall Clock behaviour","text":"","tags":["node-architecture","hardware-subsystem","engine","wall-clock-engine","behaviour"]},{"location":"arch/node/engines/wall_clock_behaviour.html#wallclockbehaviour","title":"<code>WallClockBehaviour</code>","text":"<pre><code>WallClockBehaviour : Type :=\n  EngineBehaviour\n    WallClockCfg\n    WallClockLocalState\n    WallClockMailboxState\n    WallClockTimerHandle\n    WallClockActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","wall-clock-engine","behaviour"]},{"location":"arch/node/engines/wall_clock_behaviour.html#instantiation","title":"Instantiation","text":"<pre><code>wallClockBehaviour : WallClockBehaviour :=\n  EngineBehaviour.mk@{\n    guards := GuardEval.First [\n      getTimeGuard\n    ];\n  };\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","wall-clock-engine","behaviour"]},{"location":"arch/node/engines/wall_clock_behaviour.html#wall-clock-action-flowchart","title":"Wall Clock Action Flowchart","text":"","tags":["node-architecture","hardware-subsystem","engine","wall-clock-engine","behaviour"]},{"location":"arch/node/engines/wall_clock_behaviour.html#gettime-flowchart","title":"<code>getTime</code> Flowchart","text":"<pre><code>flowchart TD\n  subgraph C[Conditions]\n    CMsg&gt;WallClockGetTime]\n  end\n\n  G(getTimeGuard)\n  A(getTimeAction)\n\n  C --&gt; G -- *getTimeActionLabel* --&gt; A --&gt; E\n\n  subgraph E[Effects]\n    EEnv[(time := advanceTime time)]\n    EMsg&gt;WallClockGetTimeResult&lt;br/&gt;epochTime]\n  end</code></pre> <code>getTime</code> flowchart","tags":["node-architecture","hardware-subsystem","engine","wall-clock-engine","behaviour"]},{"location":"arch/node/engines/wall_clock_config.html","title":"Wall Clock Configuration","text":"Juvix imports <pre><code>module arch.node.engines.wall_clock_config;\n\nimport prelude open;\nimport arch.node.engines.wall_clock_messages open;\nimport arch.node.types.engine open;\nimport arch.node.types.messages open;\nimport arch.node.types.identities open;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","wall-clock-engine","configuration"]},{"location":"arch/node/engines/wall_clock_config.html#wall-clock-configuration","title":"Wall Clock Configuration","text":"","tags":["node-architecture","hardware-subsystem","engine","wall-clock-engine","configuration"]},{"location":"arch/node/engines/wall_clock_config.html#overview","title":"Overview","text":"<p>The wall clock engine configuration contains the static configuration needed for the wall clock engine to function.</p>","tags":["node-architecture","hardware-subsystem","engine","wall-clock-engine","configuration"]},{"location":"arch/node/engines/wall_clock_config.html#the-wall-clock-configuration","title":"The Wall Clock Configuration","text":"","tags":["node-architecture","hardware-subsystem","engine","wall-clock-engine","configuration"]},{"location":"arch/node/engines/wall_clock_config.html#wallclockcfg","title":"<code>WallClockCfg</code>","text":"<pre><code>type WallClockCfg := mk;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","wall-clock-engine","configuration"]},{"location":"arch/node/engines/wall_clock_config.html#instantiation","title":"Instantiation","text":"<p>```juvix extract-module-statements module wall_clock_config_example;</p> <p>wallClockCfg : EngineCfg WallClockCfg :=     EngineCfg.mk@{       node := PublicKey.Curve25519PubKey \"0xabcd1234\";       name := \"wall clock\";       cfg := WallClockCfg.mk;     }   ; end; ```</p>","tags":["node-architecture","hardware-subsystem","engine","wall-clock-engine","configuration"]},{"location":"arch/node/engines/wall_clock_environment.html","title":"Wall Clock Environment","text":"Juvix imports <pre><code>module arch.node.engines.wall_clock_environment;\n\nimport prelude open;\nimport arch.node.engines.wall_clock_messages open;\nimport arch.node.types.engine_environment open;\nimport arch.node.types.engine open;\nimport arch.node.types.messages open;\nimport arch.node.types.identities open;\nimport arch.node.types.anoma_message as Anoma open;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","wall-clock-engine","environment"]},{"location":"arch/node/engines/wall_clock_environment.html#wall-clock-environment","title":"Wall Clock Environment","text":"","tags":["node-architecture","hardware-subsystem","engine","wall-clock-engine","environment"]},{"location":"arch/node/engines/wall_clock_environment.html#overview","title":"Overview","text":"<p>The Local Wall Clock Engine provides and keeps track of a local time.</p>","tags":["node-architecture","hardware-subsystem","engine","wall-clock-engine","environment"]},{"location":"arch/node/engines/wall_clock_environment.html#mailbox-states","title":"Mailbox states","text":"<p>The wall clock engine does not require complex mailbox states. We define the mailbox state as <code>Unit</code>.</p> <pre><code>syntax alias WallClockMailboxState := Unit;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","wall-clock-engine","environment"]},{"location":"arch/node/engines/wall_clock_environment.html#local-state","title":"Local state","text":"<pre><code>type WallClockLocalState := mk@{\n  currentTime : EpochTimestamp\n};\n</code></pre> Arguments <code>currentTime</code> The current epoch time value","tags":["node-architecture","hardware-subsystem","engine","wall-clock-engine","environment"]},{"location":"arch/node/engines/wall_clock_environment.html#timer-handle","title":"Timer Handle","text":"<p>The wall clock engine does not require a timer handle type. Therefore, we define the timer handle type as <code>Unit</code>.</p> <pre><code>syntax alias WallClockTimerHandle := Unit;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","wall-clock-engine","environment"]},{"location":"arch/node/engines/wall_clock_environment.html#the-wall-clock-environment","title":"The Wall Clock Environment","text":"","tags":["node-architecture","hardware-subsystem","engine","wall-clock-engine","environment"]},{"location":"arch/node/engines/wall_clock_environment.html#auxiliary-abstraction-functions","title":"Auxiliary abstraction Functions","text":"<pre><code>axiom advanceTime : EpochTimestamp -&gt; EpochTimestamp;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","wall-clock-engine","environment"]},{"location":"arch/node/engines/wall_clock_environment.html#wallclockenv","title":"<code>WallClockEnv</code>","text":"<pre><code>WallClockEnv : Type :=\n  EngineEnv\n    WallClockLocalState\n    WallClockMailboxState\n    WallClockTimerHandle\n    Anoma.Msg;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","wall-clock-engine","environment"]},{"location":"arch/node/engines/wall_clock_environment.html#instantiation","title":"Instantiation","text":"<p>```juvix extract-module-statements module wall_clock_environment_example;</p> <p>wallClockEnv : WallClockEnv :=     EngineEnv.mk@{       localState := WallClockLocalState.mk@{         currentTime := 0       };       mailboxCluster := Map.empty;       acquaintances := Set.empty;       timers := []     }   ; end; ```</p>","tags":["node-architecture","hardware-subsystem","engine","wall-clock-engine","environment"]},{"location":"arch/node/engines/wall_clock_messages.html","title":"Wall Clock Messages","text":"Juvix imports <pre><code>module arch.node.engines.wall_clock_messages;\nimport prelude open;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","wall-clock-engine","message-types"]},{"location":"arch/node/engines/wall_clock_messages.html#wall-clock-messages","title":"Wall Clock Messages","text":"<p>These are the messages that the Wall Clock engine can receive/respond to.</p>","tags":["node-architecture","hardware-subsystem","engine","wall-clock-engine","message-types"]},{"location":"arch/node/engines/wall_clock_messages.html#message-interface","title":"Message interface","text":"<pre><code>type WallClockMsg :=\n  | GetTime\n  | GetTimeResult TimeResult\n  ;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","wall-clock-engine","message-types"]},{"location":"arch/node/engines/wall_clock_messages.html#message-sequence-diagrams","title":"Message sequence diagrams","text":"","tags":["node-architecture","hardware-subsystem","engine","wall-clock-engine","message-types"]},{"location":"arch/node/engines/wall_clock_messages.html#wall-clock-request-and-response","title":"Wall Clock request and response","text":"<pre><code>sequenceDiagram\n    participant WallClockClient\n    participant WallClock\n\n    WallClockClient -&gt;&gt; WallClock: WallClockGetTime\n    WallClock -&gt;&gt; WallClockClient: WallClockGetTimeResult</code></pre>  Sequence diagram: Wall Clock time request &amp; response","tags":["node-architecture","hardware-subsystem","engine","wall-clock-engine","message-types"]},{"location":"arch/node/engines/wall_clock_messages.html#message-types","title":"Message types","text":"Auxiliary Juvix code <pre><code>syntax alias StorageKey := String;\nsyntax alias StorageValue := String;\nsyntax alias EpochTimestamp := Nat;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","wall-clock-engine","message-types"]},{"location":"arch/node/engines/wall_clock_messages.html#wallclockgettime","title":"<code>WallClockGetTime</code>","text":"<p>A <code>WallClockGetTime</code> message tracks and manages time within the local computing environment. This message doesn't require any arguments.</p>","tags":["node-architecture","hardware-subsystem","engine","wall-clock-engine","message-types"]},{"location":"arch/node/engines/wall_clock_messages.html#timeresult","title":"<code>TimeResult</code>","text":"<p>Reply to a <code>WallClockGetTime</code> request.</p> <pre><code>type TimeResult :=\n  mk {\n    epochTime : EpochTimestamp;\n  }\n</code></pre> Arguments <code>epochTime</code> The current time in epoch format (seconds/milliseconds since epoch)","tags":["node-architecture","hardware-subsystem","engine","wall-clock-engine","message-types"]},{"location":"arch/node/engines/wall_clock_messages.html#wallclockmsg","title":"<code>WallClockMsg</code>","text":"<pre><code>type WallClockMsg :=\n  | GetTime\n  | GetTimeResult TimeResult\n  ;\n</code></pre>","tags":["node-architecture","hardware-subsystem","engine","wall-clock-engine","message-types"]},{"location":"arch/node/engines/wall_clock_messages.html#engine-components","title":"Engine components","text":"<ul> <li>Wall Clock Configuration</li> <li>Wall Clock Environment</li> <li>Wall Clock Behaviour</li> </ul>","tags":["node-architecture","hardware-subsystem","engine","wall-clock-engine","message-types"]},{"location":"arch/node/subsystems/hardware.html","title":"Hardware subsystem overview","text":"Juvix imports <pre><code>module arch.node.subsystems.hardware;\nimport arch.node.engines.local_key_value_storage open;\nimport arch.node.engines.local_time_series_storage open;\nimport arch.node.engines.logging open;\nimport arch.node.engines.wall_clock open;\n</code></pre>","tags":["node-architecture","hardware-subsystem","index"]},{"location":"arch/node/subsystems/hardware.html#hardware-subsystem","title":"Hardware Subsystem","text":"","tags":["node-architecture","hardware-subsystem","index"]},{"location":"arch/node/subsystems/hardware.html#purpose","title":"Purpose","text":"<p>The Hardware Subsystem is responsible for managing the hardware resources of the node.</p>","tags":["node-architecture","hardware-subsystem","index"]},{"location":"arch/node/subsystems/hardware.html#overview","title":"Overview","text":"<p>The Hardware Subsystem consists of the following engines.</p> <p>Engines</p> <p>Add engines here.</p>","tags":["node-architecture","hardware-subsystem","index"]},{"location":"arch/node/subsystems/identity.html","title":"Identity subsystem overview","text":"Juvix imports <pre><code>module arch.node.subsystems.identity;\nimport arch.node.engines.identity_management open;\nimport arch.node.engines.decryption open;\nimport arch.node.engines.encryption open;\nimport arch.node.engines.commitment open;\nimport arch.node.engines.verification open;\nimport arch.node.engines.reads_for open;\nimport arch.node.engines.signs_for open;\nimport arch.node.engines.naming open;\n</code></pre>","tags":["node-architecture","identity-subsystem","index"],"boost":2},{"location":"arch/node/subsystems/identity.html#identity-subsystem","title":"Identity Subsystem","text":"","tags":["node-architecture","identity-subsystem","index"],"boost":2},{"location":"arch/node/subsystems/identity.html#purpose","title":"Purpose","text":"<p>The Identity Subsystem is responsible for managing the identity of the node.</p>","tags":["node-architecture","identity-subsystem","index"],"boost":2},{"location":"arch/node/subsystems/net.html","title":"Network subsystem overview","text":"Juvix imports <pre><code>module arch.node.subsystems.net;\nimport arch.node.engines.net_registry open;\nimport arch.node.engines.router open;\nimport arch.node.engines.transport_connection open;\nimport arch.node.engines.transport_protocol open;\nimport arch.node.engines.pub_sub_topic open;\nimport arch.node.engines.storage open;\nimport arch.node.engines.verification open;\n</code></pre>","tags":["node-architecture","network-subsystem","index"],"boost":2},{"location":"arch/node/subsystems/net.html#network-subsystem","title":"Network Subsystem","text":"","tags":["node-architecture","network-subsystem","index"],"boost":2},{"location":"arch/node/subsystems/net.html#purpose","title":"Purpose","text":"<p>The Network Subsystem is responsible for sending and receiving messages to and from remote nodes, and offers distributed pub/sub and storage protocols.</p>","tags":["node-architecture","network-subsystem","index"],"boost":2},{"location":"arch/node/subsystems/net.html#overview","title":"Overview","text":"<p>The Network Subsystem consists of the following engines.</p>","tags":["node-architecture","network-subsystem","index"],"boost":2},{"location":"arch/node/subsystems/net.html#network-registry","title":"Network Registry","text":"","tags":["node-architecture","network-subsystem","index"],"boost":2},{"location":"arch/node/subsystems/net.html#router","title":"Router","text":"<p>The Router engine is responsible for routing messages between local engines and remote nodes.</p>","tags":["node-architecture","network-subsystem","index"],"boost":2},{"location":"arch/node/subsystems/net.html#transport-connection","title":"Transport Connection","text":"","tags":["node-architecture","network-subsystem","index"],"boost":2},{"location":"arch/node/subsystems/net.html#transport-protocol","title":"Transport Protocol","text":"","tags":["node-architecture","network-subsystem","index"],"boost":2},{"location":"arch/node/subsystems/net.html#pubsub-topic","title":"Pub/Sub Topic","text":"","tags":["node-architecture","network-subsystem","index"],"boost":2},{"location":"arch/node/subsystems/net.html#storage","title":"Storage","text":"","tags":["node-architecture","network-subsystem","index"],"boost":2},{"location":"arch/node/subsystems/net.html#diagrams","title":"Diagrams","text":"","tags":["node-architecture","network-subsystem","index"],"boost":2},{"location":"arch/node/subsystems/net.html#spawn-tree-message-flow","title":"Spawn tree &amp; message flow","text":"<pre><code>flowchart TD\n\nN(Node)\n\nE1(Engine1)\nE2(Engine2)\nE3(Engine3)\n\nsubgraph Network Subsystem\n  R(Router)\n\n  subgraph NodeProxies\n    NP1(NProxy-1)\n    NP2(NProxy-2)\n    NP3(NProxy-3)\n  end\n\n  subgraph PubSub\n    T1(Topic-1)\n    T2(Topic-2)\n    T3(Topic-3)\n  end\n\n  subgraph Transport\n    TP1(TProto-1)\n    TP2(TProto-2)\n    TP3(TProto-3)\n\n    TC11(TConn-1-1)\n    TC12(TConn-1-2)\n    TC21(TConn-2-1)\n    TC31(TConn-3-1)\n    TC32(TConn-3-2)\n  end\nend\n\nNET(Network)\n\n%% Spawn tree\n\nN -.-&gt; R &amp; TP1 &amp; TP2 &amp; TP3 &amp; E1 &amp; E2 &amp; E3\nR -.-&gt; NP1 &amp; NP2 &amp; NP3 &amp; T1 &amp; T2 &amp; T3\nTP1 -.-&gt; TC11 &amp; TC12\nTP2 -.-&gt; TC21\nTP3 -.-&gt; TC31 &amp; TC32\n\n%% Message flow\n\n%% Intra-node communacation between local engines\nE1 -- Send --&gt; E2\n\n%% First message via R to open a connection\nE2 -- NodeSend --&gt; R -- Send --&gt; NP2 -- Send --&gt; TP2 -- Send --&gt; TC21 --&gt; NET\nE2 -- TopicForward --&gt; R -- Forward --&gt; T1\n\n%% Subsequent messages\nE2 -- Send --&gt; NP2\nE2 -- Forward --&gt; T1\n\nT1 -- Send --&gt; E3\nT1 -- Send --&gt; NP1 -- Send --&gt; TP1 -- Send --&gt; TC12 --&gt; NET</code></pre>   Spawn tree &amp; message flow: - dotted: spawn - solid: message send","tags":["node-architecture","network-subsystem","index"],"boost":2},{"location":"arch/node/subsystems/ordering.html","title":"Ordering subsystem overview","text":"Juvix imports <pre><code>module arch.node.subsystems.ordering;\nimport arch.node.engines.executor open;\nimport arch.node.engines.mempool_worker open;\n</code></pre>","tags":["node-architecture","ordering-subsystem","index"],"boost":2},{"location":"arch/node/subsystems/ordering.html#ordering-subsystem","title":"Ordering Subsystem","text":"","tags":["node-architecture","ordering-subsystem","index"],"boost":2},{"location":"arch/node/subsystems/ordering.html#purpose","title":"Purpose","text":"<p>The Ordering Subsystem is responsible for ordering transactions in the node.</p>","tags":["node-architecture","ordering-subsystem","index"],"boost":2},{"location":"arch/node/types/anoma.html","title":"Anoma","text":"Juvix imports <pre><code>module arch.node.types.anoma;\n\nimport arch.node.types.anoma_message open public;\nimport arch.node.types.anoma_config open public;\nimport arch.node.types.anoma_environment open public;\n</code></pre>","tags":["node-architecture","prelude","index"]},{"location":"arch/node/types/anoma.html#wrapper-types-for-anoma","title":"Wrapper types for Anoma","text":"<ul> <li>Anoma Message</li> <li>Anoma Configuration</li> <li>Anoma Environment</li> </ul>","tags":["node-architecture","prelude","index"]},{"location":"arch/node/types/anoma_config.html","title":"Anoma Configuration","text":"Juvix imports <pre><code>module arch.node.types.anoma_config;\n\nimport prelude open;\n\n{- Identity -}\n\nimport arch.node.engines.identity_management_config open;\nimport arch.node.engines.decryption_config open;\nimport arch.node.engines.encryption_config open;\nimport arch.node.engines.commitment_config open;\n\nimport arch.node.engines.verification_config open;\nimport arch.node.engines.reads_for_config open;\nimport arch.node.engines.signs_for_config open;\nimport arch.node.engines.naming_config open;\n\nimport arch.node.engines.local_key_value_storage_config open;\nimport arch.node.engines.logging_config open;\nimport arch.node.engines.wall_clock_config open;\nimport arch.node.engines.local_time_series_storage_config open;\n\n{- Network -}\n\nimport arch.node.engines.net_registry_config open;\nimport arch.node.engines.router_config open;\nimport arch.node.engines.transport_protocol_config open;\nimport arch.node.engines.transport_connection_config open;\nimport arch.node.engines.pub_sub_topic_config open;\nimport arch.node.engines.storage_config open;\n\n{- Ordering -}\n\nimport arch.node.engines.mempool_worker_config open;\nimport arch.node.engines.executor_config open;\nimport arch.node.engines.shard_config open;\n\n{- Misc -}\n\nimport arch.node.engines.ticker_config open;\n\n{- Templates -}\n\nimport tutorial.engines.template_config open;\nimport tutorial.engines.template_minimum_config open;\n\n-- Add imports here\n</code></pre>","tags":["node-architecture","types","engine","configuration","prelude"],"boost":2},{"location":"arch/node/types/anoma_config.html#anoma-engine-configuration","title":"Anoma Engine Configuration","text":"<p>An Anoma engine configuration contains static, read-only configuration for an engine. See Engine Configuration for more information.</p> <p>Below is the definition of the type <code>Config</code>, which represents an Anoma engine configuration. This means that each Anoma engine instance has a constant configuration of type <code>Config</code>, initialised at creation.</p> <p>For example, a configuration for an engine instance of the engine <code>TickerEngine</code> is of type <code>TickerCfg</code>.</p> <pre><code>type PreCfg KVSKey KVSDatum Executable :=\n\n  {- Identity -}\n\n  | CfgIdentityManagement IdentityManagementCfg\n  | CfgDecryption DecryptionCfg\n  | CfgEncryption EncryptionCfg\n  | CfgCommitment CommitmentCfg\n\n  | CfgVerification VerificationCfg\n  | CfgReadsFor ReadsForCfg\n  | CfgSignsFor SignsForCfg\n  | CfgNaming NamingCfg\n\n  {- Hardware -}\n\n  | CfgLocalKeyValueStorage LocalKVStorageCfg\n  | CfgLogging LoggingCfg\n  | CfgWallClock WallClockCfg\n  | CfgLocalTSeries LocalTSStorageCfg\n\n  {- Network -}\n\n  | CfgRouter RouterCfg\n  | CfgTransportProtocol TransportProtocolCfg\n  | CfgTransportConnection TransportConnectionCfg\n  | CfgPubSubTopic PubSubTopicCfg\n  | CfgStorage StorageCfg\n\n  {- Ordering -}\n\n  | CfgMempoolWorker MempoolWorkerCfg\n  | CfgExecutor (ExecutorCfg KVSKey Executable)\n  | CfgShard ShardCfg\n\n  {- Misc -}\n\n  | CfgTicker TickerCfg\n\n  {- Templates -}\n\n  | CfgTemplate TemplateCfg\n  | CfgTemplateMinimum TemplateMinimumCfg\n\n  -- Add more configurations here\n  ;\n\nCfg : Type := PreCfg String String ByteString;\n</code></pre>","tags":["node-architecture","types","engine","configuration","prelude"],"boost":2},{"location":"arch/node/types/anoma_environment.html","title":"Anoma Environment","text":"Juvix imports <pre><code>module arch.node.types.anoma_environment;\n\nimport prelude open;\n\n{- Identity -}\n\nimport arch.node.engines.identity_management_environment open;\nimport arch.node.engines.decryption_environment open;\nimport arch.node.engines.encryption_environment open;\nimport arch.node.engines.commitment_environment open;\n\nimport arch.node.engines.verification_environment open;\nimport arch.node.engines.reads_for_environment open;\nimport arch.node.engines.signs_for_environment open;\nimport arch.node.engines.naming_environment open;\n\nimport arch.node.engines.local_key_value_storage_environment open;\nimport arch.node.engines.logging_environment open;\nimport arch.node.engines.wall_clock_environment open;\nimport arch.node.engines.local_time_series_storage_environment open;\n\n{- Network -}\n\nimport arch.node.engines.net_registry_environment open;\nimport arch.node.engines.router_environment open;\nimport arch.node.engines.transport_protocol_environment open;\nimport arch.node.engines.transport_connection_environment open;\nimport arch.node.engines.pub_sub_topic_environment open;\nimport arch.node.engines.storage_environment open;\n\n{- Ordering -}\n\nimport arch.node.engines.mempool_worker_environment open;\nimport arch.node.engines.executor_environment open;\nimport arch.node.engines.shard_environment open;\n\n{- Misc -}\n\nimport arch.node.engines.ticker_environment open;\n\n{- Templates -}\n\nimport tutorial.engines.template_environment open;\nimport tutorial.engines.template_minimum_environment open;\n\n-- Add imports here\n</code></pre>","tags":["node-architecture","types","engine","environment","prelude"],"boost":2},{"location":"arch/node/types/anoma_environment.html#anoma-engine-environments","title":"Anoma Engine Environments","text":"<p>An Anoma engine environment is a collection of all the necessary information/context that an engine instance needs to operate. See Engine Environment for more information on engine environments.</p> <p>Below is the definition of the type <code>Env</code>, which represents an Anoma engine environment. This means, an Anoma engine instance would have an environment of type <code>Env</code>.</p> Why a sum type for all engines? <p>The sum type will be useful for specifying the \"initial\" state of any newly created engine instance. In this way, we can omit any initialization, but we can have it by sending \"init messages\" to the newly created engine at the same time as we create new engines.</p> <p>For example, an environment for an engine instance of the engine <code>TickerEngine</code> is of type <code>TickerEnvironment</code>.</p> <pre><code>type PreEnv KVSKey KVSDatum Executable ProgramState :=\n\n  {- Identity -}\n\n  | EnvIdentityManagement IdentityManagementEnv\n  | EnvDecryption DecryptionEnv\n  | EnvEncryption EncryptionEnv\n  | EnvCommitment CommitmentEnv\n\n  | EnvVerification VerificationEnv\n  | EnvReadsFor ReadsForEnv\n  | EnvSignsFor SignsForEnv\n  | EnvNaming NamingEnv\n\n  {- Hardware -}\n\n  | EnvLocalKeyValueStorage LocalKVStorageEnv\n  | EnvLogging LoggingEnv\n  | EnvWallClock WallClockEnv\n  | EnvLocalTSeries LocalTSStorageEnv\n\n  {- Network -}\n\n  | EnvRouter RouterEnv\n  | EnvTransportProtocol TransportProtocolEnv\n  | EnvTransportConnection TransportConnectionEnv\n  | EnvPubSubTopic PubSubTopicEnv\n  | EnvStorage StorageEnv\n\n  {- Ordering -}\n\n  | EnvMempoolWorker (MempoolWorkerEnv KVSKey KVSDatum Executable)\n  | EnvExecutor (ExecutorEnv KVSKey KVSDatum ProgramState)\n  | EnvShard (ShardEnv KVSKey KVSDatum)\n\n  {- Misc -}\n\n  | EnvTicker TickerEnv\n\n  {- Templates -}\n\n  | EnvTemplate TemplateEnv\n  | EnvTemplateMinimum TemplateMinimumEnv\n\n  -- Add more environments here\n  ;\n\nEnv : Type := PreEnv String String ByteString String;\n</code></pre>","tags":["node-architecture","types","engine","environment","prelude"],"boost":2},{"location":"arch/node/types/anoma_message.html","title":"Anoma Message","text":"Juvix imports <pre><code>module arch.node.types.anoma_message;\n\nimport prelude open;\n\n{- Identity -}\n\nimport arch.node.engines.identity_management_messages open;\nimport arch.node.engines.decryption_messages open;\nimport arch.node.engines.encryption_messages open;\nimport arch.node.engines.commitment_messages open;\n\nimport arch.node.engines.verification_messages open;\nimport arch.node.engines.reads_for_messages open;\nimport arch.node.engines.signs_for_messages open;\nimport arch.node.engines.naming_messages open;\n\nimport arch.node.engines.local_key_value_storage_messages open;\nimport arch.node.engines.logging_messages open;\nimport arch.node.engines.wall_clock_messages open;\nimport arch.node.engines.local_time_series_storage_messages open;\n\n{- Network -}\n\nimport arch.node.engines.net_registry_messages open;\nimport arch.node.engines.router_messages open;\nimport arch.node.engines.transport_protocol_messages open;\nimport arch.node.engines.transport_connection_messages open;\nimport arch.node.engines.pub_sub_topic_messages open;\nimport arch.node.engines.storage_messages open;\n\n{- Ordering -}\n\nimport arch.node.engines.mempool_worker_messages open;\nimport arch.node.engines.executor_messages open;\nimport arch.node.engines.shard_messages open;\n\n{- Misc -}\n\nimport arch.node.engines.ticker_messages open;\n\n{- Templates -}\n\nimport tutorial.engines.template_messages open;\nimport tutorial.engines.template_minimum_messages open;\n\n-- Add imports here\n</code></pre>","tags":["node-architecture","types","engine","message-types","prelude"]},{"location":"arch/node/types/anoma_message.html#anoma-message","title":"Anoma Message","text":"<p>The Anoma message type contains all admissible messages that can be sent between nodes in the network. An Anoma message is of the type <code>Msg</code>. Each constructor of the type <code>Msg</code> corresponds to a specific type of message comming from a specific engine. For example, the engine <code>TickerEngine</code> has a corresponding message type <code>TickerMsg</code>.</p> <pre><code>type PreMsg KVSKey KVSDatum Executable :=\n\n  {- Identity -}\n\n  | MsgIdentityManagement IdentityManagementMsg\n  | MsgDecryption DecryptionMsg\n  | MsgEncryption EncryptionMsg\n  | MsgCommitment CommitmentMsg\n\n  | MsgVerification VerificationMsg\n  | MsgReadsFor ReadsForMsg\n  | MsgSignsFor SignsForMsg\n  | MsgNaming NamingMsg\n\n  | MsgLocalKVStorage LocalKVStorageMsg\n  | MsgLogging LoggingMsg\n  | MsgWallClock WallClockMsg\n  | MsgLocalTSStorage LocalTSStorageMsg\n\n  {- Network -}\n\n  | MsgRouter (RouterMsg (PreMsg KVSKey KVSDatum Executable))\n  | MsgTransportProtocol TransportProtocolMsg\n  | MsgTransportConnection TransportConnectionMsg\n  | MsgPubSubTopic PubSubTopicMsg\n  | MsgStorage StorageMsg\n\n  {- Ordering -}\n\n  | MsgMempoolWorker (MempoolWorkerMsg KVSKey Executable)\n  | MsgExecutor (ExecutorMsg KVSKey KVSDatum)\n  | MsgShard (ShardMsg KVSKey KVSDatum)\n\n  {- Misc -}\n\n  | MsgTicker TickerMsg\n\n  {- Templates -}\n\n  | MsgTemplate TemplateMsg\n  | MsgTemplateMinimum TemplateMinimumMsg\n\n  -- Add more messages here\n  ;\n\nMsg : Type := PreMsg String String ByteString;\n</code></pre>","tags":["node-architecture","types","engine","message-types","prelude"]},{"location":"arch/node/types/basics.html","title":"Basics","text":"Juvix imports <pre><code>module arch.node.types.basics;\nimport prelude open public;\n</code></pre>","tags":["node-architecture","types","prelude"],"boost":2},{"location":"arch/node/types/basics.html#juvix-prelude-of-the-anoma-node-architecture","title":"Juvix Prelude of the Anoma Node Architecture","text":"<p>This document describes the basic types and functions used in the node architecture prelude. For a more general prelude, please refer to Prelude. (1) </p> <ol> <li>If you are unfamiliar with Juvix, please refer to the Juvix documentation.</li> </ol>","tags":["node-architecture","types","prelude"],"boost":2},{"location":"arch/node/types/basics.html#basic-types","title":"Basic types","text":"","tags":["node-architecture","types","prelude"],"boost":2},{"location":"arch/node/types/basics.html#hash","title":"<code>Hash</code>","text":"<p>Natural numbers are used (for now) to represent hash values, bytes sizes, and other non-negative integers.</p> <pre><code>syntax alias Hash := Nat;\n</code></pre>","tags":["node-architecture","types","prelude"],"boost":2},{"location":"arch/node/types/basics.html#reltime","title":"<code>RelTime</code>","text":"<p>Relative time. In seconds from now.</p> <pre><code>syntax alias RelTime := Nat;\n</code></pre>","tags":["node-architecture","types","prelude"],"boost":2},{"location":"arch/node/types/basics.html#abstime","title":"<code>AbsTime</code>","text":"<p>Absolute time. In minutes since epoch (2024-01-01 00:00).</p> <pre><code>syntax alias AbsTime := Nat;\n</code></pre>","tags":["node-architecture","types","prelude"],"boost":2},{"location":"arch/node/types/basics.html#time","title":"<code>Time</code>","text":"<p>Either absolute or relative time.</p> <pre><code>Time : Type := Either RelTime AbsTime;\n</code></pre>","tags":["node-architecture","types","prelude"],"boost":2},{"location":"arch/node/types/basics.html#version","title":"<code>Version</code>","text":"<p>Semantic version number (major.minor.patch).</p> <pre><code>type Version :=\n  mkVersion@{\n    major : Nat;\n    minor : Nat;\n    patch : Nat;\n  };\n</code></pre>","tags":["node-architecture","types","prelude"],"boost":2},{"location":"arch/node/types/crypto.html","title":"Crypto","text":"Juvix imports <pre><code>module arch.node.types.crypto;\nimport prelude open;\n</code></pre>","tags":["node-architecture","types","crypto","prelude"],"boost":2},{"location":"arch/node/types/crypto.html#cryptographic-primitives","title":"Cryptographic primitives","text":"","tags":["node-architecture","types","crypto","prelude"],"boost":2},{"location":"arch/node/types/crypto.html#publickey","title":"<code>PublicKey</code>","text":"<p>Public key for public-key cryptography.</p> <pre><code>type PublicKey :=\n  | Curve25519PubKey ByteString\n  ;\n\ninstance\nPublicKeyOrd : Ord PublicKey :=\n  Ord.mk@{\n    compare := \\{_ _ := Equal};\n  };\n</code></pre>","tags":["node-architecture","types","crypto","prelude"],"boost":2},{"location":"arch/node/types/crypto.html#privatekey","title":"<code>PrivateKey</code>","text":"<p>Private key for public-key cryptography.</p> <pre><code>type PrivateKey :=\n  | Curve25519PrivKey ByteString\n  ;\n\ninstance\nPrivateKeyOrd : Ord PrivateKey :=\n  Ord.mk@{\n    compare := \\{_ _ := Equal};\n  };\n</code></pre>","tags":["node-architecture","types","crypto","prelude"],"boost":2},{"location":"arch/node/types/crypto.html#secretkey","title":"<code>SecretKey</code>","text":"<p>Secret key for secret-key cryptography.</p> <pre><code>type SecretKey :=\n  | ChaCha20Key\n  ;\n</code></pre>","tags":["node-architecture","types","crypto","prelude"],"boost":2},{"location":"arch/node/types/crypto.html#signature","title":"<code>Signature</code>","text":"<p>Cryptographic signature.</p> <pre><code>type Signature :=\n  | Ed25519Signature ByteString\n</code></pre>","tags":["node-architecture","types","crypto","prelude"],"boost":2},{"location":"arch/node/types/crypto.html#digest","title":"<code>Digest</code>","text":"<p>Message digest. Output of a cryptographic hash function.</p> <pre><code>type Digest :=\n  | Blake3Digest ByteString\n  ;\n</code></pre>","tags":["node-architecture","types","crypto","prelude"],"boost":2},{"location":"arch/node/types/engine.html","title":"Engine","text":"Juvix imports <pre><code>module arch.node.types.engine;\nimport prelude open;\nimport arch.node.types.identities open;\nimport arch.node.types.engine_config open public;\nimport arch.node.types.engine_environment open public;\nimport arch.node.types.engine_behaviour open public;\n</code></pre>","tags":["node-architecture","types","engine","prelude"]},{"location":"arch/node/types/engine.html#the-type-for-engines","title":"The type for engines","text":"<p>Engine</p> <p>An engine is a computational unit with a specific name and behaviour, plus an initial environment, which comprises the specific state, the mailbox cluster, the acquaintances, and the timers.</p> <p>We refer to the type of engines as <code>Engine</code>, instantiated with the following type parameters:</p> <ul> <li><code>A</code>: the type for the action arguments,</li> <li><code>C</code>: the type for the read-only engine configuration,</li> <li><code>S</code>: the type for the local engine-specific state,</li> <li><code>B</code>: the type for the mailbox state,</li> <li><code>H</code>: the type for the timer handles,</li> <li><code>AM</code>: the type for all engine messages (<code>Msg</code>),</li> <li><code>AC</code>: the type for all engine configurations (<code>Cfg</code>), and</li> <li><code>AE</code>: the type for all engine environments (<code>Env</code>).</li> </ul> <p>Each engine, not its type, is associated with:</p> <ul> <li>a specific [Engine Configuration|configuration],   which contains the engine name (unique across the system), node ID, and engine-specific configuration,</li> <li>a declaration of its own execution context, that is,   the engine-specific local state, the mailbox cluster, the acquaintances, and the timers,</li> <li>as well as a specific behaviour.</li> </ul> <pre><code>type Engine C S B H A AM AC AE :=\n  mk@{\n    cfg : EngineCfg C;\n    env : EngineEnv S B H AM;\n    behaviour : EngineBehaviour C S B H A AM AC AE;\n  };\n</code></pre> Arguments <code>cfg</code> the engine configuration, <code>env</code> the engine environment, and <code>behaviour</code> the engine behaviour.","tags":["node-architecture","types","engine","prelude"]},{"location":"arch/node/types/engine.html#on-the-type-parameters","title":"On the type parameters","text":"<p>In the related types to <code>Engine</code> such as <code>EngineBehaviour</code>, we try to follow the following convention:</p> <ul> <li>the type parameters are ordered such that they form a subsequence of the   type parameters sequence in the <code>Engine</code> type, and</li> <li>the first type parameter of <code>EngineBehaviour</code> is always <code>C</code>, the type for   the read-only engine configuration.</li> </ul>","tags":["node-architecture","types","engine","prelude"]},{"location":"arch/node/types/engine.html#example-voting-engine","title":"Example: Voting Engine","text":"<p>As an example, we could define an engine type for a voting system:</p> <ul> <li><code>S</code> could be a record with fields like <code>votes</code>, <code>voters</code>, and <code>results</code>.</li> <li>The engine-specific message type might be a coproduct of <code>Vote</code> and <code>Result</code>.</li> <li> <p>The behaviour of this engine may include guarded actions such as:</p> <ul> <li><code>storeVote</code> to store a vote in the local state,</li> <li><code>computeResult</code> to compute the result of the election, and</li> <li><code>announceResult</code> to send the result to some other engine instances.</li> </ul> </li> </ul> <p>With each different election or kind of voters, we obtain a new engine instance, while the underlining voting system, the voting engine family, remains the same.</p>","tags":["node-architecture","types","engine","prelude"]},{"location":"arch/node/types/engine_behaviour.html","title":"Engine Behaviour","text":"Juvix imports <pre><code>module arch.node.types.engine_behaviour;\n\nimport arch.node.types.basics open;\nimport arch.node.types.messages open;\nimport arch.node.types.identities open;\nimport arch.node.types.engine_config open;\nimport arch.node.types.engine_environment open;\n</code></pre>","tags":["node-architecture","types","engine","behaviour","prelude"]},{"location":"arch/node/types/engine_behaviour.html#engine-behaviour","title":"Engine behaviour","text":"<p>Each engine processes only one message at a time. The behaviour of an engine is specified by a finite set of guards and an action function, which both determine how engine instances react to received messages or timer notifications.</p>","tags":["node-architecture","types","engine","behaviour","prelude"]},{"location":"arch/node/types/engine_behaviour.html#guards","title":"Guards","text":"<p>Guards are terms of type <code>Guard</code>, which is a function type, where the trigger of type <code>TimestampedTrigger H AM</code> is a term that captures the message received with a timestamp or a clock notification about timers that have elapsed during the engine's operation. Guards return data of type <code>GuardOutput A</code> if the precondition of the action that they are guarding is met.</p> <p>Recall that the behaviour is described by a set of guards and an action function. The guard is a function that evaluates conditions in the engine environment to determine what action should be performed; for this, each guard creates an action label, that then is \"interpreted\" by the action function.</p> <p>The guard function receives three arguments:</p> <ul> <li>the timestamped trigger that caused guard evaluation;</li> <li>the unchanging engine configuration; and</li> <li>the current environment of the engine instance.</li> </ul> <p>Given these inputs, the guard function computes an action label, which encodes</p> <ul> <li>all information necessary to infer how the engine will react</li> <li>additional information on how this action contributes to properties of the Anoma protocol instance the engine is part of.</li> </ul> <p>The action function then computes the effects of the action label; besides changes to the engine environment, an action effect comprises sending messages, creating new engine instances, and updating timers.</p>","tags":["node-architecture","types","engine","behaviour","prelude"]},{"location":"arch/node/types/engine_behaviour.html#actions","title":"Actions","text":"","tags":["node-architecture","types","engine","behaviour","prelude"]},{"location":"arch/node/types/engine_behaviour.html#action","title":"<code>Action</code>","text":"<p>The input of the action function is parameterized by the types for:</p> <ul> <li><code>C</code>: engine configuration,</li> <li><code>S</code>: local state,</li> <li><code>B</code>: mailbox state,</li> <li><code>H</code>: timer handles,</li> <li><code>A</code>: action arguments,</li> <li><code>AM</code>: type for all engine messages (<code>Msg</code>),</li> <li><code>AC</code>: type for all engine configurations (<code>Cfg</code>), and</li> <li><code>AE</code>: type for all engine environments (<code>Env</code>).</li> </ul> <p>The <code>Action</code> function receives as argument the <code>ActionInput</code>, and returns the <code>ActionEffect</code>.</p> <pre><code>Action (C S B H A AM AC AE : Type) : Type :=\n  (input : ActionInput C S B H A AM) -&gt;\n  Option (ActionEffect S B H AM AC AE);\n</code></pre> On creating new engine instances <p>To create new engine instances, we need to specify the following data:</p> <ul> <li>A unique name for the new engine instance.</li> <li>The initial state of the engine instance.</li> <li>The corresponding set of guards and the action function.</li> </ul> <p>The last point is however implicit.</p> <p>If the guard does not give a result, this means that none of its guarded actions are triggered.</p> On the type signature of the guard function <p>In principle, borrowing terminology from Hoare logic, a guard is a precondition to run an action. The corresponding predicate is activated by a trigger and evaluated within the context of the engine's environment. It then returns a boolean when the predicate is satisfied, specifically of type</p> <pre><code>Trigger H AM -&gt; EngineEnv S B H AM -&gt; Bool;\n</code></pre> <p>However, as a design choice, guards will return additional data of type <code>GuardOutput A</code> that may or may not use the engine environment if the condition is met. Thus, if the guard is satisfied, this data (of type <code>GuardOutput A</code>) is assumed to be passed to the action function. Then, if the guard is not satisfied, no data is returned.</p>","tags":["node-architecture","types","engine","behaviour","prelude"]},{"location":"arch/node/types/engine_behaviour.html#actioninput","title":"<code>ActionInput</code>","text":"<pre><code>type ActionInput C S B H A AM :=\n  mk@{\n    args : A;\n    cfg : EngineCfg C;\n    env : EngineEnv S B H AM;\n    trigger : TimestampedTrigger H AM;\n  };\n</code></pre> Arguments <code>args</code> the action arguments, <code>cfg</code> the engine configuration, <code>env</code> the engine environment, and <code>trigger</code> the timestamped trigger that caused the guard evaluation.","tags":["node-architecture","types","engine","behaviour","prelude"]},{"location":"arch/node/types/engine_behaviour.html#actioneffect","title":"<code>ActionEffect</code>","text":"<p>The <code>ActionEffect S B H AM AC AE</code> type defines the effects produced by the action. The action can perform any of the following:</p> <ul> <li>Update the engine environment.</li> <li>Produce a set of messages to be sent to other engine instances.</li> <li>Set, discard, or supersede timers.</li> <li>Define new engine instances to be created.</li> </ul> <pre><code>type ActionEffect S B H AM AC AE :=\n  mk@{\n    env : EngineEnv S B H AM;\n    msgs : List (EngineMsg AM);\n    timers : List (Timer H);\n    engines : List (Pair AC AE);\n  };\n</code></pre> Arguments <code>env</code> the engine environment, <code>msgs</code> the messages to be sent to other engine instances, <code>timers</code> the timers to be set, discarded, or superseded, and <code>engines</code> the new engine instances to be created.","tags":["node-architecture","types","engine","behaviour","prelude"]},{"location":"arch/node/types/engine_behaviour.html#actionexec","title":"<code>ActionExec</code>","text":"<p>cf. monadic effect descriptions &gt;=v0.2</p> <p>As brainstormed today, engine IDs could naturally be generated freshly, by use of monads; as we are talking about monads, <code>ActionExec</code> would deserve a thorough overhaul:</p> <ul> <li>proper monadic \"task execution\" instead of the list of actions,   of which there may be only one as a reaction   to a trigger (leading to an event with duration)</li> <li>related, other features, in particular<ul> <li>concurrency of several tasks</li> <li>cf. one \"thread\" for each mailbox</li> </ul> </li> <li>message send, engine spawn, and timer updates, could also be monadic</li> </ul> <p>It is allowed to have several actions executed.<sup>1</sup></p> <pre><code>type ActionExec C S B H A AM AC AE :=\n  | Seq (List (Action C S B H A AM AC AE))\n  ;\n</code></pre>","tags":["node-architecture","types","engine","behaviour","prelude"]},{"location":"arch/node/types/engine_behaviour.html#guard","title":"<code>Guard</code>","text":"<p>A guard implements\u2014first and foremost\u2014a pre-condition for an action, which checks whether the associated action or action sequence is to be performed.</p> Relation to other notions of guards <p>Guards generalize guards as used in Erlang. In future versions, simplified forms of guards and a DSL may come so that we do not always have to write in the most general style.</p> <p>If the pre-condition of a guard is satisfied, the guard produces an output that is part of the input of actions; otherwise, it returns nothing.</p> <pre><code>Guard (C S B H A AM AC AE : Type) : Type :=\n  (trigger : TimestampedTrigger H AM) -&gt;\n  (cfg : EngineCfg C) -&gt;\n  (env : EngineEnv S B H AM) -&gt;\n  Option (GuardOutput C S B H A AM AC AE);\n</code></pre>","tags":["node-architecture","types","engine","behaviour","prelude"]},{"location":"arch/node/types/engine_behaviour.html#guardoutput","title":"<code>GuardOutput</code>","text":"<p>The guard output defines an action sequence, the programmatic action to be performed, and action arguments.</p> <pre><code>type GuardOutput C S B H A AM AC AE :=\n  mk@{\n    action : ActionExec C S B H A AM AC AE;\n    args : A;\n  };\n</code></pre> Arguments <code>action</code> the action sequence to be executed, <code>args</code> the action arguments.","tags":["node-architecture","types","engine","behaviour","prelude"]},{"location":"arch/node/types/engine_behaviour.html#guardeval","title":"<code>GuardEval</code>","text":"<pre><code>type GuardEval C S B H A AM AC AE :=\n  | First (List (Guard C S B H A AM AC AE))\n  | Any (List (Guard C S B H A AM AC AE))\n  ;\n</code></pre> <p>The <code>GuardEval</code> type defines the criteria for evaluating actions associated with guards inside the given list. The evaluation strategies are as follows:</p> <ul> <li>With <code>First</code>, we say that the first guard in the provided list that holds, i.e., yields a result, upon sequential evaluation is selected, its associated action is performed, and the evaluation stops.</li> </ul> <ul> <li>With <code>Any</code>, we say that any guard in the provided list that holds upon sequential evaluation is selected, their associated actions are performed, and the evaluation stops.</li> </ul>","tags":["node-architecture","types","engine","behaviour","prelude"]},{"location":"arch/node/types/engine_behaviour.html#the-type-for-engine-behaviours","title":"The type for engine behaviours","text":"<p>The <code>EngineBehaviour</code> type encapsulates the concept of behaviours within Anoma. Each engine is associated with a specific term of type <code>EngineBehaviour</code> that defines its core dynamics and operational characteristics. The behaviour determines how the engine processes inputs, manages state, and interacts with other components. As defined, it clears up that engines are essentially a collection of guarded state-transition functions. Using the terminology introduced earlier, an <code>EngineBehaviour</code> is a set of guards and an action function.</p> <pre><code>type EngineBehaviour C S B H A AM AC AE :=\n  mk@{\n    guards : GuardEval C S B H A AM AC AE;\n  };\n</code></pre> Arguments <code>guards</code> the guards to be evaluated. <p>Summary of behaviour</p> <p>Roughly, engines are a collection of guarded state-transition functions, using terminology of Moore or Mealy machines. The presentation in terms of a set of guards is in the spirit of Dijkstra's guarded command language, where the commands are replaced by actions. Effectively, the data of engine behaviour indirectly describes a function that determines how the received timestamped trigger is to be handled, expressed as a set of action effects.<sup>2</sup></p> <ol> <li> <p>This is likely to change in future versions.\u00a0\u21a9</p> </li> <li> <p>In future versions, this may be done using <code>do notation</code> (as provided by monads).\u00a0\u21a9</p> </li> </ol>","tags":["node-architecture","types","engine","behaviour","prelude"]},{"location":"arch/node/types/engine_config.html","title":"Engine Configuration","text":"Juvix imports <pre><code>module arch.node.types.engine_config;\n\nimport arch.node.types.basics open public;\nimport arch.node.types.identities open;\nimport arch.node.types.messages open;\n</code></pre>","tags":["node-architecture","types","engine","configuration","prelude"]},{"location":"arch/node/types/engine_config.html#engine-configuration","title":"Engine configuration","text":"","tags":["node-architecture","types","engine","configuration","prelude"]},{"location":"arch/node/types/engine_config.html#engine-configuration-type","title":"Engine configuration type","text":"<p>The engine configuration contains the following static information for engine instances:</p> <ul> <li>A global reference, <code>name</code>, for the engine instance.</li> <li>The local <code>NodeID</code>.</li> <li>Engine-specific configuration.</li> </ul> <p>This is defined in the <code>EngineCfg</code> type, which is parametrized by:</p> <ul> <li><code>C</code>: represents the engine-specific configuration, which corresponds to the <code>Cfg</code> type.</li> </ul> <pre><code>type EngineCfg C :=\n  mk@{\n    node : NodeID;\n    name : EngineName;\n    cfg : C;\n  };\n</code></pre>","tags":["node-architecture","types","engine","configuration","prelude"]},{"location":"arch/node/types/engine_config.html#getengineidfromenginecfg","title":"<code>getEngineIDFromEngineCfg</code>","text":"<ul> <li>Get the local <code>EngineID</code> from an <code>EngineCfg</code>:</li> </ul> <pre><code>getEngineIDFromEngineCfg {C} (cfg : EngineCfg C) : EngineID :=\n  mkPair (some (EngineCfg.node cfg)) (EngineCfg.name cfg);\n</code></pre>","tags":["node-architecture","types","engine","configuration","prelude"]},{"location":"arch/node/types/engine_environment.html","title":"Engine Environment","text":"Juvix imports <pre><code>module arch.node.types.engine_environment;\n\nimport arch.node.types.basics open public;\nimport arch.node.types.identities open;\nimport arch.node.types.messages open;\n</code></pre>","tags":["node-architecture","types","engine","environment","prelude"]},{"location":"arch/node/types/engine_environment.html#engine-environment","title":"Engine environment","text":"","tags":["node-architecture","types","engine","environment","prelude"]},{"location":"arch/node/types/engine_environment.html#engine-environment-type","title":"Engine environment type","text":"<p>The engine environment contains the following dynamic information for engine instances:</p> <ul> <li>Local state whose type is specific to the engine.</li> <li>Mailbox cluster, which is a map of mailbox IDs to mailboxes.</li> <li>A set of names of acquainted engine instances. It is implicit that the engine   instance is acquainted with itself, so there is no need to include its own name.</li> <li>A list of timers that have been set.</li> </ul> <p>This data is encapsulated within the <code>EngineEnv</code> type, which is parameterised by four types, which represent:</p> <ul> <li><code>S</code>: the local state,</li> <li><code>B</code>: the type of mailboxes' states,</li> <li><code>H</code>: the type of handles for timers, and</li> <li><code>AM</code>: the type of all engine messages (<code>Msg</code>).</li> </ul> <p>These same letters will be used in the rest of the document to represent these types.</p> <pre><code>type EngineEnv S B H AM :=\n  mk@{\n    localState : S;\n    mailboxCluster : Map MailboxID (Mailbox B AM);\n    acquaintances : Set EngineName;\n    timers : List (Timer H);\n  };\n</code></pre> Arguments <code>localState</code> the local state, <code>mailboxCluster</code> the mailbox cluster, <code>acquaintances</code> the set of acquainted engine instances, and <code>timers</code> the list of timers. On the mailbox cluster <p>The mailbox cluster is a map of mailbox IDs to mailboxes. The mailbox ID is an index type, and the mailbox is a record containing the following data:</p> <ul> <li>The enveloped messages that the mailbox contains.</li> <li>The mailbox state, which is of type <code>Option B</code>, i.e., it could be none.</li> </ul> <p>If you don't need multiple mailboxes, you can use any ID as the key. For example, you can use <code>0</code> for a default mailbox.</p>","tags":["node-architecture","types","engine","environment","prelude"]},{"location":"arch/node/types/identities.html","title":"Identities","text":"Juvix imports <pre><code>module arch.node.types.identities;\n\nimport arch.node.types.crypto open public;\nimport prelude open;\n</code></pre>","tags":["node-architecture","types","prelude"],"boost":2},{"location":"arch/node/types/identities.html#types-for-network-identities","title":"Types for network identities","text":"<p>Types in this section are used to represent identities within the network.</p>","tags":["node-architecture","types","prelude"],"boost":2},{"location":"arch/node/types/identities.html#basic-types","title":"Basic Types","text":"","tags":["node-architecture","types","prelude"],"boost":2},{"location":"arch/node/types/identities.html#signable","title":"<code>Signable</code>","text":"<p>A type representing data that can be cryptographically signed.</p> <pre><code>Signable : Type := ByteString;\n</code></pre>","tags":["node-architecture","types","prelude"],"boost":2},{"location":"arch/node/types/identities.html#plaintext","title":"<code>Plaintext</code>","text":"<p>Raw unencrypted data.</p> <pre><code>Plaintext : Type := ByteString;\n</code></pre>","tags":["node-architecture","types","prelude"],"boost":2},{"location":"arch/node/types/identities.html#ciphertext","title":"<code>Ciphertext</code>","text":"<p>Encrypted data.</p> <pre><code>Ciphertext : Type := ByteString;\n</code></pre>","tags":["node-architecture","types","prelude"],"boost":2},{"location":"arch/node/types/identities.html#decryptionkey","title":"<code>DecryptionKey</code>","text":"<pre><code>DecryptionKey : Type := ByteString;\n</code></pre>","tags":["node-architecture","types","prelude"],"boost":2},{"location":"arch/node/types/identities.html#signingkey","title":"<code>SigningKey</code>","text":"<pre><code>SigningKey : Type := ByteString;\n</code></pre>","tags":["node-architecture","types","prelude"],"boost":2},{"location":"arch/node/types/identities.html#identity-types","title":"Identity Types","text":"","tags":["node-architecture","types","prelude"],"boost":2},{"location":"arch/node/types/identities.html#externalid","title":"<code>ExternalID</code>","text":"<p>A unique identifier, such as a public key, represented as a natural number.</p> <pre><code>syntax alias ExternalID := PublicKey;\n</code></pre>","tags":["node-architecture","types","prelude"],"boost":2},{"location":"arch/node/types/identities.html#internalid","title":"<code>InternalID</code>","text":"<p>A unique identifier, such as a private key, used internally within the network.</p> <pre><code>syntax alias InternalID := PrivateKey;\n</code></pre>","tags":["node-architecture","types","prelude"],"boost":2},{"location":"arch/node/types/identities.html#identity","title":"<code>Identity</code>","text":"<p>A pair combining an <code>ExternalID</code> and an <code>InternalID</code>.</p> <pre><code>Identity : Type := Pair ExternalID InternalID;\n</code></pre>","tags":["node-architecture","types","prelude"],"boost":2},{"location":"arch/node/types/identities.html#commitment","title":"<code>Commitment</code>","text":"<p>A cryptographic signature or commitment.</p> <pre><code>syntax alias Commitment := Signature;\n</code></pre>","tags":["node-architecture","types","prelude"],"boost":2},{"location":"arch/node/types/identities.html#emptycommitment","title":"<code>emptyCommitment</code>","text":"<p>An empty commitment.</p> <pre><code>axiom emptyCommitment : Commitment;\n</code></pre>","tags":["node-architecture","types","prelude"],"boost":2},{"location":"arch/node/types/identities.html#network-identifiers","title":"Network Identifiers","text":"","tags":["node-architecture","types","prelude"],"boost":2},{"location":"arch/node/types/identities.html#nodeid","title":"<code>NodeID</code>","text":"<p>Cryptographic node identity.</p> <pre><code>syntax alias NodeID := ExternalID;\n</code></pre>","tags":["node-architecture","types","prelude"],"boost":2},{"location":"arch/node/types/identities.html#topicid","title":"<code>TopicID</code>","text":"<p>Cryptographic topic identity.</p> <pre><code>syntax alias TopicID := ExternalID;\n</code></pre>","tags":["node-architecture","types","prelude"],"boost":2},{"location":"arch/node/types/identities.html#publisherid","title":"<code>PublisherID</code>","text":"<p>Cryptographic identity of a publisher in a pub/sub topic.</p> <pre><code>syntax alias PublisherID := ExternalID;\n</code></pre>","tags":["node-architecture","types","prelude"],"boost":2},{"location":"arch/node/types/identities.html#domainid","title":"<code>DomainID</code>","text":"<p>Cryptographic domain identity.</p> <pre><code>syntax alias DomainID := ExternalID;\n</code></pre>","tags":["node-architecture","types","prelude"],"boost":2},{"location":"arch/node/types/identities.html#memberid","title":"<code>MemberID</code>","text":"<p>Cryptographic identity of a member in a domain.</p> <pre><code>syntax alias MemberID := ExternalID;\n</code></pre>","tags":["node-architecture","types","prelude"],"boost":2},{"location":"arch/node/types/identities.html#chunkid","title":"<code>ChunkID</code>","text":"<p>Cryptographic content addressed hash digest of a data chunk.</p> <pre><code>syntax alias ChunkID := Digest;\n</code></pre>","tags":["node-architecture","types","prelude"],"boost":2},{"location":"arch/node/types/identities.html#engine-related-types","title":"Engine Related Types","text":"","tags":["node-architecture","types","prelude"],"boost":2},{"location":"arch/node/types/identities.html#enginename","title":"<code>EngineName</code>","text":"<p>Engine instance name as an opaque string.</p> <pre><code>syntax alias EngineName := String;\n</code></pre>","tags":["node-architecture","types","prelude"],"boost":2},{"location":"arch/node/types/identities.html#externalidentity","title":"<code>ExternalIdentity</code>","text":"<p>An alias for engine name.</p> <pre><code>syntax alias ExternalIdentity := EngineName;\n</code></pre>","tags":["node-architecture","types","prelude"],"boost":2},{"location":"arch/node/types/identities.html#engineid","title":"<code>EngineID</code>","text":"<p>Engine instance identity combining node identity and engine name.</p> <pre><code>EngineID : Type := Pair (Option NodeID) EngineName;\n</code></pre>","tags":["node-architecture","types","prelude"],"boost":2},{"location":"arch/node/types/identities.html#islocalengineid","title":"<code>isLocalEngineID</code>","text":"<pre><code>isLocalEngineID (eid : EngineID) : Bool :=\n  case eid of {\n    | mkPair none _ := true\n    | _ := false\n};\n</code></pre>","tags":["node-architecture","types","prelude"],"boost":2},{"location":"arch/node/types/identities.html#isremoteengineid","title":"<code>isRemoteEngineID</code>","text":"<pre><code>isRemoteEngineID (eid : EngineID) : Bool := not (isLocalEngineID eid);\n</code></pre>","tags":["node-architecture","types","prelude"],"boost":2},{"location":"arch/node/types/identities.html#namegen","title":"<code>nameGen</code>","text":"<pre><code>nameGen (str : String) (name : EngineName) (addr : EngineID) : EngineName :=\n  name ++str \"_\" ++str str ++str \"_\" ++str (snd addr);\n</code></pre>","tags":["node-architecture","types","prelude"],"boost":2},{"location":"arch/node/types/identities.html#identity-parameters-and-capabilities","title":"Identity Parameters and Capabilities","text":"","tags":["node-architecture","types","prelude"],"boost":2},{"location":"arch/node/types/identities.html#idparams","title":"<code>IDParams</code>","text":"<p>Supported identity parameter types.</p> <pre><code>type IDParams :=\n  | Ed25519\n  | Secp256k1\n  | BLS;\n</code></pre>","tags":["node-architecture","types","prelude"],"boost":2},{"location":"arch/node/types/identities.html#backend","title":"<code>Backend</code>","text":"<p>Backend connection types.</p> <pre><code>type Backend :=\n  | LocalMemory\n  | LocalConnection { subtype : String }\n  | RemoteConnection { externalIdentity : ExternalIdentity };\n</code></pre>","tags":["node-architecture","types","prelude"],"boost":2},{"location":"arch/node/types/identities.html#capabilities","title":"<code>Capabilities</code>","text":"<p>Available identity capabilities.</p> <pre><code>type Capabilities :=\n  | Commit\n  | Decrypt\n  | CommitAndDecrypt;\n</code></pre>","tags":["node-architecture","types","prelude"],"boost":2},{"location":"arch/node/types/identities.html#identity-evidence-types","title":"Identity Evidence Types","text":"","tags":["node-architecture","types","prelude"],"boost":2},{"location":"arch/node/types/identities.html#identityname","title":"<code>IdentityName</code>","text":"<p>Hierarchical identity naming structure.</p> <pre><code>type IdentityName :=\n  | LocalName { name : String }\n  | DotName { parent : ExternalIdentity; child : String };\n</code></pre> Instances","tags":["node-architecture","types","prelude"],"boost":2},{"location":"arch/node/types/identities.html#ordering-instance-for-identityname","title":"Ordering instance for <code>IdentityName</code>","text":"<pre><code>axiom IdentityNameCmpDummy : IdentityName -&gt; IdentityName -&gt; Ordering;\n\ninstance\nIdentityNameOrd : Ord IdentityName :=\n  Ord.mk@{\n    compare := IdentityNameCmpDummy;\n  };\n</code></pre>","tags":["node-architecture","types","prelude"],"boost":2},{"location":"arch/node/types/identities.html#readsforevidence","title":"<code>ReadsForEvidence</code>","text":"<p>Evidence of read permissions between identities.</p> <pre><code>type ReadsForEvidence := mkReadsForEvidence@{\n  fromIdentity : ExternalIdentity;\n  toIdentity : ExternalIdentity;\n  proof : ByteString;\n};\n</code></pre> Instances","tags":["node-architecture","types","prelude"],"boost":2},{"location":"arch/node/types/identities.html#ordering-instance-for-readsforevidence","title":"Ordering instance for <code>ReadsForEvidence</code>","text":"<pre><code>axiom ReadsForCmpDummy : ReadsForEvidence -&gt; ReadsForEvidence -&gt; Ordering;\n\ninstance\nReadsForOrd : Ord ReadsForEvidence :=\nOrd.mk@{\n  compare := ReadsForCmpDummy;\n};\n</code></pre>","tags":["node-architecture","types","prelude"],"boost":2},{"location":"arch/node/types/identities.html#signsforevidence","title":"<code>SignsForEvidence</code>","text":"<p>Evidence of signing permissions between identities.</p> <pre><code>type SignsForEvidence := mkSignsForEvidence {\n  fromIdentity : ExternalIdentity;\n  toIdentity : ExternalIdentity;\n  proof : ByteString;\n};\n</code></pre> Instances","tags":["node-architecture","types","prelude"],"boost":2},{"location":"arch/node/types/identities.html#ordering-instance-for-signsforevidence","title":"Ordering instance for <code>SignsForEvidence</code>","text":"<pre><code>axiom SignsForCmpDummy : SignsForEvidence -&gt; SignsForEvidence -&gt; Ordering;\n\ninstance\nSignsForOrd : Ord SignsForEvidence :=\n  Ord.mk@{\ncompare := SignsForCmpDummy;\n};\n</code></pre>","tags":["node-architecture","types","prelude"],"boost":2},{"location":"arch/node/types/identities.html#identitynameevidence","title":"<code>IdentityNameEvidence</code>","text":"<p>Evidence linking identity names to external identities.</p> <pre><code>type IdentityNameEvidence := mkIdentityNameEvidence@{\n  identityName : IdentityName;\n  externalIdentity : ExternalIdentity;\n  proof : ByteString;\n};\n</code></pre> Instances","tags":["node-architecture","types","prelude"],"boost":2},{"location":"arch/node/types/identities.html#ordering-instance-for-identitynameevidence","title":"Ordering instance for <code>IdentityNameEvidence</code>","text":"<pre><code>axiom IdentityNameEvidenceCmpDummy : IdentityNameEvidence -&gt;\n  IdentityNameEvidence -&gt; Ordering;\n\ninstance\nIdentityNameEvidenceOrd : Ord IdentityNameEvidence :=\n  Ord.mk@{\n    compare := IdentityNameEvidenceCmpDummy;\n  };\n</code></pre>","tags":["node-architecture","types","prelude"],"boost":2},{"location":"arch/node/types/identities.html#ordering-aliases","title":"Ordering Aliases","text":"<pre><code>type TransactionLabel ReadLabel WriteLabel := mkTransactionLabel@{\n  read : List ReadLabel;\n  write : List WriteLabel\n};\n</code></pre>","tags":["node-architecture","types","prelude"],"boost":2},{"location":"arch/node/types/identities.html#txfingerprint","title":"<code>TxFingerprint</code>","text":"<pre><code>syntax alias TxFingerprint := Nat;\n</code></pre>","tags":["node-architecture","types","prelude"],"boost":2},{"location":"arch/node/types/identities.html#transactioncandidate","title":"<code>TransactionCandidate</code>","text":"<pre><code>type TransactionCandidate ReadLabel WriteLabel Executable :=\n  mkTransactionCandidate@{\n    label : TransactionLabel ReadLabel WriteLabel;\n    executable : Executable\n  };\n</code></pre>","tags":["node-architecture","types","prelude"],"boost":2},{"location":"arch/node/types/identities.html#narwhalblock","title":"<code>NarwhalBlock</code>","text":"<pre><code>syntax alias NarwhalBlock := String;\n</code></pre>","tags":["node-architecture","types","prelude"],"boost":2},{"location":"arch/node/types/identities.html#batchnumber","title":"<code>BatchNumber</code>","text":"<pre><code>syntax alias BatchNumber := Nat;\n</code></pre>","tags":["node-architecture","types","prelude"],"boost":2},{"location":"arch/node/types/identities.html#wallclocktime","title":"<code>WallClockTime</code>","text":"<pre><code>syntax alias WallClockTime := Nat;\n</code></pre>","tags":["node-architecture","types","prelude"],"boost":2},{"location":"arch/node/types/identities.html#keytoshard","title":"<code>keyToShard</code>","text":"<p>Up to v0.2, the specification assumes a fixed/static assignment from keys of the key-value storage to engine IDs of shards that are responsible for mangaging the values associated to keys.</p> <pre><code>-- Map each key to its shard\naxiom keyToShard {KVSKey} : KVSKey -&gt; EngineID;\n</code></pre> <p>v0.3</p> <p>Is the map from keys to shards still assumed to be fixed?</p>","tags":["node-architecture","types","prelude"],"boost":2},{"location":"arch/node/types/messages.html","title":"Messages & Mailboxes","text":"Juvix imports <pre><code>module arch.node.types.messages;\n\nimport prelude open public;\nimport arch.node.types.basics open;\nimport arch.node.types.crypto open;\nimport arch.node.types.identities open;\n</code></pre>","tags":["work-in-progress","node-architecture","types","message-types","mailboxes","prelude"],"boost":2},{"location":"arch/node/types/messages.html#messages-and-mailboxes","title":"Messages and mailboxes","text":"","tags":["work-in-progress","node-architecture","types","message-types","mailboxes","prelude"],"boost":2},{"location":"arch/node/types/messages.html#types","title":"Types","text":"<p>A message is a piece of data dispatched from one engine, termed the sender, to another engine, referred to as the target. When a message is sent, it is enveloped with additional metadata such as the target address and potentially the sender address, in case the sender wants to be identified. Upon arrival at the target engine, the message is stored in the target engine's mailboxes. These mailboxes are indexed by an identifier that are only unique to their engine. If the target engine has only one mailbox, the mailbox identifier is redundant.</p> <p>The following types are used to represent these messages and mailboxes.</p>","tags":["work-in-progress","node-architecture","types","message-types","mailboxes","prelude"],"boost":2},{"location":"arch/node/types/messages.html#enginemsgid","title":"<code>EngineMsgID</code>","text":"<p>An engine message identifier. The cryptographic hash of the corresponding <code>EngineMsg</code>.</p> <pre><code>syntax alias EngineMsgID := Digest;\n</code></pre>","tags":["work-in-progress","node-architecture","types","message-types","mailboxes","prelude"],"boost":2},{"location":"arch/node/types/messages.html#mailbox-s","title":"<code>Mailbox S</code>","text":"<p>A mailbox is a container for engine messages and optionally a mailbox state. The mailbox state could be used to store additional information about the mailbox, such as the priority of the messages in the mailbox.</p> Where does mailbox state come from? <p>The mailbox state is related to the capabilities of mailboxes of the paper <sup>1</sup>. In particular, at any given point in time, a mailbox will have a capability for receiving messages (in later versions of the specs). As mailbox state can be useful in general, we already have it now.</p> <pre><code>type Mailbox S M := mkMailbox@{\n  messages : List (EngineMsg M);\n  mailboxState : Option S;\n};\n</code></pre>","tags":["work-in-progress","node-architecture","types","message-types","mailboxes","prelude"],"boost":2},{"location":"arch/node/types/messages.html#mailboxid","title":"<code>MailboxID</code>","text":"<p>A mailbox identifier is a natural number used to index mailboxes.</p> Where do mailbox identifiers come from? <p>The concept of mailbox identifier is taken from the paper <sup>1</sup> (see also Mailbox Cluster and <sup>2</sup>).</p> <pre><code>syntax alias MailboxID := Nat;\n</code></pre>","tags":["work-in-progress","node-architecture","types","message-types","mailboxes","prelude"],"boost":2},{"location":"arch/node/types/messages.html#enginemsg","title":"<code>EngineMsg</code>","text":"<p>An engine message is a message between engines. It consists of a sender, a target, an optional mailbox identifier, and the message itself.</p> <pre><code>type EngineMsg M :=\n  mk@{\n    sender : EngineID;\n    target : EngineID;\n    mailbox : Option MailboxID;\n    msg : M;\n  };\n</code></pre>","tags":["work-in-progress","node-architecture","types","message-types","mailboxes","prelude"],"boost":2},{"location":"arch/node/types/messages.html#timer-h","title":"<code>Timer H</code>","text":"<pre><code>type Timer H := mkTimer@{\n  time : Time;\n  handle : H;\n};\n</code></pre>","tags":["work-in-progress","node-architecture","types","message-types","mailboxes","prelude"],"boost":2},{"location":"arch/node/types/messages.html#trigger-h","title":"<code>Trigger H</code>","text":"<pre><code>type Trigger H M :=\n  | MessageArrived { msg : EngineMsg M; }\n  | Elapsed { timers : List (Timer H) };\n</code></pre>","tags":["work-in-progress","node-architecture","types","message-types","mailboxes","prelude"],"boost":2},{"location":"arch/node/types/messages.html#getenginemsgfromtrigger","title":"<code>getEngineMsgFromTrigger</code>","text":"<p>Extract the <code>EngineMsg</code> from a trigger in case it has one:</p> <pre><code>getEngineMsgFromTrigger {H M} (tr : Trigger H M) : Option (EngineMsg M)\n  := case tr of {\n  | Trigger.MessageArrived@{msg} := some msg\n  | Trigger.Elapsed@{} := none\n  };\n</code></pre>","tags":["work-in-progress","node-architecture","types","message-types","mailboxes","prelude"],"boost":2},{"location":"arch/node/types/messages.html#getmsgfromtrigger","title":"<code>getMsgFromTrigger</code>","text":"<p>Extract the <code>Msg</code> from a trigger in case it has one:</p> <pre><code>getMsgFromTrigger {H M} (tr : Trigger H M) : Option M\n  := case tr of {\n  | Trigger.MessageArrived@{msg} := some (EngineMsg.msg msg)\n  | Trigger.Elapsed@{} := none\n  };\n</code></pre>","tags":["work-in-progress","node-architecture","types","message-types","mailboxes","prelude"],"boost":2},{"location":"arch/node/types/messages.html#getsenderfromtrigger","title":"<code>getSenderFromTrigger</code>","text":"<pre><code>getSenderFromTrigger {H M} (tr : Trigger H M) : Option EngineID\n  := case tr of {\n  | Trigger.MessageArrived@{msg} := some (EngineMsg.sender msg)\n  | Trigger.Elapsed@{} := none\n  };\n</code></pre>","tags":["work-in-progress","node-architecture","types","message-types","mailboxes","prelude"],"boost":2},{"location":"arch/node/types/messages.html#gettargetfromtrigger","title":"<code>getTargetFromTrigger</code>","text":"<pre><code>getTargetFromTrigger {H M} (tr : Trigger H M) : Option EngineID\n  := case tr of {\n  | Trigger.MessageArrived@{msg} := some (EngineMsg.target msg)\n  | Trigger.Elapsed@{} := none\n  };\n</code></pre>","tags":["work-in-progress","node-architecture","types","message-types","mailboxes","prelude"],"boost":2},{"location":"arch/node/types/messages.html#timestampedtrigger-h","title":"<code>TimestampedTrigger H</code>","text":"<pre><code>type TimestampedTrigger H M :=\n  mkTimestampedTrigger@{\n    time : Time;\n    trigger : Trigger H M;\n  };\n</code></pre>","tags":["work-in-progress","node-architecture","types","message-types","mailboxes","prelude"],"boost":2},{"location":"arch/node/types/messages.html#getenginemsgfromtimestampedtrigger","title":"<code>getEngineMsgFromTimestampedTrigger</code>","text":"<pre><code>getEngineMsgFromTimestampedTrigger {H M} (tr : TimestampedTrigger H M) : Option (EngineMsg M)\n  := getEngineMsgFromTrigger (TimestampedTrigger.trigger tr);\n</code></pre>","tags":["work-in-progress","node-architecture","types","message-types","mailboxes","prelude"],"boost":2},{"location":"arch/node/types/messages.html#getmsgfromtimestampedtrigger","title":"<code>getMsgFromTimestampedTrigger</code>","text":"<pre><code>getMsgFromTimestampedTrigger {H M} (tr : TimestampedTrigger H M) : Option M\n  := getMsgFromTrigger (TimestampedTrigger.trigger tr);\n</code></pre>","tags":["work-in-progress","node-architecture","types","message-types","mailboxes","prelude"],"boost":2},{"location":"arch/node/types/messages.html#getsenderfromtimestampedtrigger","title":"<code>getSenderFromTimestampedTrigger</code>","text":"<pre><code>getSenderFromTimestampedTrigger {H M} (tr : TimestampedTrigger H M) : Option EngineID\n  := getSenderFromTrigger (TimestampedTrigger.trigger tr);\n</code></pre>","tags":["work-in-progress","node-architecture","types","message-types","mailboxes","prelude"],"boost":2},{"location":"arch/node/types/messages.html#gettargetfromtimestampedtrigger","title":"<code>getTargetFromTimestampedTrigger</code>","text":"<pre><code>getTargetFromTimestampedTrigger {H M} (tr : TimestampedTrigger H M) : Option EngineID\n  := getTargetFromTrigger (TimestampedTrigger.trigger tr);\n</code></pre> <ol> <li> <p>Simon Fowler, Duncan Paul Attard, Franciszek Sowul, Simon J. Gay, and Phil Trinder. Special delivery: programming with mailbox types. Proceedings of the ACM on Programming Languages, 7(ICFP):78\u2013107, August 2023. URL: http://dx.doi.org/10.1145/3607832, doi:10.1145/3607832.\u00a0\u21a9\u21a9</p> </li> <li> <p>Shams M. Imam and Vivek Sarkar. Selectors: actors with multiple guarded mailboxes. AGERE! '14: Proceedings of the 4th International Workshop on Programming based on Actors Agents and Decentralized Control, October 2014. URL: http://dx.doi.org/10.1145/2687357.2687360, doi:10.1145/2687357.2687360.\u00a0\u21a9</p> </li> </ol>","tags":["work-in-progress","node-architecture","types","message-types","mailboxes","prelude"],"boost":2},{"location":"arch/node/types/router.html","title":"Router","text":"Juvix imports <pre><code>module arch.node.types.router;\n\nimport prelude open;\nimport arch.node.types.basics open;\nimport arch.node.types.transport open;\nimport arch.node.types.crypto open;\nimport arch.node.types.identities open;\n</code></pre>","tags":["node-architecture","types","network-subsystem","router","prelude"],"boost":2},{"location":"arch/node/types/router.html#router-types","title":"Router Types","text":"","tags":["node-architecture","types","network-subsystem","router","prelude"],"boost":2},{"location":"arch/node/types/router.html#nodeadvert","title":"<code>NodeAdvert</code>","text":"<p>A self-signed node advertisement contains the node's cryptographic identity and transport addresses.</p> <pre><code>type NodeAdvert :=\n  mkNodeAdvert {\n    id : NodeID;\n    addrs : List TransportAddress;\n    version : Nat;\n    created : AbsTime;\n    sig : Commitment;\n  };\n</code></pre> Arguments <code>id</code> Node identity. <code>addrs</code> Transport addresses with preferences expressed as weights. <code>version</code> Version number (incremented at every change). <code>created</code> Time of creation. <code>sig</code> Signature by <code>id</code>.","tags":["node-architecture","types","network-subsystem","router","prelude"],"boost":2},{"location":"arch/node/types/router.html#topicadvert","title":"<code>TopicAdvert</code>","text":"<p>A topic advertisement signed by the topic creator contains the topic's cryptographic identity, and the <code>NodeID</code> of a set of relay nodes that can be used to subscribe to the topic. These may be publishers, subscribers, or dedicated relay nodes for the topic.</p> <pre><code>type TopicAdvert :=\n  mkTopicAdvert {\n    id : TopicID;\n    relays : List NodeID;\n    tags : List String;\n    version : Nat;\n    created : AbsTime;\n    sig : Commitment;\n  };\n</code></pre> Arguments <code>id</code> Topic identity. <code>relays</code> List of relay nodes. <code>tags</code> List of tags. <code>version</code> Version number (incremented at every change). <code>created</code> Time of creation. <code>sig</code> Signature by <code>id</code>.","tags":["node-architecture","types","network-subsystem","router","prelude"],"boost":2},{"location":"arch/node/types/storage.html","title":"Storage","text":"Juvix imports <pre><code>module arch.node.types.storage;\n\nimport prelude open;\n\nimport arch.node.types.basics open;\nimport arch.node.types.crypto open;\nimport arch.node.types.identities open;\n</code></pre>","tags":["node-architecture","types","network-subsystem","storage","prelude"],"boost":2},{"location":"arch/node/types/storage.html#storage-types","title":"Storage Types","text":"","tags":["node-architecture","types","network-subsystem","storage","prelude"],"boost":2},{"location":"arch/node/types/storage.html#acl","title":"<code>ACL</code>","text":"<p>Access control list stored in a Storage object.</p> <p>Contains <code>ExternalID</code>s that are members of the list, the version of the ACL, which is incremented at each update, and a signature by the ACL owner.</p> <p>The ACL may be updated by sending an updated version to a pub/sub topic identified by the ACL owner's <code>ExternalID</code>.</p> <pre><code>type ACL := mkACL@{\n  members : Set ExternalID;\n  version : Nat;\n  sig : Commitment;\n}\n</code></pre> Arguments <code>members</code> Set of <code>ExternalID</code>s that are members of the ACL. <code>version</code> Version of the ACL. <code>sig</code> Signature of the ACL by the ACL owner.","tags":["node-architecture","types","network-subsystem","storage","prelude"],"boost":2},{"location":"arch/node/types/storage.html#chunk","title":"<code>Chunk</code>","text":"<p>A chunk of a storage object.</p> <pre><code>type Chunk := mkChunk@{\n  children : List ChunkID;\n  expiry : AbsTime;\n  acl : Option ACL;\n  content : ByteString;\n};\n</code></pre> Arguments <code>children</code> List of chunk IDs of children in the Merkle tree. <code>expiry</code> Expiration time after which the chunk must be deleted by each node storing it. <code>content</code> Encrypted <code>ChunkContent</code>. <code>acl</code> Nodes that are allowed to request the chunk.","tags":["node-architecture","types","network-subsystem","storage","prelude"],"boost":2},{"location":"arch/node/types/storage.html#chunkcontent","title":"<code>ChunkContent</code>","text":"<p>The content of a <code>Chunk</code>.</p> <pre><code>type ChunkContent :=\n  | InternalNode (List SecretKey)\n  | LeafNode ByteString\n  ;\n</code></pre> <code>ChunkContent</code> constructors <code>InternalNode</code> An internal node of the Merkle tree. Contains decryption keys of its children. <code>LeafNode</code> A leaf node of the Merkle tree. Contains a data chunk.","tags":["node-architecture","types","network-subsystem","storage","prelude"],"boost":2},{"location":"arch/node/types/storage.html#chunkcommitment","title":"<code>ChunkCommitment</code>","text":"<p>Commitment by a node to store a chunk for a certain period of time.</p> <p>Contains a reference to a <code>Chunk</code>, along with the <code>NodeID</code> where it is stored, and an expiry time</p> <pre><code>type ChunkCommitment := mkChunkCommitment {\n  chunk : ChunkID;\n  node : NodeID;\n  expiry : AbsTime;\n  sig : Commitment;\n};\n</code></pre> Arguments <code>id</code> <code>ChunkID</code> to commit to. <code>node</code> <code>NodeID</code> where the <code>Chunk</code> can be found. <code>expiry</code> Expiration time, until <code>node</code> guarantees storage. <code>sig</code> Cryptographic signature of the above fields by <code>node</code>.","tags":["node-architecture","types","network-subsystem","storage","prelude"],"boost":2},{"location":"arch/node/types/transport.html","title":"Transport","text":"Juvix imports <pre><code>module arch.node.types.transport;\n\nimport arch.node.types.basics open;\nimport arch.node.types.crypto open;\nimport arch.node.types.identities open;\n</code></pre>","tags":["node-architecture","types","network-subsystem","transport","prelude"],"boost":2},{"location":"arch/node/types/transport.html#transport-types","title":"Transport types","text":"","tags":["node-architecture","types","network-subsystem","transport","prelude"],"boost":2},{"location":"arch/node/types/transport.html#ipv4address","title":"<code>IPv4Address</code>","text":"<pre><code>syntax alias IPv4Address := Nat;\n</code></pre>","tags":["node-architecture","types","network-subsystem","transport","prelude"],"boost":2},{"location":"arch/node/types/transport.html#ipv6address","title":"<code>IPv6Address</code>","text":"<pre><code>syntax alias IPv6Address := Nat;\n</code></pre>","tags":["node-architecture","types","network-subsystem","transport","prelude"],"boost":2},{"location":"arch/node/types/transport.html#ipaddress","title":"<code>IPAddress</code>","text":"<pre><code>IPAddress : Type := Either IPv4Address IPv6Address;\n</code></pre>","tags":["node-architecture","types","network-subsystem","transport","prelude"],"boost":2},{"location":"arch/node/types/transport.html#transportprotocol","title":"<code>TransportProtocol</code>","text":"<p>Supported network transport protocols.</p> <pre><code>type TransportProtocol :=\n  | QUIC\n  | TLS\n  | WebTransport\n  | WebSocket\n  | TCP\n  | UDP\n  ;\n</code></pre>","tags":["node-architecture","types","network-subsystem","transport","prelude"],"boost":2},{"location":"arch/node/types/transport.html#tlsaddress","title":"<code>TLSAddress</code>","text":"<p>TLS or QUIC address.</p> <pre><code>type TLSAddress :=\n  mkTLSAddress {\n    ip : IPAddress;\n    port : Nat;\n    cert_issuer : String;\n  };\n</code></pre> Arguments <code>ip</code> IP address <code>port</code> Port number <code>cert_issuer</code> TLS certificate issuer fingerprint","tags":["node-architecture","types","network-subsystem","transport","prelude"],"boost":2},{"location":"arch/node/types/transport.html#transportaddress","title":"<code>TransportAddress</code>","text":"<pre><code>type TransportAddress :=\n  | QUICAddr TLSAddress\n  | TLSAddr TLSAddress\n  | IPAddr IPAddress\n  ;\n</code></pre>","tags":["node-architecture","types","network-subsystem","transport","prelude"],"boost":2},{"location":"arch/node/types/transport.html#transportorderingprefs","title":"<code>TransportOrderingPrefs</code>","text":"<p>Transport ordering preferences for an outgoing message.</p> <pre><code>type TransportOrderingPrefs :=\n  | TransportOrdered\n  | TransportUnordered\n  ;\n</code></pre>","tags":["node-architecture","types","network-subsystem","transport","prelude"],"boost":2},{"location":"arch/node/types/transport.html#transportreliabilityprefs","title":"<code>TransportReliabilityPrefs</code>","text":"<p>Transport reliability preferences for an outgoing message.</p> <pre><code>type TransportReliabilityPrefs :=\n  | TransportReliable\n  | TransportUnreliable\n  ;\n</code></pre>","tags":["node-architecture","types","network-subsystem","transport","prelude"],"boost":2},{"location":"arch/node/types/transport.html#transportsecurityprefs","title":"<code>TransportSecurityPrefs</code>","text":"<p>Transport ordering preferences for an outgoing message.</p> <pre><code>type TransportSecurityPrefs :=\n  | TransportDirect\n  ;\n</code></pre>","tags":["node-architecture","types","network-subsystem","transport","prelude"],"boost":2},{"location":"arch/node/types/transport.html#transportprefs","title":"<code>TransportPrefs</code>","text":"<p>Transport preferences for an outgoing message.</p> <pre><code>type TransportPrefs := mkTransportPrefs {\n  ordering : TransportOrderingPrefs;\n  reliability : TransportReliabilityPrefs;\n  security : TransportSecurityPrefs;\n};\n</code></pre> Arguments <code>ordering</code> Transport ordering preferences <code>reliability</code> Transport reliability preferences <code>security</code> Transport security preferences","tags":["node-architecture","types","network-subsystem","transport","prelude"],"boost":2},{"location":"arch/node/types/transport.html#serializedmsg","title":"<code>SerializedMsg</code>","text":"<p>Serialized message. Contains an <code>EngineMsg</code>.</p> <pre><code>type SerializedMsg :=\n  | BARE ByteString\n  ;\n</code></pre> Arguments <code>SerializedMsgBARE</code> BARE","tags":["node-architecture","types","network-subsystem","transport","prelude"],"boost":2},{"location":"arch/node/types/transport.html#encryptedmsg","title":"<code>EncryptedMsg</code>","text":"<p>Serialized message encrypted with the specified algorithm. Contains a <code>SerializedMsg</code>.</p> <pre><code>type EncryptedMsg :=\n  | EncryptedMsgNull ByteString\n  ;\n</code></pre> Arguments <code>EncryptedMsgNull</code> No encryption.","tags":["node-architecture","types","network-subsystem","transport","prelude"],"boost":2},{"location":"arch/system/identity/identity.html","title":"Identity Architecture Types","text":"Juvix imports <pre><code>module arch.system.identity.identity;\nimport prelude open;\n</code></pre>","tags":["system-architecture","identity"],"boost":2},{"location":"arch/system/identity/identity.html#identity-architecture","title":"Identity Architecture","text":"Type definitions <pre><code>type OrdKey OrdKeyType :=\n  mkOrdKey@{\n    compare : OrdKeyType -&gt; OrdKeyType -&gt; Ordering\n  };\n</code></pre> <pre><code>type HASH OrdKeyType Hashable :=\n  mkHASH@{\n    ordKey : OrdKey OrdKeyType;\n    hash : Hashable -&gt; OrdKeyType\n  };\n</code></pre> <pre><code>-- Note: instance of this with Data.Map should be made\ntype OrdMap (OrdKeyType : Type) (MapCon : Type -&gt; Type) :=\n  mkMap {\n    ordKey : OrdKey OrdKeyType;\n    empty {A} : MapCon A;\n    map {A B} : (A -&gt; B) -&gt; MapCon A -&gt; MapCon B;\n    insert {A} : Pair (MapCon A) (Pair OrdKeyType A) -&gt; MapCon A;\n    foldl {A B} : (Pair A B -&gt; B) -&gt; B -&gt; MapCon A -&gt; B;\n    intersectWith {A B C} : (Pair A B -&gt; C) -&gt; Pair (MapCon A) (MapCon B) -&gt; MapCon C;\n    all {A} : (A -&gt; Bool) -&gt; MapCon A -&gt; Bool\n    -- Bunch of stuff, see https://www.smlnj.org/doc/smlnj-lib/Util/sig-OrdMap.html\n  };\n</code></pre> <p>The base abstraction of the protocol is a knowledge-based identity  interface, where the identity of an agent is defined entirely on the  basis of whether or not they know some secret information.</p> <p>Agents can use private information (likely randomness) to create an  internal identity, from which they can derive an  external identity to which it corresponds. The external identity can be shared with other parties. The agent who knows the internal identity can sign messages, which any  agent who knows the external identity can verify, and any agent who  knows the external identity can encrypt messages which the agent with  knowledge of the internal identity can decrypt. This identity interface is independent of the particular cryptographic  mechanisms, which may vary.</p>","tags":["system-architecture","identity"],"boost":2},{"location":"arch/system/identity/identity.html#identity-interface","title":"Identity Interface","text":"","tags":["system-architecture","identity"],"boost":2},{"location":"arch/system/identity/identity.html#internal-identity","title":"Internal Identity","text":"<p>An internal identity includes private information necessary for signing and  decryption. Formally, an internal identity has two parts: a Signer and a Decryptor.</p>","tags":["system-architecture","identity"],"boost":2},{"location":"arch/system/identity/identity.html#signer-juvix-type","title":"Signer Juvix Type","text":"<p>A signature describing a type <code>SignerType</code> that can cryptographically  <code>sign</code> (or credibly commit) to something (a <code>Signable</code>), forming a  <code>Commitment</code>. Implementations should ultimately include, for example  BLS keys,   which should be able to sign anything that can be marshaled into a   bitstring.</p> <p>Properties:</p> <ul> <li> <p>In general, every <code>S : Signer</code> needs a corresponding <code>V : Verifier</code>, and   every <code>s : SignerType</code> needs a corresponding <code>v : VerifierType</code>, such that:</p> <ul> <li>For any message <code>m</code> : <code>verify v m x = (x = (sign s m))</code></li> </ul> <ul> <li>for most cryptosystems, a computationally bounded adversary should not be   able to approximate <code>s</code> knowing only <code>v</code>.</li> </ul> </li> </ul> <pre><code>type Signer SignerType Signable Commitment :=\n  mkSigner@{\n    sign : SignerType -&gt; Signable -&gt; Commitment\n  };\n</code></pre>","tags":["system-architecture","identity"],"boost":2},{"location":"arch/system/identity/identity.html#decryptor-juvix-type","title":"Decryptor Juvix Type","text":"<p>A signature describing a type <code>DecryptorType</code> that can cryptographically  <code>decrypt</code> something (a <code>Ciphertext</code>), resulting in a <code>Plaintext</code>  (or <code>none</code>, if decryption fails). Implementations should ultimately include, for example,  AES-256  keys,  which should be able to decrypt bitstrings into anything that  can be unmarshaled from a bitstring.</p> <p>Properties:</p> <ul> <li>a computationally bounded adversary should not be able to   approximate <code>decrypt d</code> without knowledge of <code>d</code>.</li> </ul> <ul> <li><code>decrypt</code> should take polynomial time (in the size of its inputs)</li> </ul> <ul> <li> <p>Each <code>D : Decryptor</code> should have a corresponding <code>E : Encryptor</code>, and   each <code>d : DecryptorType</code> has a corresponding <code>e : EncryptorType</code> such   that:</p> <ul> <li>for all <code>c : Ciphertext</code>, <code>p : Plaintext</code>:   <code>decrypt d c = Some p</code> iff <code>c = encrypt e p</code></li> </ul> <ul> <li>if <code>d = e</code>, we call this \"symmetric encryption,\" and otherwise   it's \"asymmetric encryption\"</li> </ul> </li> </ul> <pre><code>type Decryptor DecryptorType Plaintext Ciphertext :=\n  mkDecryptor@{\n    decrypt : DecryptorType -&gt; Ciphertext -&gt; Option Plaintext\n  }\n</code></pre>","tags":["system-architecture","identity"],"boost":2},{"location":"arch/system/identity/identity.html#internal-identity-juvix-type","title":"Internal Identity Juvix Type","text":"<p>An Internal Identity structure simply specifies everything specified by both Signer and Decryptor.</p> <p>An Internal Identity structure specifies the necessary types and  functions for both a Signer and a Decryptor. Implementations should ultimately include, for example,  RSA private keys,  which should be able to decrypt integers into anything that can be  unmarshaled from a bitstring, and sign anything which can be  marshaled into a bytestring to form an integer.</p> <p>An internal_identity includes:</p> <ul> <li>a type <code>SignerType</code> that can cryptographically   <code>sign</code> (or credibly commit) to something (a <code>Signable</code>), forming a   <code>Commitment</code>.</li> </ul> <ul> <li>a type <code>DecryptorType</code> that can cryptographically <code>decrypt</code> something   (a <code>Ciphertext</code>), resulting in a <code>Plaintext</code>   (or <code>none</code>, if decryption fails).</li> </ul> <p>Properties are inherited from <code>Signer</code> and <code>Decryptor</code>.</p> <pre><code>type InternalIdentity\n    SignerType\n    Signable\n    Commitment\n    DecryptorType\n    Plaintext\n    Ciphertext :=\n  mkInternalIdentity@{\n    signer : Signer SignerType Signable Commitment;\n    decryptor : Decryptor DecryptorType Plaintext Ciphertext\n  }\n</code></pre>","tags":["system-architecture","identity"],"boost":2},{"location":"arch/system/identity/identity.html#external-identity","title":"External Identity","text":"<p>An external identity includes only public information. An external identity can verify signatures produced by an internal identity, and encrypt messages the internal identity can then decrypt. Formally, an external identity has two parts: a verifier and an Encryptor. Each is hashable: any structure specifying verifier and Encryptor types must also specify a hash function, so that external identities can be specified by hash.</p>","tags":["system-architecture","identity"],"boost":2},{"location":"arch/system/identity/identity.html#verifier-juvix-type","title":"Verifier Juvix Type","text":"<p>A signature describing a type <code>VerifierType</code> that can cryptographically  <code>verify</code> that a <code>Commitment</code> (or cryptographic signature) corresponds  to a given message (a <code>Signable</code>), and was signed by the <code>SignerType</code>  corresponding to this <code>VerifierType</code>. A <code>VerifierType</code> can be hashed (producing a unique identifier), so a  structure with signature <code>Verifier</code> must specify a <code>VerifierHash</code>  structure defining a suitable <code>hash</code> function. Implementations should ultimately include, for example  BLS  identities.</p> <p>Properties:</p> <ul> <li> <p>In general, every <code>V : Verifier</code> needs a corresponding <code>S : Signer</code>, and   every <code>s : SignerType</code> needs a corresponding <code>v : VerifierType</code>, such that:</p> <ul> <li>For any message <code>m</code> : <code>verify v m x = (x = (sign s m))</code></li> </ul> <ul> <li>for most cryptosystems, a computationally bounded adversary should not be   able to approximate <code>s</code> knowing only <code>v</code>.</li> </ul> </li> </ul> <pre><code>type Verifier OrdKey VerifierType Signable Commitment :=\n  mkVerifier@{\n    verify : VerifierType -&gt; Signable -&gt; Commitment -&gt; Bool;\n    verifierHash : HASH OrdKey VerifierType\n  }\n</code></pre>","tags":["system-architecture","identity"],"boost":2},{"location":"arch/system/identity/identity.html#encryptor-juvix-type","title":"Encryptor Juvix Type","text":"<p>A signature describing a type <code>EncryptorType</code> that can cryptographically  <code>encrypt</code> a <code>Plaintext</code> (message) to create a <code>Ciphertext</code> readable  only by the corresponding <code>DecryptorType</code>. An <code>EncryptorType</code> can be hashed (producing a unique identifier), so a  structure with signature <code>Encryptor</code> must specify an <code>encryptorHash</code>  structure defining a suitable hash function. Implementations should ultimately include, for example,  AES-256  keys,  which should be able to decrypt bitstrings into anything that  can be  unmarshaled from a bitstring.</p> <p>Properties:</p> <ul> <li><code>encrypt</code> should take polynomial time (in the size of its inputs)</li> </ul> <ul> <li> <p>Each <code>E : Encryptor</code> should have a corresponding <code>D : Decryptor</code>, and   each <code>d : DecryptorType</code> has a corresponding <code>e : EncryptorType</code> such   that:</p> <ul> <li>for all <code>c : Ciphertext</code>, <code>p : Plaintext</code>:   <code>decrypt d c = Some p</code> iff <code>c = encrypt e p</code></li> </ul> <ul> <li>if <code>d = e</code>, we call this \"symmetric encryption,\" and otherwise   it's \"asymmetric encryption.\"   In an asymmetric cryptosystem, a computationally bounded adversary   should not be able to approximate <code>d</code> knowing only <code>e</code>.</li> </ul> </li> </ul> <pre><code>type Encryptor OrdKey EncryptorType Plaintext Ciphertext :=\n  mkEncryptor@{\n    encrypt : EncryptorType -&gt; Plaintext -&gt; Ciphertext;\n    encryptorHash : HASH OrdKey EncryptorType\n  }\n</code></pre>","tags":["system-architecture","identity"],"boost":2},{"location":"arch/system/identity/identity.html#external-identity-juvix-type","title":"External Identity Juvix Type","text":"<p>An External Identity structure specifies the necessary types and  functions for both a Verifier and an Encryptor. Implementations should ultimately include, for example,  RSA public keys.</p> <p>An external_identity includes:</p> <ul> <li>a type <code>VerifierType</code> that can cryptographically <code>verify</code> that a   <code>Commitment</code> (or cryptographic signature) corresponds to a given   message (a <code>Signable</code>), and was signed by the <code>SignerType</code>   corresponding to this <code>VerifierType</code>.</li> </ul> <ul> <li>a type <code>EncryptorType</code> that can cryptographically <code>encrypt</code> a   <code>Plaintext</code> (message) to create a <code>Ciphertext</code> readable only by the   corresponding <code>DecryptorType</code>.</li> </ul> <p>Properties are inherited from <code>Verifier</code> and <code>Encryptor</code>.</p> <pre><code>type ExternalIdentity\n  VerifierOrdKeyType\n  VerifierType\n  Signable\n  Commitment\n  EncryptorOrdKeyType\n  EncryptorType\n  Plaintext\n  Ciphertext\n  :=\n  mkExternalIdentity@{\n    verifier : Verifier VerifierOrdKeyType VerifierType Signable Commitment;\n    encryptor : Encryptor EncryptorOrdKeyType EncryptorType Plaintext Ciphertext\n  };\n</code></pre>","tags":["system-architecture","identity"],"boost":2},{"location":"arch/system/identity/identity.html#identity-juvix-type","title":"Identity Juvix Type","text":"<p>An Identity structure, formally, specifies all the types for  corresponding internal and external identities. So, for a given Identity structure <code>I</code>, its <code>VerifierType</code> should be the  type of objects that can verify <code>Commitment</code>s produced by a  corresponding object of type <code>SignerType</code>. Likewise, its <code>DecryptorType</code> should be the type of objects that can decrypt  <code>Ciphertext</code>s produced by a corresponding object of type  <code>EncryptorType</code>. Implementations should ultimately include, for example,  RSA  public / private keys sytems.</p> <p>An Identity includes:</p> <ul> <li>a type <code>SignerType</code> that can cryptographically <code>sign</code> (or credibly commit) to something (an <code>InternalSignable</code>), forming an <code>InternalCommitment</code>.</li> </ul> <ul> <li>a type <code>DecryptorType</code> that can cryptographically <code>decrypt</code> something (an <code>InternalCiphertext</code>), resulting in an <code>InternalPlaintext</code> (or <code>none</code>, if decryption fails).</li> </ul> <ul> <li>a type <code>VerifierType</code> that can cryptographically <code>verify</code> that an <code>ExternalCommitment</code> (or cryptographic signature) corresponds to a given message (an <code>ExternalSignable</code>), and was signed by the <code>SignerType</code> corresponding to this <code>VerifierType</code>.</li> </ul> <ul> <li>a type <code>EncryptorType</code> that can cryptographically <code>encrypt</code> an <code>ExternalPlaintext</code> (message) to create an <code>ExternalCiphertext</code> readable only by the corresponding <code>DecryptorType</code>.</li> </ul> <p>Properties are inherited from <code>Verifier</code>, <code>Encryptor</code>, <code>Signer</code>, and <code>Decryptor</code>.</p> <pre><code>type Identity\n  SignerType\n  InternalSignable\n  InternalCommitment\n  DecryptorType\n  InternalCiphertext\n  InternalPlaintext\n  VerifierOrdKeyType\n  VerifierType\n  ExternalSignable\n  ExternalCommitment\n  EncryptorOrdKeyType\n  EncryptorType ExternalPlaintext ExternalCiphertext\n   :=\n  mkIdentity@{\n    internalIdentity : InternalIdentity SignerType InternalSignable InternalCommitment DecryptorType InternalPlaintext InternalCiphertext;\n    externalIdentity : ExternalIdentity VerifierOrdKeyType VerifierType ExternalSignable ExternalCommitment EncryptorOrdKeyType EncryptorType ExternalPlaintext ExternalCiphertext\n  };\n</code></pre>","tags":["system-architecture","identity"],"boost":2},{"location":"arch/system/identity/identity.html#signsfor-relation","title":"SignsFor Relation","text":"<p>Some identities may have the authority to sign statements on behalf of other  identities. For example, Alice might grant Bob the authority to sign arbitrary messages on her behalf. We write this relationship as Bob <code>signsFor</code> Alice.</p> <p>In general, <code>signsFor</code> is a partial order over identities. This means <code>signsFor</code> is transitive: if A <code>signsFor</code> B and B <code>signsFor</code> C, then A <code>signsFor</code> C. The <code>signsFor</code> relation becomes especially useful with regard to composed identities, discussed below.</p>","tags":["system-architecture","identity"],"boost":2},{"location":"arch/system/identity/identity.html#signsfor-evidence","title":"SignsFor Evidence","text":"<p>We do not specify all the ways one might know if one identity <code>signsFor</code> another. In general, an Identity Engine might accept (and perhaps store) a variety of forms of evidence as proof. As one simple form of evidence, we can specify a format for signed statements from B that proves some specified A <code>signsFor</code> B.</p> <p>Note that <code>signsFor</code> evidence cannot be revoked, and so a <code>signsFor</code> relation is not stateful: it cannot depend on the current state of, for example, a blockchain.</p>","tags":["system-architecture","identity"],"boost":2},{"location":"arch/system/identity/identity.html#signsfor-juvix-type","title":"SignsFor Juvix Type","text":"<p>Formally, a <code>signsFor</code> relation requires a type of evidence, and a  <code>Verifier</code> structure. This codifies a belief about what <code>VerifierType</code>'s <code>Commitments</code> are  \"at least as good as\" another <code>VerifierType</code>'s. Evidence can be signed statements, proofs, or even local state about beliefs.</p> <p>For example, suppose <code>Alice</code> wants to grant authority to <code>Bob</code> to  <code>sign</code> on her behalf. Nodes who want to take this into account might accept some sort of  <code>e : Evidence</code>, perhaps a signed statement from <code>Alice</code>, so that they  can recognize that <code>signsFor e (Bob, Alice)</code>.</p> <p>Note that <code>signsFor</code> is not symmetric: <code>signsFor e (x,y)</code> does not  imply that any <code>z</code> exists such that <code>signsFor z (y,x)</code>.</p> <pre><code>type SignsFor OrdKey VerifierType Signable Commitment Evidence :=\n  mkSignsFor@{\n    verifier : Verifier OrdKey VerifierType Signable Commitment;\n    signsFor : Evidence -&gt; (Pair VerifierType VerifierType) -&gt; Bool\n  };\n</code></pre>","tags":["system-architecture","identity"],"boost":2},{"location":"arch/system/identity/identity.html#signsfor-equivalence","title":"SignsFor Equivalence","text":"<p>We can also define a kind of identity equivalence : A <code>signsSameAs</code> B  precisely when A <code>signsFor</code> B and B <code>signsFor</code> A. This means that (in  general), if you want to sign a message as A, but for whatever reason it's cheaper to sign a message as B, it's safe to just use B instead, and vice  versa.</p>","tags":["system-architecture","identity"],"boost":2},{"location":"arch/system/identity/identity.html#readsfor-relation","title":"ReadsFor Relation","text":"<p>Similar to <code>signsFor</code>, it is useful to sometimes note that one identity can read  information encrypted to another identity. For example, suppose Alice gives her private <code>DecryptorType</code> to Bob, and wants to let everyone know that Bob can  now read anything encrypted to Alice. Nodes who want to take this into  account might accept some sort of <code>evidence</code>, perhaps a signed statement from Alice, so that they can recognize that Bob <code>readsFor</code> Alice.</p> <p>Like <code>signsFor</code>, <code>readsFor</code> is a partial order over identities. This means <code>readsFor</code> is transitive: if A <code>readsFor</code> B and B <code>readsFor</code> C, then A <code>readsFor</code> C. The <code>readsFor</code> relation becomes especially useful with regard to composed identities, discussed below.</p>","tags":["system-architecture","identity"],"boost":2},{"location":"arch/system/identity/identity.html#readsfor-evidence","title":"ReadsFor Evidence","text":"<p>We do not specify all the ways one might know if one identity <code>readsFor</code>  another. In general, an Identity Engine might accept (and perhaps store) a variety of forms of evidence as proof. As one simple form of  evidence, we can specify a format for signed statements from B that proves A <code>readsFor</code> B.</p>","tags":["system-architecture","identity"],"boost":2},{"location":"arch/system/identity/identity.html#readsfor-juvix-type","title":"ReadsFor Juvix Type","text":"<p>Formally, a <code>readsFor</code> relation requires a type of evidence, and an  <code>Encryptor</code> structure. This codifies a belief about what <code>Decryptor</code>s can read other  <code>Encryptor</code>s ciphertext. Evidence can be signed statements, proofs, or even local state about beliefs.</p> <p>Specifically, if a node expresses a <code>readsFor</code> relation, and  <code>readsFor e (x,y)</code>, then the node believes that any node knowing the  decryptor corresponding to <code>x</code> can decrypt <code>encrypt y p</code>. If there is some Plaintext <code>p</code> such that some node knowing a decryptor  corresponding to <code>x</code> cannot read <code>encrypt y p</code>, then the node's  beliefs, as encoded in the <code>readsFor</code> relation, are incorrect.</p> <p>For example, suppose <code>Alice</code> gives her private <code>DecryptorType</code> to <code>Bob</code>,  and wants to let everyone know that <code>Bob</code> can now read anything  encrypted to <code>Alice</code>. Nodes who want to take this into account might accept some sort of  <code>e : Evidence</code>, perhaps a signed statement from <code>Alice</code>, so that they  can recognize that <code>readsFor e (Bob, Alice)</code>.</p> <p>Note that <code>readsFor</code> is not symmetric: <code>readsFor e (x,y)</code> does not  imply that any <code>z</code> exists such that <code>readsFor z (y,x)</code>.</p> <pre><code>type ReadsFor (OrdKey EncryptorType Plaintext Ciphertext Evidence : Type) :=\n  mkReadsFor {\n    encryptor : Encryptor OrdKey EncryptorType Plaintext Ciphertext;\n    readsFor : Evidence -&gt; (Pair EncryptorType EncryptorType) -&gt; Bool\n  }\n</code></pre>","tags":["system-architecture","identity"],"boost":2},{"location":"arch/system/identity/identity.html#equivalence","title":"Equivalence","text":"<p>We can also define a kind of identity equivalence: A <code>readsSameAs</code> B precisely when A <code>readsFor</code> B and B <code>readsFor</code> A. This means that, in general, if you want to encrypt a message to A, but for whatever reason it's cheaper to encrypt a message for B, it's safe to just use B instead, and vice versa.</p> <p>In total, A <code>equivalent</code> B when A <code>readsSameAs</code> B and A <code>signsSameAs</code> B. This means that (in general) A and B can be used interchangeably.</p>","tags":["system-architecture","identity"],"boost":2},{"location":"arch/system/identity/identity.html#composition","title":"Composition","text":"<p>There are a variety of ways to refer to groups of identities as  single, larger identities.</p>","tags":["system-architecture","identity"],"boost":2},{"location":"arch/system/identity/identity.html#threshold-composition","title":"Threshold Composition","text":"<p>Suppose we want an identity M that refers to any majority from a  set of shareholders. A signature from M would require that a majority of shareholders  participated in signing, and encrypting information for M would  require that a majority of shareholders participate in decryption. To construct M, we start with a set of shareholder identities, each  paired with a weight (their share), and define a weight threshold  which specifies the minimum weight for a \"majority.\"</p> <p>There are several ways we could imagine constructing Threshold  Composition Identities, but without specifying anything about the  underlying identities:</p> <ul> <li>A threshold composition identity signature is a map from (hashes of)    external identities, to signatures.   To verify a signature for some message <code>x</code>, we verify each signature    with <code>x</code> and its external identity, and check that the weights of    the external identities sum to at least the threshold.</li> </ul> <ul> <li>A threshold composition identity encrypted message is a map from    (hashes of) external identities, to ciphertexts.   To decrypt, any subset of internal identities with weights summing    to at least the threshold must decrypt their corresponding    ciphertexts, and the resulting plaintexts must be combined using an    erasure coding scheme.</li> </ul>","tags":["system-architecture","identity"],"boost":2},{"location":"arch/system/identity/identity.html#threshold-composition-juvix-type-signer-and-verifier","title":"Threshold Composition Juvix Type (Signer and verifier)","text":"<p>A <code>ThresholdCompose</code> <code>VerifierType</code> consists of a  threshold (<code>Nat</code>), and a set of <code>VerifierType</code>s, each paired with a  weight (<code>Nat</code>).  (this set is encoded as a <code>Map.map</code> from hashes of <code>verifiers</code> to   <code>Pair Nat VerifierType</code> pairs). <code>Commitments</code> are simply <code>Map</code>s from hashes of the underlying  identities to <code>Commitments</code> signed by that identitity. A <code>Commitment</code> verifies iff the set of valid Commitments included  correspond to a set of <code>verifiers</code> whose weights sum to at least  the threshold. Note that this satisfies both signatures <code>Verifier</code> and <code>Signer</code>.</p> <p>In general, <code>ThresholdCompose</code> <code>SignerType</code>s and <code>VerifierType</code>s may not be  used much directly. Instead, nodes can make more efficient identities (using cryptographic  signature aggregation techniques), and express their relationship to  <code>ThresholdCompose</code> <code>VerifierType</code>s as a <code>SignsFor</code> relationship. This will let nodes reason about identities using simple  <code>ThresholdCompose</code> <code>VerifierType</code>s, while actually using more efficient  implementations.</p> <p>Formally, to specify a <code>ThresholdCompose</code>, we need:</p> <ul> <li><code>verifier</code>, the structure of the underlying <code>Verifiers</code>.</li> </ul> <ul> <li><code>signer</code>, the corresponding structure of the underlying <code>Signers</code>.</li> </ul> <ul> <li><code>map : OrdMap</code>, to be used to encode weights and <code>Commitment</code>s.   (Note that this needs the <code>OrdKey</code> to be the hash type of the    underlying <code>verifier</code>)</li> </ul> <ul> <li><code>thresholdComposeHash</code>, which specifies a <code>hash</code> function that can    hash our composed <code>VerifierType</code>s (type <code>ComposeHashable VerifierType MapCon</code>).</li> </ul> <pre><code>type ComposeHashable (VerifierType : Type) (MapCon : Type -&gt; Type) :=\n  mkComposeHashable {\n    threshold : Nat;\n    weights : MapCon (Pair Nat VerifierType)\n  };\n</code></pre> <p>A <code>ThresholdCompose</code> structure provides:</p> <ul> <li><code>map : OrdMap</code> the underlying <code>OrdMap</code> used in    <code>VerifierType</code> and <code>Commitment</code></li> </ul> <ul> <li><code>underlyingVerifier : Verifier</code> the structure describing    the types of the underlying <code>VerifierType</code>s which can be composed.</li> </ul> <ul> <li><code>underlyingSigner : Signer</code> the structure describing    the types of the underlying <code>SignerType</code>s which can be composed.</li> </ul> <ul> <li><code>VerifierHash : HASH</code> describes the hash function for    hashing these composed <code>verifiers</code></li> </ul> <ul> <li>The <code>SignerType</code> type of the composed verifiers is the type of composed signers.    These are just <code>MapCon Commitment</code>, meaning each is    stored under the hash of the corresponding    <code>VerifierType</code>.    This <code>SignerType</code> does not need to encode weights or threshold.</li> </ul> <ul> <li>The <code>VerifierType</code> type of composed verifiers. These are    <code>ComposeHashable VerifierType MapCon</code></li> </ul> <ul> <li>The <code>Signable</code> type , being the type of message that can be signed. This is    exactly the same as what the underlying verifiers can sign    (<code>Signable</code> of <code>underlyingVerifier</code>).</li> </ul> <ul> <li>The <code>Commitment</code> type describes composed signatures, these are a    <code>MapCon</code> from hashes of underlying verifiers to signatures    (<code>Commitment</code> of <code>underlyingVerifier</code>)</li> </ul> <ul> <li>The <code>sign</code> function creates a <code>Commitment</code> using all    <code>underlyingSigner</code> <code>SignerType</code>s in the composed <code>SignerType</code>.</li> </ul> <ul> <li>The <code>verify</code> function returns true iff the set of valid Commitments included    correspond to a set of <code>underlyingVerifier</code> <code>VerifierType</code>s whose weights    sum to at least the threshold.</li> </ul> <ul> <li>The <code>signerCompose</code> function constructs a composed <code>SignerType</code> from a list of    <code>Pair VerifierType SignerType</code> pairs.    Note that each <code>SignerType</code> must be paired with its correct <code>VerifierType</code>,     or the composed <code>SignerType</code> will not produce verifiable     <code>Commitment</code>s.</li> </ul> <ul> <li> <p>The <code>verifierCompose</code> function is useful for constructing the composition of    a list of verifiers.   Returns a composed <code>VerifierType</code>.   Its arguments are:</p> <ul> <li>the threshold (<code>Nat</code>)</li> </ul> <ul> <li>a <code>list</code> of weights(<code>Nat</code>), <code>VerifierType</code> pairs.</li> </ul> </li> </ul> <ul> <li>The <code>verifierAnd</code> function creates a composed <code>VerifierType</code> that is the \"&amp;&amp;\" of    two input verifiers: a <code>SignerType</code> must encode the information of the    signers for both <code>x</code> and <code>y</code> to sign statements <code>verifierAnd x y</code>    will verify.</li> </ul> <ul> <li>The <code>verifierOr</code> function creates a composed <code>VerifierType</code> that is the \"||\" of    two input verifiers: a <code>SignerType</code> must encode the information of the    signers for either <code>x</code> or <code>y</code> to sign statements <code>verifierOr x y</code>    will verify.</li> </ul> <pre><code>type ThresholdCompose\n  ( OrdKey : Type ) ( MapCon : Type -&gt; Type )\n  ( VerifierType Signable Commitment SignerType VerifierHashOrdKeyType : Type)\n  :=\n  mkThresholdCompose {\n    map : OrdMap OrdKey MapCon;\n    underlyingVerifier : Verifier OrdKey VerifierType Signable Commitment;\n    underlyingSigner : Signer SignerType Signable Commitment;\n    verifierHash : HASH VerifierHashOrdKeyType (ComposeHashable VerifierType MapCon);\n\n    sign : MapCon SignerType -&gt; Signable -&gt; MapCon Commitment;\n    verify : (ComposeHashable VerifierType MapCon) -&gt; Signable -&gt; MapCon Commitment -&gt; Bool;\n    signerCompose : List (Pair VerifierType SignerType) -&gt; MapCon SignerType;\n    verifierCompose : Nat -&gt; List (Pair Nat VerifierType) -&gt; (ComposeHashable VerifierType MapCon);\n    verifierAnd : VerifierType -&gt; VerifierType -&gt; (ComposeHashable VerifierType MapCon);\n    verifierOr : VerifierType -&gt; VerifierType -&gt; (ComposeHashable VerifierType MapCon);\n  };\n</code></pre> <pre><code>projectVerifier\n  { MapCon : Type -&gt; Type }\n  { OrdKey VerifierType Signable Commitment SignerType VerifierHashOrdKeyType : Type }\n  ( tc : ThresholdCompose OrdKey MapCon VerifierType Signable Commitment SignerType VerifierHashOrdKeyType ) :\n  Verifier VerifierHashOrdKeyType (ComposeHashable VerifierType MapCon) Signable (MapCon Commitment) :=\n  Verifier.mkVerifier@{\n    verify := ThresholdCompose.verify tc;\n    verifierHash := ThresholdCompose.verifierHash tc;\n  };\n</code></pre> <pre><code>ThresholdComposeFunctor\n  { MapCon : Type -&gt; Type }\n  { OrdKey VerifierType Signable Commitment SignerType VerifierHashOrdKeyType : Type }\n  (verifier : Verifier OrdKey VerifierType Signable Commitment)\n  (signer : Signer SignerType Signable Commitment)\n  (mapIn : OrdMap OrdKey MapCon)\n  (thresholdComposeHash : HASH VerifierHashOrdKeyType (ComposeHashable VerifierType MapCon)) :\n  ThresholdCompose\n    OrdKey MapCon\n    VerifierType Signable Commitment\n    SignerType\n    VerifierHashOrdKeyType\n  :=\n  ThresholdCompose.mkThresholdCompose@{\n    map := mapIn;\n    underlyingVerifier := verifier;\n    underlyingSigner := signer;\n    verifierHash := thresholdComposeHash;\n    sign := \\ {s m := OrdMap.map map \\ { i := Signer.sign underlyingSigner i m } s};\n    verify := \\ {\n      | (ComposeHashable.mkComposeHashable t ws) s c := (\n          t &lt;= (\n            OrdMap.foldl map \\{(mkPair x y) := x + y} 0 (\n              OrdMap.intersectWith map (\n                \\{ | (mkPair (mkPair w v) x) :=\n                      if | (Verifier.verify underlyingVerifier v s x) := w\n                         | else := 0\n                }\n            ) (mkPair ws c)))\n      )\n    };\n\n    signerCompose := \\{ l :=\n        foldl\n        \\{ m (mkPair v s) :=\n          OrdMap.insert map (mkPair m (mkPair (\n            HASH.hash (Verifier.verifierHash underlyingVerifier) v\n          ) s))\n        }\n        (OrdMap.empty map) l\n    };\n\n    verifierCompose := \\{\n      threshold weights :=\n        (ComposeHashable.mkComposeHashable threshold\n          (foldl\n            \\ { m (mkPair w v) :=\n              OrdMap.insert map (mkPair m (mkPair (\n                HASH.hash (Verifier.verifierHash underlyingVerifier) v\n              ) (mkPair w v)))\n            }\n            (OrdMap.empty map) weights\n        ))\n    };\n\n    verifierAnd := \\{ x y := verifierCompose 2 [(mkPair 1 x); (mkPair 1 y)]};\n    verifierOr := \\{ x y := verifierCompose 1 [(mkPair 1 x); (mkPair 1 y)] };\n  };\n</code></pre> <p>While this construction is rather naive, it is general, and crucially, we can reason about  equivalence with any number of more interesting schemes:</p> <ul> <li>We can show that a threshold RSA signature scheme <code>signsSameAs</code> as a Threshold Composition    Identity.</li> </ul> <ul> <li>We can show that a secret sharing scheme <code>readsSameAs</code> a Threshold Composition Identity.</li> </ul> <p>By phrasing our discussion in terms of equivalence and Threshold Composition Identities, we can  abstract over the actual cryptography used. We can also derive some <code>signsFor</code> and <code>readsFor</code>  relations that must hold, by looking at the relations that must hold for Threshold Composition Identities:</p>","tags":["system-architecture","identity"],"boost":2},{"location":"arch/system/identity/identity.html#signsfor-threshold-composition","title":"<code>signsFor</code> Threshold Composition","text":"<p>Like any identity, Threshold Composition Identities can define any number of ways to delegate signing power, or be delegated signing power. However, some cases should always hold: A <code>signsFor</code> B if every identity in A has no more weight (divided by threshold) than identities it <code>signsFor</code> in B. This implies that any collection of identities that can sign as A can also sign as B.</p> <p>A <code>signsFor</code> relation for easy comparison of   <code>ThresholdCompose</code> <code>VerifierType</code>s  x <code>signsFor</code> y if every underlying VerifierType in x has no more   weight (divided by threshold) as verifiers it <code>signsFor</code> in y. This implies that anything which can sign as x can also sign  as y.</p> <p>This requires an underlying <code>S : SignsFor</code> for comparing the weighted  signers in x and y, which in turn may require evidence. No additional evidence is required.</p> <p>Other parameters necessary to define the <code>ThresholdCompose</code> <code>verifiers</code> include:</p> <ul> <li><code>signer</code>, the corresponding structure of the underlying <code>signers</code>.</li> </ul> <ul> <li><code>map : OrdMap</code>, to be used to encode weights and <code>Commitment</code>s.   (Note that this needs <code>OrdKey</code> to be the hash type of the    underlying <code>verifier</code>)</li> </ul> <ul> <li><code>thresholdComposeHash</code>, which specifies a <code>hash</code> function that can    hash our composed <code>VerifierType</code>s (type    <code>ComposeHashable VerifierType MapCon</code>).</li> </ul> <pre><code>type ThresholdComposeSignsFor\n  ( OrdKey VerifierType Signable Commitment Evidence : Type )\n  ( MapCon : Type -&gt; Type )\n  ( VerifierHashOrdKeyType )\n  :=\n  mkThresholdComposeSignsFor {\n    underlyingSignsFor : SignsFor OrdKey VerifierType Signable Commitment Evidence;\n    verifier : ThresholdCompose OrdKey MapCon VerifierType Signable Commitment VerifierType VerifierHashOrdKeyType;\n    signsFor : Evidence -&gt; Pair (ComposeHashable VerifierType MapCon) (ComposeHashable VerifierType MapCon) -&gt; Bool;\n  };\n</code></pre> <pre><code>projectSignsFor\n  { OrdKey VerifierType Signable Commitment Evidence }\n  { MapCon : Type -&gt; Type }\n  { VerifierHashOrdKeyType : Type }\n  ( tc : ThresholdComposeSignsFor OrdKey VerifierType Signable Commitment Evidence MapCon VerifierHashOrdKeyType ) :\n  SignsFor VerifierHashOrdKeyType (ComposeHashable VerifierType MapCon) Signable (MapCon Commitment) Evidence :=\n  SignsFor.mkSignsFor@{\n    verifier := projectVerifier (ThresholdComposeSignsFor.verifier tc);\n    signsFor := ThresholdComposeSignsFor.signsFor tc;\n  };\n</code></pre> <pre><code>ThresholdComposeSignsForFunctor\n  { OrdKey VerifierType Signable Commitment Evidence }\n  { MapCon : Type -&gt; Type }\n  { VerifierHashOrdKeyType : Type }\n  ( S : SignsFor OrdKey VerifierType Signable Commitment Evidence )\n  ( signer : Signer VerifierType Signable Commitment)\n  ( map : OrdMap OrdKey MapCon )\n  ( thresholdComposeHash : HASH VerifierHashOrdKeyType (ComposeHashable VerifierType MapCon) ) :\n  ThresholdComposeSignsFor OrdKey VerifierType Signable Commitment Evidence MapCon VerifierHashOrdKeyType\n  :=\n  ThresholdComposeSignsFor.mkThresholdComposeSignsFor@{\n    underlyingSignsFor := S;\n    verifier := ThresholdComposeFunctor (SignsFor.verifier underlyingSignsFor) signer map thresholdComposeHash;\n    signsFor := \\{\n      e (mkPair (ComposeHashable.mkComposeHashable t0 w0) (ComposeHashable.mkComposeHashable t1 w1)) :=\n        OrdMap.all map\n          \\{ (mkPair w v) :=\n              (w * t1) &lt;=\n              ((OrdMap.foldl map\n                \\{ (mkPair (mkPair x v1) s) :=\n                    if | (SignsFor.signsFor underlyingSignsFor e (mkPair v v1)) := x + s\n                       | else := s\n                }\n                0 w1\n                ) * t0)\n          }\n          w0\n    };\n  };\n</code></pre>","tags":["system-architecture","identity"],"boost":2},{"location":"arch/system/identity/identity.html#encryptor-threshold-composition","title":"<code>Encryptor</code> Threshold Composition","text":"<p>DANGER: NOT YET IMPLEMENTED</p> <p>Implementing this requires secret sharing.  The threshold composed <code>encryptor</code> is a threshold, and a set of weights  paired with <code>UnderlyingEncryptor.encryptor</code>s. There are stored in a <code>Map.map</code>  under their hashes, to ensure uniqueness.</p> <p>The idea is that an encrypted <code>plaintext</code> should only be  decryptable by a <code>decryptor</code> that encodes the information from a  set of <code>decryptor</code>s corresponding to a set of <code>encryptor</code>s whose  weight sums to at least the threshold.</p> <pre><code>type ThresholdComposeEncryptor\n  (OrdKey EncryptorType Plaintext Ciphertext : Type)\n  (MapCon : Type -&gt; Type)\n  (EncryptorHashOrdKeyType : Type)\n  :=\n  mkThresholdComposeEncryptor@{\n    map : OrdMap OrdKey MapCon;\n    underlyingEncryptor : Encryptor OrdKey EncryptorType Plaintext Ciphertext;\n    encryptorHash : HASH EncryptorHashOrdKeyType (ComposeHashable EncryptorType MapCon);\n    compose : Nat -&gt; List (Pair Nat EncryptorType) -&gt; ComposeHashable EncryptorType MapCon;\n    encrypt : (ComposeHashable EncryptorType MapCon) -&gt; Plaintext -&gt; Ciphertext;\n  };\n</code></pre> <pre><code>projectEncryptor\n  {OrdKey EncryptorType Plaintext Ciphertext}\n  {MapCon : Type -&gt; Type}\n  {EncryptorHashOrdKeyType}\n  (tc : ThresholdComposeEncryptor OrdKey EncryptorType Plaintext Ciphertext MapCon EncryptorHashOrdKeyType) :\n  Encryptor EncryptorHashOrdKeyType (ComposeHashable EncryptorType MapCon) Plaintext Ciphertext\n  :=\n  Encryptor.mkEncryptor@{\n    encrypt := ThresholdComposeEncryptor.encrypt tc;\n    encryptorHash := ThresholdComposeEncryptor.encryptorHash tc;\n  };\n</code></pre> <pre><code>axiom encrypt_DUMMY\n  {EncryptorType Plaintext Ciphertext}\n  {MapCon}\n  : (ComposeHashable EncryptorType MapCon) -&gt; Plaintext -&gt; Ciphertext;\n</code></pre> <pre><code>ThresholdComposeEncryptorFunctor\n  {OrdKey EncryptorType Plaintext Ciphertext}\n  {MapCon : Type -&gt; Type}\n  {EncryptorHashOrdKeyType}\n  (encryptor : Encryptor OrdKey EncryptorType Plaintext Ciphertext)\n  (mapIn : OrdMap OrdKey MapCon)\n  (thresholdComposeHash : HASH EncryptorHashOrdKeyType (ComposeHashable EncryptorType MapCon)) :\n  ThresholdComposeEncryptor OrdKey EncryptorType Plaintext Ciphertext MapCon EncryptorHashOrdKeyType\n  := ThresholdComposeEncryptor.mkThresholdComposeEncryptor@{\n    map := mapIn;\n    underlyingEncryptor := encryptor;\n    encryptorHash := thresholdComposeHash;\n    compose := \\{\n      t w :=\n        ComposeHashable.mkComposeHashable@{\n          threshold := t;\n          weights :=\n            foldl\n              \\{m (mkPair w e) :=\n                OrdMap.insert map (mkPair m (mkPair (HASH.hash (Encryptor.encryptorHash underlyingEncryptor) e) (mkPair w e)))\n              }\n              (OrdMap.empty map) w\n        }\n    };\n    encrypt := encrypt_DUMMY;\n  };\n</code></pre>","tags":["system-architecture","identity"],"boost":2},{"location":"arch/system/identity/identity.html#readsfor-threshold-composition","title":"<code>readsFor</code> Threshold Composition","text":"<p>Like any identity, ThresholdCompositionIdentities can have arbitrary  <code>readsFor</code> relationships. However, some cases should always hold : A <code>readsFor</code> B if every  identity in A has no more weight (divided by threshold) than  identities it <code>readsFor</code> in B. This implies that any collection of identities that can read messages  encrypted with A can also read messages encrypted as B.</p> <p>A <code>readsFor</code> relation for easy comparison of   <code>ThresholdComposeEncryptor</code> <code>EncryptorType</code>s  x <code>readsFor</code> y if every underlying <code>EncryptorType</code> in x has no more   weight (divided by threshold) as encryptors it <code>readsFor</code> in y. This implies that anything which can decrypt as x can also decrypt  as y.</p> <p>This requires an underlying <code>R : ReadsFor</code> for comparing the weighted  encryptors in  x and y, which in turn may require evidence. No additional evidence is required.</p> <pre><code>type ThresholdComposeReadsFor\n  ( OrdKey EncryptorType Plaintext Ciphertext Evidence : Type )\n  ( MapCon : Type -&gt; Type )\n  ( EncryptorHashOrdKeyType : Type )\n  :=\n  mkThresholdComposeReadsFor@{\n    underlyingReadsFor : ReadsFor OrdKey EncryptorType Plaintext Ciphertext Evidence;\n    encryptor : ThresholdComposeEncryptor OrdKey EncryptorType Plaintext Ciphertext MapCon EncryptorHashOrdKeyType;\n    readsFor : Evidence -&gt; Pair (ComposeHashable EncryptorType MapCon) (ComposeHashable EncryptorType MapCon) -&gt; Bool;\n  };\n</code></pre> <pre><code>projectReadsFor\n  { OrdKey VerifierType Signable Commitment Evidence }\n  { MapCon : Type -&gt; Type }\n  { EncryptorHashOrdKeyType : Type }\n  ( tc : ThresholdComposeReadsFor\n          OrdKey\n          VerifierType\n          Signable\n          Commitment\n          Evidence\n          MapCon\n          EncryptorHashOrdKeyType ) :\n    ReadsFor\n    EncryptorHashOrdKeyType\n    (ComposeHashable VerifierType MapCon)\n    Signable\n    Commitment\n    Evidence\n  := ReadsFor.mkReadsFor@{\n    encryptor := projectEncryptor (ThresholdComposeReadsFor.encryptor tc);\n    readsFor := ThresholdComposeReadsFor.readsFor tc;\n  };\n</code></pre> <pre><code>ThresholdComposeReadsForFunctor\n  { OrdKey EncryptorType Plaintext Ciphertext Evidence}\n  { MapCon : Type -&gt; Type }\n  { EncryptorHashOrdKeyType}\n  ( r : ReadsFor OrdKey EncryptorType Plaintext Ciphertext Evidence )\n  ( map : OrdMap OrdKey MapCon )\n  ( thresholdComposeHash : HASH EncryptorHashOrdKeyType (ComposeHashable EncryptorType MapCon) ) :\n  ThresholdComposeReadsFor OrdKey EncryptorType Plaintext Ciphertext Evidence MapCon EncryptorHashOrdKeyType\n  :=\n  ThresholdComposeReadsFor.mkThresholdComposeReadsFor@{\n    underlyingReadsFor := r;\n    encryptor := ThresholdComposeEncryptorFunctor (ReadsFor.encryptor underlyingReadsFor) map thresholdComposeHash;\n    readsFor := \\{\n      e (mkPair (ComposeHashable.mkComposeHashable t0 w0) (ComposeHashable.mkComposeHashable t1 w1)) :=\n        OrdMap.all map\n          \\{ (mkPair w v) :=\n              (w * t1) &lt;=\n              ((OrdMap.foldl map\n                \\{ (mkPair (mkPair x v1) s) :=\n                    if | (ReadsFor.readsFor underlyingReadsFor e (mkPair v v1)) := x + s\n                       | else := s\n                }\n                0 w1\n              ) * t0)\n          }\n          w0\n    };\n  }\n</code></pre>","tags":["system-architecture","identity"],"boost":2},{"location":"arch/system/identity/identity.html#and-identities","title":"\"And\" Identities","text":"<p>We can compose identities with conjunction: A <code>&amp;&amp;</code> B is the identity which requires an agent to have both A's internal identity and B's internal identity to sign or decrypt. It represents A and B working together. In practice, A <code>&amp;&amp;</code> B can be defined as a special case of Threshold composition (see <code>verifierAnd</code> above).</p>","tags":["system-architecture","identity"],"boost":2},{"location":"arch/system/identity/identity.html#or-identities","title":"\"Or\" Identities","text":"<p>We can compose identities with disjunction as well: A <code>||</code> B requires an agent to have either A's internal identity or B's internal identity. It represents either A or B, without specifying which. In practice, A <code>||</code> B can be defined as a special case of Threshold Composition (see <code>verifierOr</code> above).</p> <p>In principle, we could define things differently: Threshold Composition could be defined using <code>&amp;&amp;</code> and <code>||</code> as primitives, by building a disjunction of every possible conjunction that satisfies the threshold. In several important cases, however, this takes much more space to express, so we use the equally general and more numerically efficient threshold composition abstraction.</p>","tags":["system-architecture","identity"],"boost":2},{"location":"arch/system/identity/identity.html#opaque-composition","title":"Opaque Composition","text":"<p>A group of agents can also compose an opaque identity such that composition information is not available to the outside. One example would be using distributed key generation and a threshold cryptosystem e.g. Threshold RSA. Here the agents compute one RSA keypair together, with only shares of the private key being generated by each agent. Decryption of messages encrypted to the single public key then requires cooperation of a subset of agents holding key shares, fulfilling the threshold requirements. This group would have a single External Identity based on a regular RSA public key, and it would not necessarily be clear how the identity was composed.</p> <p>Specific evidence could prove that this threshold cryptosystem identity is <code>equivalent</code> to some  <code>ThresholdCompose</code> identity. This kind of proof requires <code>readsFor</code> and <code>signsFor</code> relations tailored to the cryptosystem used. Once equivalence is proven, however, one could use the threshold  cryptosystem identity for efficiency, but reason using the  <code>ThresholdCompose</code> identity.</p>","tags":["system-architecture","identity"],"boost":2},{"location":"arch/system/identity/identity.html#special-identities","title":"Special identities","text":"<p>The following special identities illustrate the generality of our identity abstractions:</p>","tags":["system-architecture","identity"],"boost":2},{"location":"arch/system/identity/identity.html#true-all","title":"\"true / All\"","text":"<p>Anyone can sign and decrypt (<code>verify</code> returns true and <code>encrypt</code> returns the <code>Plaintext</code>). No secret knowledge is required, so all agents can take on this identity.</p> <p>The true identity preserves structure under conjunction (x <code>&amp;&amp;</code> true <code>equivalent</code> x) and forgets structure under disjunction (x <code>||</code> true <code>equivalent</code> true).</p>","tags":["system-architecture","identity"],"boost":2},{"location":"arch/system/identity/identity.html#false-none","title":"\"false / None\"","text":"<p>No one can sign or decrypt (<code>verify</code> returns false and <code>encrypt</code>  returns empty string). No secret knowledge exists that fulfills these  requirements, so no agent can take on this identity.</p> <p>The false identity forgets structure under disjunction  (x <code>&amp;&amp;</code> false <code>equivalent</code> false) and preserves structure under  disjunction (x <code>||</code> false <code>equivalent</code> x).</p>","tags":["system-architecture","identity"],"boost":2},{"location":"arch/system/identity/identity.html#identity-names","title":"Identity Names","text":"<p>Sometimes it is useful to have a name for an external identity before the relevant cryptographic values are available. For example, we might refer to \"a quorum of validators from chain <code>X</code> at epoch <code>Y</code>\". Before epoch <code>Y</code> has begun, chain <code>X</code> may not have yet decided who constitutes a quorum.</p> <p>It would be possible to build a <code>Verifier</code>, where the evidence that the signers are in fact a quorum of validators from chain <code>X</code> at epoch <code>Y</code> is part of the signature. One might later build a simpler <code>Verifier</code>, which elides this evidence, and then prove that the two <code>signsSameAs</code> using the evidence. However, barring some really exciting cryptography, we'd need to know the quorums from chain <code>X</code> at epoch <code>Y</code> before we could make an <code>Encryptor</code>.</p> <p>We therefore introduce a new type, Identity Name, which represents a placeholder to be filled in when an appropriate external identity can be found. Specifically, each type of identity name comes with a predicate, which can be satisfied by an external identity, and accompanying evidence. Identity names can also be hashed, like external identities.</p> <p>Identity names can be described in two structures: one for checking that  a <code>VerifierType</code> corresponds with an <code>IdentityName</code>, and one for checking  that an <code>EncryptorType</code> corresponds with an <code>IdentityName</code>. The same name can refer to both a <code>VerifierType</code> and an <code>EncryptorType</code>.</p>","tags":["system-architecture","identity"],"boost":2},{"location":"arch/system/identity/identity.html#verifier-name-juvix-type","title":"Verifier Name Juvix Type","text":"<p>An <code>IdentityName</code> can be mapped to an appropriate <code>VerifierType</code>  when suitable <code>Evidence</code> is found. Here, <code>checkVerifierName</code> defines what evidence is acceptable for a  <code>VerifierType</code>.</p> <p>Note that <code>IdentityName</code>s are also hashable: we require a structure  <code>verifierNameHash</code> that details how to hash them.</p> <pre><code>type VerifierName\n  (OrdKey VerifierType Signable Commitment Evidence IdentityName VerifierNameHashOrdKeyType) :=\n  mkVerifierName {\n    verifier : Verifier OrdKey VerifierType Signable Commitment;\n    checkVerifierName : IdentityName -&gt; VerifierType -&gt; Evidence -&gt; Bool;\n    verifierNameHash : HASH VerifierNameHashOrdKeyType IdentityName\n  };\n</code></pre>","tags":["system-architecture","identity"],"boost":2},{"location":"arch/system/identity/identity.html#encryptor-name-juvix-type","title":"Encryptor Name Juvix Type","text":"<p>An <code>IdentityName</code> can be mapped to an appropriate Encryptor <code>EncryptorType</code>  when suitable <code>Evidence</code> is found. Here, <code>checkEncryptorName</code> defines what evidence is acceptable for an  <code>Encryptor</code> <code>EncryptorType</code>. Note that <code>IdentityName</code>s are also hashable: we require a structure  <code>encryptorNameHash</code> that details how to hash them.</p> <pre><code>type EncryptorName\n  (OrdKey EncryptorType Plaintext Ciphertext Evidence IdentityName EncryptorNameHashOrdKeyType) :=\n  mkEncryptorName {\n    verifier : Encryptor OrdKey EncryptorType Plaintext Ciphertext;\n    checkEncryptorName : IdentityName -&gt; EncryptorType -&gt; Evidence -&gt; Bool;\n    encryptorNameHash : HASH EncryptorNameHashOrdKeyType IdentityName\n  };\n</code></pre> <p>For example, for the identity name \"a quorum of validators from chain <code>X</code> at epoch <code>Y</code>\", a satisfying external identity would be composed from the validators selected for epoch <code>Y</code>, and the accompanying evidence would be a light-client proof from chain <code>X</code> that these are the correct validators for epoch <code>Y</code>.</p> <p>Note that multiple identity names can refer to the same external identity, and in principle, multiple external identities could have the same identity name. Usually, multiple external identities only have the same identity name when there is Byzantine behaviour, but that is not explicitly part of the identity abstractions at this layer.</p>","tags":["system-architecture","identity"],"boost":2},{"location":"arch/system/identity/identity.html#sub-identities","title":"Sub-Identities","text":"<p>One particularly common case for identity names is when one party (the super-identity) wants to designate a specific name they use to refer to another identity. Here, the super-identity is acting like a certificate authority: they designate which external identity corresponds with this identity name. This sub-identity is often something the super-identity controls: a specific machine they own, or a process they run on that machine. Such a sub-identity might be associated with a string, such as <code>\"acceptor\"</code>, which might designate the process participating in consensus within a validator. In this case, the predicate should check that the super-identity has signed a statement declaring that the external identity matches the sub-identity.</p>","tags":["system-architecture","identity"],"boost":2},{"location":"arch/system/identity/identity.html#notation","title":"\".\" Notation","text":"<p>Because sub-identities using string names are so common, we have a short-cut notation for expressing identity names. Given some identity Alice, for any string <code>\"foo\"</code>, Alice.foo is an identity name. For example, even before they learn anything about Alice, validators might refer to Alice.acceptor to mean the specific process Alice is running to participate in consensus. The identity Alice can sign statements to let people know what external identity they should (immutably) use for Alice.foo or Alice.acceptor. These are left associative, so Alice.foo can designate Alice.foo.bar (shorthand for (Alice.foo).bar) and Alice.foo.bar can designate Alice.foo.bar.baz (shorthand for ((Alice.foo).bar).baz), and so on. These are a special case of sub-identities: X.Y is a sub-identity of X.</p> <p>Formally, we use <code>mkPair (hash Alice) \"foo\"</code> as the Juvix representation of Alice.foo:</p> <p>A specific kind of identity name, wher ethe evidence is a signed  statement from a specified parent saying that it associates this  VerifierType with a specific <code>name</code>.</p> <p>Here,</p> <ul> <li><code>Name</code> is the type the parent identifies with a child.   For example, for <code>name = string</code>, and some identity Alice, we can specify   <code>(hash(Alice),\"bob\")</code>, or Alice.bob, as the identity that   Alice refers to as <code>\"bob\"</code>.</li> </ul> <ul> <li><code>child</code> : <code>Verifier</code> type that can be identified with a name.</li> </ul> <ul> <li> <p><code>parent</code> : <code>Verifier</code> type that signs evidence statements.</p> <p>Crucially, it must be able to sign tuples of the form (string, name, child's hash type) In our example, where Alice refers to Bob as Alice.<code>\"bob\"</code>, <code>child</code> describes Bob, <code>parent</code> describes Alice, and <code>name</code> describes <code>\"bob\"</code>.</p> </li> </ul> <ul> <li><code>hash</code> Describes what will become the <code>verifierNameHash</code>.   Crucially, it must be able to hash pairs of the form   (parent's hash type, name)</li> </ul> <pre><code>SubVerifierFunctor\n  (OrdKey VerifierType Signable Commitment Name ParentOrdKeyType : Type)\n  (child : Verifier OrdKey VerifierType Signable Commitment)\n  (parent : Verifier ParentOrdKeyType VerifierType (Pair String (Pair Name OrdKey)) Commitment)\n  (hash : HASH ParentOrdKeyType (Pair ParentOrdKeyType Name)) :\n  VerifierName OrdKey VerifierType Signable Commitment (Pair VerifierType Commitment) (Pair ParentOrdKeyType Name) ParentOrdKeyType :=\n  VerifierName.mkVerifierName@{\n    verifier := child;\n    checkVerifierName := \\{\n      (mkPair ph n) c (mkPair pv pc) :=\n        (Verifier.verify parent pv (mkPair \"I identify this verifier with this name : \" (mkPair n (HASH.hash (Verifier.verifierHash child) c))) pc) &amp;&amp;\n        ((OrdKey.compare (HASH.ordKey (Verifier.verifierHash parent)) ph (HASH.hash (Verifier.verifierHash parent) pv)) == Equal)\n    };\n    verifierNameHash := hash;\n  }\n</code></pre> <p>In other words, we have a specific, standardized thing an external identity can sign to designate that another external identity corresponds to a \".\" name.</p> <p>Note that we can use \".\" sub-identities for purposes other than identifying identities that the super-identity controls. Alice might have a friend Bob, and designate his external identity as Alice.bob. This is an example of a place where \"sub-identity-ness\" is not transitive: Alice.bob.carol is (Alice.bob).carol, a sub-identity of Alice.bob, so it is up to Bob to designate which external identity he associates with <code>\"carol\"</code>, and Alice has no say: Alice.bob.carol is not a sub-identity of Alice.</p>","tags":["system-architecture","identity"],"boost":2},{"location":"arch/system/identity/identity.html#identity-engine","title":"Identity Engine","text":"<p>In practice, using Identity Names requires each physical machine to maintain a mapping from identity names to known external identities. The machine does not have to store the accompanying evidence for each, although it might be useful to do so sometimes (for example, in order to present to a third party). When any process on that machine wants to do any operation using an identity name instead of an external identity, it can query this mapping to see if there is a known external identity to use for that operation.</p> <p>An Identity Engine can also store evidence for known <code>signsFor</code> and <code>readsFor</code> relationships, and help choose which external identity is most efficient for a task. For example, if an agent wants to encrypt a message to \"a quorum of validators from chain <code>X</code> at epoch <code>Y</code>\", they would first resolving the identity name to an identity (possibly a Threshold Composed Identity), and might then ask if there is some known equivalent identity (such as a threshold encryption identity) with cheaper encryption.</p>","tags":["system-architecture","identity"],"boost":2},{"location":"arch/system/identity/identity.html#identity-name-resolution","title":"Identity Name Resolution","text":"<p>There is no general mechanism for finding external identities (and accompanying evidence) for arbitrary identity names, with arbitrary forms of evidence. However, for some common types of identity names, such as \".\" sub-identities, we can establish a standard server and query language, which participating Identity Engines can query to resolve those identity names.</p>","tags":["system-architecture","identity"],"boost":2},{"location":"arch/system/state/resource_machine/index.html","title":"Index","text":"<pre><code>module arch.system.state.resource_machine.index;\n</code></pre>","tags":["resource-machine","protocol","commitment","nullifier","accumulator","resource logic"],"boost":2},{"location":"arch/system/state/resource_machine/index.html#introduction","title":"Introduction","text":"<p>The Anoma Resource Machine (ARM) is the part of the Anoma protocol that defines and enforces the rules for valid state updates that satisfy users' preferences. The new proposed state is then agreed on by the consensus participants. In that sense the role of the Anoma Resource Machine in the Anoma protocol is similar to the role of the Ethereum Virtual Machine in the Ethereum protocol.</p>","tags":["resource-machine","protocol","commitment","nullifier","accumulator","resource logic"],"boost":2},{"location":"arch/system/state/resource_machine/index.html#data-structures","title":"Data structures","text":"<p>The atomic unit of the ARM state is called a resource. Resources are immutable, they can be created once and consumed once. The system state is represented by the set of active resources: the resources that were created but not nullified.</p> <p>Transactions produced by the ARM represent the proposed state update. They consist of actions, which group resources with the same execution context.</p> <p>Ensuring the correctness of the transaction is achieved with the help of non-interactive proofs attached to it:</p> <ol> <li>to prove the transaction is balanced correctly, there are delta proofs. Balance is the criterion of a transaction's completeness.</li> <li>to prove the transaction complies with the ARM rules, there are compliance proofs. Actions are partitioned into compliance units that define the compliance proof scope.</li> <li>to prove the transaction satisfies the user constraints, there are resource logic proofs.</li> </ol> <p></p>","tags":["resource-machine","protocol","commitment","nullifier","accumulator","resource logic"],"boost":2},{"location":"arch/system/state/resource_machine/index.html#the-role-of-the-arm","title":"The role of the ARM","text":"<p>The ARM is used to create, compose, and verify transactions. It is stateless and run by every node that processes transactions. Anoma users submit their intents to the intent gossip network in the form of unbalanced ARM transactions with metadata, which are received and processed by solvers that output balanced ARM transactions. These transactions are then ordered and finally sent to the executor node, that verifies and executes the transactions in the determined order, updating the global state.</p>","tags":["resource-machine","protocol","commitment","nullifier","accumulator","resource logic"],"boost":2},{"location":"arch/system/state/resource_machine/index.html#the-specification","title":"The specification","text":"<p>This specification describes a common interface shared by all ARM instantiations. Depending on the primitive instantiation choices, the resulting ARM instantiation will have different properties. For example, using zk-SNARKs to create and verify the ARM proofs might result in a succinct or even shielded ARM instantiation. The ARM interface is designed to provide interoperability between different ARM instantiations.</p> <p>The design of the Anoma Resource Machine was significantly inspired by the Zcash protocol.</p> <ul> <li>Keywords: anoma, blockchain technology, protocol design, resource machine</li> </ul>","tags":["resource-machine","protocol","commitment","nullifier","accumulator","resource logic"],"boost":2},{"location":"arch/system/state/resource_machine/data_structures/action/index.html","title":"Action","text":"<p>icon: material/file-document-outline search:   exclude: false   boost: 2</p> <pre><code>module arch.system.state.resource_machine.data_structures.action.index;\n</code></pre>"},{"location":"arch/system/state/resource_machine/data_structures/action/index.html#action","title":"Action","text":"<p>An action is a composite structure of type <code>Action</code> that contains the following components:</p> Component Type Description <code>created</code> <code>OrderedSet Commitment</code> contains commitments of resources created in this action <code>consumed</code> <code>OrderedSet Nullifier</code> contains nullifiers of resources consumed in this action <code>resourceLogicProofs</code> <code>Map Tag (LogicRef, PS.Proof)</code> contains a map of resource logic proofs associated with this action. The key is the <code>self</code> resource for which the proof is computed, the first parameter of the value opens to the required verifying key, the second one is the corresponding proof <code>complianceUnits</code> <code>Set ComplianceUnit</code> The set of transaction's compliance units <code>applicationData</code> <code>Map Tag OrderedSet (BitString, DeletionCriterion)</code> maps tags to relevant application data needed to verify resource logic proofs. The deletion criterion field is described here. The openings are expected to be ordered. <p>Note</p> <p>For function privacy in the shielded contenxt, instead of a logic proof we verify a proof of a logic proof validity - a recursive proof. <code>LogicRefHash</code> type corresponds to the RL VK commitment while verifying key in <code>resourceLogicProofs</code> refers to the key to be used for verification (i.e., verifier circuit verifying key as opposed to a resource logic verifying key). RL VK commitment should be included somewhere else, e.g., <code>applicationData[tag]</code>, and the compliance instance must reference it in <code>refInstance</code> as it is also a compliance proof instance.</p> <p>Actions partition the state change induced by a transaction and limit the resource logics evaluation context: proofs created in the context of an action have access only to the resources associated with the action. A resource is said to be associated with an action if its commitment or nullifier is present in the action's <code>created</code> or <code>consumed</code> correspondingly. A resource is associated with exactly one action. A resource is said to be consumed in the action for a valid action if its nullifier is present in the action's <code>consumed</code> list. A resource is said to be created in the action for a valid action if its commitment is in the action's <code>created</code> list.</p> <p>Note</p> <p>Unlike transactions, actions don't need to be balanced, but if an action is valid and balanced, it is sufficient to create a balanced transaction.</p>"},{"location":"arch/system/state/resource_machine/data_structures/action/index.html#interface","title":"Interface","text":"<ol> <li><code>create(Set (NullifierKey, Resource), Set Resource, ApplicationData) -&gt; Action</code> - creates an action</li> <li><code>delta(Action) -&gt; DeltaHash</code></li> <li><code>verify(Action) -&gt; Bool</code></li> </ol>"},{"location":"arch/system/state/resource_machine/data_structures/action/index.html#proofs","title":"Proofs","text":"<p>For each resource consumed or created in the action, it is required to provide a proof that the logic associated with that resource evaluates to <code>True</code> given the input parameters that describe the state transition induced by the action. The number of such proofs in an action equals to the amount of resources (both created and consumed) in that action, even if some resources have the same logics. Resource logic proofs are further described here.</p>"},{"location":"arch/system/state/resource_machine/data_structures/action/index.html#create","title":"<code>create</code>","text":"<p>Given a set of input resource objects <code>consumedResources: Set (NullifierKey, Resource, CMtreePath)</code>, a set of output resource plaintexts <code>createdResources: Set Resource</code>, and <code>applicationData</code>, including a set of application inputs required by resource logics, an action is computed the following way:</p> <ol> <li>Partition action into compliance units and compute a compliance proof for each unit. Put the information about the units in <code>action.complianceUnits</code></li> <li>For each resource, compute a resource logic proof. Associate each proof with the tag of the resource and the logic hash reference. Put the resulting map in <code>action.resourceLogicProofs</code></li> <li><code>action.consumed = r.nullifier(nullifierKey) for r in consumedResources</code></li> <li><code>action.created = r.commitment() for r in createdResources</code></li> <li><code>action.applicationData = applicationData</code></li> </ol>"},{"location":"arch/system/state/resource_machine/data_structures/action/index.html#verify","title":"<code>verify</code>","text":"<p>Validity of an action can only be determined for actions that are associated with a transaction. Assuming that an action is associated with a transaction, an action is considered valid if all of the following conditions hold:</p> <ol> <li>action input resources have valid resource logic proofs associated with them: <code>verify(RLVerifyingKey, RLInstance, RLproof) = True</code></li> <li>action output resources have valid resource logic proofs associated with them: <code>verify(RLVerifyingKey, RLInstance, RLproof) = True</code></li> <li>all compliance proofs are valid: <code>complianceUnit.verify() = True</code></li> <li>transaction's \\(rts\\) field contains correct <code>CMtree</code> roots (that were actual <code>CMtree</code> roots at some epochs) used to prove the existence of consumed resources in the compliance proofs.</li> </ol>"},{"location":"arch/system/state/resource_machine/data_structures/action/index.html#delta","title":"<code>delta</code>","text":"<p><code>action.delta() -&gt; DeltaHash</code> is a computable component used to compute <code>transactionDelta</code>. It is computed from <code>r.delta()</code> of the resources that comprise the action and defined as <code>action.delta() = sum(cu.delta() for cu in action.complianceUnits)</code>.</p>"},{"location":"arch/system/state/resource_machine/data_structures/action/resource_logic_proof.html","title":"Resource logic proof","text":"<p>icon: material/file-document-outline search:   exclude: false   boost: 2</p> <pre><code>module arch.system.state.resource_machine.data_structures.action.resource_logic_proof;\n</code></pre>"},{"location":"arch/system/state/resource_machine/data_structures/action/resource_logic_proof.html#resource-logic-proof","title":"Resource logic proof","text":"<p>Resource logic proofs attest to validity of resource logics. A resource logic is a computable predicate associated with a resource that constrains the creation and consumption of a resource. Each time a resource is created or consumed, the corresponding resource logic proof is required in order for the action (and thus the transaction) to be valid.</p>"},{"location":"arch/system/state/resource_machine/data_structures/action/resource_logic_proof.html#proving","title":"Proving","text":"<p>When proving, resource logics take as input resources created and consumed in the action:</p>"},{"location":"arch/system/state/resource_machine/data_structures/action/resource_logic_proof.html#instance","title":"Instance","text":"<ol> <li>Resource tag \u2014 identifies the current resource being checked</li> <li><code>isConsumed</code> - a flag that tells the logic if the resource is consumed or created</li> <li><code>action.consumed</code> (possibly excluding the tagged resource, if it is consumed)</li> <li><code>action.created</code> (possibly excluding the tagged resource, if it is created)</li> <li><code>action.applicationData[tag]</code></li> </ol>"},{"location":"arch/system/state/resource_machine/data_structures/action/resource_logic_proof.html#witness","title":"Witness","text":"<ol> <li> <p>for consumed resources: <code>OrderedSet (Resource, NullifierKey)</code></p> </li> <li> <p>for created resources: <code>OrderedSet Resource</code></p> </li> <li> <p>Application inputs</p> </li> </ol> <p>Note</p> <p>The instance and witness values are expected to correspond to each other: the first tag in the instance corresponds to the first resource object in the witness (and corresponds to the resource being checked), and so on. Note that the tag has to be recomputed from the object to verify that it indeed corresponds to the tag (this condition is included in the constraints)</p>"},{"location":"arch/system/state/resource_machine/data_structures/action/resource_logic_proof.html#constraints","title":"Constraints","text":"<ol> <li>Created commitment integrity: <code>r.commitment() = cm</code></li> <li>Consumed nullifier integrity: <code>r.nullifier(nullifierKey) = nf</code></li> <li>Application constraints</li> </ol>"},{"location":"arch/system/state/resource_machine/data_structures/compliance_unit/compliance_proof.html","title":"Compliance proof","text":"<pre><code>module arch.system.state.resource_machine.data_structures.compliance_unit.compliance_proof;\n</code></pre>","boost":2},{"location":"arch/system/state/resource_machine/data_structures/compliance_unit/compliance_proof.html#compliance-proof","title":"Compliance proof","text":"<p>Compliance proofs are created by <code>ComplianceProvingSystem</code> and computed over compliance units. Compliance proofs ensure that the provided state transition complies with the resource machine definitions.</p>","boost":2},{"location":"arch/system/state/resource_machine/data_structures/compliance_unit/compliance_proof.html#compliance-inputs","title":"Compliance inputs","text":"","boost":2},{"location":"arch/system/state/resource_machine/data_structures/compliance_unit/compliance_proof.html#instance","title":"Instance","text":"Name Type Description <code>consumed</code> <code>OrderedSet (NullifierRef, RootRef, LogicRef)</code> Includes nullifiers' references of all consumed resources in the compliance unit, root references, and commitments to <code>logicRef</code> resource components (used for referencing the <code>logicRef</code> without explicitly using the component value) for consumed resources <code>created</code> <code>OrderedSet (CommitmentRef, LogicRef)</code> Commitments' references of all created resources in the compliance unit <code>unitDelta</code> <code>DeltaHash</code> Unit delta","boost":2},{"location":"arch/system/state/resource_machine/data_structures/compliance_unit/compliance_proof.html#witness","title":"Witness","text":"<ol> <li> <p>for consumed resources:</p> <p>1. resource object <code>r</code></p> <p>2. <code>nullifierKey</code></p> <p>3. <code>CMtree</code> path</p> <p>4. resource commitment <code>cm</code></p> <p>5. opening of <code>logicRefHash</code> (implicitly includes <code>logicRef</code>, which is already part of the resource object, and other data used to derive <code>logicRefHash</code>, such as randomness)</p> </li> <li> <p>for created resources:</p> <ol> <li> <p>resource object <code>r</code></p> </li> <li> <p>opening of <code>logicRefHash</code></p> </li> </ol> </li> </ol> <p>Note</p> <p>The instance and witness values are expected to correspond to each other: the first tag in the instance corresponds to the first resource object in the witness, and so on. Note that in the compliance proof, the tag is recomputed from the object to verify that the tag is correct</p>","boost":2},{"location":"arch/system/state/resource_machine/data_structures/compliance_unit/compliance_proof.html#compliance-constraints","title":"Compliance constraints","text":"<p>Each resource machine compliance proof must check the following:</p> <ol> <li>Merkle path validity (for non-ephemeral resources only): <code>CMTree::Verify(cm, path, root) = True</code> for each resource associated with a nullifier from the <code>consumedResourceTagSet</code></li> <li> <p>for each consumed resource <code>r</code>:</p> <ol> <li>Nullifier integrity: <code>r.nullifier(nullifierKey) is in consumedResourceTagSet</code></li> <li>Consumed commitment integrity: <code>r.commitment() = cm</code></li> <li>Logic integrity: <code>logicRefHash = hash(r.logicRef, ...)</code></li> </ol> </li> <li> <p>for each created resource <code>r</code>:</p> <ol> <li>Commitment integrity: <code>r.commitment() is in createdResourceTagSet</code></li> <li>Logic integrity: <code>logicRefHash = hash(r.logicRef, ...)</code></li> <li>Delta integrity: <code>unitDelta = sum(r.delta() for r in consumed) - sum(r.delta() for r in created)</code></li> </ol> </li> </ol> <p>Note</p> <p>Kind integrity is checked implicitly in delta checks</p> <p>Note</p> <p>[2.3, 3.2]: Combined with checking the logic proofs, logic integrity checks allow to ensure that the logics associated with the resources are satisfied</p> <p>Note</p> <p>[2.1, 3.1]: To ensure correct computation of a commitment/nullifier, they have to be recomputed from the raw parameters (resource object and possibly <code>nullifierKey</code>) and compared to what is provided in the public tag set.</p> <p>Note</p> <p>To support function privacy, the compliance proof must also verify the logic verifying key integrity: given <code>logicRefHash</code> as public input and <code>logicRef</code> as private input, verify that <code>logicRefHash = hash(logicRef)</code></p> <p>Compliance proofs must be composition-independent: composing two actions, the compliance proof sets can be simply united to provide a valid composed action compliance proof set.</p>","boost":2},{"location":"arch/system/state/resource_machine/data_structures/compliance_unit/compliance_unit.html","title":"Compliance unit","text":"<pre><code>module arch.system.state.resource_machine.data_structures.compliance_unit.compliance_unit;\n</code></pre>","boost":2},{"location":"arch/system/state/resource_machine/data_structures/compliance_unit/compliance_unit.html#compliance-unit","title":"Compliance unit","text":"<p><code>ComplianceUnit</code> is a data structure that partitions the action, meaning that there might be multiple compliance units for a single action, the sets of resources covered by any two compliance units cover don't intersect, and together the compliance units cover all of the resources in the action. This partition corresponds to the format expected by the compliance proving system used to produce compliance proofs. The table below describes the components of a compliance unit:</p> Component Type Description <code>proof</code> <code>PS.Proof</code> <code>refInstance</code> <code>ReferencedInstance</code> The instance required to verify the compliance proof. Includes the references to the tags of the checked resources, compliance unit delta, <code>CMtree</code> roots references <code>vk</code> <code>PS.VerifyingKey</code> <p>Warning</p> <p><code>ReferenceInstance</code> is a modified <code>PS.Instance</code> structure in which some elements are replaced by their references. To get <code>PS.Instance</code> from <code>ReferencedInstance</code> the referenced structures must be dereferenced. The structures we assume to be referenced here are:</p> <p>- CMtree roots (stored in transaction)</p> <p>- commitments and nullifiers (stored in action)</p> <p>All other instance elements are assumed to be as the instance requires.</p> <p>Note</p> <p>Referencing Merkle tree roots: the Merkle tree roots required to verify the compliance proofs are stored in the transaction (not in action or a compliance unit), and are referenced by a short hash in <code>refInstance</code>. To find the right roots corresponding to the proof, the verifier has to compute the hashes of the roots in the transaction, match them with the short hashes in the <code>refInstance</code> structure, and use the ones that match for verification. A similar approach is used to reference the tags of the checked in the compliance unit resources.</p> <p>The size of a compliance unit - the number of created and consumed resources in each unit - is determined by the resource machine instantiation. The total number of compliance proofs required for an action is determined by the number of compliance units that comprise the action. For example, if the instantiation defines a single compliance proof to include 1 input and 1 output resource, and an action contains 3 input and 2 output resources, the total number of compliance units will be 3 (with a placeholder output resource in the third compliance unit).</p>","boost":2},{"location":"arch/system/state/resource_machine/data_structures/compliance_unit/compliance_unit.html#delta","title":"Delta","text":"<p>Compliance unit delta is used to compute action and transaction deltas and is itself computed from resource deltas: <code>delta = sum(r.delta() for r in outputResources - sum(r.delta() for r in inputResources))</code>. Note that the delta is computed by the prover (who knows the resource objects of resources associated with the unit) and is a part of the instance. The compliance proof must ensure the correct computation of delta from the resource deltas available at the proving time.</p>","boost":2},{"location":"arch/system/state/resource_machine/data_structures/compliance_unit/compliance_unit.html#delta-for-computing-balance","title":"Delta for computing balance","text":"<p>From the homomorphic properties of Delta hash, for the resources of the same kind \\(kind\\), adding together the deltas of the resources results in the delta corresponding to the total quantity of that resource kind: \\(\\sum_j{h_\\Delta(kind, q_{r_{i_j}})} - \\sum_j{h_\\Delta(kind, q_{r_{o_j}})} = \\sum_j{\\Delta_{r_{i_j}}} - \\sum_j{\\Delta_{r_{o_j}}} =  h_\\Delta(kind, q_{kind})\\), where \\(q_{kind}\\) is the total quantity of the resources of kind \\(kind\\).</p> <p>The kind-distinctness property of \\(h_\\Delta\\) allows computing \\(\\Delta = \\sum_j{\\Delta_{r_{i_j}}} - \\sum_j{\\Delta_{r_{o_j}}}\\) adding resources of all kinds together without the need to account for distinct resource kinds explicitly: \\(\\sum_j{\\Delta_{r_{i_j}}} - \\sum_j{\\Delta_{r_{o_j}}} = \\sum_j{h_\\Delta(kind_j, q_{kind_j})}\\).</p> <p>As a result, the properties of <code>DeltaHash</code> allow computing the total balance for a compliance unit, action, or transaction, without having direct access to quantities and kinds of the resources that comprise the data structure.</p>","boost":2},{"location":"arch/system/state/resource_machine/data_structures/compliance_unit/compliance_unit.html#interface","title":"Interface","text":"<ol> <li><code>delta(ComplianceUnit) -&gt; DeltaHash</code> - returns the compliance unit delta, which is stored in <code>complianceData</code>: <code>unit.delta() = unit.complianceData.delta</code></li> <li><code>created(ComplianceUnit) -&gt; Set Commimtent</code> - returns the commitments of the created resources checked in the unit</li> <li><code>consumed(ComplianceUnit) -&gt; Set Nullifier</code> - returns the nullifiers of the consumed resources checked in the unit</li> <li><code>create(PS.ProvingKey, PS.Instance, PS.Proof) -&gt; ComplianceUnit</code> - computes the compliance proof and stores the data (or references to it, if stored elsewhere) required to verify it in the compliance unit</li> <li><code>verify(ComplianceUnit) -&gt; Bool</code> - returns <code>ComplianceProvingSystem.Verify(vk, instance, proof)</code>, where <code>instance</code> is computed from <code>refInstance</code> by dereferencing</li> </ol>","boost":2},{"location":"arch/system/state/resource_machine/data_structures/resource/index.html","title":"Index","text":"<pre><code>module arch.system.state.resource_machine.data_structures.resource.index;\n</code></pre>","boost":2},{"location":"arch/system/state/resource_machine/data_structures/resource/index.html#resource","title":"Resource","text":"<p>A resource is a composite structure <code>Resource</code> that contains the following components:</p> Component Type Description <code>logicRef</code> <code>LogicHash</code> Hash of the predicate associated with the resource (resource logic) <code>labelRef</code> <code>LabelHash</code> Hash of the resource label. Resource label specifies the fungibility domain for the resource. Resources within the same fungibility domain are seen as equivalent kinds of different quantities. Resources from different fungibility domains are seen and treated as non-equivalent kinds. This distinction comes into play in the balance check described later <code>valueRef</code> <code>ValueHash</code> Hash of the resource value. Resource value is the fungible data associated with the resource. It contains extra information but does not affect the resource's fungibility <code>quantity</code> <code>Quantity</code> is a number representing the quantity of the resource <code>isEphemeral</code> <code>Bool</code> is a flag that reflects the resource's ephemerality. Ephemeral resources do not get checked for existence when being consumed <code>nonce</code> <code>Nonce</code> guarantees the uniqueness of the resource computable components <code>nullifierKeyCommitment</code> <code>NullifierKeyCommitment</code> is a nullifier key commitment. Corresponds to the nullifier key \\(nk\\) used to derive the resource nullifier (nullifiers are further described here) <code>randSeed</code> <code>RandSeed</code> randomness seed used to derive whatever randomness needed <p>To distinguish between the resource data structure consisting of the resource components and a resource as a unit of state identified by just one (or some) of the resource computed fields, we sometimes refer to the former as a resource object. Data which is referenced by the resource object - such as the preimage of <code>valueRef</code> - we refer to as resource-linked data.</p>","boost":2},{"location":"arch/system/state/resource_machine/data_structures/resource/computable_components/delta.html","title":"Delta","text":"<pre><code>module arch.system.state.resource_machine.data_structures.resource.computable_components.delta;\n</code></pre>","boost":2},{"location":"arch/system/state/resource_machine/data_structures/resource/computable_components/delta.html#resource-delta","title":"Resource Delta","text":"<p>Resource delta is used to reason about the total quantities of different kinds of resources in transactions. For a resource <code>r</code>, its delta is computed as <code>r.delta() = deltaHash(r.kind(), r.quantity, extraInput)</code>. <code>extraInput</code> contains the extra data required to derive resource delta, e.g., randomness. It may be empty if no extra data is required.</p>","boost":2},{"location":"arch/system/state/resource_machine/data_structures/resource/computable_components/delta.html#delta-for-data-structures","title":"Delta for data structures","text":"<p>Delta is a computable component that can also be computed for compliance units, actions, and transactions.</p> <p>Note that transactions are partitioned into actions, actions are partitioned into compliance units, and compliance units are partitioned into resources. For that reason, the mechanism for computation of the deltas of these data structures is almost the same.</p> <ol> <li>For compliance units, delta is computed by using signed addition over the deltas of the resources that comprise the unit: <code>unit.delta() = sum(r.delta() for r in unit.consumedResources) - sum(r.delta() for r in unit.createdResources)</code></li> <li>For actions, delta is computed by adding the deltas of the compliance units that comprise the action: <code>action.delta() = sum(unit.delta() for unit in action)</code>. To make sure the action's delta is computed correctly, validate the compliance unit delta and make sure the action's deltas are computed using compliance unit deltas values.</li> <li>For transactions, delta is computed by adding the deltas of the actions that comprise the transaction: <code>transaction.delta() = sum(action.delta() for unit in transaction)</code>. To make sure transaction's delta is computed correctly, make sure it is computed using the validated action deltas.</li> </ol> <p>Note</p> <p>For every data structure, the delta can also be computed directly from resource deltas that comprise it, the way it is done for compliance units.</p>","boost":2},{"location":"arch/system/state/resource_machine/data_structures/resource/computable_components/introduction.html","title":"Introduction","text":"<pre><code>module arch.system.state.resource_machine.data_structures.resource.computable_components.introduction;\n</code></pre>","boost":2},{"location":"arch/system/state/resource_machine/data_structures/resource/computable_components/introduction.html#computable-components","title":"Computable components","text":"<p>Resource computable components are the components that are not a resource component but can be derived from the resource components, other computable components, and possibly some extra data.</p> <p>Resources have four computable components:</p> <ol> <li>Resource Commitment</li> <li>Nullifier</li> <li>Kind</li> <li>Delta</li> </ol>","boost":2},{"location":"arch/system/state/resource_machine/data_structures/resource/computable_components/introduction.html#tag","title":"Tag","text":"<p>The resource tag is used to identify a resource when checking constraints without referring to the resource's plaintext directly: <code>tag(Resource, Bool) -&gt; Commitment or Nullifier</code>.</p> <p>For created resources: <code>r.tag(consumed=False) = r.commitment()</code>; for consumed resources: <code>r.tag(consumed=True) = r.nullifier(nullifierKey)</code></p>","boost":2},{"location":"arch/system/state/resource_machine/data_structures/resource/computable_components/kind.html","title":"Kind","text":"<pre><code>module arch.system.state.resource_machine.data_structures.resource.computable_components.kind;\n</code></pre>","boost":2},{"location":"arch/system/state/resource_machine/data_structures/resource/computable_components/kind.html#kind","title":"Kind","text":"<p>For a resource <code>r</code>, its kind is computed as: <code>r.kind() = kindHash(r.labelRef, r.logicRef)</code>.</p>","boost":2},{"location":"arch/system/state/resource_machine/data_structures/resource/computable_components/nullifier.html","title":"Nullifier","text":"<pre><code>module arch.system.state.resource_machine.data_structures.resource.computable_components.nullifier;\n</code></pre>","boost":2},{"location":"arch/system/state/resource_machine/data_structures/resource/computable_components/nullifier.html#nullifier","title":"Nullifier","text":"<p>A resource nullifier is a computed field, the publishing of which marks the resource associated with the nullifier as consumed.</p> <p>For a resource <code>r</code>, <code>r.nullifier(nullifierKey) = nullifierHash(nullifierKey, r)</code>, where <code>nullifierKey</code> is a key provided externally.</p> <p>A resource can be consumed only once. Nullifiers of consumed resources are stored in a public append-only structure called the resource nullifier set. This structure is external to the resource machine, but the resource machine can read from it and append to it.</p> <p>Note</p> <p>Every time a resource is consumed, it has to be checked that the resource existed before (the resource's commitment is in the commitment tree) and has not been consumed yet (the resource's nullifier is not in the nullifier set).</p>","boost":2},{"location":"arch/system/state/resource_machine/data_structures/resource/computable_components/resource_commitment.html","title":"Commitment","text":"<pre><code>module arch.system.state.resource_machine.data_structures.resource.computable_components.resource_commitment;\n</code></pre>","boost":2},{"location":"arch/system/state/resource_machine/data_structures/resource/computable_components/resource_commitment.html#resource-commitment","title":"Resource Commitment","text":"<p>Resource commitment is a unique identifier of a resource used to prove the resource's existence and address the resource. Using resource commitment allows to decouple resource semantics (contained in the resource object) and the fact of the resource's existence. For a resource <code>r</code>, <code>r.commitment() = commitmentHash(r)</code>.</p> <p>To establish the resource's existence, its commitment is added to a global structure called a commitment tree. This structure is external to the resource machine but the resource machine can read from it.</p> <p>Note</p> <p>The resource commitment is also used as the resource's address \\(r.addr\\) in the content-addressed storage.</p> <p>Note</p> <p>Consumption of the resource does not necessarily affect the resource's status in the storage (e.g., it doesn't get deleted).</p>","boost":2},{"location":"arch/system/state/resource_machine/data_structures/transaction/delta_proof.html","title":"Delta proof","text":"<pre><code>module arch.system.state.resource_machine.data_structures.transaction.delta_proof;\n</code></pre>","boost":2},{"location":"arch/system/state/resource_machine/data_structures/transaction/delta_proof.html#delta-proof","title":"Delta proof","text":"","boost":2},{"location":"arch/system/state/resource_machine/data_structures/transaction/delta_proof.html#instance","title":"Instance","text":"Name Type Description <code>delta</code> <code>DeltaHash</code> Transaction delta (computed from compliance unit deltas by adding them together) <code>expectedBalance</code> <code>Balance</code> Balanced transactions have delta pre-image 0 for all involved kinds, for unbalanced transactions <code>expectedBalance</code> is a non-zero value","boost":2},{"location":"arch/system/state/resource_machine/data_structures/transaction/delta_proof.html#witness","title":"Witness","text":"<ol> <li>Resource delta pre-images</li> </ol>","boost":2},{"location":"arch/system/state/resource_machine/data_structures/transaction/delta_proof.html#constraints","title":"Constraints","text":"<ol> <li><code>delta = sum(unit.delta() for unit in action.units for action in tx)</code> - can be checked outside of the circuit since all values are public</li> <li><code>delta</code>'s preimage's quantity component is <code>expectedBalance</code></li> </ol>","boost":2},{"location":"arch/system/state/resource_machine/data_structures/transaction/transaction.html","title":"Transaction","text":"<pre><code>module arch.system.state.resource_machine.data_structures.transaction.transaction;\n</code></pre>","boost":2},{"location":"arch/system/state/resource_machine/data_structures/transaction/transaction.html#transaction","title":"Transaction","text":"<p>A transaction is a necessary and sufficient collection of fields required to validate and apply a state update to the state. It is a composite structure that contains the following components:</p> Component Type Description <code>CMTreeRoots</code> <code>Set CMtree.Value</code> A set of valid commitment tree roots used to prove the existence of the resources being consumed in the transaction. This set is not a part of actions to avoid duplication of data <code>actions</code> <code>Set Action</code> A set of actions that comprise the transaction <code>deltaProof</code> <code>DeltaProvingSystem.Proof</code> Balance proof. It makes sure that <code>transactionDelta</code> is correctly derived from the actions' deltas and commits to the expected publicly known value, called a balancing value. There is just one delta proof per transaction","boost":2},{"location":"arch/system/state/resource_machine/data_structures/transaction/transaction.html#interface","title":"Interface","text":"<ol> <li><code>create(Set CMtree.Value, Set Actions) -&gt; Transaction</code></li> <li><code>compose(Transaction, Transaction) -&gt; Transaction</code></li> <li><code>verify(Transaction) -&gt; Bool</code></li> <li><code>delta(Transaction) -&gt; DeltaHash</code></li> </ol>","boost":2},{"location":"arch/system/state/resource_machine/data_structures/transaction/transaction.html#create","title":"<code>create</code>","text":"<p>Given a set of roots and a set of actions, a transaction is formed as follows:</p> <ol> <li><code>tx.CMTreeRoots = CMTreeRoots</code></li> <li><code>tx.actions = actions</code></li> <li><code>tx.transactionDelta = sum(action.Delta() for action in actions)</code></li> <li><code>tx.deltaProof = DeltaProvingSystem(deltaProvingKey, deltaInstance, deltaWitness)</code></li> </ol>","boost":2},{"location":"arch/system/state/resource_machine/data_structures/transaction/transaction.html#compose","title":"<code>compose</code>","text":"<p>Having two transactions <code>tx1</code> and <code>tx2</code>, their composition <code>compose(tx1, tx2)</code> is defined as a transaction <code>tx</code>, where:</p> <ol> <li><code>tx.CMTreeRoots = Set.union(tx1.CMTreeRoots, tx2.CMTreeRoots)</code></li> <li><code>tx.actions = Set.union(tx1.actions, tx2.actions)</code></li> <li><code>tx.deltaProof = DeltaProvingSystem.aggregate(tx1.deltaProof, tx2.deltaProof)</code></li> <li><code>tx.transactionDelta = tx1.transactionDelta + tx2.transactionDelta</code></li> </ol> <p>Note</p> <p>When composing transactions, action sets are simply united without composing the actions themselves. For example, composing a transaction with two actions and another transaction with three actions will result in a transaction with five actions.</p>","boost":2},{"location":"arch/system/state/resource_machine/data_structures/transaction/transaction.html#verify","title":"<code>verify</code>","text":"<p>A transaction is considered valid if the following statements hold:</p> <p>Checks that do not require access to global structures:</p> <ol> <li>all actions in the transaction are valid, as defined per action validity rules</li> <li>actions partition the state change induced by the transaction:<ol> <li>there is no resource created more than once across actions</li> <li>there is no resource consumed more than once across actions</li> </ol> </li> <li><code>deltaProof</code> is valid</li> </ol> <p>Checks that require access to global <code>CMTree</code> and <code>NullifierSet</code>:</p> <ol> <li>each created resource wasn't created in prior transactions</li> <li>each consumed resource wasn't consumed in prior transactions</li> </ol> <p>A transaction is executable if it is valid and <code>transactionDelta</code> commits to the expected balancing value.</p>","boost":2},{"location":"arch/system/state/resource_machine/data_structures/transaction/transaction.html#delta","title":"<code>delta</code>","text":"<p>Transaction delta is a hash of transaction balance - the total quantity change per resource kind induced by the transaction. It isn't computed from the transaction balance directly by applying a hash function to it, but rather by using the homomoprhic properties of <code>deltaHash</code>: adding action deltas together results in transaction delta.</p>","boost":2},{"location":"arch/system/state/resource_machine/data_structures/transaction/transaction_function.html","title":"Transaction Function","text":"<pre><code>module arch.system.state.resource_machine.data_structures.transaction.transaction_function;\n</code></pre>","boost":2},{"location":"arch/system/state/resource_machine/data_structures/transaction/transaction_function.html#transaction-function","title":"Transaction Function","text":"<p>A transaction function <code>TransactionFunction</code> is a function that outputs a transaction: <code>transactionFunction() -&gt; Transaction</code>.</p> <p>Transaction functions take no input but can perform I/O operations to read information about global state either by reading data at the specified global storage address or by fetching data by index. The requirements for transaction functions are further described in Transaction function format.</p>","boost":2},{"location":"arch/system/state/resource_machine/data_structures/transaction/transaction_with_payment.html","title":"Transaction With Payment","text":"<pre><code>module arch.system.state.resource_machine.data_structures.transaction.transaction_with_payment;\n</code></pre>","boost":2},{"location":"arch/system/state/resource_machine/data_structures/transaction/transaction_with_payment.html#transaction-with-payment","title":"Transaction With Payment","text":"<p><code>TransactionWithPayment</code> is a data structure that allows paying for the desired state transitions.</p>","boost":2},{"location":"arch/system/state/resource_machine/data_structures/transaction/transaction_with_payment.html#definition","title":"Definition","text":"<p><code>TransactionWithPayment</code> contains the following fields:</p> Type <code>stateTransitionFunction</code> <code>TransactionFunction</code> The desired state update. <code>paymentTransaction</code> <code>Transaction</code> The payment transaction. It is unbalanced, contains consumed resources (gas payment sent) but not created (the receiver is not specified). Includes in a special application data field the hash of the transaction function and the gas limit. <code>gasLimit</code> <code>Arithmetic</code> The maximum amount of gas that can be used for execution of the <code>StateTransition</code>","boost":2},{"location":"arch/system/state/resource_machine/data_structures/transaction/transaction_with_payment.html#execution","title":"Execution","text":"<p>When executing a <code>TransactionFunctionWithPayment</code>, the executor takes the following steps:</p> <ol> <li>Checks that <code>paymentTransaction</code> is \u201csimple\u201d. What exactly this means can be executor-specific, but roughly \u201csimple\u201d means \u201cinexpensive to verify\u201d. A basic (very restrictive) check could be that the payment transaction has exactly one consumed resource and nothing else.</li> <li>Decide whether this gas payment is sufficient. This decision can be controller-specific (maybe there are certain assets and certain prices accepted for gas).</li> <li>Alter <code>paymentTransaction</code>, adding new resources assigned to the executor (or whoever is supposed to receive the gas payments) as necessary to make the payment transaction balanced.</li> <li>Verify <code>paymentTransaction</code>, including in a special application data field the hash of the transaction function and the gas limit.</li> <li>Execute <code>paymentTransaction</code> (apply the state changes).</li> <li>Evaluate <code>stateTransitionFunction</code>, limited by <code>gasLimit</code>.</li> <li>If <code>stateTransitionFunction</code> evaluation finishes within <code>gasLimit</code> (returning a transaction object), check that the transaction object is valid and balanced (gas is charged for these checks as well), and if so apply it to state (as previously in the RM).</li> </ol>","boost":2},{"location":"arch/system/state/resource_machine/execution_flow/flow.html","title":"Execution flow","text":"<pre><code>module arch.system.state.resource_machine.execution_flow.flow;\n</code></pre>","boost":2},{"location":"arch/system/state/resource_machine/execution_flow/flow.html#intro","title":"Intro","text":"<p>This section describes the resource machine execution flow and how it is used by various actors.</p>","boost":2},{"location":"arch/system/state/resource_machine/execution_flow/flow.html#resource-machine","title":"Resource machine","text":"<p>A resource machine is a deterministic stateless machine that creates, composes, and verifies transaction functions.</p> <p>It has read-only access to the external global state, which includes the content-addressed storage system (which in particular stores resources), global commitment accumulator, and the global nullifier set, and can produce writes to the external local state that will later be applied to the system state.</p> <p>The resource machine must have the functionality to produce, compose, and evaluate transaction functions and transactions.</p> <p>Actors working with resource machine include users, solvers, and executor nodes.</p>","boost":2},{"location":"arch/system/state/resource_machine/execution_flow/flow.html#users","title":"Users","text":"<p>Users are the initiators of the state change. To initiate the state change, users send the information about the desired state change to solvers. Users own the resources to be consumed/created in the transaction, meaning they are the <code>nullifierKey</code> holders and they control the transaction authorisation mechanism (resource logics).</p> <p>Users are not always online and limited in computational power.</p> <p>Users can create initial actions and transactions that don't require matching, but are assumed to delegate all matching computations to solvers (note that users can take the solver role for themselves as well). To create such transactions, users are expected to be able to do all of the things required to create a transaction, which includes creating all existing data structures, creating all types of proofs, and being able to access the global state.</p>","boost":2},{"location":"arch/system/state/resource_machine/execution_flow/flow.html#solvers","title":"Solvers","text":"<p>Solvers are the parties that have the computational power. Solvers are the parties that see intents and try to match them and output a transaction. Users give solvers the data required to create the future transactions, which may include resource objects, <code>nullifierKey</code>, signed messages, etc. Given the data, solvers create, compose, and verify transactions. Once the transaction is complete and valid, the transaction function is sent for ordering.</p>","boost":2},{"location":"arch/system/state/resource_machine/execution_flow/flow.html#executor","title":"Executor","text":"<p>Executors are the final nodes that receive transaction functions after ordering and produce a state change. After receiving a transaction function, the executor runs it, outputting a transaction that describes a state update. The executor node validates the resulting transaction, by performing the checks described here. In case the transaction is valid, the executor applies the state changes: adds nullifiers to the nullifier set, commitments to the commitment tree, and possibly some other data to the storage.</p>","boost":2},{"location":"arch/system/state/resource_machine/execution_flow/flow.html#post-and-pre-ordering-execution","title":"Post- and pre-ordering execution","text":"<p>Pre-ordering execution implies partial evaluation of the transaction function. In practice pre-ordering execution happens before the transactions are ordered by the ordering component external to the ARM.</p> <p>Post-ordering execution implies full evaluation of the transaction function. As the name suggests, post-ordering execution happens after the ordering component external to the ARM completed the ordering of transaction functions.</p>","boost":2},{"location":"arch/system/state/resource_machine/notes/applications.html","title":"Applications","text":"<pre><code>module arch.system.state.resource_machine.notes.applications;\n</code></pre>","boost":2},{"location":"arch/system/state/resource_machine/notes/applications.html#applications","title":"Applications","text":"<p>The ARM applications are characterised by a set of resource logics and associated read and write interfaces.</p> <p>\\(Application = (AppLogic, AppReadInterface, AppWriteInterface)\\), where</p> <ol> <li>\\(AppLogic \\subseteq \\mathbb{F}_l\\) is a set of resource logics.</li> <li>\\(AppWriteInterface = \\{tf: TransactionFunction\\}\\) is a set of functions that represents what kinds of state transitions the application offers.</li> <li>\\(AppReadInterface = \\{pf: ProjectionFunction\\}\\) is a set of functions that interprete the current state. Projection functions are defined as \\(ProjectionFunction: AppState \\rightarrow T\\), where \\(AppState = AppResources \\times AppData\\), with \\(AppResources\\) containing all resources bound to the application\u2019s logic and \\(AppData\\) referring to the non-linear data the application might assume.</li> </ol> <p>As any abstract state transition can be represented as a transaction consuming and creating resources of certain kinds (or a transaction function that evaluates to such a transaction), the transaction functions associated with the application represent the set of actions that the application can provide to its users. Each transaction function would require a subset of the application resource logics to approve the transaction in order to realise the desired action. The transaction function evaluated with the exact resources to be created and consumed forms a transaction.</p> <p>The resources that are bound with the application resource logics are said to belong to the application and, along with some non-linear data the application might assume, constitute the application state. When the application does not have any resources that were created but not consumed yet, the application only exists virtually but not tangibly.</p> <p>The abstraction of an application is virtual - applications are not deployed or tracked in any sort of global registry, and the ARM is unaware of the existence of applications.</p> <p>We define \\(AppKinds \\subseteq \\mathbb{F}_{kind}\\) as a union of all resource kinds that are involved in the transaction functions that comprise the application interface.</p>","boost":2},{"location":"arch/system/state/resource_machine/notes/applications.html#composition","title":"Composition","text":"<p>Applications are composable. The composition of two (or more) applications would be a composition of the corresponding logics and interfaces.</p> <p>\\(App_12 = App_1 \\circ App_2\\):</p> <ol> <li>\\(AppLogic_{12} = AppLogic_1 \\cup AppLogic_2\\)</li> <li>\\(AppWriteInterface_{12} = AppWriteInterface_1 \\cup AppWriteInterface_2\\)</li> <li>\\(AppReadInterface_{12} = AppReadInterface_1 \\cup AppReadInterface_2\\)</li> <li>\\(AppKinds_{12} = AppKinds_1 \\cup AppKinds_2\\)</li> </ol> <p>In this type of composition the order in which the applications are composed doesn't matter.</p>","boost":2},{"location":"arch/system/state/resource_machine/notes/applications.html#application-extension","title":"Application extension","text":"<p>Application extension is a way to generate a new application starting from an existing one by enhancing the application logic and the application interface with operations on more resource kinds. The new application is dependent on the initial one, meaning that the new application logic includes constraints involving the first application resource kinds, and the new interface requires the presence of resources of the first application kinds.</p>","boost":2},{"location":"arch/system/state/resource_machine/notes/applications.html#distributed-application-state-synchronisation","title":"Distributed application state synchronisation","text":"<p>In the controllers report, a controller is defined as a component that orders transactions. The resource machine is designed to work in both single-controller and multi-controller environments, such as Anoma. In the context of multi-controller environments, each resource contains information about its current controller, can only be consumed on its controller, and can be transferred from one controller to another, meaning that a new controller becomes responsible for the correct resource consumption. Transferring a resource can be done by consuming a resource on the old controller and creating a similar resource on the new controller.</p> <p>Applications do not have to exist within the bounds of a single controller, and can maintain a single virtual state while the application resources being distributed among multiple controllers, which forms a distributed application state. To make sure such a distributed state correctly represents the application state, state synchronisation between multiple controllers is required.</p>","boost":2},{"location":"arch/system/state/resource_machine/notes/applications.html#controller-state-synchronisation","title":"Controller state synchronisation","text":"<p>Each controller would have their own commitment tree associated with it. Treated as subtrees of a larger Merkle tree, the controller commitment trees comprise a global commitment tree, where the leaves are the roots of the controller trees.</p>","boost":2},{"location":"arch/system/state/resource_machine/notes/roles_and_requirements.html","title":"Roles and requirements","text":"<pre><code>module arch.system.state.resource_machine.notes.roles_and_requirements;\n</code></pre>","boost":2},{"location":"arch/system/state/resource_machine/notes/roles_and_requirements.html#roles-and-requirements","title":"Roles and requirements","text":"<p>The table below contains a list of resource-related roles. In the Anoma protocol, the role of the resource creator will often be taken by a solver, which creates additional security requirements compared to the case when protocol users solve their own intents. Because of that, extra measures are required to ensure reliable distribution of the information about the created resource to the resource receiver.</p> Role Description Authorizer approves the resource consumption on the application level. The resource logic encodes the mechanism that connects the authorizer's external identity (public key) to the decision-making process Annuler knows the data required to nullify a resource Creator creates the resource and shares the data with the receiver Owner can both authorize and annul a resource Sender owns the resources that were consumed to create the created resource Receiver owns the created resource","boost":2},{"location":"arch/system/state/resource_machine/notes/roles_and_requirements.html#reliable-resource-object-distribution","title":"Reliable resource object distribution","text":"<p>In the case of in-band distribution of created resources in contexts with higher security requirements, the resource creator is responsible for encrypting the resource object. Verifiable encryption must be used to ensure the correctness of the encrypted data: the encrypted object must be proven to correspond to the resource object, which is passed as a private input.</p>","boost":2},{"location":"arch/system/state/resource_machine/notes/roles_and_requirements.html#reliable-nullifier-key-distribution","title":"Reliable nullifier key distribution","text":"<p>Knowing the resource\u2019s nullifier reveals information about when the resource is consumed, as the nullifier will be published when it happens, which might be undesirable in the contexts with higher security requirements. For that reason, it is advised to keep the number of parties who can compute the resource\u2019s nullifier as low as possible in such contexts.</p> <p>In particular, the resource creator should not be able to compute the resource nullifier, and as the nullifier key allows to compute the resource's nullifier, it shouldn't be known to the resource creator. At the same time, the resource object must contain some information about the nullifier key. One way to fulfil both requirements is, instead of sharing the nullifier key itself with the resource creator, to share some parameter derived from the nullifier key, but that does not allow computing the nullifier key or any meaningful information about it. This parameter is called a nullifier key commitment and is computed as \\(cnk = h_{cnk}(nk)\\).</p> <p>These concerns are not meaningful in the contexts with lower security requirements.</p>","boost":2},{"location":"arch/system/state/resource_machine/notes/storage.html","title":"Stored data format","text":"<pre><code>module arch.system.state.resource_machine.notes.storage;\n</code></pre> <p>Warning</p> <p>Will be updated soon</p>","boost":2},{"location":"arch/system/state/resource_machine/notes/storage.html#stored-data-format","title":"Stored data format","text":"<p>The ARM state that needs to be stored includes resource objects, the commitment accumulator and the nullifier set. The table below defines the format of that data assumed by the ARM.</p> Name Structure Key Type Value Type Commitment accumulator (node) Cryptographic accumulator timestamp \\(\\mathbb{F}\\) Commitment accumulator (leaf) - (<code>timestamp</code>, \\(\\mathbb{F}\\)) \\(\\mathbb{F}\\) Nullifier set Set \\(\\mathbb{F}\\) \\(\\mathbb{F}\\) Hierarchical index Chained Hash sets Tree path \\(\\mathbb{F}\\) Data blob storage Key-value store with deletion criterion \\(\\mathbb{F}\\) (<code>variable length byte array</code>, <code>deletion criterion</code>)","boost":2},{"location":"arch/system/state/resource_machine/notes/storage.html#cmtree","title":"\\(CMtree\\)","text":"<p>Each commitment tree node has a timestamp associated with it, such that a lower depth (closer to the root) tree node corresponds to a less specified timestamp: a parent node timestamp is a prefix of the child node timestamp, and only the leaves of the tree have fully specified timestamps (i.e. they are only prefixes of themselves). For a commitment tree of depth \\(d\\), a timestamp for a commitment \\(cm\\) would look like \\(t_{cm} =t_1:t_2:..:t_d\\), with the parent node corresponding to it having a timestamp \\(t_1:t_2:..:*\\). The timestamps are used as keys for the key-value store. For the tree leaves, \\(&lt;cm, t_{cm}&gt;\\) pairs are used as keys. Merkle paths to resource commitments can be computed from the hierarchy of the timestamps.</p>","boost":2},{"location":"arch/system/state/resource_machine/notes/storage.html#nfset","title":"\\(NFset\\)","text":"<p>Nullifiers are used as keys in the key-value store. In future versions, a more complex structure that supports efficient non-membership proofs might be used for storing the nullifier set.</p>","boost":2},{"location":"arch/system/state/resource_machine/notes/storage.html#hierarchical-index","title":"Hierarchical index","text":"<p>The hierarchical index is organised as a tree where the leaves refer to the resources, and the intermediate nodes refer to resource subkinds that form a hierarchy. The label of a resource \\(r\\) stored in the hierarchical index tree is interpreted as an array of sublabels: \\(r.label = [label_1, label_2, label_3, ...]\\), and the i-th subkind is computed as \\(r.subkind_i = H_{kind}(r.l, r.label_i)\\).</p> <p>In the current version, only the subkinds derived from the same resource logic can be organized in the same hierarchical index path.</p> <p>The interface of the tree enables efficient querying of all children of a specific path and verifying that the returned children are the requested nodes. Permissions to add data to the hierarchical index are enforced by the resource logics and do not require additional checks.</p>","boost":2},{"location":"arch/system/state/resource_machine/notes/storage.html#data-blob-storage","title":"Data blob storage","text":"<p>Data blob storage stores data without preserving any specific structure. The data is represented as a variable length byte array and comes with a deletion criterion that determines for how long the data will be stored. The deletion criterion, in principle, is an arbitrary predicate, which in practice currently is assumed to be instantiated by one of the following options:</p> <ol> <li>delete immediately</li> <li>delete after \\(block\\)</li> <li>delete after \\(timestamp\\)</li> <li>delete after \\(sig\\) over \\(data\\)</li> <li>delete after either predicate \\(p_1\\) or \\(p_2\\) is true; the predicates are instantiated by options from this list</li> <li>store forever</li> </ol>","boost":2},{"location":"arch/system/state/resource_machine/notes/function_formats/transaction_function_format.html","title":"Transaction function format","text":"<pre><code>module arch.system.state.resource_machine.notes.function_formats.transaction_function_format;\n</code></pre>","boost":2},{"location":"arch/system/state/resource_machine/notes/function_formats/transaction_function_format.html#transaction-function-format","title":"Transaction function format","text":"<p>The system used to represent and interpret transaction functions must have a deterministic computation model; each operation should have a fixed cost of space and time (for total cost computation). To support content addressing, it must have memory and support memory operations (specifically <code>read</code>, <code>write</code>, <code>allocate</code>).</p> <p>The system must support the following I/O operations:</p> <ol> <li><code>readStorage</code>(<code>address</code>: <code>Commitment</code>): read the global content-addressed storage at the specified address and return the value stored at the address. If the value is not found, the operation should return an error. Storage not accessible to the machine should be treated as non-existent.</li> <li><code>dataByIndex</code>(<code>indexFunction)</code>: read data from the storage (either resources or arbitrary data kept in the storage requested by the transaction function) at the execution time by the specified index function. If the index function output is invalid or uncomputable, or the data cannot be located, the operation should return an error. Typically, the index functions allowed will be very restricted, e.g. an index function returning current unspent resources of a particular kind.</li> </ol>","boost":2},{"location":"arch/system/state/resource_machine/notes/function_formats/transaction_function_format.html#gas-model","title":"Gas model","text":"<p>To compute and bound the total cost of computation, the transaction function system must support a gas model. Each evaluation would have a gas limit \\(g_{limit}\\), and the evaluation would start with \\(g_{count} = 0\\). Evaluating an operation, the system would add the cost of the operation to the counter \\(g_{count}\\) and compare it to \\(g_{limit}\\). When making recursive calls, \\(g_{count}\\) is incremented before the recursion occurs. If the value of \\(g_{count}\\) is greater than \\(g_{limit}\\), the execution is terminated with an error message indicating that the gas limit has been surpassed.</p>","boost":2},{"location":"arch/system/state/resource_machine/primitive_interfaces/commitment_accumulator.html","title":"Commitment accumulator","text":"<pre><code>module arch.system.state.resource_machine.primitive_interfaces.commitment_accumulator;\n</code></pre>","boost":2},{"location":"arch/system/state/resource_machine/primitive_interfaces/commitment_accumulator.html#commitment-accumulator","title":"Commitment accumulator","text":"<p>All resource commitments are stored in an append-only data structure called a commitment accumulator. Every time a resource is created, its commitment is added to the commitment accumulator. The resource commitment accumulator is external to the resource machine, but the resource machine can read from it. A commitment accumulator is a cryptographic accumulator that allows to prove membership for elements accumulated in it, provided a witness and the accumulated value.</p> <p>Each time a commitment is added to the accumulator, the accumulator and all witnesses of the already accumulated commitments are updated. For a commitment that existed in the accumulator before a new one was added, both the old witness and the new witness (with the corresponding accumulated value parameter) can be used to prove membership. However, the older the witness (and, consequently, the accumulator) that is used in the proof, the more information about the resource it reveals (an older accumulator gives more concrete boundaries on the resource's creation time). For that reason, it is recommended to use fresher parameters when proving membership.</p>","boost":2},{"location":"arch/system/state/resource_machine/primitive_interfaces/commitment_accumulator.html#accumulator-functionality","title":"Accumulator functionality","text":"<p>The commitment accumulator has type <code>Accumulator</code> and is parametrised over the types <code>Witness</code>,<code>CommitmentIdentifier</code>, and <code>AccumulatedValue</code>. The commitment accumulator interface must support the following functionality:</p> <ol> <li><code>add(Accumulator, CommitmentIdentifier) -&gt; Witness</code> adds an element to the accumulator, returning the witness used to prove membership.</li> <li><code>witness(Accumulator, CommitmentIdentifier) -&gt; Maybe Witness</code> for a given element, returns the witness used to prove membership if the element is present, otherwise returns nothing.</li> <li><code>verify(CommitmentIdentifier, Witness, AccumulatedValue) -&gt; Bool</code> verifies the membership proof for a commitment identified with <code>CommitmentIdentifier</code> element with a membership witness <code>witness</code> for the accumulated value <code>value</code>.</li> <li><code>value(Accumulator) -&gt; AccumulatedValue</code> returns the accumulator value.</li> </ol>","boost":2},{"location":"arch/system/state/resource_machine/primitive_interfaces/commitment_accumulator.html#merkle-tree","title":"Merkle tree","text":"<p>Currently, the commitment accumulator is assumed to be a Merkle tree <code>CMTree</code> of depth \\(depth_{CMtree}\\), where the leaves contain the resource commitments and the intermediate nodes' values are of type <code>MerkleTreeNodeHash</code>.</p> <p>Note</p> <p>The type <code>MerkleTreeNodeHash</code> of the <code>CMTree</code> nodes and the type of the leafs <code>Commitment</code> are distinct types.</p>","boost":2},{"location":"arch/system/state/resource_machine/primitive_interfaces/commitment_accumulator.html#interface","title":"Interface","text":"<p>For a Merkle tree:</p> <ol> <li><code>CommitmentIdentifier</code> type corresponds to the identifier of the resource commitment used to locate the commitment's position in the tree</li> <li><code>Witness</code> element is a path to the stored commitment</li> <li><code>AccumulatedValue</code> corresponds to the Merkle tree root</li> </ol> <p>and the functions:</p> <ol> <li><code>add</code> adds the resource commitment to the tree, returning the path to the commitment</li> <li><code>witness</code> finds the resource commitment in the tree and returns the path to it</li> <li><code>verify</code> uses the resource commitment and the path to reconstruct the root. Returns <code>True</code> if the constructed value is equal to the provided value</li> <li><code>value</code> returns the tree root</li> </ol> <p>Todo</p> <p>shielded notes: To support the systems with stronger privacy requirements, the witness for such a proof must be a private input when proving membership.</p>","boost":2},{"location":"arch/system/state/resource_machine/primitive_interfaces/index.html","title":"Index","text":"<pre><code>module arch.system.state.resource_machine.primitive_interfaces.index;\n</code></pre>","boost":2},{"location":"arch/system/state/resource_machine/primitive_interfaces/index.html#primitive-interfaces","title":"Primitive interfaces","text":"<p>This section defines the hierarchy of primitives used in resource machine design and describes interfaces for each primitive.</p> <p>The diagram below illustrates the primitive types required for resource machine. Red nodes correspond to primitive interfaces, green nodes correspond to instantiations of the interfaces. Each primitive instantiation has an associated type, e.g. delta hash instantiation of <code>Hash</code> interface has an associated type <code>DeltaHash</code>. Primitive instantiations' names are derived from the type name but written in lower camel case, e.g., for <code>DeltaHash</code> the corresponding function would be <code>deltaHash(..)</code>.</p> <pre><code>flowchart LR\n    ProvingSystem\n    Set --&gt; OrderedSet\n    Map --&gt; MapInstance\n    CommitmentAccumulator --&gt; CommitmentAccumulatorInstance\n    NullifierSet --&gt; NullifierSetInstance\n\n    OrderedSet --&gt; OrderedSetInstance\n    Set --&gt; SetInstance\n\n    style SetInstance fill:transparent\n    style OrderedSetInstance fill:transparent\n    style MapInstance fill:transparent\n    style CommitmentAccumulatorInstance fill:transparent\n    style NullifierSetInstance fill:transparent\n\n\n    ProvingSystem --&gt; ComplianceProvingSystem\n    ProvingSystem --&gt; ResourceLogicProvingSystem\n    ProvingSystem --&gt; IDeltaProvingSystem\n    IDeltaProvingSystem --&gt; DeltaProvingSystem\n    style ComplianceProvingSystem fill:transparent\n    style ResourceLogicProvingSystem fill:transparent\n    style DeltaProvingSystem fill:transparent</code></pre> Primitive interfaces <pre><code>flowchart LR\n\n    FixedSize --&gt; Arithmetic\n    FixedSize --&gt; Hash\n\n\n    FixedSize --&gt; Nonce\n    FixedSize --&gt; RandSeed\n    FixedSize --&gt; NullifierKeyCommitment\n    FixedSize --&gt; NullifierKey\n\n    style Nonce fill:transparent\n    style RandSeed fill:transparent\n    style NullifierKey fill:transparent\n    style NullifierKeyCommitment fill:transparent\n\n\n    Arithmetic --&gt; Quantity\n    Arithmetic --&gt; Balance\n\n    Arithmetic --&gt; DeltaHash\n\n    style Quantity fill:transparent\n    style Balance fill:transparent\n    style DeltaHash fill:transparent\n\n\n    Hash --&gt; LogicHash\n    Hash --&gt; LabelHash\n    Hash --&gt; ValueHash\n    Hash --&gt; DeltaHash\n\n    Hash --&gt; Commitment\n    Hash --&gt; Nullifier\n    Hash --&gt; Kind\n    Hash --&gt; LogicRefHash\n    Hash --&gt; MerkleTreeNodeHash\n\n    style LogicHash fill:transparent\n    style LabelHash fill:transparent\n    style ValueHash fill:transparent\n    style DeltaHash fill:transparent\n    style Commitment fill:transparent\n    style Nullifier fill:transparent\n    style Kind fill:transparent\n    style LogicRefHash fill:transparent\n    style MerkleTreeNodeHash fill:transparent\n\n\n    Hash --&gt; AppDataValueHash\n    style AppDataValueHash fill:transparent</code></pre> Primitive types","boost":2},{"location":"arch/system/state/resource_machine/primitive_interfaces/map.html","title":"Map","text":"<pre><code>module arch.system.state.resource_machine.primitive_interfaces.map;\n</code></pre>","boost":2},{"location":"arch/system/state/resource_machine/primitive_interfaces/map.html#map","title":"Map","text":"<p>Map is a structure that contains pairs (key: value), where key is of type <code>K</code> and value is of type <code>V</code>.</p>","boost":2},{"location":"arch/system/state/resource_machine/primitive_interfaces/map.html#interface","title":"Interface","text":"<ol> <li><code>new() -&gt; Map</code></li> <li><code>add(Map, K, V) -&gt; Map</code></li> <li><code>size(Map) -&gt; Nat</code></li> <li><code>get(Map, K) -&gt; V</code></li> <li><code>keys(Map) -&gt; OrderedSet K</code></li> </ol>","boost":2},{"location":"arch/system/state/resource_machine/primitive_interfaces/map.html#used-in","title":"Used in","text":"<ol> <li>Action: <code>applicationData</code></li> <li>Action: <code>proofs</code></li> </ol>","boost":2},{"location":"arch/system/state/resource_machine/primitive_interfaces/nullifier_set.html","title":"Nullifier set","text":"<pre><code>module arch.system.state.resource_machine.primitive_interfaces.nullifier_set;\n</code></pre>","boost":2},{"location":"arch/system/state/resource_machine/primitive_interfaces/nullifier_set.html#nullifier-set","title":"Nullifier set","text":"<p>The nullifier set interface requires two main operations:</p> <ol> <li><code>insert(NFSet, T) -&gt; NFSet</code> - adds the nullifier of type T to the nullifier set.</li> <li><code>contains(NFSet, T) -&gt; Bool</code> - searchers for the given element and returns <code>True</code> if the element was found.</li> </ol> <p>At this point, this interface seems to be fully covered by the set interface.</p> <p>Note</p> <p>For the future versions of the nullifier set:</p> <pre><code>1.`Contains` should perform the check in O(1)\n2. The data structure should support proofs of non-existence\n</code></pre>","boost":2},{"location":"arch/system/state/resource_machine/primitive_interfaces/ordered_set.html","title":"Ordered set","text":"<pre><code>module arch.system.state.resource_machine.primitive_interfaces.ordered_set;\n</code></pre>","boost":2},{"location":"arch/system/state/resource_machine/primitive_interfaces/ordered_set.html#ordered-set","title":"Ordered set","text":"<p>Ordered set is a set that preserves order</p>","boost":2},{"location":"arch/system/state/resource_machine/primitive_interfaces/ordered_set.html#used-in","title":"Used in","text":"<ol> <li>Action (commitments, nullifiers)</li> <li>Compliance unit</li> </ol>","boost":2},{"location":"arch/system/state/resource_machine/primitive_interfaces/set.html","title":"Set interface","text":"<pre><code>module arch.system.state.resource_machine.primitive_interfaces.set;\n</code></pre>","boost":2},{"location":"arch/system/state/resource_machine/primitive_interfaces/set.html#set-primitive-interface","title":"Set primitive interface","text":"<p>A set is an unordered data structure that contains only distinct elements.</p>","boost":2},{"location":"arch/system/state/resource_machine/primitive_interfaces/set.html#the-interface","title":"The interface","text":"<p>For a set parametrised over the element type <code>T</code>:</p> <ol> <li><code>new() -&gt; Set</code> - creates an empty set.</li> <li><code>new(OrderedSet) -&gt; Set</code> - creates a set from the given list of elements. If the list contains duplicating elements, ignores them.</li> <li><code>size(Set) -&gt; Nat</code> - returns the number of elements in the set.</li> <li><code>insert(Set, T) -&gt; Set</code> - adds an element of type <code>T</code> to the set.</li> <li><code>union(Set, Set) -&gt; Set</code> - computes the union of two sets.</li> <li><code>intersection(Set, Set) -&gt; Set</code> - computes the intersection of two sets.</li> <li><code>difference(Set, Set) -&gt; Set</code> - computes the difference of two sets. Note that this operation is not commutative.</li> <li><code>disjointUnion(Set, Set) -&gt; Set</code> - computes the union of two sets. If the sets intersect, returns an error.</li> <li><code>contains(Set, T) -&gt; Bool</code> - checks if an element is in the set.</li> </ol> <pre><code>\nclassDiagram\n\n    class ISet~T~ {\n         &lt;&lt;Interface&gt;&gt;\n         new() Set\n         new(OrderedSet) Set\n         size(Set) Nat\n         insert(Set, T) Set\n         union(Set, Set) Set\n         intersection(Set, Set) Set\n         difference(Set, Set) Set\n         disjointUnion(Set, Set) Set\n         contains(Set, T) Bool\n    }\n\n    class IOrderedSet~T~ {\n         &lt;&lt;Interface&gt;&gt;\n    }\n\n    ISet &lt;|-- IOrderedSet\n\n    ISet &lt;-- Set\n\n    IOrderedSet &lt;-- OrderedSet\n</code></pre>","boost":2},{"location":"arch/system/state/resource_machine/primitive_interfaces/set.html#used-in","title":"Used in","text":"<ol> <li>Transaction (roots, actions)</li> <li>Nullifier set</li> </ol>","boost":2},{"location":"arch/system/state/resource_machine/primitive_interfaces/transaction_function_vm.html","title":"Transaction function vm","text":"<pre><code>module arch.system.state.resource_machine.primitive_interfaces.transaction_function_vm;\n</code></pre>","boost":2},{"location":"arch/system/state/resource_machine/primitive_interfaces/transaction_function_vm.html#transaction-function-vm","title":"Transaction function VM","text":"<p>Transaction function VM is used to interpret transaction functions.</p>","boost":2},{"location":"arch/system/state/resource_machine/primitive_interfaces/transaction_function_vm.html#interface","title":"Interface","text":"<ul> <li><code>eval(TransactionFunction, GasLimit) -&gt; Transaction</code></li> </ul> <p>Examples: - nock (transparent-only; transaction function) - (?) cairo, risc0 (circuits)</p> <p>Todo</p> <p>are nock and cairo/risc0 on the same level? What exactly transaction functions look like in cairo/risk0 case? What about the relationship with proving systems?</p>","boost":2},{"location":"arch/system/state/resource_machine/primitive_interfaces/fixed_size_type/arithmetic.html","title":"Arithmetic","text":"<pre><code>module arch.system.state.resource_machine.primitive_interfaces.fixed_size_type.arithmetic;\n</code></pre>","boost":2},{"location":"arch/system/state/resource_machine/primitive_interfaces/fixed_size_type/arithmetic.html#arithmetic","title":"Arithmetic","text":"<p>Arithmetic fixed size type is a type of fixed size that additionally supports addition and subtraction.</p> <pre><code>\nclassDiagram\n    class FixedSize~T, Arg~ {\n         &lt;&lt;Interface&gt;&gt;\n         +bit_size: Int\n         +new(Arg) T\n         +equal(T, T) Bool\n    }\n\n    FixedSize &lt;|-- Arithmetic\n\n    class Arithmetic~T, Arg~ {\n        &lt;&lt;Interface&gt;&gt;\n        +add(T, T) T\n        +sub(T, T) T\n    }\n\n    Arithmetic &lt;|-- Quantity\n    Arithmetic &lt;|-- Balance\n</code></pre>","boost":2},{"location":"arch/system/state/resource_machine/primitive_interfaces/fixed_size_type/arithmetic.html#used-in","title":"Used in","text":"<ol> <li>Resource component: <code>quantity</code></li> <li><code>DeltaHash</code></li> </ol>","boost":2},{"location":"arch/system/state/resource_machine/primitive_interfaces/fixed_size_type/delta_hash.html","title":"Delta hash","text":"<pre><code>module\narch.system.state.resource_machine.primitive_interfaces.fixed_size_type.delta_hash;\n\nimport prelude open;\n</code></pre>","boost":2},{"location":"arch/system/state/resource_machine/primitive_interfaces/fixed_size_type/delta_hash.html#delta-hash","title":"Delta hash","text":"<p>Delta hash is an interface that implements both <code>Hash</code> type and <code>Arithmetic</code> type. It is also required to be additively homomorphic and kind-distinct:</p> <ol> <li>For resources of the same kind \\(kind\\), \\(h_{\\Delta}\\) should be additively homomorphic: \\(\\Delta_1 + \\Delta_2 = h_{\\Delta}(kind, q_1) + h_{\\Delta}(kind, q_2) = h_{\\Delta}(kind, q_1 + q_2)\\)</li> </ol> <pre><code>--- A trait describing additive homomorphicity.\ntrait\ntype AdditivelyHomomorphic T :=\n  mkAdditivelyHomomorphic@{\n    --- Adds two types implementing the ;AdditivelyHomomorphic; trait.\n    add : (v1 v2 : T) -&gt; T;\n  };\n</code></pre> <pre><code>--- Implements the trait ;Eq; for ;AdditivelyHomomorphic; types.\nProperty-AdditivelyHomomorphic\n  {T} {{Eq T}} {{AdditivelyHomomorphic T}} (f : T -&gt; T) (v1 v2 : T) : Bool :=\n  f (AdditivelyHomomorphic.add v1 v2)\n    == AdditivelyHomomorphic.add (f v1) (f v2);\n</code></pre> <ol> <li>For resources of different kinds, \\(h_\\Delta\\) has to be computationally kind-distinct: if there exists \\(kind\\) and \\(q\\) s.t. \\(h_\\Delta(kind_1, q_1) + h_\\Delta(kind_2, q_2) = h_\\Delta(kind, q)\\), it is computationally infeasible to compute \\(kind\\) and \\(q\\).</li> </ol> <pre><code>--- A trait describing kind distinctness.\ntrait\ntype KindDistinct T :=\n  mkKindDistinct@{\n    --- Adds two types implementing the ;KindDistinct; trait.\n    add : (v1 v2 : T) -&gt; T;\n  };\n</code></pre> <p>Note</p> <p>An example of a function that satisfies these properties is the Pedersen commitment scheme: it is additively homomorphic, and its kind-distinctness property comes from the discrete logarithm assumption.</p>","boost":2},{"location":"arch/system/state/resource_machine/primitive_interfaces/fixed_size_type/delta_hash.html#used-in","title":"Used in","text":"<ol> <li>Resource delta</li> <li>Compliance unit delta</li> <li>Action delta</li> <li>Transaction delta</li> </ol>","boost":2},{"location":"arch/system/state/resource_machine/primitive_interfaces/fixed_size_type/fixed_size_type.html","title":"Interface","text":"<pre><code>module arch.system.state.resource_machine.primitive_interfaces.fixed_size_type.fixed_size_type;\nimport prelude open;\n</code></pre>","boost":2},{"location":"arch/system/state/resource_machine/primitive_interfaces/fixed_size_type/fixed_size_type.html#fixed-size-type","title":"Fixed Size Type","text":"<pre><code>type FixedSize T :=\n  mkFixedSize@{\n    -- bit_size : Nat;\n    -- new : Arg -&gt; T;\n    -- equal : (T, T) Bool;\n  };\n</code></pre> <p>Fixed size type is a type, as the name suggests, of a fixed size. An example of such a type could be a prime field, unit32, or a string of a fixed size. An example of a type of not fixed size would be a list. All resource components and computable components are elements of a fixed size type. <p>The two child interfaces are arithmetic fixed size type - the fixed size type that supports addition and subtraction, and hash - the fixed size type for which the type derivation function <code>new(Arg)</code> is binding.</p>","boost":2},{"location":"arch/system/state/resource_machine/primitive_interfaces/fixed_size_type/fixed_size_type.html#fixed-size-type-hierarchy-diagram","title":"Fixed size type hierarchy diagram","text":"<pre><code>\nclassDiagram\n    class FixedSize~T, Arg~ {\n         &lt;&lt;Interface&gt;&gt;\n         +bit_size: Int\n         +new(Arg) T\n         +equal(T, T) Bool\n    }\n\n    FixedSize &lt;|-- Nonce\n    FixedSize &lt;|-- RandSeed\n    FixedSize &lt;|-- NullifierKeyCommitment\n    FixedSize &lt;|-- NullifierKey\n\n    FixedSize &lt;|-- Arithmetic\n    FixedSize &lt;|-- Hash\n\n\n    note for Hash \"fixed size types that are binding (to Arg) and collision resistant\"\n    class Hash~T, Arg~ {\n        &lt;&lt;Interface&gt;&gt;\n    }\n\n    class Arithmetic~T, Arg~ {\n        &lt;&lt;Interface&gt;&gt;\n        +add(T, T) T\n        +sub(T, T) T\n    }\n\n    Hash &lt;|-- DeltaHash\n    Arithmetic &lt;|-- DeltaHash\n\n    note for DeltaHash \"additively homomorphic and kind-distnict\"\n    class DeltaHash {\n        &lt;&lt;Interface&gt;&gt;\n    }\n</code></pre>","boost":2},{"location":"arch/system/state/resource_machine/primitive_interfaces/fixed_size_type/fixed_size_type.html#used-in-raw","title":"Used in (raw)","text":"<ol> <li> <p>Resource components:</p> <ol> <li><code>randSeed</code></li> <li><code>nonce</code></li> <li><code>nullifierKeyCommitment</code></li> </ol> </li> <li> <p><code>nullifierKey</code></p> </li> </ol>","boost":2},{"location":"arch/system/state/resource_machine/primitive_interfaces/fixed_size_type/hash.html","title":"Hash","text":"<pre><code>module arch.system.state.resource_machine.primitive_interfaces.fixed_size_type.hash;\n</code></pre>","boost":2},{"location":"arch/system/state/resource_machine/primitive_interfaces/fixed_size_type/hash.html#hash","title":"Hash","text":"<p>Hash type is defined as a fixed size type that is binding, meaning that if the input value of type <code>Arg</code> changed, the output value would change as well.</p> <p>In the context of hashes, we say <code>a</code> is an opening of a hash <code>h: Hash</code> if <code>h = hash(a)</code>.</p> <p>Todo</p> <ol> <li>for shielded: cryptographic hash, hiding</li> <li>do we want a separate interface for the logic hash, given it is a verifier key? UPD in Taiga we had the verifier key hashed. Is it fixed size? If not, what was the reason for tripple hashing? vk + hash + function privacy commitment</li> </ol>","boost":2},{"location":"arch/system/state/resource_machine/primitive_interfaces/fixed_size_type/hash.html#logichash","title":"LogicHash","text":"<p>In the case of resource logic, the hash used to compute it should output the logic's verifying key and therefore is determined by the proving system used to compute resource logic proofs.</p>","boost":2},{"location":"arch/system/state/resource_machine/primitive_interfaces/fixed_size_type/hash.html#hash-interface-diagram","title":"Hash interface diagram","text":"<pre><code>\nclassDiagram\n\n    class Hash~T, Arg~ {\n         &lt;&lt;Interface&gt;&gt;\n    }\n\n    Hash &lt;|-- LogicHash\n    Hash &lt;|-- LabelHash\n    Hash &lt;|-- ValueHash\n\n    Hash &lt;|-- Commitment\n    Hash &lt;|-- Nullifier\n    Hash &lt;|-- Kind\n    Hash &lt;|-- DeltaHash\n    Hash &lt;|-- LogicRefHash\n    Hash &lt;|-- MerkleTreeNodeHash\n\n    Hash &lt;|-- AppDataValueHash\n</code></pre>","boost":2},{"location":"arch/system/state/resource_machine/primitive_interfaces/fixed_size_type/hash.html#used-in","title":"Used in","text":"<ol> <li> <p>Resource components:</p> <ol> <li><code>logicRef</code></li> <li><code>labelRef</code></li> <li><code>valueRef</code></li> </ol> </li> <li> <p>Resource computable components:</p> <ol> <li><code>commitment</code></li> <li><code>nullifier</code></li> <li><code>kind</code></li> <li><code>delta</code></li> </ol> </li> <li> <p>Computing Merkle tree nodes and roots</p> </li> </ol>","boost":2},{"location":"arch/system/state/resource_machine/primitive_interfaces/proving_system/index.html","title":"Index","text":"<pre><code>module arch.system.state.resource_machine.primitive_interfaces.proving_system.proving_system;\n</code></pre>","boost":2},{"location":"arch/system/state/resource_machine/primitive_interfaces/proving_system/index.html#proving-system","title":"Proving system","text":"<p>Todo</p> <p>add efficiency expectations (what to prioritise)</p> <p>The resource machine differentiates between three kinds of proofs, each of which can have a distinct proving system used to produce that sort of proofs:</p> <ol> <li>resource logic proofs</li> <li>compliance proofs</li> <li>delta proofs</li> </ol> Execution context Constraints defined by Are the constraints public by default? Meaning Resource logic proof Action Application No Action is compliant with the application constraints Compliance proof Compliance unit RM instance Yes Action (partitioned into compliance units) is compliant with the RM rules Delta proof Transaction RM interface Yes Transaction is balanced <p>Every proof has three types of inputs and constraints:</p> <ol> <li>Architecture-level inputs and constraints. This type of inputs and constraints allow to enforce certain resource machine properties and have to be present in each resource logic, no matter in the context of which instantiation and application the resource logic was produced. These contraints ensure basic resource machine properties.</li> <li>Instantiation-level inputs and constraints. These inputs and constraints must be present in every resource logic compatible with a concrete resource machine instantiation but might not be required by other instantiations. These constraints ensure additional resource machine properties desired by the instantiation.</li> <li>Application-level (custom) inputs and constraints that are present in every resource logic specified by a concrete application. These constraints define how the application works.</li> </ol> <p>This specification explicitly defines only the architecture-level inputs and constraints. Only application-level constraints are referred to as custom.</p>","boost":2},{"location":"arch/system/state/resource_machine/primitive_interfaces/proving_system/index.html#proving-system-requirements","title":"Proving system requirements","text":"<p>The first two kinds of proofs, resource logic proofs and compliance proofs, follow the standard proving system interface defined here. The delta proof has an additional functionality required and is further described here.</p>","boost":2},{"location":"arch/system/state/resource_machine/primitive_interfaces/proving_system/index.html#resource-logic-proving-system-choice","title":"Resource logic proving system choice","text":"<p>Resource logic proof is the most common proof type. Each action that modifies the state of <code>n</code> resources (creates or consumes) has at least <code>n</code> resource logic proofs attached to it. In principle, the predicate checked with each proof can be different for all <code>n</code> proofs. For that reason, the proving system of choice should support easy proof instantiation process for new predicates (e.g., a SNARK that requires a trusted setup ceremony initiated for every predicate is probably not the most efficient choice for this proving system).</p>","boost":2},{"location":"arch/system/state/resource_machine/primitive_interfaces/proving_system/index.html#compliance-proving-system-choice","title":"Compliance proving system choice","text":"<p>Compliance constraints are fixed per RM instantiation, meaning that the predicate being checked is the same for each compliance unit, with only the instance and witness being different each time. For that reason, a proving system that prioritises efficiency for a single predicate over the ease of creating proofs for new predicates might be more suitable.</p>","boost":2},{"location":"arch/system/state/resource_machine/primitive_interfaces/proving_system/index.html#proving-system-hierarchy","title":"Proving system hierarchy","text":"<p>The diagram below describes the relationships between the proving system and delta proof interfaces and their instantiations that correspond to the proving system for each proof type.</p> <pre><code>---\ntitle: Proving System hierarchy\n---\nclassDiagram\n    class IProvingSystem~VerifyingKey, ProvingKey, Instance, Witness, Proof~ {\n         &lt;&lt;Interface&gt;&gt;\n         +prove(ProvingKey, Instance, Witness) Proof\n         +verify(VerifyingKey, Instance, Proof) Bool\n    }\n\n    IProvingSystem &lt;|-- ResourceLogicProvingSystem\n    IProvingSystem &lt;|-- ComplianceProvingSystem\n    IProvingSystem &lt;|-- IDeltaProvingSystem\n\n    class ResourceLogicProvingSystem\n    class ComplianceProvingSystem\n\n    class IDeltaProvingSystem~VerifyingKey, ProvingKey, Instance, Witness, Proof~ {\n         &lt;&lt;Interface&gt;&gt;\n        +aggregate(Proof, Proof) Proof\n    }\n    IDeltaProvingSystem &lt;|-- DeltaProvingSystem\n\n    class DeltaProvingSystem\n</code></pre>","boost":2},{"location":"arch/system/state/resource_machine/primitive_interfaces/proving_system/proving_system_delta.html","title":"Delta proving system","text":"<pre><code>module arch.system.state.resource_machine.primitive_interfaces.proving_system.proving_system_delta;\n</code></pre>","boost":2},{"location":"arch/system/state/resource_machine/primitive_interfaces/proving_system/proving_system_delta.html#delta-proving-system","title":"Delta Proving System","text":"<p>Delta proving system is used to prove that the transaction delta is equal to a certain value. To support transaction composition that results in a new transaction being produced, the delta proving system must, in addition to the standard proving system interface, provide a proof aggregation function:</p> <p><code>DeltaProvingSystem</code>:</p> <ol> <li><code>prove(PS.ProvingKey, PS.Instance, PS.Witness) -&gt; PS.Proof</code></li> <li><code>verify(PS.VerifyingKey, PS.Instance, PS.Proof) -&gt; Bool</code></li> <li><code>aggregate(PS.Proof, PS.Proof) -&gt; PS.Proof</code></li> </ol> <p>The aggregation function allows to aggregate proofs in a way that if \\(\\pi_1\\) proves that the first transaction's balance is \\(b_1\\) and the second proof \\(\\pi_2\\) proves the second transaction's balance is \\(b_2\\), then the proof \\(Aggregate(\\pi_1, \\pi_2)\\) proves that the composed transaction's balance is \\(b_1 + b_2\\).</p> <pre><code>---\ntitle: Proving System hierarchy\n---\nclassDiagram\n    class IProvingSystem~VerifyingKey, ProvingKey, Instance, Witness, Proof~ {\n         &lt;&lt;Interface&gt;&gt;\n         +prove(ProvingKey, Instance, Witness) Proof\n         +verify(VerifyingKey, Instance, Proof) Bool\n    }\n\n    IProvingSystem &lt;|-- IDeltaProvingSystem\n\n    class IDeltaProvingSystem~VerifyingKey, ProvingKey, Instance, Witness, Proof~ {\n         &lt;&lt;Interface&gt;&gt;\n        +aggregate(Proof, Proof) Proof\n    }\n    IDeltaProvingSystem &lt;|-- DeltaProvingSystem\n\n    class DeltaProvingSystem\n</code></pre>","boost":2},{"location":"arch/system/state/resource_machine/primitive_interfaces/proving_system/proving_system_types.html","title":"Definitions","text":"<pre><code>module arch.system.state.resource_machine.primitive_interfaces.proving_system.proving_system_types;\n</code></pre>","boost":2},{"location":"arch/system/state/resource_machine/primitive_interfaces/proving_system/proving_system_types.html#proving-system-definition","title":"Proving system definition","text":"<p>We define a set of structures required to define a proving system \\(PS\\) as follows:</p> <ul> <li>Proof \\(\\pi: PS.Proof\\) - proves that a specific statement <code>f</code> with the inputs <code>x</code> and <code>w</code> evaluates to <code>True</code>.</li> <li>Instance \\(x: PS.Instance\\) is the ordered input data structure used to produce and verify a proof.</li> <li>Witness \\(w: PS.Witness\\) is the ordered input data structure used to produce (but not verify) a proof.</li> <li>Proving key \\(pk: PS.ProvingKey\\) contains the data required to produce a proof for a pair \\((x, w)\\). Specific to a particular statement (different statements <code>f</code> and <code>f'</code> imply different proving keys) being proven, but doesn't depend on the inputs.</li> <li>Verifying key \\(vk: PS.VerifyingKey\\) contains the data required, along with the instance \\(x\\), to verify a proof \\(\\pi\\). Specific to a particular statement being proven (different statements <code>f</code> and <code>f'</code> imply different verifying keys), but doesn't depend on the inputs.</li> </ul> <p>A proving system \\(PS\\) consists of a pair of algorithms, \\((Prove, Verify)\\):</p> <ul> <li>\\(Prove(pk, x, w): PS.ProvingKey \\times PS.Instance \\times PS.Witness \\rightarrow PS.Proof\\)</li> <li>\\(Verify(vk, x, \\pi): PS.VerifyingKey \\times PS.Instance \\times PS.Proof \\rightarrow Bool\\).</li> </ul> <p>Note</p> <p>To verify a proof created for instance <code>x</code>, the same instance <code>x</code> must be used. For instances that contain elements of the same type, the order of the elements must be preserved.</p>","boost":2},{"location":"arch/system/state/resource_machine/primitive_interfaces/proving_system/proving_system_types.html#properties","title":"Properties","text":"<p>A proving system must have the following properties:</p> <ul> <li>Completeness: it must be possible to make a proof for a statement which is true.</li> <li>Soundness: it must not be possible to make a proof for a statement which is false.</li> </ul> <p>For a statement <code>f</code>, <code>Verify(vk, x, proof) = True</code> implies that <code>f x w = True</code> and <code>Verify(vk, x, proof) = False</code> implies that <code>f x w = False</code>.</p> <p>Certain proving systems may also be zero-knowledge, meaning that the produced proofs reveal no information other than their own validity.</p> <p>A proof \\(\\pi\\) for which \\(Verify(pr) = True\\) is considered valid.</p>","boost":2},{"location":"arch/system/state/resource_machine/primitive_interfaces/proving_system/proving_system_types.html#common-proving-scheme-types","title":"Common proving scheme types","text":"<ul> <li>The trivial scheme is one where computation is simply replicated. The   trivial scheme is defined as <code>verify(predicate, x, _) = predicate x</code>. It has no extra security assumptions but is not succinct. In this case, all of the data is used for both proving and verifying and witness and proof has unit type <code>()</code>.</li> </ul> <ul> <li>The trusted delegation scheme is one where computation is delegated to a   known, trusted party whose work is not checked. The trusted delegation scheme   is defined as <code>verify((predicate, pk), x, sig) = checkSignature pk (predicate, x) sig</code>, where the trusted party is assumed to produce such a   signature only if <code>predicate x = True</code>. This scheme is succinct but requires a   trusted party assumption (which could be generalised to a threshold quorum in   the obvious way). Note that since the computation is still verifiable, a   signer of <code>(predicate, x)</code> where <code>predicate x = False</code> could be held   accountable by anyone else who later evaluated the predicate. In this case witness also has unit type and the proof has the type <code>Signature</code>.</li> </ul> <ul> <li>The succinct proof-of-knowledge scheme is one where the result of computation is attested to with a cryptographic proof (of the sort commonly instantiated by modern-day SNARKs &amp; STARKs). Succinct proof-of-knowledge schemes provide succinctness as well as verifiability subject to the scheme-specific cryptographic assumptions. They may also possibly be zero-knowledge, in which the verifier learns nothing other than <code>predicate x w = True</code> (in this case, and in others, <code>w</code> will be \"hidden\" with hash functions and <code>x</code> will remain public (and include the hiding representations of <code>w</code>), such that the verifier knows only <code>hash w</code> and <code>x</code> but the substance of the relation obtains over the preimages).</li> </ul> <p>Assuming the proving system is used to verify that a predicate evaluated on its inputs returns <code>True</code>, the table below describes what each parameter will be for each of the three common proving system instantiations:</p> Proving key Verifying key Instance (x) Witness (w) Proof Properties Trivial scheme predicate predicate predicate's arguments () () transparent, not succinct Trusted delegation predicate + signing key predicate + signature verifying key predicate's arguments () signature succinct, trusted, verifiable Succinct PoK defined by the scheme (incl. predicate representation) defined by the scheme public input private input defined by the scheme succinct, verifiable, possibly zero knowledge <p>Note</p> <p>In practice, the predicate and its arguments can be represented as a hash or commitment to the actual value. In the trivial scheme, they would have to be opened in order to verify them. In the trusted delegation case, they don't have to be opened if the signature is produced over the hashed values.</p> <p>Note</p> <p>For application developers: writing applications that can work with all types of systems can be challenging since different proof types require different argument split between instance and witness (e.g., trivial scheme, unlike succinct PoK, expects no witness). The current solution is to write applications with succinct PoK types of proving systems in mind, which then can be translated to other proving systems by moving witness arguments to instance.</p>","boost":2},{"location":"indexes/engines.html","title":"Engines","text":"","tags":["index"]},{"location":"indexes/engines.html#list-of-engines","title":"List of engines","text":"","tags":["index"]},{"location":"indexes/engines.html#tag:engine-definition","title":"engine-definition","text":"<ul> <li>            Commitment Engine          </li> <li>            Decryption Engine          </li> <li>            Encryption Engine          </li> <li>            Executor Engine          </li> <li>            Identity Management Engine          </li> <li>            Local Key Value Storage Engine          </li> <li>            Local Time Series Storage Engine          </li> <li>            Logging Engine          </li> <li>            Mempool Worker Engine          </li> <li>            Naming Engine          </li> <li>            Network Registry Engine          </li> <li>            Pub/Sub Topic Engine          </li> <li>            ReadsFor Engine          </li> <li>            Router Engine          </li> <li>            Shard Engine          </li> <li>            Storage Engine          </li> <li>            Ticker Engine          </li> <li>            Transport          </li> <li>            Verification Engine          </li> <li>            Wall Clock Engine          </li> </ul>","tags":["index"]},{"location":"indexes/modules.html","title":"Modules","text":"<p>All the Juvix modules for the Anoma Specification are listed below.</p>","tags":["index"]},{"location":"indexes/modules.html#juvix-package-version","title":"Juvix Package version","text":"<pre><code>package : Package :=\n  defaultPackage@{\n    name := \"nspec\";\n    version := mkVersion 0 1 4;\n    dependencies :=\n      [github \"anoma\" \"juvix-stdlib\" \"v0.11.0\"]\n  };\n</code></pre>","tags":["index"]},{"location":"indexes/modules.html#modules-by-letter","title":"Modules by letter","text":"","tags":["index"]},{"location":"indexes/tags.html","title":"List of tags","text":"","tags":["index"]},{"location":"indexes/tags.html#tag:accumulator","title":"accumulator","text":"<ul> <li>            Index          </li> </ul>","tags":["index"]},{"location":"indexes/tags.html#tag:behaviour","title":"behaviour","text":"<ul> <li>            Commitment Behaviour          </li> <li>            Decryption Behaviour          </li> <li>            Encryption Behaviour          </li> <li>            Engine Behaviour          </li> <li>            Executor Behaviour          </li> <li>            Identity Management Behaviour          </li> <li>            Local Key Value Storage Behaviour          </li> <li>            Local Time Series Storage Behaviour          </li> <li>            Logging Behaviour          </li> <li>            Mempool Worker Behaviour          </li> <li>            Naming Behaviour          </li> <li>            Network Registry Behaviour          </li> <li>            Pub/Sub Topic Behaviour          </li> <li>            ReadsFor Behaviour          </li> <li>            Router Behaviour          </li> <li>            Shard Behaviour          </li> <li>            SignsFor Behaviour          </li> <li>            Storage Behaviour          </li> <li>            Ticker Behaviour          </li> <li>            Transport Connection Behaviour          </li> <li>            Transport Protocol Behaviour          </li> <li>            Transport behaviour          </li> <li>            Verification Behaviour          </li> <li>            Wall Clock Behaviour          </li> </ul>","tags":["index"]},{"location":"indexes/tags.html#tag:commitment","title":"commitment","text":"<ul> <li>            Commitment Behaviour          </li> <li>            Commitment Configuration          </li> <li>            Commitment Engine          </li> <li>            Commitment Environment          </li> <li>            Commitment Messages          </li> <li>            Index          </li> </ul>","tags":["index"]},{"location":"indexes/tags.html#tag:concept","title":"concept","text":"<ul> <li>            Engine          </li> <li>            Node          </li> <li>            Subsystem          </li> </ul>","tags":["index"]},{"location":"indexes/tags.html#tag:configuration","title":"configuration","text":"<ul> <li>            Anoma Configuration          </li> <li>            Commitment Configuration          </li> <li>            Decryption Configuration          </li> <li>            Encryption Configuration          </li> <li>            Engine Configuration          </li> <li>            Executor Configuration          </li> <li>            Identity Management Configuration          </li> <li>            Local Key Value Storage Configuration          </li> <li>            Local Time Series Storage Configuration          </li> <li>            Logging Configuration          </li> <li>            Mempool Worker Configuration          </li> <li>            Naming Configuration          </li> <li>            Network Registry Configuration          </li> <li>            Pub/Sub Topic Configuration          </li> <li>            ReadsFor Configuration          </li> <li>            Router Configuration          </li> <li>            Shard Configuration          </li> <li>            SignsFor Configuration          </li> <li>            Storage Configuration          </li> <li>            Ticker Configuration          </li> <li>            Transport Connection Configuration          </li> <li>            Transport Protocol Configuration          </li> <li>            Transport config          </li> <li>            Verification Configuration          </li> <li>            Wall Clock Configuration          </li> </ul>","tags":["index"]},{"location":"indexes/tags.html#tag:crypto","title":"crypto","text":"<ul> <li>            Crypto          </li> </ul>","tags":["index"]},{"location":"indexes/tags.html#tag:decryption","title":"decryption","text":"<ul> <li>            Decryption Behaviour          </li> <li>            Decryption Configuration          </li> <li>            Decryption Engine          </li> <li>            Decryption Environment          </li> <li>            Decryption Messages          </li> </ul>","tags":["index"]},{"location":"indexes/tags.html#tag:encryption","title":"encryption","text":"<ul> <li>            Encryption Behaviour          </li> <li>            Encryption Configuration          </li> <li>            Encryption Engine          </li> <li>            Encryption Environment          </li> <li>            Encryption Messages          </li> </ul>","tags":["index"]},{"location":"indexes/tags.html#tag:engine","title":"engine","text":"<ul> <li>            Anoma Configuration          </li> <li>            Anoma Environment          </li> <li>            Anoma Message          </li> <li>            Commitment Behaviour          </li> <li>            Commitment Configuration          </li> <li>            Commitment Engine          </li> <li>            Commitment Environment          </li> <li>            Commitment Messages          </li> <li>            Decryption Behaviour          </li> <li>            Decryption Configuration          </li> <li>            Decryption Engine          </li> <li>            Decryption Environment          </li> <li>            Decryption Messages          </li> <li>            Encryption Behaviour          </li> <li>            Encryption Configuration          </li> <li>            Encryption Engine          </li> <li>            Encryption Environment          </li> <li>            Encryption Messages          </li> <li>            Engine          </li> <li>            Engine          </li> <li>            Engine Behaviour          </li> <li>            Engine Configuration          </li> <li>            Engine Environment          </li> <li>            Executor Behaviour          </li> <li>            Executor Configuration          </li> <li>            Executor Engine          </li> <li>            Executor Environment          </li> <li>            Executor Messages          </li> <li>            Identity Management Behaviour          </li> <li>            Identity Management Configuration          </li> <li>            Identity Management Engine          </li> <li>            Identity Management Environment          </li> <li>            Identity Management Messages          </li> <li>            Local Key Value Storage Behaviour          </li> <li>            Local Key Value Storage Configuration          </li> <li>            Local Key Value Storage Engine          </li> <li>            Local Key Value Storage Environment          </li> <li>            Local Key Value Storage Messages          </li> <li>            Local Time Series Storage Behaviour          </li> <li>            Local Time Series Storage Configuration          </li> <li>            Local Time Series Storage Engine          </li> <li>            Local Time Series Storage Environment          </li> <li>            Local Time Series Storage Messages          </li> <li>            Logging Behaviour          </li> <li>            Logging Configuration          </li> <li>            Logging Engine          </li> <li>            Logging Environment          </li> <li>            Logging Messages          </li> <li>            Mempool Worker Behaviour          </li> <li>            Mempool Worker Configuration          </li> <li>            Mempool Worker Engine          </li> <li>            Mempool Worker Environment          </li> <li>            Mempool Worker Messages          </li> <li>            Naming Behaviour          </li> <li>            Naming Configuration          </li> <li>            Naming Engine          </li> <li>            Naming Environment          </li> <li>            Naming Messages          </li> <li>            Network Registry Behaviour          </li> <li>            Network Registry Configuration          </li> <li>            Network Registry Engine          </li> <li>            Network Registry Messages          </li> <li>            Pub/Sub Topic Behaviour          </li> <li>            Pub/Sub Topic Configuration          </li> <li>            Pub/Sub Topic Engine          </li> <li>            Pub/Sub Topic Environment          </li> <li>            Pub/Sub Topic Messages          </li> <li>            ReadsFor Behaviour          </li> <li>            ReadsFor Configuration          </li> <li>            ReadsFor Engine          </li> <li>            ReadsFor Environment          </li> <li>            ReadsFor Messages          </li> <li>            Router Behaviour          </li> <li>            Router Configuration          </li> <li>            Router Engine          </li> <li>            Router Environment          </li> <li>            Router Messages          </li> <li>            Shard Behaviour          </li> <li>            Shard Configuration          </li> <li>            Shard Engine          </li> <li>            Shard Environment          </li> <li>            Shard Messages          </li> <li>            SignsFor Behaviour          </li> <li>            SignsFor Configuration          </li> <li>            SignsFor Engine          </li> <li>            SignsFor Environment          </li> <li>            SignsFor Messages          </li> <li>            Storage Behaviour          </li> <li>            Storage Configuration          </li> <li>            Storage Engine          </li> <li>            Storage Environment          </li> <li>            Storage Messages          </li> <li>            Ticker Behaviour          </li> <li>            Ticker Configuration          </li> <li>            Ticker Engine          </li> <li>            Ticker Environment          </li> <li>            Ticker Messages          </li> <li>            Transport          </li> <li>            Transport Connection Behaviour          </li> <li>            Transport Connection Configuration          </li> <li>            Transport Connection Environment          </li> <li>            Transport Connection Messages          </li> <li>            Transport Protocol Behaviour          </li> <li>            Transport Protocol Configuration          </li> <li>            Transport Protocol Environment          </li> <li>            Transport Protocol Messages          </li> <li>            Transport behaviour          </li> <li>            Transport config          </li> <li>            Transport environment          </li> <li>            Transport messages          </li> <li>            Verification Behaviour          </li> <li>            Verification Configuration          </li> <li>            Verification Engine          </li> <li>            Verification Environment          </li> <li>            Verification Messages          </li> <li>            Wall Clock Behaviour          </li> <li>            Wall Clock Configuration          </li> <li>            Wall Clock Engine          </li> <li>            Wall Clock Environment          </li> <li>            Wall Clock Messages          </li> </ul>","tags":["index"]},{"location":"indexes/tags.html#tag:engine-definition","title":"engine-definition","text":"<ul> <li>            Commitment Engine          </li> <li>            Decryption Engine          </li> <li>            Encryption Engine          </li> <li>            Executor Engine          </li> <li>            Identity Management Engine          </li> <li>            Local Key Value Storage Engine          </li> <li>            Local Time Series Storage Engine          </li> <li>            Logging Engine          </li> <li>            Mempool Worker Engine          </li> <li>            Naming Engine          </li> <li>            Network Registry Engine          </li> <li>            Pub/Sub Topic Engine          </li> <li>            ReadsFor Engine          </li> <li>            Router Engine          </li> <li>            Shard Engine          </li> <li>            Storage Engine          </li> <li>            Ticker Engine          </li> <li>            Transport          </li> <li>            Verification Engine          </li> <li>            Wall Clock Engine          </li> </ul>","tags":["index"]},{"location":"indexes/tags.html#tag:environment","title":"environment","text":"<ul> <li>            Anoma Environment          </li> <li>            Commitment Environment          </li> <li>            Decryption Environment          </li> <li>            Encryption Environment          </li> <li>            Engine Environment          </li> <li>            Executor Environment          </li> <li>            Identity Management Environment          </li> <li>            Local Key Value Storage Environment          </li> <li>            Local Time Series Storage Environment          </li> <li>            Logging Environment          </li> <li>            Mempool Worker Environment          </li> <li>            Naming Environment          </li> <li>            Network Registry Environment          </li> <li>            Pub/Sub Topic Environment          </li> <li>            ReadsFor Environment          </li> <li>            Router Environment          </li> <li>            Shard Environment          </li> <li>            SignsFor Environment          </li> <li>            Storage Environment          </li> <li>            Ticker Environment          </li> <li>            Transport Connection Environment          </li> <li>            Transport Protocol Environment          </li> <li>            Transport environment          </li> <li>            Verification Environment          </li> <li>            Wall Clock Environment          </li> </ul>","tags":["index"]},{"location":"indexes/tags.html#tag:example","title":"example","text":"<ul> <li>            Template Engine          </li> <li>            Ticker Behaviour          </li> <li>            Ticker Configuration          </li> <li>            Ticker Engine          </li> <li>            Ticker Environment          </li> <li>            Ticker Messages          </li> </ul>","tags":["index"]},{"location":"indexes/tags.html#tag:executor","title":"executor","text":"<ul> <li>            Executor Behaviour          </li> <li>            Executor Configuration          </li> <li>            Executor Engine          </li> <li>            Executor Environment          </li> <li>            Executor Messages          </li> </ul>","tags":["index"]},{"location":"indexes/tags.html#tag:hardware-subsystem","title":"hardware-subsystem","text":"<ul> <li>            Local Key Value Storage Behaviour          </li> <li>            Local Key Value Storage Configuration          </li> <li>            Local Key Value Storage Engine          </li> <li>            Local Key Value Storage Environment          </li> <li>            Local Key Value Storage Messages          </li> <li>            Local Time Series Storage Behaviour          </li> <li>            Local Time Series Storage Configuration          </li> <li>            Local Time Series Storage Engine          </li> <li>            Local Time Series Storage Environment          </li> <li>            Local Time Series Storage Messages          </li> <li>            Logging Behaviour          </li> <li>            Logging Configuration          </li> <li>            Logging Engine          </li> <li>            Logging Environment          </li> <li>            Logging Messages          </li> <li>            Wall Clock Behaviour          </li> <li>            Wall Clock Configuration          </li> <li>            Wall Clock Engine          </li> <li>            Wall Clock Environment          </li> <li>            Wall Clock Messages          </li> </ul>","tags":["index"]},{"location":"indexes/tags.html#tag:identity","title":"identity","text":"<ul> <li>            Identity Architecture Types          </li> </ul>","tags":["index"]},{"location":"indexes/tags.html#tag:identity-management","title":"identity-management","text":"<ul> <li>            Identity Management Behaviour          </li> <li>            Identity Management Configuration          </li> <li>            Identity Management Engine          </li> <li>            Identity Management Environment          </li> <li>            Identity Management Messages          </li> </ul>","tags":["index"]},{"location":"indexes/tags.html#tag:identity-subsystem","title":"identity-subsystem","text":"<ul> <li>            Commitment Behaviour          </li> <li>            Commitment Configuration          </li> <li>            Commitment Engine          </li> <li>            Commitment Environment          </li> <li>            Commitment Messages          </li> <li>            Decryption Behaviour          </li> <li>            Decryption Configuration          </li> <li>            Decryption Engine          </li> <li>            Decryption Environment          </li> <li>            Decryption Messages          </li> <li>            Encryption Behaviour          </li> <li>            Encryption Configuration          </li> <li>            Encryption Engine          </li> <li>            Encryption Environment          </li> <li>            Encryption Messages          </li> <li>            Identity Management Behaviour          </li> <li>            Identity Management Configuration          </li> <li>            Identity Management Engine          </li> <li>            Identity Management Environment          </li> <li>            Identity Management Messages          </li> <li>            Naming Behaviour          </li> <li>            Naming Configuration          </li> <li>            Naming Engine          </li> <li>            Naming Environment          </li> <li>            Naming Messages          </li> <li>            ReadsFor Behaviour          </li> <li>            ReadsFor Configuration          </li> <li>            ReadsFor Engine          </li> <li>            ReadsFor Environment          </li> <li>            ReadsFor Messages          </li> <li>            SignsFor Behaviour          </li> <li>            SignsFor Configuration          </li> <li>            SignsFor Engine          </li> <li>            SignsFor Environment          </li> <li>            SignsFor Messages          </li> <li>            Verification Behaviour          </li> <li>            Verification Configuration          </li> <li>            Verification Engine          </li> <li>            Verification Environment          </li> <li>            Verification Messages          </li> </ul>","tags":["index"]},{"location":"indexes/tags.html#tag:local-key-value-storage","title":"local-key-value-storage","text":"<ul> <li>            Local Key Value Storage Behaviour          </li> <li>            Local Key Value Storage Configuration          </li> <li>            Local Key Value Storage Engine          </li> <li>            Local Key Value Storage Environment          </li> <li>            Local Key Value Storage Messages          </li> </ul>","tags":["index"]},{"location":"indexes/tags.html#tag:local-time-series-storage","title":"local-time-series-storage","text":"<ul> <li>            Local Time Series Storage Behaviour          </li> <li>            Local Time Series Storage Configuration          </li> <li>            Local Time Series Storage Engine          </li> <li>            Local Time Series Storage Environment          </li> <li>            Local Time Series Storage Messages          </li> </ul>","tags":["index"]},{"location":"indexes/tags.html#tag:logging","title":"logging","text":"<ul> <li>            Logging Behaviour          </li> <li>            Logging Configuration          </li> <li>            Logging Engine          </li> <li>            Logging Environment          </li> <li>            Logging Messages          </li> </ul>","tags":["index"]},{"location":"indexes/tags.html#tag:mailboxes","title":"mailboxes","text":"<ul> <li>            Messages &amp; Mailboxes          </li> </ul>","tags":["index"]},{"location":"indexes/tags.html#tag:mempool-worker","title":"mempool-worker","text":"<ul> <li>            Mempool Worker Behaviour          </li> <li>            Mempool Worker Configuration          </li> <li>            Mempool Worker Engine          </li> <li>            Mempool Worker Environment          </li> <li>            Mempool Worker Messages          </li> </ul>","tags":["index"]},{"location":"indexes/tags.html#tag:message-types","title":"message-types","text":"<ul> <li>            Anoma Message          </li> <li>            Commitment Messages          </li> <li>            Decryption Messages          </li> <li>            Encryption Messages          </li> <li>            Executor Messages          </li> <li>            Identity Management Messages          </li> <li>            Local Key Value Storage Messages          </li> <li>            Local Time Series Storage Messages          </li> <li>            Logging Messages          </li> <li>            Mempool Worker Messages          </li> <li>            Messages &amp; Mailboxes          </li> <li>            Naming Messages          </li> <li>            Network Registry Messages          </li> <li>            Pub/Sub Topic Messages          </li> <li>            ReadsFor Messages          </li> <li>            Router Messages          </li> <li>            Shard Messages          </li> <li>            SignsFor Messages          </li> <li>            Storage Messages          </li> <li>            Ticker Messages          </li> <li>            Transport Connection Messages          </li> <li>            Transport Protocol Messages          </li> <li>            Transport messages          </li> <li>            Verification Messages          </li> <li>            Wall Clock Messages          </li> </ul>","tags":["index"]},{"location":"indexes/tags.html#tag:naming","title":"naming","text":"<ul> <li>            Naming Behaviour          </li> <li>            Naming Configuration          </li> <li>            Naming Engine          </li> <li>            Naming Environment          </li> <li>            Naming Messages          </li> </ul>","tags":["index"]},{"location":"indexes/tags.html#tag:network-subsystem","title":"network-subsystem","text":"<ul> <li>            Network Registry Behaviour          </li> <li>            Network Registry Configuration          </li> <li>            Network Registry Engine          </li> <li>            Network Registry Environment          </li> <li>            Network Registry Messages          </li> <li>            Pub/Sub Topic Behaviour          </li> <li>            Pub/Sub Topic Configuration          </li> <li>            Pub/Sub Topic Engine          </li> <li>            Pub/Sub Topic Environment          </li> <li>            Pub/Sub Topic Messages          </li> <li>            Router          </li> <li>            Router Behaviour          </li> <li>            Router Configuration          </li> <li>            Router Engine          </li> <li>            Router Environment          </li> <li>            Router Messages          </li> <li>            Storage          </li> <li>            Storage Behaviour          </li> <li>            Storage Configuration          </li> <li>            Storage Engine          </li> <li>            Storage Environment          </li> <li>            Storage Messages          </li> <li>            Transport          </li> <li>            Transport          </li> <li>            Transport Connection Behaviour          </li> <li>            Transport Connection Configuration          </li> <li>            Transport Connection Environment          </li> <li>            Transport Connection Messages          </li> <li>            Transport Protocol Behaviour          </li> <li>            Transport Protocol Configuration          </li> <li>            Transport Protocol Environment          </li> <li>            Transport Protocol Messages          </li> <li>            Transport behaviour          </li> <li>            Transport config          </li> <li>            Transport environment          </li> <li>            Transport messages          </li> </ul>","tags":["index"]},{"location":"indexes/tags.html#tag:node","title":"node","text":"<ul> <li>            Node          </li> </ul>","tags":["index"]},{"location":"indexes/tags.html#tag:node-architecture","title":"node-architecture","text":"<ul> <li>            Anoma Configuration          </li> <li>            Anoma Environment          </li> <li>            Anoma Message          </li> <li>            Basics          </li> <li>            Commitment Behaviour          </li> <li>            Commitment Configuration          </li> <li>            Commitment Engine          </li> <li>            Commitment Environment          </li> <li>            Commitment Messages          </li> <li>            Crypto          </li> <li>            Decryption Behaviour          </li> <li>            Decryption Configuration          </li> <li>            Decryption Engine          </li> <li>            Decryption Environment          </li> <li>            Decryption Messages          </li> <li>            Encryption Behaviour          </li> <li>            Encryption Configuration          </li> <li>            Encryption Engine          </li> <li>            Encryption Environment          </li> <li>            Encryption Messages          </li> <li>            Engine          </li> <li>            Engine          </li> <li>            Engine Behaviour          </li> <li>            Engine Configuration          </li> <li>            Engine Environment          </li> <li>            Executor Behaviour          </li> <li>            Executor Configuration          </li> <li>            Executor Engine          </li> <li>            Executor Environment          </li> <li>            Executor Messages          </li> <li>            Identities          </li> <li>            Identity Management Behaviour          </li> <li>            Identity Management Configuration          </li> <li>            Identity Management Engine          </li> <li>            Identity Management Environment          </li> <li>            Identity Management Messages          </li> <li>            Local Key Value Storage Behaviour          </li> <li>            Local Key Value Storage Configuration          </li> <li>            Local Key Value Storage Engine          </li> <li>            Local Key Value Storage Environment          </li> <li>            Local Key Value Storage Messages          </li> <li>            Local Time Series Storage Behaviour          </li> <li>            Local Time Series Storage Configuration          </li> <li>            Local Time Series Storage Engine          </li> <li>            Local Time Series Storage Environment          </li> <li>            Local Time Series Storage Messages          </li> <li>            Logging Behaviour          </li> <li>            Logging Configuration          </li> <li>            Logging Engine          </li> <li>            Logging Environment          </li> <li>            Logging Messages          </li> <li>            Mempool Worker Behaviour          </li> <li>            Mempool Worker Configuration          </li> <li>            Mempool Worker Engine          </li> <li>            Mempool Worker Environment          </li> <li>            Mempool Worker Messages          </li> <li>            Messages &amp; Mailboxes          </li> <li>            Naming Behaviour          </li> <li>            Naming Configuration          </li> <li>            Naming Engine          </li> <li>            Naming Environment          </li> <li>            Naming Messages          </li> <li>            Network Registry Behaviour          </li> <li>            Network Registry Configuration          </li> <li>            Network Registry Engine          </li> <li>            Network Registry Environment          </li> <li>            Network Registry Messages          </li> <li>            Node          </li> <li>            Pub/Sub Topic Behaviour          </li> <li>            Pub/Sub Topic Configuration          </li> <li>            Pub/Sub Topic Engine          </li> <li>            Pub/Sub Topic Environment          </li> <li>            Pub/Sub Topic Messages          </li> <li>            ReadsFor Behaviour          </li> <li>            ReadsFor Configuration          </li> <li>            ReadsFor Engine          </li> <li>            ReadsFor Environment          </li> <li>            ReadsFor Messages          </li> <li>            Router          </li> <li>            Router Behaviour          </li> <li>            Router Configuration          </li> <li>            Router Engine          </li> <li>            Router Environment          </li> <li>            Router Messages          </li> <li>            Shard Behaviour          </li> <li>            Shard Configuration          </li> <li>            Shard Engine          </li> <li>            Shard Environment          </li> <li>            Shard Messages          </li> <li>            SignsFor Behaviour          </li> <li>            SignsFor Configuration          </li> <li>            SignsFor Engine          </li> <li>            SignsFor Environment          </li> <li>            SignsFor Messages          </li> <li>            Storage          </li> <li>            Storage Behaviour          </li> <li>            Storage Configuration          </li> <li>            Storage Engine          </li> <li>            Storage Environment          </li> <li>            Storage Messages          </li> <li>            Subsystem          </li> <li>            Template Engine          </li> <li>            Ticker Behaviour          </li> <li>            Ticker Configuration          </li> <li>            Ticker Engine          </li> <li>            Ticker Environment          </li> <li>            Ticker Messages          </li> <li>            Transport          </li> <li>            Transport          </li> <li>            Transport Connection Behaviour          </li> <li>            Transport Connection Configuration          </li> <li>            Transport Connection Environment          </li> <li>            Transport Connection Messages          </li> <li>            Transport Protocol Behaviour          </li> <li>            Transport Protocol Configuration          </li> <li>            Transport Protocol Environment          </li> <li>            Transport Protocol Messages          </li> <li>            Transport behaviour          </li> <li>            Transport config          </li> <li>            Transport environment          </li> <li>            Transport messages          </li> <li>            Verification Behaviour          </li> <li>            Verification Configuration          </li> <li>            Verification Engine          </li> <li>            Verification Environment          </li> <li>            Verification Messages          </li> <li>            Wall Clock Behaviour          </li> <li>            Wall Clock Configuration          </li> <li>            Wall Clock Engine          </li> <li>            Wall Clock Environment          </li> <li>            Wall Clock Messages          </li> </ul>","tags":["index"]},{"location":"indexes/tags.html#tag:nullifier","title":"nullifier","text":"<ul> <li>            Index          </li> </ul>","tags":["index"]},{"location":"indexes/tags.html#tag:ordering","title":"ordering","text":"<ul> <li>            Mempool Worker Messages          </li> </ul>","tags":["index"]},{"location":"indexes/tags.html#tag:ordering-subsystem","title":"ordering-subsystem","text":"<ul> <li>            Executor Behaviour          </li> <li>            Executor Configuration          </li> <li>            Executor Engine          </li> <li>            Executor Environment          </li> <li>            Executor Messages          </li> <li>            Mempool Worker Behaviour          </li> <li>            Mempool Worker Configuration          </li> <li>            Mempool Worker Engine          </li> <li>            Mempool Worker Environment          </li> <li>            Shard Behaviour          </li> <li>            Shard Configuration          </li> <li>            Shard Engine          </li> <li>            Shard Environment          </li> <li>            Shard Messages          </li> </ul>","tags":["index"]},{"location":"indexes/tags.html#tag:prelude","title":"prelude","text":"<ul> <li>            Anoma Configuration          </li> <li>            Anoma Environment          </li> <li>            Anoma Message          </li> <li>            Basics          </li> <li>            Crypto          </li> <li>            Engine          </li> <li>            Engine Behaviour          </li> <li>            Engine Configuration          </li> <li>            Engine Environment          </li> <li>            Identities          </li> <li>            Messages &amp; Mailboxes          </li> <li>            Router          </li> <li>            Storage          </li> <li>            Transport          </li> </ul>","tags":["index"]},{"location":"indexes/tags.html#tag:protocol","title":"protocol","text":"<ul> <li>            Index          </li> </ul>","tags":["index"]},{"location":"indexes/tags.html#tag:pub-sub-topic","title":"pub-sub-topic","text":"<ul> <li>            Pub/Sub Topic Behaviour          </li> <li>            Pub/Sub Topic Configuration          </li> <li>            Pub/Sub Topic Engine          </li> <li>            Pub/Sub Topic Environment          </li> <li>            Pub/Sub Topic Messages          </li> </ul>","tags":["index"]},{"location":"indexes/tags.html#tag:readsfor","title":"readsfor","text":"<ul> <li>            ReadsFor Behaviour          </li> <li>            ReadsFor Configuration          </li> <li>            ReadsFor Engine          </li> <li>            ReadsFor Environment          </li> <li>            ReadsFor Messages          </li> </ul>","tags":["index"]},{"location":"indexes/tags.html#tag:registry","title":"registry","text":"<ul> <li>            Network Registry Behaviour          </li> <li>            Network Registry Configuration          </li> <li>            Network Registry Engine          </li> <li>            Network Registry Environment          </li> <li>            Network Registry Messages          </li> </ul>","tags":["index"]},{"location":"indexes/tags.html#tag:resource-logic","title":"resource logic","text":"<ul> <li>            Index          </li> </ul>","tags":["index"]},{"location":"indexes/tags.html#tag:resource-machine","title":"resource-machine","text":"<ul> <li>            Index          </li> </ul>","tags":["index"]},{"location":"indexes/tags.html#tag:router","title":"router","text":"<ul> <li>            Router          </li> <li>            Router Behaviour          </li> <li>            Router Configuration          </li> <li>            Router Engine          </li> <li>            Router Environment          </li> <li>            Router Messages          </li> </ul>","tags":["index"]},{"location":"indexes/tags.html#tag:shard","title":"shard","text":"<ul> <li>            Shard Behaviour          </li> <li>            Shard Configuration          </li> <li>            Shard Engine          </li> <li>            Shard Environment          </li> <li>            Shard Messages          </li> </ul>","tags":["index"]},{"location":"indexes/tags.html#tag:signsfor","title":"signsfor","text":"<ul> <li>            SignsFor Behaviour          </li> <li>            SignsFor Configuration          </li> <li>            SignsFor Engine          </li> <li>            SignsFor Environment          </li> <li>            SignsFor Messages          </li> </ul>","tags":["index"]},{"location":"indexes/tags.html#tag:storage","title":"storage","text":"<ul> <li>            Storage          </li> <li>            Storage Behaviour          </li> <li>            Storage Configuration          </li> <li>            Storage Engine          </li> <li>            Storage Environment          </li> <li>            Storage Messages          </li> </ul>","tags":["index"]},{"location":"indexes/tags.html#tag:subsystem","title":"subsystem","text":"<ul> <li>            Subsystem          </li> </ul>","tags":["index"]},{"location":"indexes/tags.html#tag:system-architecture","title":"system-architecture","text":"<ul> <li>            Identity Architecture Types          </li> </ul>","tags":["index"]},{"location":"indexes/tags.html#tag:ticker","title":"ticker","text":"<ul> <li>            Ticker Behaviour          </li> <li>            Ticker Configuration          </li> <li>            Ticker Engine          </li> <li>            Ticker Environment          </li> <li>            Ticker Messages          </li> </ul>","tags":["index"]},{"location":"indexes/tags.html#tag:transport","title":"transport","text":"<ul> <li>            Transport          </li> <li>            Transport          </li> <li>            Transport Connection Behaviour          </li> <li>            Transport Connection Configuration          </li> <li>            Transport Connection Environment          </li> <li>            Transport Connection Messages          </li> <li>            Transport Protocol Behaviour          </li> <li>            Transport Protocol Configuration          </li> <li>            Transport Protocol Environment          </li> <li>            Transport Protocol Messages          </li> <li>            Transport behaviour          </li> <li>            Transport config          </li> <li>            Transport environment          </li> <li>            Transport messages          </li> </ul>","tags":["index"]},{"location":"indexes/tags.html#tag:types","title":"types","text":"<ul> <li>            Anoma Configuration          </li> <li>            Anoma Environment          </li> <li>            Anoma Message          </li> <li>            Basics          </li> <li>            Crypto          </li> <li>            Engine          </li> <li>            Engine Behaviour          </li> <li>            Engine Configuration          </li> <li>            Engine Environment          </li> <li>            Identities          </li> <li>            Messages &amp; Mailboxes          </li> <li>            Router          </li> <li>            Storage          </li> <li>            Transport          </li> </ul>","tags":["index"]},{"location":"indexes/tags.html#tag:verification","title":"verification","text":"<ul> <li>            Verification Behaviour          </li> <li>            Verification Configuration          </li> <li>            Verification Engine          </li> <li>            Verification Environment          </li> <li>            Verification Messages          </li> </ul>","tags":["index"]},{"location":"indexes/tags.html#tag:wall-clock-engine","title":"wall-clock-engine","text":"<ul> <li>            Wall Clock Behaviour          </li> <li>            Wall Clock Configuration          </li> <li>            Wall Clock Engine          </li> <li>            Wall Clock Environment          </li> <li>            Wall Clock Messages          </li> </ul>","tags":["index"]},{"location":"indexes/tags.html#tag:work-in-progress","title":"work-in-progress","text":"<ul> <li>            Messages &amp; Mailboxes          </li> </ul>","tags":["index"]},{"location":"tutorial/branch.html","title":"Git branching strategy","text":"<p>The general workflow is to branch off from the latest version's branch, perform your changes, open a pull request, and merge your updates.</p>","tags":["tutorial","conventions"]},{"location":"tutorial/branch.html#branching-strategy","title":"Branching strategy","text":"","tags":["tutorial","conventions"]},{"location":"tutorial/branch.html#for-changes-to-the-latest-version","title":"For changes to the latest version","text":"<p>For changes to the latest version, branch off from <code>main</code>. Name your branch by prefixing your name and an issue identifier, like <code>your-name/issue-identifier</code>.</p> <pre><code>git fetch\ngit checkout -b your-name/issue-identifier origin/main\n</code></pre>","tags":["tutorial","conventions"]},{"location":"tutorial/branch.html#for-changes-to-older-published-versions","title":"For changes to older published versions","text":"<p>For patching older versions, branch off from the specific version branch. Published versions follow the pattern <code>vX</code>, where <code>X</code> is the version number. For example, say the latest version is <code>v0.1.0</code>.</p> <p>Name your branch by prefixing your name and a patch topic, like <code>your-name/patch-topic</code>.</p> <pre><code>git checkout -b your-name/patch-topic v0.1.0\n</code></pre> <p>The git graph will look like:</p> <pre><code>%%{init: { 'theme': 'neutral' } }%%\ngitGraph:\n    commit\n    branch vX\n    checkout vX\n    commit\n    branch your-name/issue-identifier\n    checkout your-name/issue-identifier\n    commit\n    checkout vX\n    merge your-name/issue-identifier</code></pre> <p>So, if your PR is merged, the changes will be incorporated into the version branch and on the website.</p>","tags":["tutorial","conventions"]},{"location":"tutorial/branch.html#pushing-changes","title":"Pushing changes","text":"<p>When pushing changes for the first time in a new branch, set the upstream tracking branch:</p> <pre><code>git push -u origin some-branch:some-branch\n</code></pre> <p>Afterwards, for subsequent pushes the following is sufficient: <pre><code>git push\n</code></pre></p>","tags":["tutorial","conventions"]},{"location":"tutorial/branch.html#rebasing-your-work","title":"Rebasing your work","text":"<p>Every once in a while, you should rebase your branch onto the base branch, if the current version has been updated. This will incorporate the latest changes from the base branch into your branch. The steps to rebase are usually the following.</p> <ul> <li>Switch to your working branch:<pre><code>git checkout your-name/issue-identifier\n</code></pre> </li> </ul> <ul> <li>Initiate the rebase onto the target branch:<pre><code>git pull origin main --rebase\n</code></pre> <p>Or merge the changes from the base branch which is convenient most of the   time:</p> <pre><code>git merge main\n</code></pre> </li> </ul>","tags":["tutorial","conventions"]},{"location":"tutorial/branch.html#resolve-conflicts","title":"Resolve conflicts","text":"<ul> <li>Git will pause for conflict resolution.</li> <li> <p>After resolving each conflict:</p> <pre><code>git rebase --continue\n</code></pre> </li> </ul> <ul> <li> <p>To stop the rebase process:</p> <pre><code>git rebase --abort\n</code></pre> </li> </ul>","tags":["tutorial","conventions"]},{"location":"tutorial/branch.html#push-your-changes","title":"Push your changes","text":"<ul> <li>Once rebase is complete, push changes:<pre><code>git push origin your-name/issue-identifier\n</code></pre> </li> </ul> <ul> <li>A force push may be required:<pre><code>git push origin your-name/issue-identifier --force-with-lease\n</code></pre> </li> </ul>","tags":["tutorial","conventions"]},{"location":"tutorial/branch.html#important-notes","title":"Important notes","text":"<ul> <li>Ensure you are on the correct branch before making changes.</li> <li>Regularly update your branch to minimise conflicts.</li> <li>Ask for help if you encounter any issues to the maintainers.</li> </ul>","tags":["tutorial","conventions"]},{"location":"tutorial/branch.html#merging-prs","title":"Merging PRs","text":"<p>Before a PR can be merged into the <code>main</code> branch, it must be able to build the whole codebase. The CI checks this automatically, and can be also verified manually:</p> <p>First, we must check the Juvix codebase, running the following command:</p> <pre><code>juvix typecheck docs/everything.juvix.md\n</code></pre> <p>Next, we must verify the MkDocs site build by running the following command:</p> <pre><code>uv run mkdocs build\n</code></pre> <p>or with <code>just</code></p> <pre><code>just build\n</code></pre>","tags":["tutorial","conventions"]},{"location":"tutorial/branch.html#integration-branches-for-complex-changes","title":"Integration branches for complex changes","text":"<p>When making complex changes that consist of a set of interdependent changes, it's best to split them up into smaller PRs that each address a single topic.</p> <p>For example, making a change to a type can be in one PR, a change to a different type in a second PR, and applying the type changes in the rest of the code base in a third one. In this case, branch 3 needs to merge branch 1 &amp; 2 first.</p> <p>We also need to create an integration branch, which becomes the base branch for all the interdependent PRs, and a corresponding integration PR to be merged into the <code>main</code> branch.</p> <p>On GitHub, make sure to include the list of auxiliary PRs as part of the description of the integration PR.</p> <p>This way the topic branches need not be able to build the whole codebase, while the integration branch must be able to build it once all the topic branches are merged into it.</p> <p>A possible diagram of the integration branch and topic branches is the following, assuming the integration branch is <code>example/integration</code> against <code>main</code>, and the topic branches are <code>example/topic-1</code> against <code>main</code>, <code>example/topic-2</code> against <code>main</code>, and <code>example/topic-3</code> against <code>main</code>. The topic branches are squashed-and-merged into the integration branch.</p> <pre><code>%%{init: { 'theme': 'neutral' } }%%\ngitGraph:\n    commit\n    branch example/topic-1\n    checkout example/topic-1\n    commit\n    checkout main\n    branch example/topic-2\n    checkout example/topic-2\n    commit\n    checkout main\n    branch example/integration\n    checkout example/integration\n    merge example/topic-1\n    merge example/topic-2\n    commit \"Fix merge conflicts\"\n    checkout main\n    merge example/integration</code></pre>","tags":["tutorial","conventions"]},{"location":"tutorial/branch.html#fetch-the-latest-updates","title":"Fetch the latest updates","text":"<pre><code>git fetch\n</code></pre>","tags":["tutorial","conventions"]},{"location":"tutorial/branch.html#create-integration-branch","title":"Create integration branch","text":"<pre><code>git branch example/integration origin/main\n</code></pre>","tags":["tutorial","conventions"]},{"location":"tutorial/branch.html#create-topic-branches","title":"Create topic branches","text":"<pre><code>git branch example/topic-1 example/integration\ngit branch example/topic-2 example/integration\ngit branch example/topic-3 example/integration\n</code></pre>","tags":["tutorial","conventions"]},{"location":"tutorial/branch.html#merge-dependencies","title":"Merge dependencies","text":"<pre><code>git checkout example/topic-3\ngit merge example/topic-1\ngit merge example/topic-2\n</code></pre>","tags":["tutorial","conventions"]},{"location":"tutorial/branch.html#using-git-worktrees","title":"Using Git Worktrees","text":"<p>When working on multiple branches simultaneously, git worktrees come handy. Here's how to use them.</p>","tags":["tutorial","conventions"]},{"location":"tutorial/branch.html#fetch-the-latest-updates_1","title":"Fetch the latest updates","text":"<pre><code>git fetch\n</code></pre>","tags":["tutorial","conventions"]},{"location":"tutorial/branch.html#create-a-branch","title":"Create a branch","text":"<pre><code>git branch some-branch origin/main\n</code></pre>","tags":["tutorial","conventions"]},{"location":"tutorial/branch.html#create-a-worktree-for-the-branch","title":"Create a Worktree for the branch","text":"<p>Either inside the repo starting with a dot (to avoid build issues):</p> <pre><code>git worktree add /path/to/repo/.tree/some-branch some-branch\n</code></pre> <p>Or outside the repo:</p> <pre><code>git worktree add /path/to/repo-some-branch some-branch\n</code></pre>","tags":["tutorial","conventions"]},{"location":"tutorial/changelog.html","title":"Managing the Changelog","text":"<p>We now use <code>Commitizen</code> to manage our changelog entries. This simplifies the process and ensures consistent formatting. The <code>Commitizen</code> binary should be available after installation.</p>","tags":["tutorial","changelog"],"boost":3},{"location":"tutorial/changelog.html#adding-a-new-unreleased-entry","title":"Adding a New Unreleased Entry","text":"<p>To add a new changelog entry, use the <code>cz</code> command provided by <code>Commitizen</code>. This will guide you through the process interactively.</p>","tags":["tutorial","changelog"],"boost":3},{"location":"tutorial/changelog.html#using-commitizen","title":"Using Commitizen","text":"","tags":["tutorial","changelog"],"boost":3},{"location":"tutorial/changelog.html#available-types","title":"Available Types","text":"<p>When prompted, choose one of these types for your commit message:</p> <ul> <li><code>feat</code> - For new features</li> <li><code>fix</code> - For bug fixes</li> <li><code>docs</code> - For documentation changes</li> <li><code>style</code> - For code style changes (formatting, missing semi-colons, etc.)</li> <li><code>refactor</code> - For code changes that neither fix a bug nor add a feature</li> <li><code>perf</code> - For performance improvements</li> <li><code>test</code> - For adding or correcting tests</li> <li><code>chore</code> - For changes to the build process or auxiliary tools</li> </ul>","tags":["tutorial","changelog"],"boost":3},{"location":"tutorial/changelog.html#recommended-commit-message-format","title":"Recommended Commit Message Format","text":"<p>For consistency, follow the prompts to:</p> <ul> <li>Specify the type of change</li> <li>Provide a concise description of the change</li> <li>Optionally, include the issue number if the change is related to an issue</li> </ul> <p>More information about the command syntax can be found in the Commitizen documentation.</p>","tags":["tutorial","changelog"],"boost":3},{"location":"tutorial/commit_checks.html","title":"Run pre-commit checks","text":"<p>Pre-commit hooks are scripts that run before each commit to ensure code quality by checking for common issues.</p>","tags":["tutorial","conventions"],"boost":3},{"location":"tutorial/commit_checks.html#running-pre-commit-checks","title":"Running pre-commit checks","text":"<p>After installing the development tools, you can, for example, invoke all checks, by running the following command:</p> <pre><code>uv run pre-commit -- run --all-files\n</code></pre> <p>Or shorter:</p> <pre><code>just check\n</code></pre>","tags":["tutorial","conventions"],"boost":3},{"location":"tutorial/file_naming.html","title":"<code>snake_case</code> convention for naming files and folders","text":"<p>The Anoma Specification uses the <code>snake_case</code> convention for naming files and folders.</p>","tags":["tutorial","conventions"],"boost":3},{"location":"tutorial/file_naming.html#guidelines","title":"Guidelines","text":"<ul> <li>Use lowercase letters.</li> <li>Separate words with underscores <code>_</code>, instead of dashes <code>-</code> or camel case.</li> <li>No special characters or spaces.</li> </ul>","tags":["tutorial","conventions"],"boost":3},{"location":"tutorial/file_naming.html#pros","title":"Pros","text":"<ul> <li>Readability: Improves readability by clearly separating words in names, making   code more understandable.</li> <li>Consistency: Creates a uniform naming style throughout the codebase.</li> <li>Compatibility: Widely supported across different programming languages and   platforms, no issues with case sensitivity.</li> </ul>","tags":["tutorial","conventions"],"boost":3},{"location":"tutorial/file_naming.html#cons","title":"Cons","text":"<ul> <li>Length: Can make names longer.</li> <li>Visual Clutter: The underscores can create visual clutter, especially in   longer names. We suffer from this, specially in engine's description files.</li> </ul> <p>Info</p> <p>If you find any file or folder that does not follow this convention, please create an issue or a pull request to fix it. Thank you for your help!</p>","tags":["tutorial","conventions"],"boost":3},{"location":"tutorial/juvix.html","title":"Render Juvix code","text":"<p>Another feature of the Anoma documentation is the inclusion of Juvix code throughout its Markdown support. Here we assume you have Juvix already installed.</p> <p>A Juvix Markdown file is a file with extension <code>.juvix.md</code>. These files are preprocesses by the Juvix compiler to generate the final Markdown file. For this website, we are using <code>mkdocs-juvix-plugin</code>.</p>","tags":["tutorial","juvix"]},{"location":"tutorial/juvix.html#juvix-markdown-file-structure","title":"Juvix Markdown file structure","text":"<p>Very important to note is that the first Juvix code block must declare a module with the name of the file, and each block should be a sequence of well-defined expressions. This means submodules cannot be split across blocks. The name of  module must follow the folder structure of the file is in. For example, the  file <code>tutorial/basics.juvix.md</code> must declare the module <code>tutorial.basics</code>.</p> <pre><code>```juvix\nmodule tutorial.basics;\n-- ...\n```</code></pre> <p>Refer to the <code>everything.juvix.md</code> file located in the <code>docs</code> folder to see an example.</p>","tags":["tutorial","juvix"]},{"location":"tutorial/juvix.html#hide-juvix-code-blocks","title":"Hide Juvix code blocks","text":"<p>Juvix code blocks come with a few extra features, such as the ability to hide the code block from the final output. This is done by adding the <code>hide</code> attribute to the code block. For example:</p> <pre><code>```juvix hide\nmodule tutorial.basics;\n-- ...\n```</code></pre>","tags":["tutorial","juvix"]},{"location":"tutorial/juvix.html#extract-inner-module-statements","title":"Extract inner module statements","text":"<p>Another feature is the ability to extract inner module statements from the code block. This is done by adding the <code>extract-module-statements</code> attribute to the code block. This option can be accompanied by a number to indicate the number of statements to extract. For example, the following would only display the content inside the module <code>B</code>, that is, the module <code>C</code>.</p> <pre><code>```juvix extract-module-statements\nmodule B;\nmodule C;\n-- ...\n```</code></pre>","tags":["tutorial","juvix"]},{"location":"tutorial/juvix.html#snippets-of-juvix-code","title":"Snippets of Juvix code","text":"<p>You can also include snippets of Juvix code in your Markdown files. This is done by adding the <code>--8&lt;--</code> comment followed by the path to the file, and optionally a snippet identifier.</p> <p>Note</p> <p>If the path of the file ends with <code>!</code>, the raw content of the file will be included. Otherwise, for Juvix Markdown files, the content will be preprocessed by the Juvix compiler and then the generated HTML will be included.</p> <p>Snippet identifier</p> <p>To use a snippet identifier, you must wrap the Juvix code block with the syntax <code>&lt;!-- --8&lt;-- [start:snippet_identifier] --&gt;</code> and <code>&lt;!-- --8&lt;-- [end:snippet_identifier] --&gt;</code>. This technique is useful for including specific sections of a file. Alternatively, you use the standard <code>--8&lt;--</code> markers within the code and extract the snippet by appending a ! at the end of the path.</p>","tags":["tutorial","juvix"]},{"location":"tutorial/principles_and_guidelines.html","title":"Global principles and guidelines for writing Anoma Specification documentation","text":"","tags":["tutorial"]},{"location":"tutorial/principles_and_guidelines.html#principles","title":"Principles","text":"","tags":["tutorial"]},{"location":"tutorial/principles_and_guidelines.html#clarity","title":"Clarity","text":"<p>Make every page clear and concise. Footnotes may be used to add context. Additional notes that exceed a paragraph may deserve to be put into a separate file (and thus will appear in the navigation bar).</p>","tags":["tutorial"]},{"location":"tutorial/principles_and_guidelines.html#dont-repeat-yourself","title":"Don't repeat yourself!","text":"<p>Do not paste any copied material. Instead, include the material, e.g., via snippeting. The only exception is material for which there is no established method for inclusion; in this case, include the material inside a todo note <code>!!! todo \"unrepeat this\"</code>, paired with a reference to its source.</p>","tags":["tutorial"]},{"location":"tutorial/principles_and_guidelines.html#consistency","title":"Consistency","text":"<p>Terms from the glossary must be used consistently throughout the specification. Where applicable, adhere to naming schemes.</p>","tags":["tutorial"]},{"location":"tutorial/principles_and_guidelines.html#style","title":"Style","text":"<p>Conform to style guides, unless this would lead to inconsistency.</p>","tags":["tutorial"]},{"location":"tutorial/principles_and_guidelines.html#citations","title":"Citations","text":"<p>Use citations to refer to articles, books, and similar publications.</p>","tags":["tutorial"]},{"location":"tutorial/principles_and_guidelines.html#guidelines","title":"Guidelines","text":"","tags":["tutorial"]},{"location":"tutorial/principles_and_guidelines.html#accessibility","title":"Accessibility","text":"<p>The specification should be accessible to its intended readership, which should encompass at least the members of the Anoma engineering team.</p>","tags":["tutorial"]},{"location":"tutorial/principles_and_guidelines.html#internal-and-external-linking","title":"Internal and external linking","text":"<p>If you have a link for something, please use it. Chances are that it improves accessibility and moreover it helps discover inconsistencies. Use wikilinks for internal links and URL links (<code>[target](URL)</code>) only for external material (or if wikilinks do not work as expected).</p>","tags":["tutorial"]},{"location":"tutorial/principles_and_guidelines.html#implementability","title":"Implementability","text":"<p>The specification should keep design decisions to a minimum, but design decisions that are left to the potential implementer on purpose should be discussed in footnotes or notes.</p>","tags":["tutorial"]},{"location":"tutorial/versioning.html","title":"Versioning","text":"<p>The Anoma Specification follows semantic versioning.</p> <pre><code>MAJOR.MINOR.PATCH\n</code></pre> <ul> <li>MAJOR version when you make incompatible API changes</li> <li>MINOR version when you add functionality in a backward compatible manner</li> <li>PATCH version when you make backward compatible bug fixes</li> </ul>","tags":["tutorial","conventions","versioning"]},{"location":"tutorial/versioning.html#more-on-versioning-criteria","title":"More on versioning criteria","text":"<ul> <li>Major version (X.0.0): Incremented for backwards-incompatible changes, like:<p>- Breaking changes to core interfaces or types   - Removal of deprecated functionality   - Major architectural changes</p> </li> </ul> <ul> <li>Minor version (0.X.0): Incremented for backwards-compatible feature additions:<p>- New engines, message types, or behaviours   - New functionality that doesn't break existing code   - Deprecation notices for future breaking changes</p> </li> </ul> <ul> <li>Patch version (0.0.X): Incremented for backwards-compatible bug fixes:<p>- Documentation improvements   - Bug fixes that don't change interfaces   - Minor code clean-up and refactoring</p> </li> </ul>","tags":["tutorial","conventions","versioning"]},{"location":"tutorial/versioning.html#preparing-a-new-version","title":"Preparing a new version","text":"<ul> <li> Update <code>mkdocs.yml</code></li> <li> Update <code>docs/Package.juvix</code></li> <li> Update <code>docs/references/ref.bib</code></li> <li> Make sure to run <code>just sync</code> to update the dependencies and <code>just build</code> to check that the code is still typechecking.</li> <li> Git tag the new version</li> <li> Release a new changelog entry</li> </ul>","tags":["tutorial","conventions","versioning"]},{"location":"tutorial/versioning.html#update-mkdocsyml","title":"Update <code>mkdocs.yml</code>","text":"<p>Update the <code>site_version</code> to the new version.</p> mkdocs.yml<pre><code>- site_version: !ENV [SITE_VERSION, \"v0.1.0\"]\n+ site_version: !ENV [SITE_VERSION, \"v0.1.1\"]\n</code></pre>","tags":["tutorial","conventions","versioning"]},{"location":"tutorial/versioning.html#update-nspec-juvix-package-version","title":"Update <code>nspec</code> Juvix package version","text":"docs/Package.juvix<pre><code>package : Package :=\n  defaultPackage@{\n    name := \"nspec\";\n-    version := mkVersion 0 1 0;\n+    version := mkVersion 0 1 1;\n    dependencies :=\n      [github \"anoma\" \"juvix-stdlib\" \"v0.6.0\"; github \"anoma\" \"juvix-containers\" \"v0.14.1\"]\n  };\n</code></pre>","tags":["tutorial","conventions","versioning"]},{"location":"tutorial/versioning.html#update-docsrefbib","title":"Update <code>docs/ref.bib</code>","text":"<p>Update the version of the <code>nspec</code> package in the <code>ref.bib</code> file.</p> docs/ref.bib<pre><code>@software{nspec,\n  author = {Anoma},\n  title = {Anoma Specification},\n-  version = {0.1.0},\n+  version = {0.1.1},\n  url = {https://github.com/anoma/nspec}\n}\n</code></pre>","tags":["tutorial","conventions","versioning"]},{"location":"tutorial/versioning.html#update-version","title":"Update <code>VERSION</code>","text":"VERSION<pre><code>-0.1.0\n+0.1.1\n</code></pre>","tags":["tutorial","conventions","versioning"]},{"location":"tutorial/versioning.html#update-pyprojecttoml","title":"Update <code>pyproject.toml</code>","text":"pyproject.toml<pre><code>- version = \"0.1.0\"\n+ version = \"0.1.1\"\n</code></pre>","tags":["tutorial","conventions","versioning"]},{"location":"tutorial/versioning.html#git-tag-the-new-version","title":"Git tag the new version","text":"<pre><code>git tag v0.1.1\n</code></pre>","tags":["tutorial","conventions","versioning"]},{"location":"tutorial/versioning.html#release-a-new-changelog-entry","title":"Release a new changelog entry","text":"<p>Follow the Updating the changelog tutorial for more information on how to release a new changelog entry. This tutorial uses <code>unclog</code> to create a new changelog entry.</p> <p>The package started at version 0.1.0 as the initial release.</p>","tags":["tutorial","conventions","versioning"]},{"location":"tutorial/engines/index.html","title":"Tutorials on Engine Families","text":"<ul> <li>Conventions for writing engines</li> </ul>","tags":["tutorial","engine"]},{"location":"tutorial/engines/index.html#templates-for-writing-engines","title":"Templates for writing engines","text":"<ul> <li>Engine template<ul> <li>Template Engine Overview</li> <li>Template Messages</li> <li>Template Configuration</li> <li>Template Environment</li> <li>Template Behaviour</li> </ul> </li> </ul>","tags":["tutorial","engine"]},{"location":"tutorial/engines/index.html#simple-examples","title":"Simple examples","text":"<ul> <li>Ticker engine:<ul> <li>Ticker Engine Overview</li> <li>Ticker Messages</li> <li>Ticker Configuration</li> <li>Ticker Environment</li> <li>Ticker Behaviour</li> </ul> </li> </ul>","tags":["tutorial","engine"]},{"location":"tutorial/engines/interactive_timelines.html","title":"Engine Timeline Visualizer","text":"","tags":["tutorial","example","interactive"]},{"location":"tutorial/engines/interactive_timelines.html#engine-communication","title":"Engine communication","text":"<p>This interactive tutorial helps you explore how we envision engines communicating through message passing. The visualization tool takes a JSON configuration and renders an animated timeline of message interactions between engines.</p>","tags":["tutorial","example","interactive"]},{"location":"tutorial/engines/interactive_timelines.html#getting-started","title":"Getting Started","text":"","tags":["tutorial","example","interactive"]},{"location":"tutorial/engines/interactive_timelines.html#how-to-use","title":"how to use","text":"<ol> <li>Start the visualization by clicking dotted message lines.</li> <li>Hover over elements to see detailed tooltips.</li> <li>Watch the timeline scroll automatically as messages propagate.</li> <li>Observe engine states update in real-time above each engine.</li> </ol>","tags":["tutorial","example","interactive"]},{"location":"tutorial/engines/interactive_timelines.html#visual-interface-overview","title":"Visual interface overview","text":"<ul> <li>Engine Nodes: Coloured boxes at top representing system components.</li> <li>Timeline: Vertical lines showing message history and potential paths.</li> <li>Message Types:<ul> <li>Dotted Lines: Potential messages (click to send).</li> <li>Solid Lines: Active message animations</li> <li>Faded Lines: Historical messages</li> </ul> </li> </ul>","tags":["tutorial","example","interactive"]},{"location":"tutorial/engines/interactive_timelines.html#core-concepts","title":"Core Concepts","text":"","tags":["tutorial","example","interactive"]},{"location":"tutorial/engines/interactive_timelines.html#message-lifecycle","title":"message lifecycle","text":"<ol> <li>Initiation: Click potential message (dotted line).</li> <li>Transmission: Animation shows message travelling between engines.</li> <li>Processing: Receiving engine evaluates message against handlers.</li> <li>Response: New potential messages generated based on updated state.</li> </ol>","tags":["tutorial","example","interactive"]},{"location":"tutorial/engines/interactive_timelines.html#configuration-guide","title":"Configuration Guide","text":"JSON Schema Structure <pre><code>{\n\"engines\": [\n    {\n    \"name\": \"EngineName\",\n    \"initialState\": any,\n    \"messageHandlers\": [\n        {\n        \"stateEffect\": \"return state + 1;\",\n        \"guard\": \"return messageType === 'messageType1';\",\n        \"generateMessages\": [\n            {\n            \"to\": \"TargetEngineName\",\n            \"type\": \"responseMessageType\",\n            \"payload\": null\n            }\n        ]\n        }\n    ],\n    \"initialMessages\": [\n        {\n        \"to\": \"TargetEngineName\",\n        \"type\": \"initialMessageType\",\n        \"payload\": null\n        }\n    ]\n    }\n]\n}\n</code></pre> Field Reference","tags":["tutorial","example","interactive"]},{"location":"tutorial/engines/interactive_timelines.html#engine-configuration","title":"Engine configuration","text":"Field Type Description <code>name</code> string Unique engine identifier <code>initialState</code> any Starting state value <code>messageHandlers</code> array Message processing rules <code>initialMessages</code> array Initial outgoing messages","tags":["tutorial","example","interactive"]},{"location":"tutorial/engines/interactive_timelines.html#handler-configuration","title":"Handler configuration","text":"Field Context Variables Description <code>stateEffect</code> <code>state</code>, <code>payload</code> JS code returning new state <code>guard</code> <code>state</code>, <code>payload</code>, <code>messageType</code> JS condition for handler activation <code>generateMessages</code> <code>state</code>, <code>payload</code> Messages to send if guard passes","tags":["tutorial","example","interactive"]},{"location":"tutorial/engines/interactive_timelines.html#advanced-features","title":"Advanced Features","text":"<p>Special Message Handling</p> <ul> <li>Loopback Messages: Use <code>\"to\": \"from\"</code> to return messages to sender</li> <li>Dynamic Payloads: Include JS code in payload strings:   <pre><code>\"payload\": \"return {timestamp: Date.now(), value: state}\"\n</code></pre></li> <li>State Access: Handlers can access:<ul> <li><code>state</code>: Current engine state</li> <li><code>payload</code>: Received message data</li> <li><code>from</code>: Sender engine name</li> <li><code>messageType</code>: Type of received message</li> </ul> </li> </ul>","tags":["tutorial","example","interactive"]},{"location":"tutorial/engines/template.html","title":"Template Engine","text":"Juvix imports <pre><code>module tutorial.engines.template;\n\nimport tutorial.engines.template_messages open public;\nimport tutorial.engines.template_config open public;\nimport tutorial.engines.template_environment open public;\nimport tutorial.engines.template_behaviour open public;\n\nimport arch.node.types.basics open;\nimport arch.node.types.engine open;\nimport arch.node.types.anoma as Anoma open;\n\nopen template_config_example;\nopen template_environment_example;\nopen template_behaviour_example;\n</code></pre>","tags":["node-architecture","example"]},{"location":"tutorial/engines/template.html#template-engine","title":"Template Engine","text":"","tags":["node-architecture","example"]},{"location":"tutorial/engines/template.html#purpose","title":"Purpose","text":"<p>Brief summary of the purpose of the engine.</p>","tags":["node-architecture","example"]},{"location":"tutorial/engines/template.html#subsystems","title":"Subsystems","text":"<ul> <li>Template Messages</li> <li>Template Configuration</li> <li>Template Environment</li> <li>Template Behaviour</li> </ul>","tags":["node-architecture","example"]},{"location":"tutorial/engines/template.html#useful-links","title":"Useful links","text":"<ul> <li>Some</li> <li>Useful</li> <li>Links</li> </ul>","tags":["node-architecture","example"]},{"location":"tutorial/engines/template.html#type","title":"Type","text":"<pre><code>TemplateEngine : Type :=\n  Engine\n    TemplateLocalCfg\n    TemplateLocalState\n    TemplateMailboxState\n    TemplateTimerHandle\n    TemplateActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["node-architecture","example"]},{"location":"tutorial/engines/template.html#instantiation","title":"Instantiation","text":"<pre><code>exTemplateEngine : TemplateEngine :=\n  Engine.mk@{\n    cfg := exTemplateCfg;\n    env := exTemplateEnv;\n    behaviour := exTemplateBehaviour;\n  };\n</code></pre> <p>Where <code>exTemplateCfg</code> is defined as follows:</p> <p>```juvix extract-module-statements module template_config_example;</p> <p>exTemplateCfg : TemplateCfg :=     EngineCfg.mk@{       node := PublicKey.Curve25519PubKey \"0xabcd1234\";       name := \"template\";       cfg := TemplateLocalCfg.mk@{         example := 1;         value := \"hello world\";       };     }; end; <pre><code>`exTemplateEnv` is defined as follows:\n\n```juvix extract-module-statements\nmodule template_environment_example;\n\n  exTemplateEnv : TemplateEnv :=\n    EngineEnv.mk@{\n      localState := TemplateLocalState.mk@{\n        taskQueue := CustomData.mkCustomData@{\n          word := \"taskQueue\"\n        }\n      };\n      mailboxCluster := Map.empty;\n      acquaintances := Set.empty;\n      timers := []\n    };\nend;\n</code></pre></p> <p>and <code>exTemplateBehaviour</code> is defined as follows:</p> <pre><code>module template_behaviour_example;\n\n  exTemplateBehaviour : TemplateBehaviour :=\n    EngineBehaviour.mk@{\n      guards :=\n        GuardEval.First [\n          justHiGuard;\n          exampleReplyGuard;\n        ];\n    };\nend;\n</code></pre>","tags":["node-architecture","example"]},{"location":"tutorial/engines/template_behaviour.html","title":"Template Behaviour","text":"Juvix imports <pre><code>module tutorial.engines.template_behaviour;\n\nimport tutorial.engines.template_messages open;\nimport tutorial.engines.template_config open;\nimport tutorial.engines.template_environment open;\n\nimport arch.node.types.basics open;\nimport arch.node.types.identities open;\nimport arch.node.types.messages open;\nimport arch.node.types.engine open;\nimport arch.node.types.anoma as Anoma open;\n</code></pre>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_behaviour.html#template-behaviour","title":"Template Behaviour","text":"","tags":["tutorial","example"]},{"location":"tutorial/engines/template_behaviour.html#overview","title":"Overview","text":"<p>A template engine acts in the ways described on this page. The action labels correspond to the actions that can be performed by the engine. Using the action labels, we describe the effects of the actions.</p>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_behaviour.html#action-arguments","title":"Action arguments","text":"<p>The action arguments are set by a guard and passed to the action function as part of the <code>GuardOutput</code>.</p> Auxiliary Juvix code <p> <pre><code>syntax alias Val := Nat;\n</code></pre> </p>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_behaviour.html#one-firstargument","title":"<code>One FirstArgument</code>","text":"<pre><code>type FirstArgument := mk@{\n  data : Val;\n};\n</code></pre> Arguments <code>data</code>: is the value of the action argument.","tags":["tutorial","example"]},{"location":"tutorial/engines/template_behaviour.html#two-secondargument","title":"<code>Two SecondArgument</code>","text":"<pre><code>type SecondArgument := mk@{\n  data : String;\n};\n</code></pre> Arguments <code>data</code>: is the value of the action argument.","tags":["tutorial","example"]},{"location":"tutorial/engines/template_behaviour.html#templateactionargument","title":"<code>TemplateActionArgument</code>","text":"<pre><code>type TemplateActionArgument :=\n  | One FirstArgument\n  | Two SecondArgument\n  ;\n</code></pre>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_behaviour.html#templateactionarguments","title":"<code>TemplateActionArguments</code>","text":"<pre><code>TemplateActionArguments : Type := List TemplateActionArgument;\n</code></pre>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_behaviour.html#actions","title":"Actions","text":"Auxiliary Juvix code","tags":["tutorial","example"]},{"location":"tutorial/engines/template_behaviour.html#templateaction","title":"<code>TemplateAction</code>","text":"<p> <pre><code>TemplateAction : Type :=\n  Action\n    TemplateLocalCfg\n    TemplateLocalState\n    TemplateMailboxState\n    TemplateTimerHandle\n    TemplateActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_behaviour.html#templateactioninput","title":"<code>TemplateActionInput</code>","text":"<p> <pre><code>TemplateActionInput : Type :=\n  ActionInput\n    TemplateLocalCfg\n    TemplateLocalState\n    TemplateMailboxState\n    TemplateTimerHandle\n    TemplateActionArguments\n    Anoma.Msg;\n</code></pre> </p>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_behaviour.html#templateactioneffect","title":"<code>TemplateActionEffect</code>","text":"<p> <pre><code>TemplateActionEffect : Type :=\n  ActionEffect\n    TemplateLocalState\n    TemplateMailboxState\n    TemplateTimerHandle\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_behaviour.html#templateactionexec","title":"<code>TemplateActionExec</code>","text":"<p> <pre><code>TemplateActionExec : Type :=\n  ActionExec\n    TemplateLocalCfg\n    TemplateLocalState\n    TemplateMailboxState\n    TemplateTimerHandle\n    TemplateActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_behaviour.html#justhiaction","title":"<code>justHiAction</code>","text":"<p>Action description.</p> State update Update state with the data set by <code>justHiGuard</code>. Messages to be sent No messages are added to the send queue. Engines to be spawned No engine is created by this action. Timer updates No timers are set or cancelled. Acquaintance updates None. <pre><code>justHiAction\n  (input : TemplateActionInput)\n  : Option TemplateActionEffect :=\n  let\n    env := ActionInput.env input;\n    args := ActionInput.args input;\n  in\n    case args of {\n    | TemplateActionArgument.Two (SecondArgument.mk@{\n        data := data;\n      }) :: _ :=\n      some ActionEffect.mk@{\n        env := env@EngineEnv{\n          localState := TemplateLocalState.mk@{\n            taskQueue := CustomData.mkCustomData@{\n              word := data\n            }\n          }\n        };\n        msgs := [];\n        timers := [];\n        engines := [];\n      }\n    | _ := none\n    }\n</code></pre>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_behaviour.html#examplereplyaction","title":"<code>exampleReplyAction</code>","text":"<p>Respond with a <code>TemplateMsgExampleReply</code>.</p> State update The state remains unchanged. Messages to be sent A <code>TemplateMsgExampleReply</code> message with the data set by <code>exampleReplyGuard</code>. Engines to be spawned No engine is created by this action. Timer updates No timers are set or cancelled. <pre><code>exampleReplyAction\n  (input : TemplateActionInput)\n  : Option TemplateActionEffect :=\n  let\n    cfg := ActionInput.cfg input;\n    env := ActionInput.env input;\n    trigger := ActionInput.trigger input;\n    args := ActionInput.args input;\n  in\n    case getEngineMsgFromTimestampedTrigger trigger of {\n    | some EngineMsg.mk@{\n        msg := Anoma.PreMsg.MsgTemplate (TemplateMsg.ExampleRequest req);\n        sender := sender;\n        target := target;\n        mailbox := mailbox;\n      } :=\n      some ActionEffect.mk@{\n        env := env;\n        msgs := [\n          EngineMsg.mk@{\n            sender := getEngineIDFromEngineCfg cfg;\n            target := sender;\n            mailbox := some 0;\n            msg :=\n              Anoma.PreMsg.MsgTemplate\n                (TemplateMsg.ExampleReply\n                  (ok ExampleReplyOk.mkExampleReplyOk@{\n                    argOne := ExampleRequest.argOne req;\n                  }));\n          }\n        ];\n        timers := [];\n        engines := [];\n      }\n  | _ := none\n  };\n</code></pre>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_behaviour.html#action-labels","title":"Action Labels","text":"","tags":["tutorial","example"]},{"location":"tutorial/engines/template_behaviour.html#justhiactionlabel","title":"<code>justHiActionLabel</code>","text":"<pre><code>justHiActionLabel : TemplateActionExec := ActionExec.Seq [ justHiAction ];\n</code></pre>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_behaviour.html#examplereplyactionlabel","title":"<code>exampleReplyActionLabel</code>","text":"<pre><code>exampleReplyActionLabel : TemplateActionExec := ActionExec.Seq [ exampleReplyAction ];\n</code></pre>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_behaviour.html#dobothactionlabel","title":"<code>doBothActionLabel</code>","text":"<pre><code>doBothActionLabel : TemplateActionExec :=\n  ActionExec.Seq [\n    justHiAction;\n    exampleReplyAction;\n  ];\n</code></pre>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_behaviour.html#guards","title":"Guards","text":"Auxiliary Juvix code","tags":["tutorial","example"]},{"location":"tutorial/engines/template_behaviour.html#templateguard","title":"<code>TemplateGuard</code>","text":"<p> <pre><code>TemplateGuard : Type :=\n  Guard\n    TemplateLocalCfg\n    TemplateLocalState\n    TemplateMailboxState\n    TemplateTimerHandle\n    TemplateActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_behaviour.html#templateguardoutput","title":"<code>TemplateGuardOutput</code>","text":"<p> <pre><code>TemplateGuardOutput : Type :=\n  GuardOutput\n    TemplateLocalCfg\n    TemplateLocalState\n    TemplateMailboxState\n    TemplateTimerHandle\n    TemplateActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_behaviour.html#templateguardeval","title":"<code>TemplateGuardEval</code>","text":"<p> <pre><code>TemplateGuardEval : Type :=\n  GuardEval\n    TemplateLocalCfg\n    TemplateLocalState\n    TemplateMailboxState\n    TemplateTimerHandle\n    TemplateActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_behaviour.html#justhiguard","title":"<code>justHiGuard</code>","text":"<p>Guard description (optional).</p> Condition Message type is <code>TemplateMsgJustHi</code>. <pre><code>justHiGuard\n  (trigger : TemplateTimestampedTrigger)\n  (cfg : TemplateCfg)\n  (env : TemplateEnv)\n  : Option TemplateGuardOutput :=\n  let\n    emsg := getEngineMsgFromTimestampedTrigger trigger;\n  in\n    case emsg of {\n    | some EngineMsg.mk@{\n        msg := Anoma.PreMsg.MsgTemplate TemplateMsg.JustHi;\n      } :=\n      some GuardOutput.mk@{\n        action := justHiActionLabel;\n        args := [\n          TemplateActionArgument.Two\n            SecondArgument.mk@{\n              data := \"Hello World!\"\n            }\n        ];\n      }\n    | _ := none\n    };\n</code></pre>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_behaviour.html#examplereplyguard","title":"<code>exampleReplyGuard</code>","text":"<p>Guard description (optional).</p> Condition Message type is <code>TemplateMsgExampleRequest</code>. <pre><code>exampleReplyGuard\n  (trigger : TemplateTimestampedTrigger)\n  (cfg : TemplateCfg)\n  (env : TemplateEnv)\n  : Option TemplateGuardOutput :=\n  case getEngineMsgFromTimestampedTrigger trigger of {\n    | some EngineMsg.mk@{\n        msg := Anoma.PreMsg.MsgTemplate (TemplateMsg.ExampleRequest req);\n        sender := mkPair none _; -- from local engines only (NodeID is none)\n      } := some GuardOutput.mk@{\n        action := exampleReplyActionLabel;\n        args := [];\n      }\n    | _ := none\n    };\n</code></pre>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_behaviour.html#engine-behaviour","title":"Engine behaviour","text":"","tags":["tutorial","example"]},{"location":"tutorial/engines/template_behaviour.html#templatebehaviour","title":"<code>TemplateBehaviour</code>","text":"<pre><code>TemplateBehaviour : Type :=\n  EngineBehaviour\n    TemplateLocalCfg\n    TemplateLocalState\n    TemplateMailboxState\n    TemplateTimerHandle\n    TemplateActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_behaviour.html#instantiation","title":"Instantiation","text":"<pre><code>module template_behaviour_example;\n\n  exTemplateBehaviour : TemplateBehaviour :=\n    EngineBehaviour.mk@{\n      guards :=\n        GuardEval.First [\n          justHiGuard;\n          exampleReplyGuard;\n        ];\n    };\nend;\n</code></pre>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_behaviour.html#template-action-flowchart","title":"Template Action Flowchart","text":"","tags":["tutorial","example"]},{"location":"tutorial/engines/template_behaviour.html#justhi-flowchart","title":"<code>justHi</code> Flowchart","text":"<pre><code>flowchart TD\n  subgraph C[Conditions]\n    CMsg&gt;TemplateMsgJustHi]\n  end\n\n  G(justHiGuard)\n  A(justHiAction)\n\n  C --&gt; G -- *justHiActionLabel* --&gt; A --&gt; E\n\n  subgraph E[Effects]\n    EEnv[(Env update)]\n  end</code></pre> <code>justHi</code> flowchart","tags":["tutorial","example"]},{"location":"tutorial/engines/template_behaviour.html#examplereply-flowchart","title":"<code>exampleReply</code> Flowchart","text":"<pre><code>flowchart TD\n  subgraph C[Conditions]\n    CMsg&gt;TemplateMsgExampleRequest&lt;br/&gt;from local engine]\n    CEnv[(exampleValue &lt; 10)]\n  end\n\n  G(exampleReplyGuard)\n  A(exampleReplyAction)\n\n  C --&gt; G -- *exampleReplyActionLabel* --&gt; A --&gt; E\n\n  subgraph E[Effects]\n    EEnv[(exampleValue := exampleValue + 1)]\n    EMsg&gt;TemplateMsgExampleReply&lt;br/&gt;argOne]\n  end</code></pre> <code>exampleReply</code> flowchart","tags":["tutorial","example"]},{"location":"tutorial/engines/template_config.html","title":"Template Configuration","text":"Juvix imports <pre><code>module tutorial.engines.template_config;\n\nimport tutorial.engines.template_messages open;\n\nimport arch.node.types.basics open;\nimport arch.node.types.engine open;\nimport arch.node.types.identities open;\n</code></pre>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_config.html#template-configuration","title":"Template Configuration","text":"","tags":["tutorial","example"]},{"location":"tutorial/engines/template_config.html#overview","title":"Overview","text":"<p>The static configuration of the engine.</p>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_config.html#local-configuration","title":"Local Configuration","text":"","tags":["tutorial","example"]},{"location":"tutorial/engines/template_config.html#templatelocalcfg","title":"<code>TemplateLocalCfg</code>","text":"<p>The type for engine-specific local configuration.</p> <pre><code>type TemplateLocalCfg :=\n  mk@{\n    example : Nat;\n    value : String;\n  };\n</code></pre>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_config.html#engine-configuration","title":"Engine Configuration","text":"","tags":["tutorial","example"]},{"location":"tutorial/engines/template_config.html#templatecfg","title":"<code>TemplateCfg</code>","text":"<pre><code>TemplateCfg : Type :=\n  EngineCfg\n    TemplateLocalCfg;\n</code></pre>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_config.html#instantiation","title":"Instantiation","text":"<p>```juvix extract-module-statements module template_config_example;</p> <p>exTemplateCfg : TemplateCfg :=     EngineCfg.mk@{       node := PublicKey.Curve25519PubKey \"0xabcd1234\";       name := \"template\";       cfg := TemplateLocalCfg.mk@{         example := 1;         value := \"hello world\";       };     }; end; ```</p>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_environment.html","title":"Template Environment","text":"Juvix imports <pre><code>module tutorial.engines.template_environment;\n\nimport tutorial.engines.template_messages open;\n\nimport arch.node.types.basics open;\nimport arch.node.types.engine open;\nimport arch.node.types.messages open;\nimport arch.node.types.identities open;\nimport arch.node.types.anoma_message as Anoma open;\n</code></pre>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_environment.html#template-environment","title":"Template Environment","text":"","tags":["tutorial","example"]},{"location":"tutorial/engines/template_environment.html#overview","title":"Overview","text":"<p>The Engine environment of the engine.</p>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_environment.html#mailbox-state","title":"Mailbox state","text":"Auxiliary Juvix code <pre><code>syntax alias MailboxOneOne := Nat;\nsyntax alias MailboxTwoOne := String;\nsyntax alias MailboxTwoTwo := Bool;\n</code></pre>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_environment.html#templatemailboxstatefirstkind-firstkindmailboxstate","title":"<code>TemplateMailboxStateFirstKind FirstKindMailboxState</code>","text":"<pre><code>type FirstKindMailboxState := mkFirstKindMailboxState@{\n  fieldOne : MailboxOneOne\n};\n</code></pre> <p>This is one family of mailbox states without much complexity.</p> Arguments <code>fieldOne</code> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_environment.html#templatemailboxstatesecondkind-secondkindmailboxstate","title":"<code>TemplateMailboxStateSecondKind SecondKindMailboxState</code>","text":"<pre><code>type SecondKindMailboxState := mkSecondKindMailboxState@{\n  fieldOne : MailboxTwoOne;\n  fieldTwo : MailboxTwoTwo\n};\n</code></pre> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p> Arguments <code>fieldOne</code> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p> <code>fieldTwo</code> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_environment.html#templatemailboxstate","title":"<code>TemplateMailboxState</code>","text":"<pre><code>type TemplateMailboxState :=\n  | TemplateMailboxStateFirstKind FirstKindMailboxState\n  | TemplateMailboxStateSecondKind SecondKindMailboxState;\n</code></pre>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_environment.html#local-state","title":"Local state","text":"Auxiliary Juvix code <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p> <p> <pre><code>type CustomData := mkCustomData { word : String };\n</code></pre> </p> Arguments <code>word</code> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_environment.html#templatelocalstate","title":"<code>TemplateLocalState</code>","text":"<pre><code>type TemplateLocalState :=\n  mk@{\n    taskQueue : CustomData\n  };\n</code></pre> Arguments <code>taskQueue</code> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_environment.html#timer-handles","title":"Timer handles","text":"Auxiliary Juvix code <p> <pre><code>syntax alias ArgOne := Nat;\n</code></pre> </p>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_environment.html#templatetimerhandlefirstoption-firstoptiontimerhandle","title":"<code>TemplateTimerHandleFirstOption FirstOptionTimerHandle</code>","text":"<pre><code>type FirstOptionTimerHandle := mkFirstOptionTimerHandle@{\n  argOne : ArgOne\n};\n</code></pre> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. The following code is an example of this case.</p> Arguments <code>argOne</code> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_environment.html#templatetimerhandlesecondoption-secondoptiontimerhandle","title":"<code>TemplateTimerHandleSecondOption SecondOptionTimerHandle</code>","text":"<pre><code>type SecondOptionTimerHandle := mkSecondOptionTimerHandle@{\n  argOne : String;\n  argTwo : Bool\n};\n</code></pre> Arguments <code>argOne</code> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p> <code>argTwo</code> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_environment.html#templatetimerhandle","title":"<code>TemplateTimerHandle</code>","text":"<pre><code>type TemplateTimerHandle :=\n  | TemplateTimerHandleFirstOption FirstOptionTimerHandle\n  | TemplateTimerHandleSecondOption SecondOptionTimerHandle;\n</code></pre>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_environment.html#templatetimestampedtrigger","title":"<code>TemplateTimestampedTrigger</code>","text":"<pre><code>TemplateTimestampedTrigger : Type :=\n  TimestampedTrigger\n    TemplateTimerHandle\n    Anoma.Msg;\n</code></pre>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_environment.html#engine-environment","title":"Engine Environment","text":"","tags":["tutorial","example"]},{"location":"tutorial/engines/template_environment.html#templateenv","title":"<code>TemplateEnv</code>","text":"<pre><code>TemplateEnv : Type :=\n  EngineEnv\n    TemplateLocalState\n    TemplateMailboxState\n    TemplateTimerHandle\n    Anoma.Msg;\n</code></pre>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_environment.html#instantiation","title":"Instantiation","text":"<p>```juvix extract-module-statements module template_environment_example;</p> <p>exTemplateEnv : TemplateEnv :=     EngineEnv.mk@{       localState := TemplateLocalState.mk@{         taskQueue := CustomData.mkCustomData@{           word := \"taskQueue\"         }       };       mailboxCluster := Map.empty;       acquaintances := Set.empty;       timers := []     }; end; ```</p>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_messages.html","title":"Template Messages","text":"Juvix imports <pre><code>module tutorial.engines.template_messages;\nimport prelude open;\n</code></pre>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_messages.html#template-messages","title":"Template Messages","text":"<p>These are the messages that the Template engine can receive/respond to.</p>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_messages.html#message-interface","title":"Message interface","text":"<pre><code>type TemplateMsg :=\n  | JustHi\n  | ExampleRequest ExampleRequest\n  | ExampleReply ExampleReply\n  ;\n</code></pre>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_messages.html#message-sequence-diagrams","title":"Message sequence diagrams","text":"","tags":["tutorial","example"]},{"location":"tutorial/engines/template_messages.html#examplerequest-and-examplereply","title":"<code>ExampleRequest</code> and <code>ExampleReply</code>","text":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed ut purus eget sapien. Nulla facilisi.</p> <pre><code>sequenceDiagram\n    participant TemplateClient\n    participant Template\n\n    TemplateClient -&gt;&gt; Template: ExampleRequest\n    Template -&gt;&gt; TemplateClient: ExampleReplyOk\n\n    TemplateClient -&gt;&gt; Template: ExampleRequest\n    Template -&gt;&gt; TemplateClient: ExampleReplyErrorOne</code></pre>  Sequence Diagram: <code>ExampleRequest</code> &amp; <code>ExampleReply</code>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_messages.html#message-types","title":"Message types","text":"","tags":["tutorial","example"]},{"location":"tutorial/engines/template_messages.html#templatemsgjusthi","title":"<code>TemplateMsgJustHi</code>","text":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_messages.html#examplerequest","title":"<code>ExampleRequest</code>","text":"<p>Example request.</p> <pre><code>type ExampleRequest := mkExampleRequest@{\n  argOne : Nat;\n  argTwo : Nat;\n}\n</code></pre> Arguments <code>argOne</code> Lorem ipsum dolor sit amet, consectetur adipiscing elit. <code>argTwo</code> Lorem ipsum dolor sit amet, consectetur adipiscing elit.","tags":["tutorial","example"]},{"location":"tutorial/engines/template_messages.html#examplereply","title":"<code>ExampleReply</code>","text":"<p>Reply to an <code>ExampleRequest</code>.</p> Auxiliary Juvix code <pre><code>ExampleReply : Type := Result ExampleReplyError ExampleReplyOk;\n</code></pre>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_messages.html#examplereplyok","title":"<code>ExampleReplyOk</code>","text":"<p>Example OK reply.</p> <p> <pre><code>type ExampleReplyOk := mkExampleReplyOk@{\n  argOne : Nat;\n}\n</code></pre> </p> Arguments <code>argOne</code> Lorem ipsum dolor sit amet, consectetur adipiscing elit.","tags":["tutorial","example"]},{"location":"tutorial/engines/template_messages.html#examplereplyerror","title":"<code>ExampleReplyError</code>","text":"<p>Example error reply.</p> <pre><code>type ExampleReplyError :=\n  | ExampleErrorOne\n  | ExampleErrorTwo\n  ;\n</code></pre> Error types <code>ExampleErrorOne</code> Lorem ipsum dolor sit amet, consectetur adipiscing elit. <code>ExampleErrorTwo</code> Lorem ipsum dolor sit amet, consectetur adipiscing elit.","tags":["tutorial","example"]},{"location":"tutorial/engines/template_messages.html#templatemsg","title":"<code>TemplateMsg</code>","text":"<pre><code>type TemplateMsg :=\n  | JustHi\n  | ExampleRequest ExampleRequest\n  | ExampleReply ExampleReply\n  ;\n</code></pre>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_messages.html#engine-components","title":"Engine components","text":"<ul> <li>Template Configuration</li> <li>Template Environment</li> <li>Template Behaviour</li> </ul>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum.html","title":"Template minimum","text":"Juvix imports <pre><code>module tutorial.engines.template_minimum;\n\nimport tutorial.engines.template_minimum_messages open public;\nimport tutorial.engines.template_minimum_config open public;\nimport tutorial.engines.template_minimum_environment open public;\nimport tutorial.engines.template_minimum_behaviour open public;\n\nimport arch.node.types.basics open;\nimport arch.node.types.engine open;\nimport arch.node.types.anoma as Anoma open;\n\nopen template_minimum_config_example;\nopen template_minimum_environment_example;\nopen template_minimum_behaviour_example;\n</code></pre>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum.html#template-minimum-engine","title":"Template Minimum Engine","text":"","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum.html#purpose","title":"Purpose","text":"<p>Brief summary of the purpose of the engine.</p>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum.html#subsystems","title":"Subsystems","text":"<ul> <li>Template Minimum Messages</li> <li>Template Minimum Configuration</li> <li>Template Minimum Environment</li> <li>Template Minimum Behaviour</li> </ul>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum.html#useful-links","title":"Useful links","text":"<ul> <li>Some</li> <li>Useful</li> <li>Links</li> </ul>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum.html#type","title":"Type","text":"<pre><code>TemplateMinimumEngine : Type :=\n  Engine\n    TemplateMinimumLocalCfg\n    TemplateMinimumLocalState\n    TemplateMinimumMailboxState\n    TemplateMinimumTimerHandle\n    TemplateMinimumActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum.html#instantiation","title":"Instantiation","text":"<pre><code>exTemplateMinimumEngine : TemplateMinimumEngine :=\n  Engine.mk@{\n    cfg := exTemplateMinimumCfg;\n    env := exTemplateMinimumEnv;\n    behaviour := exTemplateMinimumBehaviour;\n  };\n</code></pre> <p>Where <code>exTemplateMinimumCfg</code> is defined as follows:</p> <p>```juvix extract-module-statements module template_minimum_config_example;</p> <p>exTemplateMinimumCfg : TemplateMinimumCfg :=     EngineCfg.mk@{       node := PublicKey.Curve25519PubKey \"0xabcd1234\";       name := \"template-minimum\";       cfg := TemplateMinimumLocalCfg.mk;     }; end; <pre><code>`exTemplateMinimumEnv` is defined as follows:\n\n```juvix extract-module-statements\nmodule template_minimum_environment_example;\n\n  exTemplateMinimumEnv : TemplateMinimumEnv :=\n    EngineEnv.mk@{\n      localState := TemplateMinimumLocalState.mk;\n      mailboxCluster := Map.empty;\n      acquaintances := Set.empty;\n      timers := []\n    };\nend;\n</code></pre></p> <p>and <code>exTemplateMinimumBehaviour</code> is defined as follows:</p> <pre><code>module template_minimum_behaviour_example;\n\n  exTemplateMinimumBehaviour : TemplateMinimumBehaviour :=\n    EngineBehaviour.mk@{\n      guards :=\n        GuardEval.First [\n          exampleReplyGuard;\n        ];\n    };\nend;\n</code></pre>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum_behaviour.html","title":"Template minimum behaviour","text":"Juvix imports <pre><code>module tutorial.engines.template_minimum_behaviour;\n\nimport tutorial.engines.template_minimum_messages open;\nimport tutorial.engines.template_minimum_config open;\nimport tutorial.engines.template_minimum_environment open;\n\nimport arch.node.types.basics open;\nimport arch.node.types.identities open;\nimport arch.node.types.messages open;\nimport arch.node.types.engine open;\nimport arch.node.types.anoma as Anoma open;\n</code></pre>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum_behaviour.html#template-minimum-behaviour","title":"Template Minimum Behaviour","text":"","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum_behaviour.html#overview","title":"Overview","text":"<p>A Template Minimum engine acts in the ways described on this page. The action labels correspond to the actions that can be performed by the engine. Using the action labels, we describe the effects of the actions.</p>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum_behaviour.html#action-arguments","title":"Action arguments","text":"<p>The action arguments are set by a guard and passed to the action function as part of the <code>GuardOutput</code>.</p>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum_behaviour.html#templateminimumactionarguments","title":"<code>TemplateMinimumActionArguments</code>","text":"<pre><code>TemplateMinimumActionArguments : Type := Unit;\n</code></pre>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum_behaviour.html#actions","title":"Actions","text":"Auxiliary Juvix code","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum_behaviour.html#templateminimumaction","title":"<code>TemplateMinimumAction</code>","text":"<p> <pre><code>TemplateMinimumAction : Type :=\n  Action\n    TemplateMinimumLocalCfg\n    TemplateMinimumLocalState\n    TemplateMinimumMailboxState\n    TemplateMinimumTimerHandle\n    TemplateMinimumActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum_behaviour.html#templateminimumactioninput","title":"<code>TemplateMinimumActionInput</code>","text":"<p> <pre><code>TemplateMinimumActionInput : Type :=\n  ActionInput\n    TemplateMinimumLocalCfg\n    TemplateMinimumLocalState\n    TemplateMinimumMailboxState\n    TemplateMinimumTimerHandle\n    TemplateMinimumActionArguments\n    Anoma.Msg;\n</code></pre> </p>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum_behaviour.html#templateminimumactioneffect","title":"<code>TemplateMinimumActionEffect</code>","text":"<p> <pre><code>TemplateMinimumActionEffect : Type :=\n  ActionEffect\n    TemplateMinimumLocalState\n    TemplateMinimumMailboxState\n    TemplateMinimumTimerHandle\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum_behaviour.html#templateminimumactionexec","title":"<code>TemplateMinimumActionExec</code>","text":"<p> <pre><code>TemplateMinimumActionExec : Type :=\n  ActionExec\n    TemplateMinimumLocalCfg\n    TemplateMinimumLocalState\n    TemplateMinimumMailboxState\n    TemplateMinimumTimerHandle\n    TemplateMinimumActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum_behaviour.html#examplereplyaction","title":"<code>exampleReplyAction</code>","text":"<p>Respond with a <code>TemplateMinimumMsgExampleReply</code>.</p> State update The state remains unchanged. Messages to be sent A <code>TemplateMinimumMsgExampleReply</code> message with the data set by <code>exampleReplyGuard</code>. Engines to be spawned No engine is created by this action. Timer updates No timers are set or cancelled. <pre><code>exampleReplyAction\n  (input : TemplateMinimumActionInput)\n  : Option TemplateMinimumActionEffect :=\n  TODO {-\n  let\n    cfg := ActionInput.cfg input;\n    env := ActionInput.env input;\n    trigger := ActionInput.trigger input;\n    args := ActionInput.args input;\n  in\n    case getEngineMsgFromTimestampedTrigger trigger of {\n    | some EngineMsg.mk@{\n        msg := Anoma.PreMsg.MsgTemplateMinimum (TemplateMinimumMsgExampleRequest req);\n        sender := sender;\n        target := target;\n        mailbox := mailbox;\n      } :=\n      some ActionEffect.mk@{\n        env := env;\n        msgs := [\n          EngineMsg.mk@{\n            sender := getEngineIDFromEngineCfg cfg;\n            target := sender;\n            mailbox := some 0;\n            msg :=\n              Anoma.PreMsg.MsgTemplateMinimum\n                (TemplateMinimumMsgExampleReply\n                  (ok mkExampleReplyOk@{\n                    argOne := ExampleRequest.argOne req;\n                  }));\n          }\n        ];\n        timers := [];\n        engines := [];\n      }\n  | _ := none\n  -};\n</code></pre>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum_behaviour.html#action-labels","title":"Action Labels","text":"","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum_behaviour.html#examplereplyactionlabel","title":"<code>exampleReplyActionLabel</code>","text":"<pre><code>exampleReplyActionLabel : TemplateMinimumActionExec := ActionExec.Seq [ exampleReplyAction ];\n</code></pre>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum_behaviour.html#guards","title":"Guards","text":"Auxiliary Juvix code","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum_behaviour.html#templateminimumguard","title":"<code>TemplateMinimumGuard</code>","text":"<p> <pre><code>TemplateMinimumGuard : Type :=\n  Guard\n    TemplateMinimumLocalCfg\n    TemplateMinimumLocalState\n    TemplateMinimumMailboxState\n    TemplateMinimumTimerHandle\n    TemplateMinimumActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum_behaviour.html#templateminimumguardoutput","title":"<code>TemplateMinimumGuardOutput</code>","text":"<p> <pre><code>TemplateMinimumGuardOutput : Type :=\n  GuardOutput\n    TemplateMinimumLocalCfg\n    TemplateMinimumLocalState\n    TemplateMinimumMailboxState\n    TemplateMinimumTimerHandle\n    TemplateMinimumActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum_behaviour.html#templateminimumguardeval","title":"<code>TemplateMinimumGuardEval</code>","text":"<p> <pre><code>TemplateMinimumGuardEval : Type :=\n  GuardEval\n    TemplateMinimumLocalCfg\n    TemplateMinimumLocalState\n    TemplateMinimumMailboxState\n    TemplateMinimumTimerHandle\n    TemplateMinimumActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre> </p>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum_behaviour.html#examplereplyguard","title":"<code>exampleReplyGuard</code>","text":"<p>Guard description (optional).</p> Condition Message type is <code>TemplateMinimumMsgExampleRequest</code>. <pre><code>exampleReplyGuard\n  (trigger : TemplateMinimumTimestampedTrigger)\n  (cfg : TemplateMinimumCfg)\n  (env : TemplateMinimumEnv)\n  : Option TemplateMinimumGuardOutput :=\n  case getEngineMsgFromTimestampedTrigger trigger of {\n    | some EngineMsg.mk@{\n        msg := Anoma.PreMsg.MsgTemplateMinimum (TemplateMinimumMsg.ExampleRequest req);\n        sender := mkPair none _; -- from local engines only (NodeID is none)\n      } := some GuardOutput.mk@{\n        action := exampleReplyActionLabel;\n        args := unit;\n      }\n    | _ := none\n  };\n</code></pre>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum_behaviour.html#engine-behaviour","title":"Engine behaviour","text":"","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum_behaviour.html#templateminimumbehaviour","title":"<code>TemplateMinimumBehaviour</code>","text":"<pre><code>TemplateMinimumBehaviour : Type :=\n  EngineBehaviour\n    TemplateMinimumLocalCfg\n    TemplateMinimumLocalState\n    TemplateMinimumMailboxState\n    TemplateMinimumTimerHandle\n    TemplateMinimumActionArguments\n    Anoma.Msg\n    Anoma.Cfg\n    Anoma.Env;\n</code></pre>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum_behaviour.html#instantiation","title":"Instantiation","text":"<pre><code>module template_minimum_behaviour_example;\n\n  exTemplateMinimumBehaviour : TemplateMinimumBehaviour :=\n    EngineBehaviour.mk@{\n      guards :=\n        GuardEval.First [\n          exampleReplyGuard;\n        ];\n    };\nend;\n</code></pre>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum_behaviour.html#action-flowchart","title":"Action Flowchart","text":"","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum_behaviour.html#examplereply-flowchart","title":"<code>exampleReply</code> Flowchart","text":"<pre><code>flowchart TD\n  subgraph C[Conditions]\n    CMsg&gt;TemplateMinimumMsgExampleRequest&lt;br/&gt;from local engine]\n    CEnv[(exampleValue &lt; 10)]\n  end\n\n  G(exampleReplyGuard)\n  A(exampleReplyAction)\n\n  C --&gt; G -- *exampleReplyActionLabel* --&gt; A --&gt; E\n\n  subgraph E[Effects]\n    EEnv[(exampleValue := exampleValue + 1)]\n    EMsg&gt;TemplateMinimumMsgExampleReply&lt;br/&gt;argOne]\n  end</code></pre> <code>exampleReply</code> flowchart","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum_config.html","title":"Template minimum config","text":"Juvix imports <pre><code>module tutorial.engines.template_minimum_config;\n\nimport tutorial.engines.template_minimum_messages open;\n\nimport arch.node.types.basics open;\nimport arch.node.types.engine open;\nimport arch.node.types.identities open;\n</code></pre>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum_config.html#template-minimum-configuration","title":"Template Minimum Configuration","text":"","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum_config.html#overview","title":"Overview","text":"<p>The static configuration of the engine.</p>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum_config.html#local-configuration","title":"Local Configuration","text":"","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum_config.html#templateminimumlocalcfg","title":"<code>TemplateMinimumLocalCfg</code>","text":"<p>The type for engine-specific local configuration.</p> <pre><code>type TemplateMinimumLocalCfg :=\n  mk;\n</code></pre>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum_config.html#engine-configuration","title":"Engine Configuration","text":"","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum_config.html#templateminimumcfg","title":"<code>TemplateMinimumCfg</code>","text":"<pre><code>TemplateMinimumCfg : Type :=\n  EngineCfg\n    TemplateMinimumLocalCfg;\n</code></pre>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum_config.html#instantiation","title":"Instantiation","text":"<p>```juvix extract-module-statements module template_minimum_config_example;</p> <p>exTemplateMinimumCfg : TemplateMinimumCfg :=     EngineCfg.mk@{       node := PublicKey.Curve25519PubKey \"0xabcd1234\";       name := \"template-minimum\";       cfg := TemplateMinimumLocalCfg.mk;     }; end; ```</p>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum_environment.html","title":"Template minimum environment","text":"Juvix imports <pre><code>module tutorial.engines.template_minimum_environment;\n\nimport tutorial.engines.template_minimum_messages open;\n\nimport arch.node.types.basics open;\nimport arch.node.types.engine open;\nimport arch.node.types.messages open;\nimport arch.node.types.identities open;\nimport arch.node.types.anoma_message as Anoma open;\n</code></pre>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum_environment.html#template-minimum-environment","title":"Template Minimum Environment","text":"","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum_environment.html#overview","title":"Overview","text":"<p>The Engine environment of the engine.</p>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum_environment.html#mailbox-state","title":"Mailbox state","text":"","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum_environment.html#templateminimummailboxstate","title":"<code>TemplateMinimumMailboxState</code>","text":"<pre><code>TemplateMinimumMailboxState : Type := Unit;\n</code></pre>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum_environment.html#local-state","title":"Local state","text":"","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum_environment.html#templateminimumlocalstate","title":"<code>TemplateMinimumLocalState</code>","text":"<pre><code>type TemplateMinimumLocalState :=\n  mk;\n</code></pre>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum_environment.html#timer-handles","title":"Timer handles","text":"","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum_environment.html#templateminimumtimerhandle","title":"<code>TemplateMinimumTimerHandle</code>","text":"<pre><code>TemplateMinimumTimerHandle : Type := Unit;\n</code></pre>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum_environment.html#templateminimumtimestampedtrigger","title":"<code>TemplateMinimumTimestampedTrigger</code>","text":"<pre><code>TemplateMinimumTimestampedTrigger : Type :=\n  TimestampedTrigger\n    TemplateMinimumTimerHandle\n    Anoma.Msg;\n</code></pre>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum_environment.html#engine-environment","title":"Engine Environment","text":"","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum_environment.html#templateminimumenv","title":"<code>TemplateMinimumEnv</code>","text":"<pre><code>TemplateMinimumEnv : Type :=\n  EngineEnv\n    TemplateMinimumLocalState\n    TemplateMinimumMailboxState\n    TemplateMinimumTimerHandle\n    Anoma.Msg;\n</code></pre>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum_environment.html#instantiation","title":"Instantiation","text":"<p>```juvix extract-module-statements module template_minimum_environment_example;</p> <p>exTemplateMinimumEnv : TemplateMinimumEnv :=     EngineEnv.mk@{       localState := TemplateMinimumLocalState.mk;       mailboxCluster := Map.empty;       acquaintances := Set.empty;       timers := []     }; end; ```</p>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum_messages.html","title":"Template minimum messages","text":"Juvix imports <pre><code>module tutorial.engines.template_minimum_messages;\nimport prelude open;\n</code></pre>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum_messages.html#template-minimum-messages","title":"Template Minimum Messages","text":"<p>These are the messages that the Template Minimum engine can receive/respond to.</p>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum_messages.html#message-interface","title":"Message interface","text":"<pre><code>type TemplateMinimumMsg :=\n  | JustHi\n  | ExampleRequest ExampleRequest\n  | ExampleReply ExampleReply\n  ;\n</code></pre>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum_messages.html#message-sequence-diagrams","title":"Message sequence diagrams","text":"","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum_messages.html#examplerequest-and-examplereply","title":"<code>ExampleRequest</code> and <code>ExampleReply</code>","text":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed ut purus eget sapien. Nulla facilisi.</p> <pre><code>sequenceDiagram\n    participant TemplateMinimumClient\n    participant TemplateMinimum\n\n    TemplateMinimumClient -&gt;&gt; TemplateMinimum: ExampleRequest\n    TemplateMinimum -&gt;&gt; TemplateMinimumClient: ExampleReplyOk\n\n    TemplateMinimumClient -&gt;&gt; TemplateMinimum: ExampleRequest\n    TemplateMinimum -&gt;&gt; TemplateMinimumClient: ExampleReplyErrorOne</code></pre>  Sequence Diagram: <code>ExampleRequest</code> &amp; <code>ExampleReply</code>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum_messages.html#message-types","title":"Message types","text":"","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum_messages.html#templateminimummsgjusthi","title":"<code>TemplateMinimumMsgJustHi</code>","text":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum_messages.html#examplerequest","title":"<code>ExampleRequest</code>","text":"<p>Example request.</p> <pre><code>type ExampleRequest := mkExampleRequest@{\n  argOne : Nat;\n  argTwo : Nat;\n}\n</code></pre> Arguments <code>argOne</code> Lorem ipsum dolor sit amet, consectetur adipiscing elit. <code>argTwo</code> Lorem ipsum dolor sit amet, consectetur adipiscing elit.","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum_messages.html#examplereply","title":"<code>ExampleReply</code>","text":"Auxiliary types <pre><code>ExampleReply : Type := Result ReplyError ReplyPayload;\n</code></pre>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum_messages.html#replypayload","title":"<code>ReplyPayload</code>","text":"<pre><code>type ReplyPayload := mkReplyPayload@{\n  payload : String;\n};\n</code></pre>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum_messages.html#replyerror","title":"<code>ReplyError</code>","text":"<pre><code>type ReplyError := mkReplyError@{\n  error : String;\n};\n</code></pre>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum_messages.html#templateminimummsg","title":"<code>TemplateMinimumMsg</code>","text":"<pre><code>type TemplateMinimumMsg :=\n  | JustHi\n  | ExampleRequest ExampleRequest\n  | ExampleReply ExampleReply\n  ;\n</code></pre>","tags":["tutorial","example"]},{"location":"tutorial/engines/template_minimum_messages.html#engine-components","title":"Engine components","text":"<ul> <li>Template Minimum Configuration</li> <li>Template Minimum Environment</li> <li>Template Minimum Behaviour</li> </ul>","tags":["tutorial","example"]},{"location":"tutorial/engines/writing_conventions.html","title":"Engine Writing Conventions","text":"","tags":["tutorial","conventions"]},{"location":"tutorial/engines/writing_conventions.html#naming-standards","title":"Naming standards","text":"<ul> <li>Engine files and folders: Named in lowercase using <code>snake_case</code> format.   See File naming conventions.</li> </ul> <ul> <li>File extension: Files must be written in Juvix Markdown when applicable,   that is, the file must end with the extension <code>.juvix.md</code>. See Juvix Markdown and include Juvix code blocks.</li> </ul> <ul> <li> <p>File naming prefix: The engine's name is used as a prefix for all files   related to the engine in use. For example, the Ticker Engine would have   the following files, all prefixed with <code>ticker</code>:</p> <ul> <li><code>ticker_messages.juvix.md</code> where the message interface is defined.</li> <li><code>ticker_config.juvix.md</code> where the type for the configuration is defined.</li> <li><code>ticker_environment.juvix.md</code> where the type for the environment is defined.</li> <li><code>ticker_behaviour.juvix.md</code> where the behaviour is defined (guards and actions).</li> <li><code>ticker.juvix.md</code> where the engine is defined, importing all the other files.</li> </ul> </li> </ul> <p>Warning</p> <p>Juvix Markdown files have always need to define the corresponding module at the first Juvix code block. See the Juvix Markdown and include Juvix code blocks's tutorial. For example if the file is <code>ticker.juvix.md</code>, it must have the following code block:</p> <pre><code>module arch.node.engines.ticker;\n</code></pre>","tags":["tutorial","conventions"]},{"location":"tutorial/engines/writing_conventions.html#file-structure-within-the-engines-directory","title":"File structure within the <code>engines</code> directory","text":"<p>The files as listed above must be stored in the <code>engines</code> directory of the <code>docs/arch/node</code> directory. For example, the <code>ticker</code> engine would have the following directory structure:</p> <pre><code>docs/arch/node/\n\u2514\u2500\u2500 ...\n\u2514\u2500\u2500 engines/\n    \u251c\u2500\u2500 ...\n    \u251c\u2500\u2500 ticker_messages.juvix.md\n    \u251c\u2500\u2500 ticker_config.juvix.md\n    \u251c\u2500\u2500 ticker_environment.juvix.md\n    \u251c\u2500\u2500 ticker_behaviour.juvix.md\n    \u2514\u2500\u2500 ticker.juvix.md\n</code></pre> <p>The <code>ticker.juvix.md</code> file then would contain a brief overview and list of all its components. Check out Ticker Engine as an example for the expected structure.</p> <p>So next time, if you want to use the <code>ticker</code> engine, then you can import the <code>arch.node.engines.ticker</code> module, adding only one line at the top of the Juvix file where the imports are declared:</p> <pre><code>...\n+ import arch.node.engines.ticker open;\n</code></pre>","tags":["tutorial","conventions"]},{"location":"tutorial/engines/writing_conventions.html#front-matter","title":"Front matter","text":"<p>The front matter of the related files to an engine must contain tags. Please check other engine files for examples. Most of the cases, the front matter has the following tags:</p> <pre><code>tags:\n  - node-architecture\n  - x-subsystem\n  - engine\n  - name-of-the-engine\n  - message-types|configuration|environment|behaviour|engine-definition\n</code></pre> <p>Tags are used to categorise the pages in the documentation.</p>","tags":["tutorial","conventions"]},{"location":"tutorial/engines/writing_conventions.html#update-indexes","title":"Update indexes","text":"<p>As part of defining an engine type, you must update a few files that act as indexes.</p>","tags":["tutorial","conventions"]},{"location":"tutorial/engines/writing_conventions.html#juvix-everything-index","title":"Juvix Everything Index","text":"<p>Add import statements of all the modules related to the new engine to the <code>docs/everything.juvix.md</code> file. The new lines must be added in the \"Engines\" section. That is, if the engine is the <code>ticker</code>, we expect the following lines, assuming the engine is part of the <code>X</code> subsystem:</p> docs/everything.juvix.md<pre><code>module everything;\n...\n# Engines\n\n## X Subsystem\n\n+ import arch.node.engines.ticker_messages;\n+ import arch.node.engines.ticker_config;\n+ import arch.node.engines.ticker_environment;\n+ import arch.node.engines.ticker_behaviour;\n+ import arch.node.engines.ticker;\n</code></pre>","tags":["tutorial","conventions"]},{"location":"tutorial/engines/writing_conventions.html#anoma-message","title":"Anoma Message","text":"<p>All message types must be added to the <code>arch/node/types/anoma_message.juvix.md</code> file. Use the same pattern as the existing message types. For example, if the engine is the <code>ticker</code>, the new type constructor should be <code>MsgTicker</code> along with the corresponding type for the messages, that is, <code>TickerMsg</code>.</p> arch/node/types/anoma_message.juvix.md<pre><code>...\nmodule arch.node.types.anoma_message;\n+ import arch.node.engines.ticker_messages open;\n\ntype PreMsg KVSKey KVSDatum Executable :=\n+  | MsgTicker TickerMsg\n</code></pre>","tags":["tutorial","conventions"]},{"location":"tutorial/engines/writing_conventions.html#anoma-configuration-index","title":"Anoma Configuration Index","text":"<p>All configuration types must be added to the <code>arch/node/types/anoma_config.juvix.md</code> file. Similarly to the message types, the new type constructor should be <code>CfgTicker</code> along with the corresponding type for the configuration, that is, <code>TickerCfg</code>. Do not forget to import the environment type in the <code>Env</code> type.</p> arch/node/types/anoma_config.juvix.md<pre><code>module arch.node.types.anoma_config;\n...\n+ import arch.node.engines.ticker_config open;\n...\ntype PreCfg KVSKey KVSDatum Executable :=\n+  | CfgTicker TickerCfg\n</code></pre>","tags":["tutorial","conventions"]},{"location":"tutorial/engines/writing_conventions.html#anoma-environment-index","title":"Anoma Environment Index","text":"<p>All environment types must be added to the <code>arch/node/types/anoma_environment.juvix.md</code> file. Similarly to the message types, the new type constructor should be <code>EnvTicker</code> along with the corresponding type for the environment, that is, <code>TickerEnv</code>. Do not forget to import the environment type in the <code>Env</code> type.</p> arch/node/types/anoma_environment.juvix.md<pre><code>module arch.node.types.anoma_environment;\n...\n+ import arch.node.engines.ticker_environment open;\n...\ntype PreEnv KVSKey KVSDatum Executable :=\n+  | EnvTicker TickerEnv\n</code></pre>","tags":["tutorial","conventions"]},{"location":"tutorial/engines/writing_conventions.html#update-the-table-of-contents","title":"Update the \"Table of Contents\"","text":"<p>Locate the navigation section in the <code>mkdocs.yml</code> file, <code>nav</code> section, and include the new engine</p> mkdocs.yml<pre><code>...\nnav:\n  - Protocol Architecture:\n    - Node Architecture:\n       ...\n       - X Subsystem:\n+         - Ticker Engine:\n+           - Ticker Engine: ./arch/node/engines/ticker.juvix.md\n+           - Ticker Messages: ./arch/node/engines/ticker_messages.juvix.md\n+           - Ticker Configuration: ./arch/node/engines/ticker_config.juvix.md\n+           - Ticker Environment: ./arch/node/engines/ticker_environment.juvix.md\n+           - Ticker Behaviour: ./arch/node/engines/ticker_behaviour.juvix.md\n</code></pre>","tags":["tutorial","conventions"]},{"location":"tutorial/engines/writing_conventions.html#using-the-template-engine-as-a-starting-point","title":"Using the Template engine as a starting point","text":"<p>The Template Engine can be used as a starting point for writing new engines.</p> <p>To use it, run the following command:</p> <pre><code>nspec new engine\n</code></pre> <p>This will prompt some questions and create a new engine with the name provided by the user and update the indexes along with the corresponding files, based on the minimal template.</p>","tags":["tutorial","conventions"]},{"location":"tutorial/install/index.html","title":"Preparing the local environment for writing documentation","text":"","tags":["tutorial","install"]},{"location":"tutorial/install/index.html#getting-started","title":"Getting Started","text":"<ul> <li>Contribute: Tutorial</li> <li>Markdown: Uses Material for MkDocs</li> </ul>","tags":["tutorial","install"]},{"location":"tutorial/install/index.html#setup","title":"Setup","text":"<ol> <li> <p>Prerequisites:</p> <ul> <li> <p><code>uv</code>: Install via:</p> <p><pre><code># macOS/Linux\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n# Windows\npowershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n</code></pre>    - <code>graphviz</code> for local deployment,</p> </li> </ul> <ul> <li> <p><code>juvix</code> for local deployment,</p> <p><pre><code>curl --proto '=https' --tlsv1.2 -sSfL https://get.juvix.org | sh\n</code></pre>    - <code>just</code> for local development (although you can use <code>uv run</code> for most commands)</p> </li> </ul> </li> <li> <p>Setup Commands:</p> <pre><code>just setup-repo\n</code></pre> </li> </ol>","tags":["tutorial","install"]},{"location":"tutorial/install/index.html#documentation","title":"Documentation","text":"<ul> <li>Build: <code>just build</code></li> <li>Serve Locally: <code>just serve</code></li> </ul>","tags":["tutorial","install"]},{"location":"tutorial/install/index.html#development-with-nix","title":"Development with Nix","text":"<ol> <li>Install Nix: Download</li> <li>Enable Flakes: Guide</li> <li>Enter Shell: <code>nix develop</code></li> </ol>","tags":["tutorial","install"]},{"location":"tutorial/md/index.html","title":"Markdown Basics for Anoma Documentation","text":"<p>Our theme and main Markdown reference is Material for MkDocs. You may use anything found in this reference, including all possible Markdown extensions.</p> <p>This guide provides an overview of the key markdown features we use in the documentation. Please note that this guide is a work-in-progress.</p>","tags":["tutorial","conventions"]},{"location":"tutorial/md/index.html#front-matter","title":"Front Matter","text":"<p>Each markdown file should begin with a front matter section. It typically includes metadata such as <code>icon</code>, <code>tags</code>, <code>categories</code>. For more examples, refer to other files within the documentation. For example, the icons name can be found here.</p>","tags":["tutorial","conventions"]},{"location":"tutorial/md/index.html#example-front-matter","title":"Example Front Matter","text":"<pre><code>---\nicon: material/auto-download\nsearch:\n  exclude: false\n  boost: 3\ntags:\n  - node-architecture\n  - harware-subsystem\n  - engine\n  - logging\n  - message-types\n---\n</code></pre> <p>Warning</p> <p>Any new markdown file added to the <code>docs</code> directory must, in principle, have an entry in the <code>mkdocs.yml</code> file, specifically in the <code>nav</code> section.</p> <p>The filename may be relevant depending on where it is placed in the navigation. For example, any file intended to be the landing page of a section, say Section X, must be named <code>index.md</code> and placed right below the <code>Section X</code> item. Children of <code>Section X</code> do not need to follow any specific naming convention.</p> <pre><code>...\n- Section X:\n    - ./path-to/index.md\n    - NameRef Child1 : ./path-to/child1.md\n    - NameRef Child2 : ./path-to/child2.md\n</code></pre>","tags":["tutorial","conventions"]},{"location":"tutorial/md/citations.html","title":"Bibliography","text":"<p>Place your <code>.bib</code> files within the <code>docs/references</code> directory. For convenience, we have included all the ART published papers in the <code>docs/references/art.bib</code> file.</p> <p>Any new <code>.bib</code> file added to this folder will automatically be processed.</p>","tags":["tutorial","conventions"]},{"location":"tutorial/md/citations.html#citing-in-markdown","title":"Citing in Markdown","text":"<p>Use the citation key from your <code>.bib</code> files to cite references in your markdown files. The syntax is as follows:</p> <pre><code>This statement requires a citation .\n</code></pre> <p>Info</p> <p>We have <code>docs/references/update_repo_bibtexs.py</code> script that can be used to update the <code>docs/references/anoma_repos.bib</code> file to cite Anoma repositories in the documentation.</p>","tags":["tutorial","conventions"]},{"location":"tutorial/md/citations.html#references-available","title":"References available","text":"Anoma Research Topics (ART) papers <pre><code>% https://art.anoma.net\n\n\n@article{ art-2025-optimising-shielded-state-synchronization,\n    author    = { Larraia, Enrique and Khalniyazova, Yulia },\n    title     = { {Optimising Shielded State Synchronization with FMD and TEEs} },\n    journal   = { Anoma Research Topics },\n    month     = { Apr },\n    year      = { 2025 },\n    publisher = { Zenodo },\n    version   = { April 10, 2025 },\n    doi       = { 10.5281/zenodo.15186457 },\n    url       = { https://doi.org/10.5281/zenodo.15186456 }\n}\n\n\n@article{ art-2025-dynamic-effective-timed-communication-systems,\n    author    = { Heindel, Tobias and Prieto-Cubides, Jonathan and Hart, Anthony },\n    title     = { {Dynamic Effective Timed Communication Systems} },\n    journal   = { Anoma Research Topics },\n    month     = { Mar },\n    year      = { 2025 },\n    publisher = { Zenodo },\n    version   = { March 06, 2025 },\n    doi       = { 10.5281/zenodo.14984148 },\n    url       = { https://doi.org/10.5281/zenodo.14984147 }\n}\n\n\n@article{ art-2024-nock-functional-programmers,\n    author    = { Czajka, Lukasz },\n    title     = { {Nock for Functional Programmers} },\n    journal   = { Anoma Research Topics },\n    month     = { Dec },\n    year      = { 2024 },\n    publisher = { Zenodo },\n    version   = { December 18, 2024 },\n    doi       = { 10.5281/zenodo.14511714 },\n    url       = { https://doi.org/10.5281/zenodo.14511713 }\n}\n\n\n@article{ art-2024-message-logic,\n    author    = { Gabbay, Murdoch J. and Zarin, Naqib },\n    title     = { {Message Logic} },\n    journal   = { Anoma Research Topics },\n    month     = { Dec },\n    year      = { 2024 },\n    publisher = { Zenodo },\n    version   = { December 04, 2024 },\n    doi       = { 10.5281/zenodo.14251398 },\n    url       = { https://doi.org/10.5281/zenodo.14251397 }\n}\n\n\n@article{ art-2024-anoma-state-architecture,\n    author    = { Sheff, Isaac },\n    title     = { {Anoma State Architecture} },\n    journal   = { Anoma Research Topics },\n    month     = { Dec },\n    year      = { 2024 },\n    publisher = { Zenodo },\n    version   = { December 04, 2024 },\n    doi       = { 10.5281/zenodo.14265827 },\n    url       = { https://doi.org/10.5281/zenodo.14265826 }\n}\n\n\n@article{ art-2024-heterogeneous-paxos-20-specs,\n    author    = { Karbyshev, Aleksandr and Sheff, Isaac },\n    title     = { {Heterogeneous Paxos 2.0: the Specs} },\n    journal   = { Anoma Research Topics },\n    month     = { Dec },\n    year      = { 2024 },\n    publisher = { Zenodo },\n    version   = { December 04, 2024 },\n    doi       = { 10.5281/zenodo.14276903 },\n    url       = { https://doi.org/10.5281/zenodo.12572557 }\n}\n\n\n@article{ art-2024-slow-games-policy-enforcement-under,\n    author    = { Reusche, D and Goes, Christopher and Della Penna, Nicolas },\n    title     = { {Slow Games: Policy Enforcement under Uncertainty} },\n    journal   = { Anoma Research Topics },\n    month     = { Sep },\n    year      = { 2024 },\n    publisher = { Zenodo },\n    version   = { September 15, 2024 },\n    doi       = { 10.5281/zenodo.13765214 },\n    url       = { https://doi.org/10.5281/zenodo.13765213 }\n}\n\n\n@article{ art-2024-compiling-juvix-cairo-assembly,\n    author    = { Czajka, \u0141ukasz },\n    title     = { {Compiling Juvix to Cairo Assembly} },\n    journal   = { Anoma Research Topics },\n    month     = { Sep },\n    year      = { 2024 },\n    publisher = { Zenodo },\n    version   = { September 10, 2024 },\n    doi       = { 10.5281/zenodo.13739344 },\n    url       = { https://doi.org/10.5281/zenodo.13739343 }\n}\n\n\n@article{ art-2024-comparing-two-hash-functions,\n    author    = { Y\u0131ld\u0131z, Burcu and Maller, Mary },\n    title     = { {Comparing Two Hash Functions for Multi-Party Computation and Zero-Knowledge} },\n    journal   = { Anoma Research Topics },\n    month     = { Sep },\n    year      = { 2024 },\n    publisher = { Zenodo },\n    version   = { September 10, 2024 },\n    doi       = { 10.5281/zenodo.13739511 },\n    url       = { https://doi.org/10.5281/zenodo.13739510 }\n}\n\n\n@article{ art-2024-intentcentric-applications-anoma,\n    author    = { Heuer, Michael and Reusche, D },\n    title     = { {Intent-centric Applications for the Anoma Resource Machine} },\n    journal   = { Anoma Research Topics },\n    month     = { Aug },\n    year      = { 2024 },\n    publisher = { Zenodo },\n    version   = { August 26, 2024 },\n    doi       = { 10.5281/zenodo.13340448 },\n    url       = { https://doi.org/10.5281/zenodo.13340447 }\n}\n\n\n@article{ art-2024-heterogeneous-narwhal-paxos,\n    author    = { Heindel, Tobias and Karbyshev, Aleksandr and Sheff, Isaac },\n    title     = { {Heterogeneous Narwhal and Paxos} },\n    journal   = { Anoma Research Topics },\n    month     = { Jun },\n    year      = { 2024 },\n    publisher = { Zenodo },\n    version   = { June 27, 2024 },\n    doi       = { 10.5281/zenodo.10498999 },\n    url       = { https://doi.org/10.5281/zenodo.10498998 }\n}\n\n\n@article{ art-2024-crosschain-integrity-controller-labels,\n    author    = { Isaac, Sheff },\n    title     = { {Cross-Chain Integrity with Controller Labels and Endorsement} },\n    journal   = { Anoma Research Topics },\n    month     = { Jun },\n    year      = { 2024 },\n    publisher = { Zenodo },\n    version   = { June 25, 2024 },\n    doi       = { 10.5281/zenodo.10498997 },\n    url       = { https://doi.org/10.5281/zenodo.10498996 }\n}\n\n\n@article{ art-2024-anoma-resource-machine-specification,\n    author    = { Khalniyazova, Yulia and Goes, Christopher },\n    title     = { {Anoma Resource Machine Specification} },\n    journal   = { Anoma Research Topics },\n    month     = { Jun },\n    year      = { 2024 },\n    publisher = { Zenodo },\n    version   = { June 25, 2024 },\n    doi       = { 10.5281/zenodo.10689620 },\n    url       = { https://doi.org/10.5281/zenodo.10498990 }\n}\n\n\n@article{ art-2024-compiling-zkvms,\n    author    = { Centelles, Alberto },\n    title     = { {Compiling to ZKVMs} },\n    journal   = { Anoma Research Topics },\n    month     = { Apr },\n    year      = { 2024 },\n    publisher = { Zenodo },\n    version   = { April 19, 2024 },\n    doi       = { 10.5281/zenodo.10998758 },\n    url       = { https://doi.org/10.5281/zenodo.10498994 }\n}\n\n\n@article{ art-2024-intent-machines,\n    author    = { Hart, Anthony and Reusche, D },\n    title     = { {Intent Machines} },\n    journal   = { Anoma Research Topics },\n    month     = { Feb },\n    year      = { 2024 },\n    publisher = { Zenodo },\n    version   = { February 21, 2024 },\n    doi       = { 10.5281/zenodo.10654543 },\n    url       = { https://doi.org/10.5281/zenodo.10498992 }\n}\n\n\n@article{ art-2023-vampir-bestiary,\n    author    = { Fitzgerald, Joshua and Centelles, Alberto },\n    title     = { {VampIR Bestiary} },\n    journal   = { Anoma Research Topics },\n    month     = { Nov },\n    year      = { 2023 },\n    publisher = { Zenodo },\n    version   = { November 13, 2023 },\n    doi       = { 10.5281/zenodo.10118865 },\n    url       = { https://doi.org/10.5281/zenodo.10118864 }\n}\n\n\n@article{ art-2023-constraint-satisfaction-problems-survey,\n    author    = { Hart, Anthony },\n    title     = { {Constraint Satisfaction Problems: A Survey for Anoma} },\n    journal   = { Anoma Research Topics },\n    month     = { Oct },\n    year      = { 2023 },\n    publisher = { Zenodo },\n    version   = { October 18, 2023 },\n    doi       = { 10.5281/zenodo.10019113 },\n    url       = { https://doi.org/10.5281/zenodo.10019112 }\n}\n\n\n@article{ art-2023-exploring-cryptographic-approaches-enhance,\n    author    = { Khalniyazova, Yulia },\n    title     = { {Exploring Cryptographic Approaches to Enhance Privacy in Intent Solving} },\n    journal   = { Anoma Research Topics },\n    month     = { Oct },\n    year      = { 2023 },\n    publisher = { Zenodo },\n    version   = { October 02, 2023 },\n    doi       = { 10.5281/zenodo.8321167 },\n    url       = { https://doi.org/10.5281/zenodo.8321166 }\n}\n\n\n@article{ art-2023-core-language-juvix,\n    author    = { Lukasz Czajka },\n    title     = { {The Core language of Juvix} },\n    journal   = { Anoma Research Topics },\n    month     = { Aug },\n    year      = { 2023 },\n    publisher = { Zenodo },\n    version   = { August 29, 2023 },\n    doi       = { 10.5281/zenodo.8268850 },\n    url       = { https://doi.org/10.5281/zenodo.8268849 }\n}\n\n\n@article{ art-2023-rethinking-vampir,\n    author    = { Anthony Hart },\n    title     = { {Rethinking VampIR} },\n    journal   = { Anoma Research Topics },\n    month     = { Aug },\n    year      = { 2023 },\n    publisher = { Zenodo },\n    version   = { August 29, 2023 },\n    doi       = { 10.5281/zenodo.8262815 },\n    url       = { https://doi.org/10.5281/zenodo.8262814 }\n}\n\n\n@article{ art-2023-anoma-unified-architecture,\n    author    = { Christopher Goes and Awa Sun Yin and Adrian Brink },\n    title     = { {Anoma: a unified architecture for full-stack decentralised applications} },\n    journal   = { Anoma Research Topics },\n    month     = { Aug },\n    year      = { 2023 },\n    publisher = { Zenodo },\n    version   = { August 24, 2023 },\n    doi       = { 10.5281/zenodo.8279842 },\n    url       = { https://doi.org/10.5281/zenodo.8279841 }\n}\n\n\n@article{ art-2023-geb-pipeline,\n    author    = { Artem Gureev and Jonathan Prieto-Cubides },\n    title     = { {Geb Pipeline} },\n    journal   = { Anoma Research Topics },\n    month     = { Aug },\n    year      = { 2023 },\n    publisher = { Zenodo },\n    version   = { August 21, 2023 },\n    doi       = { 10.5281/zenodo.8262747 },\n    url       = { https://doi.org/10.5281/zenodo.8262746 }\n}\n\n\n@article{ art-2023-juvix-vampir-pipeline,\n    author    = { Lukasz Czajka },\n    title     = { {Juvix to VampIR Pipeline} },\n    journal   = { Anoma Research Topics },\n    month     = { Aug },\n    year      = { 2023 },\n    publisher = { Zenodo },\n    version   = { August 14, 2023 },\n    doi       = { 10.5281/zenodo.8252903 },\n    url       = { https://doi.org/10.5281/zenodo.8246535 }\n}\n</code></pre> Anoma Public GitHub repositories <pre><code>  author = {anoma},\n  title = {juvix},\n  year = {2017},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  url = {https://github.com/anoma/juvix}\n}\n\n@misc{github-masp-mpc,\n  author = {anoma},\n  title = {masp-mpc},\n  year = {2020},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  url = {https://github.com/anoma/masp-mpc}\n}\n\n@misc{github-masp,\n  author = {anoma},\n  title = {masp},\n  year = {2020},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  url = {https://github.com/anoma/masp}\n}\n\n@misc{github-ferveo,\n  author = {anoma},\n  title = {ferveo},\n  year = {2020},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  url = {https://github.com/anoma/ferveo}\n}\n\n@misc{github-anoma,\n  author = {anoma},\n  title = {anoma},\n  year = {2021},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  url = {https://github.com/anoma/anoma}\n}\n\n@misc{github-group-threshold-crypto,\n  author = {anoma},\n  title = {group-threshold-crypto},\n  year = {2021},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  url = {https://github.com/anoma/group-threshold-crypto}\n}\n\n@misc{github-research,\n  author = {anoma},\n  title = {research},\n  year = {2021},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  url = {https://github.com/anoma/research}\n}\n\n@misc{github-plonkup-hash,\n  author = {anoma},\n  title = {plonkup-hash},\n  year = {2021},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  url = {https://github.com/anoma/plonkup-hash}\n}\n\n@misc{github-plonkup,\n  author = {anoma},\n  title = {plonkup},\n  year = {2021},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  url = {https://github.com/anoma/plonkup}\n}\n\n@misc{github-typhon,\n  author = {anoma},\n  title = {typhon},\n  year = {2021},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  url = {https://github.com/anoma/typhon}\n}\n\n@misc{github-exhibit_plonkup,\n  author = {anoma},\n  title = {exhibit_plonkup},\n  year = {2021},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  url = {https://github.com/anoma/exhibit_plonkup}\n}\n\n@misc{github-taiga,\n  author = {anoma},\n  title = {taiga},\n  year = {2021},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  url = {https://github.com/anoma/taiga}\n}\n\n@misc{github-juvix-stdlib,\n  author = {anoma},\n  title = {juvix-stdlib},\n  year = {2022},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  url = {https://github.com/anoma/juvix-stdlib}\n}\n\n@misc{github-namada-trusted-setup,\n  author = {anoma},\n  title = {namada-trusted-setup},\n  year = {2022},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  url = {https://github.com/anoma/namada-trusted-setup}\n}\n\n@misc{github-alucard,\n  author = {anoma},\n  title = {alucard},\n  year = {2022},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  url = {https://github.com/anoma/alucard}\n}\n\n@misc{github-masp-phase2,\n  author = {anoma},\n  title = {masp-phase2},\n  year = {2022},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  url = {https://github.com/anoma/masp-phase2}\n}\n\n@misc{github-vamp-ir,\n  author = {anoma},\n  title = {vamp-ir},\n  year = {2022},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  url = {https://github.com/anoma/vamp-ir}\n}\n\n@misc{github-namada-testnets,\n  author = {anoma},\n  title = {namada-testnets},\n  year = {2022},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  url = {https://github.com/anoma/namada-testnets}\n}\n\n@misc{github-ethereum-bridge,\n  author = {anoma},\n  title = {ethereum-bridge},\n  year = {2022},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  url = {https://github.com/anoma/ethereum-bridge}\n}\n\n@misc{github-vscode-juvix,\n  author = {anoma},\n  title = {vscode-juvix},\n  year = {2022},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  url = {https://github.com/anoma/vscode-juvix}\n}\n\n@misc{github-whitepaper,\n  author = {anoma},\n  title = {whitepaper},\n  year = {2022},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  url = {https://github.com/anoma/whitepaper}\n}\n\n@misc{github-devchain-container,\n  author = {anoma},\n  title = {devchain-container},\n  year = {2022},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  url = {https://github.com/anoma/devchain-container}\n}\n\n@misc{github-wasm-workspace,\n  author = {anoma},\n  title = {wasm-workspace},\n  year = {2022},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  url = {https://github.com/anoma/wasm-workspace}\n}\n\n@misc{github-devtool,\n  author = {anoma},\n  title = {devtool},\n  year = {2022},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  url = {https://github.com/anoma/devtool}\n}\n\n@misc{github-anoma-wasm-multitoken,\n  author = {anoma},\n  title = {anoma-wasm-multitoken},\n  year = {2022},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  url = {https://github.com/anoma/anoma-wasm-multitoken}\n}\n\n@misc{github-dev-utils,\n  author = {anoma},\n  title = {dev-utils},\n  year = {2022},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  url = {https://github.com/anoma/dev-utils}\n}\n\n@misc{github-namada,\n  author = {anoma},\n  title = {namada},\n  year = {2022},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  url = {https://github.com/anoma/namada}\n}\n\n@misc{github-namada-interface,\n  author = {anoma},\n  title = {namada-interface},\n  year = {2022},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  url = {https://github.com/anoma/namada-interface}\n}\n\n@misc{github-zkp-compiler-shootout,\n  author = {anoma},\n  title = {zkp-compiler-shootout},\n  year = {2022},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  url = {https://github.com/anoma/zkp-compiler-shootout}\n}\n\n@misc{github-homebrew-juvix,\n  author = {anoma},\n  title = {homebrew-juvix},\n  year = {2022},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  url = {https://github.com/anoma/homebrew-juvix}\n}\n</code></pre> Other literature <pre><code>  title={Heterogeneous Paxos: Technical Report},\n  author={Isaac Sheff and Xinwen Wang and Robbert van Renesse and Andrew C. Myers},\n  year={2020},\n  eprint={2011.08253},\n  archivePrefix={arXiv},\n  primaryClass={cs.DC}\n}\n\n@misc{karbyshevsheff2024heterogeneous,\n  title={Heterogeneous Paxos 2.0: the Specs},\n  author={Aleksandr Karbyshev and Isaac Sheff},\n  year={2024},\n  url={https://pomf2.lain.la/f/owqf7ws.pdf},\n}\n\n@misc{goes2024anoma,\n  author = {Christopher Goes},\n  title = {Anoma as the Universal Intent Machine for Ethereum},\n  year = {2024},\n  howpublished = {{Ethereum Research}},\n  note = {Draft},\n  url = {https://ethresear.ch/t/rfc-draft-anoma-as-the-universal-intent-machine-for-ethereum/19109},\n  urldate = {2024-06-17}\n}\n\n@inproceedings{Hewitt2006,\n  title     = {What Is Commitment? Physical, Organizational, and Social (Revised)},\n  author    = {Hewitt, Carl},\n  year      = 2007,\n  publisher = {Springer Berlin Heidelberg},\n  address   = {Berlin, Heidelberg},\n  pages     = {293--307}\n}\n\n@phdthesis{clinger1981,\n  title     = {Foundations of Actor Semantics},\n  author    = {William Douglas Clinger},\n  year      = 1981,\n  url       = {https://dspace.mit.edu/handle/1721.1/6935},\n  school    = {Massachusetts Institute of Technology (MIT)}\n}\n\n@inproceedings{Hewitt1973,\n  title     = {A Universal Modular Actor Formalism for Artificial Intelligence},\n  author    = {Carl Hewitt and Peter Bishop and Richard Steiger},\n  year      = 1973,\n  location  = {San Francisco, CA, USA},\n  publisher = {Morgan Kaufmann Publishers Inc.},\n  pages     = {235--245}\n}\n\n@book{Scott1976,\n  title     = {Toward a Mathematical Semantics for Computer Languages},\n  author    = {Dana Scott and Christopher Strachey},\n  year      = 1976,\n  publisher = {Prentice-Hall}\n}\n\n@book{Agha1986,\n  title     = {Actors: A Model of Concurrent Computation in Distributed Systems},\n  author    = {Gul A. Agha},\n  year      = 1986,\n  publisher = {MIT Press}\n}\n\n@article{agha-overview-actor-languages,\n  title     = {An overview of actor languages},\n  author    = {Agha, Gul},\n  year      = 1986,\n  month     = {jun},\n  journal   = {SIGPLAN Not.},\n  publisher = {Association for Computing Machinery},\n  address   = {New York, NY, USA},\n  volume    = 21,\n  number    = 10,\n  pages     = {58\u201367},\n  doi       = {10.1145/323648.323743},\n  url       = {https://doi.org/10.1145/323648.323743},\n}\n\n@article{erlang,\n  title     = {The development of Erlang},\n  author    = {Armstrong, Joe},\n  year      = 1997,\n  month     = {aug},\n  journal   = {SIGPLAN Not.},\n  publisher = {Association for Computing Machinery},\n  address   = {New York, NY, USA},\n  volume    = 32,\n  number    = 8,\n  pages     = {196\u2013203},\n  doi       = {10.1145/258949.258967},\n  url       = {https://doi.org/10.1145/258949.258967}\n}\n\n@book{milner-concurrency,\n  title     = {Communication and Concurrency},\n  author    = {Milner, R.},\n  year      = 1989,\n  publisher = {Prentice-Hall, Inc.},\n  address   = {USA}\n}\n\n@article{behavioural-timed-systems,\n  title     = {{Behavioural equivalences for timed systems}},\n  author    = {Tomasz Brengos and Marco Peressotti},\n  year      = 2019,\n  month     = Feb,\n  journal   = {{Logical Methods in Computer Science}},\n  volume    = {{Volume 15, Issue 1}},\n  doi       = {10.23638/LMCS-15(1:17)2019},\n  url       = {https://lmcs.episciences.org/5220}\n}\n\n@inproceedings{actario,\n  title     = {Actario: A framework for reasoning about actor systems},\n  author    = {Yasutake, Shohei and Watanabe, Takuo},\n  year      = 2015\n}\n\n@article{Talcott1998,\n  title     = {Composable Semantic Models for Actor Theories},\n  author    = {Talcott,  Carolyn L.},\n  year      = 1998,\n  journal   = {Higher Order Symbolic Computation},\n  publisher = {Springer Science and Business Media LLC},\n  volume    = 11,\n  number    = 3,\n  pages     = {281\u2013343},\n  doi       = {10.1023/a:1010042915896},\n  url       = {http://dx.doi.org/10.1023/A:1010042915896}\n}\n\n@article{lamport-global-states,\n  title     = {Distributed snapshots: determining global states of distributed systems},\n  author    = {Chandy, K. Mani and Lamport, Leslie},\n  year      = 1985,\n  month     = {feb},\n  journal   = {ACM Transactions on Computer Systems},\n  publisher = {Association for Computing Machinery},\n  address   = {New York, NY, USA},\n  volume    = 3,\n  number    = 1,\n  pages     = {63\u201375},\n  doi       = {10.1145/214451.214456},\n  url       = {https://doi.org/10.1145/214451.214456},\n}\n\n@article{selectors-actors-2014,\n  title     = {Selectors: Actors with Multiple Guarded Mailboxes},\n  author    = {Imam,  Shams M. and Sarkar,  Vivek},\n  year      = 2014,\n  month     = oct,\n  publisher = {ACM},\n  journal   = {AGERE! '14: Proceedings of the 4th International Workshop on Programming based on Actors Agents and Decentralized Control},\n  series    = {SPLASH '14},\n  doi       = {10.1145/2687357.2687360},\n  url       = {http://dx.doi.org/10.1145/2687357.2687360},\n  collection = {SPLASH '14}\n}\n\n@article{special-delivery-mailbox-types-2023,\n  title     = {Special Delivery: Programming with Mailbox Types},\n  author    = {Fowler,  Simon and Attard,  Duncan Paul and Sowul,  Franciszek and Gay,  Simon J. and Trinder,  Phil},\n  year      = 2023,\n  month     = aug,\n  journal   = {Proceedings of the ACM on Programming Languages},\n  publisher = {Association for Computing Machinery (ACM)},\n  volume    = 7,\n  number    = {ICFP},\n  pages     = {78\u2013107},\n  doi       = {10.1145/3607832},\n  url       = {http://dx.doi.org/10.1145/3607832}\n}\n\n@article{there-is-no-now-2015,\n  title     = {There is No Now: Problems with simultaneity in distributed systems},\n  author    = {Sheehy, Justin},\n  year      = 2015,\n  month     = {mar},\n  journal   = {Queue},\n  publisher = {Association for Computing Machinery},\n  address   = {New York, NY, USA},\n  volume    = 13,\n  number    = 3,\n  pages     = {20\u201327},\n  doi       = {10.1145/2742694.2745385},\n  url       = {https://doi.org/10.1145/2742694.2745385}\n}\n\n@article{why-local-clocks-are-easy-2016,\n  title     = {Why Logical Clocks are Easy: Sometimes all you need is the right language.},\n  author    = {Baquero, Carlos and Pregui\\c{c}a, Nuno},\n  year      = 2016,\n  month     = {feb},\n  journal   = {Queue},\n  publisher = {Association for Computing Machinery},\n  address   = {New York, NY, USA},\n  volume    = 14,\n  number    = 1,\n  pages     = {53\u201369},\n  doi       = {10.1145/2898442.2917756},\n  url       = {https://doi.org/10.1145/2898442.2917756}\n}\n\n@article{lamport-time-clocks-1978,\n  title     = {Time, clocks, and the ordering of events in a distributed system},\n  author    = {Lamport, Leslie},\n  year      = 1978,\n  month     = {jul},\n  journal   = {Commun. ACM},\n  publisher = {Association for Computing Machinery},\n  address   = {New York, NY, USA},\n  volume    = 21,\n  number    = 7,\n  pages     = {558\u2013565},\n  doi       = {10.1145/359545.359563},\n  url       = {https://doi.org/10.1145/359545.359563},\n}\n\n@inproceedings{taxonomy-of-actor-models-2016,\n  title     = {43 years of actors: a taxonomy of actor models and their key properties},\n  author    = {De Koster, Joeri and Van Cutsem, Tom and De Meuter, Wolfgang},\n  year      = 2016,\n  location  = {Amsterdam, Netherlands},\n  publisher = {Association for Computing Machinery},\n  address   = {New York, NY, USA},\n  series    = {AGERE 2016},\n  pages     = {31\u201340},\n  doi       = {10.1145/3001886.3001890},\n  url       = {https://doi.org/10.1145/3001886.3001890},\n  booktitle = {Proceedings of the 6th International Workshop on Programming Based on Actors, Agents, and Decentralized Control}\n}\n\n@book{Nissanke1999,\n  title = {Formal Specification},\n  ISBN = {9781447107910},\n  url = {http://dx.doi.org/10.1007/978-1-4471-0791-0},\n  DOI = {10.1007/978-1-4471-0791-0},\n  publisher = {Springer London},\n  author = {Nissanke,  Nimal},\n  year = {1999}\n}\n</code></pre>","tags":["tutorial","conventions"]},{"location":"tutorial/md/headers_and_other_conventions.html","title":"Headers and other Markdown conventions","text":"<ul> <li> <p>Use semantic headers to structure your content.</p> <ul> <li>Use <code>#</code> for the main title, <code>##</code> for the first-level header, <code>###</code> for the   second-level header.</li> <li>Only use up to the third level of headers. If you need more levels, consider   restructuring your content.</li> </ul> </li> </ul> <ul> <li> <p>Use sentence case for headers. For example,</p> <ul> <li>use \"How to use this glossary\" instead of \"How to Use This Glossary\", or,</li> <li>use \"Anoma protocol\" instead of  \"Anoma Protocol\", or</li> <li>use \"On engine systems for the Anoma Specification\" instead of \"On Engine   Systems For The Anoma Specification\".</li> </ul> </li> </ul> <ul> <li>Always add a front matter as described in Write using Markdown.</li> </ul> <ul> <li>The (Juvix) Markdown filenames should follow the convention as described in File naming conventions.</li> </ul>","tags":["tutorial","conventions"]},{"location":"tutorial/md/images.html","title":"Support for including images","text":"<p>Images should be stored in the <code>docs/images</code> folder. Use the File Naming Conventions also for naming images.</p> <p>Image handling in Markdown</p> <p>Use standard Markdown image syntax (<code>![Alt text](image.png)</code>) rather than HTML image tags. HTML image tags are not processed by MkDocs, are not validated, and may not work as expected. In particular, their <code>src</code> attribute is not processed by our image processing script.</p>","tags":["tutorial","conventions"]},{"location":"tutorial/md/images.html#syntax","title":"Syntax","text":"<p>To add an image, apply the following syntax:</p> <pre><code>![Alt Text](logo.svg){: width=\"200\"}\n</code></pre>","tags":["tutorial","conventions"]},{"location":"tutorial/md/images.html#displayed-image-example","title":"Displayed Image Example","text":"<p>The syntax above will render the image in your document like so:</p> <p></p> <p>Enhanced Image Display</p> <p>Use an HTML <code>&lt;figure&gt;</code> element with a <code>&lt;figcaption&gt;</code> for a refined presentation with captions. Markdown can also be used within the caption:</p> <pre><code>&lt;figure markdown=\"1\"&gt;\n\n  ![Alt Text](image-name.png)\n\n  &lt;figcaption markdown=\"span\"&gt;Image caption text can include *Markdown*!&lt;/figcaption&gt;\n&lt;/figure&gt;\n</code></pre>","tags":["tutorial","conventions"]},{"location":"tutorial/md/links.html","title":"Support for Wiki Links","text":"<p>Wiki links offer a simple method for citing and referencing other pages in the documentation without lengthy URLs. Wiki links are the preferred method for linking to other pages in the documentation, so please use them whenever possible.</p>","tags":["tutorial","conventions"]},{"location":"tutorial/md/links.html#basic-syntax","title":"Basic Syntax","text":"<p>The basic syntax for a wiki link is:</p> <pre><code>page\n</code></pre> <p>Where:</p> <ul> <li><code>page</code> is the title of the target page</li> </ul>","tags":["tutorial","conventions"]},{"location":"tutorial/md/links.html#full-syntax","title":"Full Syntax","text":"<p>The full syntax for a wiki link is: Wiki Link Syntax<pre><code>  Custom caption\n</code></pre></p> <p>When resolving a wiki link, the system follows these rules:</p>","tags":["tutorial","conventions"]},{"location":"tutorial/md/links.html#page-title","title":"Page Title","text":"<p>(Mandatory) The 'page' in a wiki link refers to the title specified in the <code>nav</code> attribute of the <code>mkdocs.yml</code> file. For example,</p> mkdocs.yml<pre><code>nav:\n  - Home: index.md\n  - MyRef X: reference.md\n</code></pre> <p>provides the following wiki link:</p> <pre><code>MyRef X\n</code></pre>","tags":["tutorial","conventions"]},{"location":"tutorial/md/links.html#path-hints","title":"Path Hints","text":"<p>(Optional) You can use path hints to specify the location of the file. The syntax is:</p> Path Hints<pre><code>page\n</code></pre> <p>Where:</p> <ul> <li><code>hintpath/to</code> is the path (or prefix) to the file</li> <li><code>page</code> is the title of the target page</li> </ul>","tags":["tutorial","conventions"]},{"location":"tutorial/md/links.html#anchors","title":"Anchors","text":"<p>(Optional) Use anchors to link to specific sections within a page. If the page does not have an anchor, the link would render as the caption provided, and you'll find a warning in the build process.</p> Anchors<pre><code>page\n</code></pre> <p>Where:</p> <ul> <li><code>page</code> is the title of the target page</li> <li><code>anchor</code> is a specific section within the page</li> </ul>","tags":["tutorial","conventions"]},{"location":"tutorial/md/links.html#custom-captions","title":"Custom captions","text":"<p>(Optional) Provide custom text to display for the link instead of the page title.</p> Custom Captions<pre><code>Custom caption\n</code></pre> <p>Where:</p> <ul> <li><code>page</code> is the title of the target page</li> <li><code>anchor</code> is a specific section within the page</li> </ul> <p>Captions can include icons, for example:</p> MarkdownPreview <pre><code>[:material-link: this is a caption with an icon](https://specs.anoma.net/pr-347/index.html)\n</code></pre> <p> this is a caption with an icon</p>","tags":["tutorial","conventions"]},{"location":"tutorial/md/snippets.html","title":"Include code snippets","text":"","tags":["tutorial","conventions"]},{"location":"tutorial/md/snippets.html#code-snippets","title":"Code Snippets","text":"<p>Include excerpts from other files using the Snippet extension detailed here: PyMdown Extensions - Snippets.</p>","tags":["tutorial","conventions"]},{"location":"tutorial/md/snippets.html#excerpt-wrapping-syntax","title":"Excerpt Wrapping Syntax","text":"<p>Enclose the excerpt with the following tags:</p> <pre><code>&lt;!-- Start snippet --&gt;\n;--8&lt;-- [start:TAG]\n...\n;--8&lt;-- [end:TAG]\n&lt;!-- End snippet --&gt;\n</code></pre>","tags":["tutorial","conventions"]},{"location":"tutorial/md/snippets.html#snippet-inclusion-syntax","title":"Snippet Inclusion Syntax","text":"<p>To incorporate the excerpt elsewhere, specify its path and tag:</p> <pre><code>;--8&lt;-- \"path/to/file.ext:TAG\"\n</code></pre> <p>Following these practices ensures consistency, navigability, and professionalism in the Anoma documentation.</p>","tags":["tutorial","conventions"]},{"location":"tutorial/md/todos.html","title":"Add pending tasks with Todos admonition","text":"","tags":["tutorial","conventions"]},{"location":"tutorial/md/todos.html#todos","title":"Todos","text":"<p>Incorporate todos with the following syntax:</p> <pre><code>!!! todo\n\n    Content of the todo\n</code></pre> <p>The above renders as:</p> <p>Todo</p> <p>Content of the todo</p> <p>Info</p> <p>Be aware that todos are automatically removed from the online version. If you want to keep them, set <code>todos: True</code> in the front matter.</p>","tags":["tutorial","conventions"]}]}